(function (root) {
  var exports = undefined,
    module = undefined,
    require = undefined;
  var define = undefined;
  var self = root,
    window = root,
    global = root,
    globalThis = root;
  (function () {
    (function () {
      function r(e, n, t) {
        function o(i, f) {
          if (!n[i]) {
            if (!e[i]) {
              var c = "function" == typeof require && require;
              if (!f && c) return c(i, !0);
              if (u) return u(i, !0);
              var a = new Error("Cannot find module '" + i + "'");
              throw a.code = "MODULE_NOT_FOUND", a;
            }
            var p = n[i] = {
              exports: {}
            };
            e[i][0].call(p.exports, function (r) {
              var n = e[i][1][r];
              return o(n || r);
            }, p, p.exports, r, e, n, t);
          }
          return n[i].exports;
        }
        for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
        return o;
      }
      return r;
    })()({
      1: [function (require, module, exports) {
        'use strict';

        exports.byteLength = byteLength;
        exports.toByteArray = toByteArray;
        exports.fromByteArray = fromByteArray;
        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i];
          revLookup[code.charCodeAt(i)] = i;
        }

        // Support decoding URL-safe base64 strings, as Node.js does.
        // See: https://en.wikipedia.org/wiki/Base64#URL_applications
        revLookup['-'.charCodeAt(0)] = 62;
        revLookup['_'.charCodeAt(0)] = 63;
        function getLens(b64) {
          var len = b64.length;
          if (len % 4 > 0) {
            throw new Error('Invalid string. Length must be a multiple of 4');
          }

          // Trim off extra bytes after placeholder bytes are found
          // See: https://github.com/beatgammit/base64-js/issues/42
          var validLen = b64.indexOf('=');
          if (validLen === -1) validLen = len;
          var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
          return [validLen, placeHoldersLen];
        }

        // base64 is 4/3 + up to two characters of the original data
        function byteLength(b64) {
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function _byteLength(b64, validLen, placeHoldersLen) {
          return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function toByteArray(b64) {
          var tmp;
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
          var curByte = 0;

          // if there are placeholders, only get up to the last complete 4 chars
          var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
          var i;
          for (i = 0; i < len; i += 4) {
            tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
            arr[curByte++] = tmp >> 16 & 0xFF;
            arr[curByte++] = tmp >> 8 & 0xFF;
            arr[curByte++] = tmp & 0xFF;
          }
          if (placeHoldersLen === 2) {
            tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
            arr[curByte++] = tmp & 0xFF;
          }
          if (placeHoldersLen === 1) {
            tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
            arr[curByte++] = tmp >> 8 & 0xFF;
            arr[curByte++] = tmp & 0xFF;
          }
          return arr;
        }
        function tripletToBase64(num) {
          return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
        }
        function encodeChunk(uint8, start, end) {
          var tmp;
          var output = [];
          for (var i = start; i < end; i += 3) {
            tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
            output.push(tripletToBase64(tmp));
          }
          return output.join('');
        }
        function fromByteArray(uint8) {
          var tmp;
          var len = uint8.length;
          var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
          var parts = [];
          var maxChunkLength = 16383; // must be multiple of 3

          // go through the array every three bytes, we'll deal with trailing stuff later
          for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
            parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
          }

          // pad the end with zeros, but make sure to not forget the extra bytes
          if (extraBytes === 1) {
            tmp = uint8[len - 1];
            parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
          } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + uint8[len - 1];
            parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
          }
          return parts.join('');
        }
      }, {}],
      2: [function (require, module, exports) {
        (function (Buffer) {
          (function () {
            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <https://feross.org>
             * @license  MIT
             */
            /* eslint-disable no-proto */

            'use strict';

            var base64 = require('base64-js');
            var ieee754 = require('ieee754');
            exports.Buffer = Buffer;
            exports.SlowBuffer = SlowBuffer;
            exports.INSPECT_MAX_BYTES = 50;
            var K_MAX_LENGTH = 0x7fffffff;
            exports.kMaxLength = K_MAX_LENGTH;

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Print warning and recommend using `buffer` v4.x which has an Object
             *               implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * We report that the browser does not support typed arrays if the are not subclassable
             * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
             * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
             * for __proto__ and has a buggy typed array implementation.
             */
            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
              console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
            }
            function typedArraySupport() {
              // Can typed array instances can be augmented?
              try {
                var arr = new Uint8Array(1);
                arr.__proto__ = {
                  __proto__: Uint8Array.prototype,
                  foo: function () {
                    return 42;
                  }
                };
                return arr.foo() === 42;
              } catch (e) {
                return false;
              }
            }
            Object.defineProperty(Buffer.prototype, 'parent', {
              enumerable: true,
              get: function () {
                if (!Buffer.isBuffer(this)) return undefined;
                return this.buffer;
              }
            });
            Object.defineProperty(Buffer.prototype, 'offset', {
              enumerable: true,
              get: function () {
                if (!Buffer.isBuffer(this)) return undefined;
                return this.byteOffset;
              }
            });
            function createBuffer(length) {
              if (length > K_MAX_LENGTH) {
                throw new RangeError('The value "' + length + '" is invalid for option "size"');
              }
              // Return an augmented `Uint8Array` instance
              var buf = new Uint8Array(length);
              buf.__proto__ = Buffer.prototype;
              return buf;
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer(arg, encodingOrOffset, length) {
              // Common case.
              if (typeof arg === 'number') {
                if (typeof encodingOrOffset === 'string') {
                  throw new TypeError('The "string" argument must be of type string. Received type number');
                }
                return allocUnsafe(arg);
              }
              return from(arg, encodingOrOffset, length);
            }

            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
              Object.defineProperty(Buffer, Symbol.species, {
                value: null,
                configurable: true,
                enumerable: false,
                writable: false
              });
            }
            Buffer.poolSize = 8192; // not used by this implementation

            function from(value, encodingOrOffset, length) {
              if (typeof value === 'string') {
                return fromString(value, encodingOrOffset);
              }
              if (ArrayBuffer.isView(value)) {
                return fromArrayLike(value);
              }
              if (value == null) {
                throw TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
              }
              if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                return fromArrayBuffer(value, encodingOrOffset, length);
              }
              if (typeof value === 'number') {
                throw new TypeError('The "value" argument must not be of type number. Received type number');
              }
              var valueOf = value.valueOf && value.valueOf();
              if (valueOf != null && valueOf !== value) {
                return Buffer.from(valueOf, encodingOrOffset, length);
              }
              var b = fromObject(value);
              if (b) return b;
              if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
                return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
              }
              throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
              return from(value, encodingOrOffset, length);
            };

            // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
            // https://github.com/feross/buffer/pull/148
            Buffer.prototype.__proto__ = Uint8Array.prototype;
            Buffer.__proto__ = Uint8Array;
            function assertSize(size) {
              if (typeof size !== 'number') {
                throw new TypeError('"size" argument must be of type number');
              } else if (size < 0) {
                throw new RangeError('The value "' + size + '" is invalid for option "size"');
              }
            }
            function alloc(size, fill, encoding) {
              assertSize(size);
              if (size <= 0) {
                return createBuffer(size);
              }
              if (fill !== undefined) {
                // Only pay attention to encoding if it's a string. This
                // prevents accidentally sending in a number that would
                // be interpretted as a start offset.
                return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
              }
              return createBuffer(size);
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
              return alloc(size, fill, encoding);
            };
            function allocUnsafe(size) {
              assertSize(size);
              return createBuffer(size < 0 ? 0 : checked(size) | 0);
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
              return allocUnsafe(size);
            };
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
              return allocUnsafe(size);
            };
            function fromString(string, encoding) {
              if (typeof encoding !== 'string' || encoding === '') {
                encoding = 'utf8';
              }
              if (!Buffer.isEncoding(encoding)) {
                throw new TypeError('Unknown encoding: ' + encoding);
              }
              var length = byteLength(string, encoding) | 0;
              var buf = createBuffer(length);
              var actual = buf.write(string, encoding);
              if (actual !== length) {
                // Writing a hex string, for example, that contains invalid characters will
                // cause everything after the first invalid character to be ignored. (e.g.
                // 'abxxcd' will be treated as 'ab')
                buf = buf.slice(0, actual);
              }
              return buf;
            }
            function fromArrayLike(array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              var buf = createBuffer(length);
              for (var i = 0; i < length; i += 1) {
                buf[i] = array[i] & 255;
              }
              return buf;
            }
            function fromArrayBuffer(array, byteOffset, length) {
              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('"offset" is outside of buffer bounds');
              }
              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('"length" is outside of buffer bounds');
              }
              var buf;
              if (byteOffset === undefined && length === undefined) {
                buf = new Uint8Array(array);
              } else if (length === undefined) {
                buf = new Uint8Array(array, byteOffset);
              } else {
                buf = new Uint8Array(array, byteOffset, length);
              }

              // Return an augmented `Uint8Array` instance
              buf.__proto__ = Buffer.prototype;
              return buf;
            }
            function fromObject(obj) {
              if (Buffer.isBuffer(obj)) {
                var len = checked(obj.length) | 0;
                var buf = createBuffer(len);
                if (buf.length === 0) {
                  return buf;
                }
                obj.copy(buf, 0, 0, len);
                return buf;
              }
              if (obj.length !== undefined) {
                if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                  return createBuffer(0);
                }
                return fromArrayLike(obj);
              }
              if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                return fromArrayLike(obj.data);
              }
            }
            function checked(length) {
              // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
              // length is NaN (which is otherwise coerced to zero.)
              if (length >= K_MAX_LENGTH) {
                throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
              }
              return length | 0;
            }
            function SlowBuffer(length) {
              if (+length != length) {
                // eslint-disable-line eqeqeq
                length = 0;
              }
              return Buffer.alloc(+length);
            }
            Buffer.isBuffer = function isBuffer(b) {
              return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
            };

            Buffer.compare = function compare(a, b) {
              if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
              if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
              if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
              }
              if (a === b) return 0;
              var x = a.length;
              var y = b.length;
              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }
              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };
            Buffer.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'latin1':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return true;
                default:
                  return false;
              }
            };
            Buffer.concat = function concat(list, length) {
              if (!Array.isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              }
              if (list.length === 0) {
                return Buffer.alloc(0);
              }
              var i;
              if (length === undefined) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }
              var buffer = Buffer.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (isInstance(buf, Uint8Array)) {
                  buf = Buffer.from(buf);
                }
                if (!Buffer.isBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }
                buf.copy(buffer, pos);
                pos += buf.length;
              }
              return buffer;
            };
            function byteLength(string, encoding) {
              if (Buffer.isBuffer(string)) {
                return string.length;
              }
              if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                return string.byteLength;
              }
              if (typeof string !== 'string') {
                throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
              }
              var len = string.length;
              var mustMatch = arguments.length > 2 && arguments[2] === true;
              if (!mustMatch && len === 0) return 0;

              // Use a for loop to avoid recursion
              var loweredCase = false;
              for (;;) {
                switch (encoding) {
                  case 'ascii':
                  case 'latin1':
                  case 'binary':
                    return len;
                  case 'utf8':
                  case 'utf-8':
                    return utf8ToBytes(string).length;
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return len * 2;
                  case 'hex':
                    return len >>> 1;
                  case 'base64':
                    return base64ToBytes(string).length;
                  default:
                    if (loweredCase) {
                      return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                    }

                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer.byteLength = byteLength;
            function slowToString(encoding, start, end) {
              var loweredCase = false;

              // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
              // property of a typed array.

              // This behaves neither like String nor Uint8Array in that we set start/end
              // to their upper/lower bounds if the value passed is out of range.
              // undefined is handled specially as per ECMA-262 6th Edition,
              // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
              if (start === undefined || start < 0) {
                start = 0;
              }
              // Return early if start > this.length. Done here to prevent potential uint32
              // coercion fail below.
              if (start > this.length) {
                return '';
              }
              if (end === undefined || end > this.length) {
                end = this.length;
              }
              if (end <= 0) {
                return '';
              }

              // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
              end >>>= 0;
              start >>>= 0;
              if (end <= start) {
                return '';
              }
              if (!encoding) encoding = 'utf8';
              while (true) {
                switch (encoding) {
                  case 'hex':
                    return hexSlice(this, start, end);
                  case 'utf8':
                  case 'utf-8':
                    return utf8Slice(this, start, end);
                  case 'ascii':
                    return asciiSlice(this, start, end);
                  case 'latin1':
                  case 'binary':
                    return latin1Slice(this, start, end);
                  case 'base64':
                    return base64Slice(this, start, end);
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return utf16leSlice(this, start, end);
                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                    encoding = (encoding + '').toLowerCase();
                    loweredCase = true;
                }
              }
            }

            // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
            // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
            // reliably in a browserify context because there could be multiple different
            // copies of the 'buffer' package in use. This method works even for Buffer
            // instances that were created from another copy of the `buffer` package.
            // See: https://github.com/feross/buffer/issues/154
            Buffer.prototype._isBuffer = true;
            function swap(b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }
            Buffer.prototype.swap16 = function swap16() {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 16-bits');
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this;
            };
            Buffer.prototype.swap32 = function swap32() {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 32-bits');
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this;
            };
            Buffer.prototype.swap64 = function swap64() {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 64-bits');
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this;
            };
            Buffer.prototype.toString = function toString() {
              var length = this.length;
              if (length === 0) return '';
              if (arguments.length === 0) return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };
            Buffer.prototype.toLocaleString = Buffer.prototype.toString;
            Buffer.prototype.equals = function equals(b) {
              if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
              if (this === b) return true;
              return Buffer.compare(this, b) === 0;
            };
            Buffer.prototype.inspect = function inspect() {
              var str = '';
              var max = exports.INSPECT_MAX_BYTES;
              str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
              if (this.length > max) str += ' ... ';
              return '<Buffer ' + str + '>';
            };
            Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
              if (isInstance(target, Uint8Array)) {
                target = Buffer.from(target, target.offset, target.byteLength);
              }
              if (!Buffer.isBuffer(target)) {
                throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
              }
              if (start === undefined) {
                start = 0;
              }
              if (end === undefined) {
                end = target ? target.length : 0;
              }
              if (thisStart === undefined) {
                thisStart = 0;
              }
              if (thisEnd === undefined) {
                thisEnd = this.length;
              }
              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError('out of range index');
              }
              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }
              if (thisStart >= thisEnd) {
                return -1;
              }
              if (start >= end) {
                return 1;
              }
              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;
              if (this === target) return 0;
              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);
              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);
              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }
              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };

            // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
            //
            // Arguments:
            // - buffer - a Buffer to search
            // - val - a string, Buffer, or number
            // - byteOffset - an index into `buffer`; will be clamped to an int32
            // - encoding - an optional encoding, relevant is val is a string
            // - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
              // Empty buffer means no match
              if (buffer.length === 0) return -1;

              // Normalize byteOffset
              if (typeof byteOffset === 'string') {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff;
              } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000;
              }
              byteOffset = +byteOffset; // Coerce to Number.
              if (numberIsNaN(byteOffset)) {
                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                byteOffset = dir ? 0 : buffer.length - 1;
              }

              // Normalize byteOffset: negative offsets start from the end of the buffer
              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
              if (byteOffset >= buffer.length) {
                if (dir) return -1;else byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir) byteOffset = 0;else return -1;
              }

              // Normalize val
              if (typeof val === 'string') {
                val = Buffer.from(val, encoding);
              }

              // Finally, search either indexOf (if dir is true) or lastIndexOf
              if (Buffer.isBuffer(val)) {
                // Special case: looking for empty string/buffer always fails
                if (val.length === 0) {
                  return -1;
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
              } else if (typeof val === 'number') {
                val = val & 0xFF; // Search for a byte value [0-255]
                if (typeof Uint8Array.prototype.indexOf === 'function') {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                  }
                }
                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
              }
              throw new TypeError('val must be string, number or Buffer');
            }
            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;
              if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase();
                if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }
              function read(buf, i) {
                if (indexSize === 1) {
                  return buf[i];
                } else {
                  return buf.readUInt16BE(i * indexSize);
                }
              }
              var i;
              if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1) foundIndex = i;
                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1) i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break;
                    }
                  }
                  if (found) return i;
                }
              }
              return -1;
            }
            Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };
            Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };
            Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };
            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }
              var strLen = string.length;
              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (numberIsNaN(parsed)) return i;
                buf[offset + i] = parsed;
              }
              return i;
            }
            function utf8Write(buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }
            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }
            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }
            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }
            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }
            Buffer.prototype.write = function write(string, offset, length, encoding) {
              // Buffer#write(string)
              if (offset === undefined) {
                encoding = 'utf8';
                length = this.length;
                offset = 0;
                // Buffer#write(string, encoding)
              } else if (length === undefined && typeof offset === 'string') {
                encoding = offset;
                length = this.length;
                offset = 0;
                // Buffer#write(string, offset[, length][, encoding])
              } else if (isFinite(offset)) {
                offset = offset >>> 0;
                if (isFinite(length)) {
                  length = length >>> 0;
                  if (encoding === undefined) encoding = 'utf8';
                } else {
                  encoding = length;
                  length = undefined;
                }
              } else {
                throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
              }
              var remaining = this.length - offset;
              if (length === undefined || length > remaining) length = remaining;
              if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                throw new RangeError('Attempt to write outside buffer bounds');
              }
              if (!encoding) encoding = 'utf8';
              var loweredCase = false;
              for (;;) {
                switch (encoding) {
                  case 'hex':
                    return hexWrite(this, string, offset, length);
                  case 'utf8':
                  case 'utf-8':
                    return utf8Write(this, string, offset, length);
                  case 'ascii':
                    return asciiWrite(this, string, offset, length);
                  case 'latin1':
                  case 'binary':
                    return latin1Write(this, string, offset, length);
                  case 'base64':
                    // Warning: maxLength not taken into account in base64Write
                    return base64Write(this, string, offset, length);
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return ucs2Write(this, string, offset, length);
                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };
            Buffer.prototype.toJSON = function toJSON() {
              return {
                type: 'Buffer',
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };
            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
              } else {
                return base64.fromByteArray(buf.slice(start, end));
              }
            }
            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];
              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;
                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 0x80) {
                        codePoint = firstByte;
                      }
                      break;
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }
                if (codePoint === null) {
                  // we did not generate a valid codePoint so insert a
                  // replacement char (U+FFFD) and advance only 1 byte
                  codePoint = 0xFFFD;
                  bytesPerSequence = 1;
                } else if (codePoint > 0xFFFF) {
                  // encode to utf16 (surrogate pair dance)
                  codePoint -= 0x10000;
                  res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                  codePoint = 0xDC00 | codePoint & 0x3FF;
                }
                res.push(codePoint);
                i += bytesPerSequence;
              }
              return decodeCodePointsArray(res);
            }

            // Based on http://stackoverflow.com/a/22747272/680742, the browser with
            // the lowest limit is Chrome, with 0x10000 args.
            // We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000;
            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
              }

              // Decode in chunks to avoid "call stack size exceeded".
              var res = '';
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
              }
              return res;
            }
            function asciiSlice(buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 0x7F);
              }
              return ret;
            }
            function latin1Slice(buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret;
            }
            function hexSlice(buf, start, end) {
              var len = buf.length;
              if (!start || start < 0) start = 0;
              if (!end || end < 0 || end > len) end = len;
              var out = '';
              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }
              return out;
            }
            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = '';
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res;
            }
            Buffer.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === undefined ? len : ~~end;
              if (start < 0) {
                start += len;
                if (start < 0) start = 0;
              } else if (start > len) {
                start = len;
              }
              if (end < 0) {
                end += len;
                if (end < 0) end = 0;
              } else if (end > len) {
                end = len;
              }
              if (end < start) end = start;
              var newBuf = this.subarray(start, end);
              // Return an augmented `Uint8Array` instance
              newBuf.__proto__ = Buffer.prototype;
              return newBuf;
            };

            /*
             * Need to make sure that buffer isn't trying to write out of bounds.
             */
            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
              if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
            }
            Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }
              return val;
            };
            Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
              }
              var val = this[offset + --byteLength];
              var mul = 1;
              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul;
              }
              return val;
            };
            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 1, this.length);
              return this[offset];
            };
            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] | this[offset + 1] << 8;
            };
            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] << 8 | this[offset + 1];
            };
            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
            };
            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            };
            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }
              mul *= 0x80;
              if (val >= mul) val -= Math.pow(2, 8 * byteLength);
              return val;
            };
            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var i = byteLength;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul;
              }
              mul *= 0x80;
              if (val >= mul) val -= Math.pow(2, 8 * byteLength);
              return val;
            };
            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 1, this.length);
              if (!(this[offset] & 0x80)) return this[offset];
              return (0xff - this[offset] + 1) * -1;
            };
            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset] | this[offset + 1] << 8;
              return val & 0x8000 ? val | 0xFFFF0000 : val;
            };
            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | this[offset] << 8;
              return val & 0x8000 ? val | 0xFFFF0000 : val;
            };
            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            };
            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            };
            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4);
            };
            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4);
            };
            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8);
            };
            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8);
            };
            function checkInt(buf, value, offset, ext, max, min) {
              if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
              if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length) throw new RangeError('Index out of range');
            }
            Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }
              var mul = 1;
              var i = 0;
              this[offset] = value & 0xFF;
              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = value / mul & 0xFF;
              }
              return offset + byteLength;
            };
            Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }
              var i = byteLength - 1;
              var mul = 1;
              this[offset + i] = value & 0xFF;
              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = value / mul & 0xFF;
              }
              return offset + byteLength;
            };
            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
              this[offset] = value & 0xff;
              return offset + 1;
            };
            Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };
            Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
              return offset + 2;
            };
            Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 0xff;
              return offset + 4;
            };
            Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
              return offset + 4;
            };
            Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }
              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 0xFF;
              while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 0xFF;
              }
              return offset + byteLength;
            };
            Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }
              var i = byteLength - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 0xFF;
              while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 0xFF;
              }
              return offset + byteLength;
            };
            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
              if (value < 0) value = 0xff + value + 1;
              this[offset] = value & 0xff;
              return offset + 1;
            };
            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };
            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
              return offset + 2;
            };
            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
              return offset + 4;
            };
            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (value < 0) value = 0xffffffff + value + 1;
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
              return offset + 4;
            };
            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length) throw new RangeError('Index out of range');
              if (offset < 0) throw new RangeError('Index out of range');
            }
            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
              }
              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }
            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert);
            };
            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert);
            };
            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
              }
              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }
            Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert);
            };
            Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert);
            };

            // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy(target, targetStart, start, end) {
              if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
              if (!start) start = 0;
              if (!end && end !== 0) end = this.length;
              if (targetStart >= target.length) targetStart = target.length;
              if (!targetStart) targetStart = 0;
              if (end > 0 && end < start) end = start;

              // Copy 0 bytes; we're done
              if (end === start) return 0;
              if (target.length === 0 || this.length === 0) return 0;

              // Fatal error conditions
              if (targetStart < 0) {
                throw new RangeError('targetStart out of bounds');
              }
              if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
              if (end < 0) throw new RangeError('sourceEnd out of bounds');

              // Are we oob?
              if (end > this.length) end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }
              var len = end - start;
              if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
                // Use built-in when available, missing from IE11
                this.copyWithin(targetStart, start, end);
              } else if (this === target && start < targetStart && targetStart < end) {
                // descending copy from end
                for (var i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
              }
              return len;
            };

            // Usage:
            //    buffer.fill(number[, offset[, end]])
            //    buffer.fill(buffer[, offset[, end]])
            //    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill(val, start, end, encoding) {
              // Handle string cases:
              if (typeof val === 'string') {
                if (typeof start === 'string') {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === 'string') {
                  encoding = end;
                  end = this.length;
                }
                if (encoding !== undefined && typeof encoding !== 'string') {
                  throw new TypeError('encoding must be a string');
                }
                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                  throw new TypeError('Unknown encoding: ' + encoding);
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
                    // Fast path: If `val` fits into a single byte, use that numeric value.
                    val = code;
                  }
                }
              } else if (typeof val === 'number') {
                val = val & 255;
              }

              // Invalid ranges are not set to a default, so can range check early.
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError('Out of range index');
              }
              if (end <= start) {
                return this;
              }
              start = start >>> 0;
              end = end === undefined ? this.length : end >>> 0;
              if (!val) val = 0;
              var i;
              if (typeof val === 'number') {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
                var len = bytes.length;
                if (len === 0) {
                  throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                }
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }
              return this;
            };

            // HELPER FUNCTIONS
            // ================

            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
            function base64clean(str) {
              // Node takes equal signs as end of the Base64 encoding
              str = str.split('=')[0];
              // Node strips out invalid characters like \n and \t from the string, base64-js does not
              str = str.trim().replace(INVALID_BASE64_RE, '');
              // Node converts strings with length < 2 to ''
              if (str.length < 2) return '';
              // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
              while (str.length % 4 !== 0) {
                str = str + '=';
              }
              return str;
            }
            function toHex(n) {
              if (n < 16) return '0' + n.toString(16);
              return n.toString(16);
            }
            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];
              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);

                // is surrogate component
                if (codePoint > 0xD7FF && codePoint < 0xE000) {
                  // last char was a lead
                  if (!leadSurrogate) {
                    // no lead yet
                    if (codePoint > 0xDBFF) {
                      // unexpected trail
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue;
                    } else if (i + 1 === length) {
                      // unpaired lead
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue;
                    }

                    // valid lead
                    leadSurrogate = codePoint;
                    continue;
                  }

                  // 2 leads in a row
                  if (codePoint < 0xDC00) {
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    leadSurrogate = codePoint;
                    continue;
                  }

                  // valid surrogate pair
                  codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                } else if (leadSurrogate) {
                  // valid bmp char, but last char was a lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                }
                leadSurrogate = null;

                // encode utf8
                if (codePoint < 0x80) {
                  if ((units -= 1) < 0) break;
                  bytes.push(codePoint);
                } else if (codePoint < 0x800) {
                  if ((units -= 2) < 0) break;
                  bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
                } else if (codePoint < 0x10000) {
                  if ((units -= 3) < 0) break;
                  bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                } else if (codePoint < 0x110000) {
                  if ((units -= 4) < 0) break;
                  bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                } else {
                  throw new Error('Invalid code point');
                }
              }
              return bytes;
            }
            function asciiToBytes(str) {
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                // Node's code seems to be doing this and not & 0x7F..
                byteArray.push(str.charCodeAt(i) & 0xFF);
              }
              return byteArray;
            }
            function utf16leToBytes(str, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }
              return byteArray;
            }
            function base64ToBytes(str) {
              return base64.toByteArray(base64clean(str));
            }
            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length) break;
                dst[i + offset] = src[i];
              }
              return i;
            }

            // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
            // the `instanceof` check but they should be treated as of that type.
            // See: https://github.com/feross/buffer/issues/166
            function isInstance(obj, type) {
              return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
            }
            function numberIsNaN(obj) {
              // For IE11 support
              return obj !== obj; // eslint-disable-line no-self-compare
            }
          }).call(this);
        }).call(this, require("buffer").Buffer);
      }, {
        "base64-js": 1,
        "buffer": 2,
        "ieee754": 4
      }],
      3: [function (require, module, exports) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        var R = typeof Reflect === 'object' ? Reflect : null;
        var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
          return Function.prototype.apply.call(target, receiver, args);
        };
        var ReflectOwnKeys;
        if (R && typeof R.ownKeys === 'function') {
          ReflectOwnKeys = R.ownKeys;
        } else if (Object.getOwnPropertySymbols) {
          ReflectOwnKeys = function ReflectOwnKeys(target) {
            return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
          };
        } else {
          ReflectOwnKeys = function ReflectOwnKeys(target) {
            return Object.getOwnPropertyNames(target);
          };
        }
        function ProcessEmitWarning(warning) {
          if (console && console.warn) console.warn(warning);
        }
        var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
          return value !== value;
        };
        function EventEmitter() {
          EventEmitter.init.call(this);
        }
        module.exports = EventEmitter;
        module.exports.once = once;

        // Backwards-compat with node 0.10.x
        EventEmitter.EventEmitter = EventEmitter;
        EventEmitter.prototype._events = undefined;
        EventEmitter.prototype._eventsCount = 0;
        EventEmitter.prototype._maxListeners = undefined;

        // By default EventEmitters will print a warning if more than 10 listeners are
        // added to it. This is a useful default which helps finding memory leaks.
        var defaultMaxListeners = 10;
        function checkListener(listener) {
          if (typeof listener !== 'function') {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
          }
        }
        Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
          enumerable: true,
          get: function () {
            return defaultMaxListeners;
          },
          set: function (arg) {
            if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
              throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
            }
            defaultMaxListeners = arg;
          }
        });
        EventEmitter.init = function () {
          if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
            this._events = Object.create(null);
            this._eventsCount = 0;
          }
          this._maxListeners = this._maxListeners || undefined;
        };

        // Obviously not all Emitters should be limited to 10. This function allows
        // that to be increased. Set to zero for unlimited.
        EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
          if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
          }
          this._maxListeners = n;
          return this;
        };
        function _getMaxListeners(that) {
          if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
          return that._maxListeners;
        }
        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
          return _getMaxListeners(this);
        };
        EventEmitter.prototype.emit = function emit(type) {
          var args = [];
          for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
          var doError = type === 'error';
          var events = this._events;
          if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

          // If there is no 'error' event listener then throw.
          if (doError) {
            var er;
            if (args.length > 0) er = args[0];
            if (er instanceof Error) {
              // Note: The comments on the `throw` lines are intentional, they show
              // up in Node's output if this results in an unhandled exception.
              throw er; // Unhandled 'error' event
            }
            // At least give some kind of context to the user
            var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
            err.context = er;
            throw err; // Unhandled 'error' event
          }

          var handler = events[type];
          if (handler === undefined) return false;
          if (typeof handler === 'function') {
            ReflectApply(handler, this, args);
          } else {
            var len = handler.length;
            var listeners = arrayClone(handler, len);
            for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
          }
          return true;
        };
        function _addListener(target, type, listener, prepend) {
          var m;
          var events;
          var existing;
          checkListener(listener);
          events = target._events;
          if (events === undefined) {
            events = target._events = Object.create(null);
            target._eventsCount = 0;
          } else {
            // To avoid recursion in the case that type === "newListener"! Before
            // adding it to the listeners, first emit "newListener".
            if (events.newListener !== undefined) {
              target.emit('newListener', type, listener.listener ? listener.listener : listener);

              // Re-assign `events` because a newListener handler could have caused the
              // this._events to be assigned to a new object
              events = target._events;
            }
            existing = events[type];
          }
          if (existing === undefined) {
            // Optimize the case of one listener. Don't need the extra array object.
            existing = events[type] = listener;
            ++target._eventsCount;
          } else {
            if (typeof existing === 'function') {
              // Adding the second element, need to change to array.
              existing = events[type] = prepend ? [listener, existing] : [existing, listener];
              // If we've already got an array, just append.
            } else if (prepend) {
              existing.unshift(listener);
            } else {
              existing.push(listener);
            }

            // Check for listener leak
            m = _getMaxListeners(target);
            if (m > 0 && existing.length > m && !existing.warned) {
              existing.warned = true;
              // No error code for this since it is a Warning
              // eslint-disable-next-line no-restricted-syntax
              var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
              w.name = 'MaxListenersExceededWarning';
              w.emitter = target;
              w.type = type;
              w.count = existing.length;
              ProcessEmitWarning(w);
            }
          }
          return target;
        }
        EventEmitter.prototype.addListener = function addListener(type, listener) {
          return _addListener(this, type, listener, false);
        };
        EventEmitter.prototype.on = EventEmitter.prototype.addListener;
        EventEmitter.prototype.prependListener = function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };
        function onceWrapper() {
          if (!this.fired) {
            this.target.removeListener(this.type, this.wrapFn);
            this.fired = true;
            if (arguments.length === 0) return this.listener.call(this.target);
            return this.listener.apply(this.target, arguments);
          }
        }
        function _onceWrap(target, type, listener) {
          var state = {
            fired: false,
            wrapFn: undefined,
            target: target,
            type: type,
            listener: listener
          };
          var wrapped = onceWrapper.bind(state);
          wrapped.listener = listener;
          state.wrapFn = wrapped;
          return wrapped;
        }
        EventEmitter.prototype.once = function once(type, listener) {
          checkListener(listener);
          this.on(type, _onceWrap(this, type, listener));
          return this;
        };
        EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
          checkListener(listener);
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

        // Emits a 'removeListener' event if and only if the listener was removed.
        EventEmitter.prototype.removeListener = function removeListener(type, listener) {
          var list, events, position, i, originalListener;
          checkListener(listener);
          events = this._events;
          if (events === undefined) return this;
          list = events[type];
          if (list === undefined) return this;
          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0) this._events = Object.create(null);else {
              delete events[type];
              if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;
            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }
            if (position < 0) return this;
            if (position === 0) list.shift();else {
              spliceOne(list, position);
            }
            if (list.length === 1) events[type] = list[0];
            if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
          }
          return this;
        };
        EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
        EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
          var listeners, events, i;
          events = this._events;
          if (events === undefined) return this;

          // not listening for removeListener, no need to emit
          if (events.removeListener === undefined) {
            if (arguments.length === 0) {
              this._events = Object.create(null);
              this._eventsCount = 0;
            } else if (events[type] !== undefined) {
              if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = Object.create(null);
            this._eventsCount = 0;
            return this;
          }
          listeners = events[type];
          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners !== undefined) {
            // LIFO order
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }
          return this;
        };
        function _listeners(target, type, unwrap) {
          var events = target._events;
          if (events === undefined) return [];
          var evlistener = events[type];
          if (evlistener === undefined) return [];
          if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
          return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
        }
        EventEmitter.prototype.listeners = function listeners(type) {
          return _listeners(this, type, true);
        };
        EventEmitter.prototype.rawListeners = function rawListeners(type) {
          return _listeners(this, type, false);
        };
        EventEmitter.listenerCount = function (emitter, type) {
          if (typeof emitter.listenerCount === 'function') {
            return emitter.listenerCount(type);
          } else {
            return listenerCount.call(emitter, type);
          }
        };
        EventEmitter.prototype.listenerCount = listenerCount;
        function listenerCount(type) {
          var events = this._events;
          if (events !== undefined) {
            var evlistener = events[type];
            if (typeof evlistener === 'function') {
              return 1;
            } else if (evlistener !== undefined) {
              return evlistener.length;
            }
          }
          return 0;
        }
        EventEmitter.prototype.eventNames = function eventNames() {
          return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
        };
        function arrayClone(arr, n) {
          var copy = new Array(n);
          for (var i = 0; i < n; ++i) copy[i] = arr[i];
          return copy;
        }
        function spliceOne(list, index) {
          for (; index + 1 < list.length; index++) list[index] = list[index + 1];
          list.pop();
        }
        function unwrapListeners(arr) {
          var ret = new Array(arr.length);
          for (var i = 0; i < ret.length; ++i) {
            ret[i] = arr[i].listener || arr[i];
          }
          return ret;
        }
        function once(emitter, name) {
          return new Promise(function (resolve, reject) {
            function errorListener(err) {
              emitter.removeListener(name, resolver);
              reject(err);
            }
            function resolver() {
              if (typeof emitter.removeListener === 'function') {
                emitter.removeListener('error', errorListener);
              }
              resolve([].slice.call(arguments));
            }
            ;
            eventTargetAgnosticAddListener(emitter, name, resolver, {
              once: true
            });
            if (name !== 'error') {
              addErrorHandlerIfEventEmitter(emitter, errorListener, {
                once: true
              });
            }
          });
        }
        function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
          if (typeof emitter.on === 'function') {
            eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
          }
        }
        function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
          if (typeof emitter.on === 'function') {
            if (flags.once) {
              emitter.once(name, listener);
            } else {
              emitter.on(name, listener);
            }
          } else if (typeof emitter.addEventListener === 'function') {
            // EventTarget does not have `error` event semantics like Node
            // EventEmitters, we do not listen for `error` events here.
            emitter.addEventListener(name, function wrapListener(arg) {
              // IE does not have builtin `{ once: true }` support so we
              // have to do it manually.
              if (flags.once) {
                emitter.removeEventListener(name, wrapListener);
              }
              listener(arg);
            });
          } else {
            throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
          }
        }
      }, {}],
      4: [function (require, module, exports) {
        /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
          var e, m;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var nBits = -7;
          var i = isLE ? nBytes - 1 : 0;
          var d = isLE ? -1 : 1;
          var s = buffer[offset + i];
          i += d;
          e = s & (1 << -nBits) - 1;
          s >>= -nBits;
          nBits += eLen;
          for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
          m = e & (1 << -nBits) - 1;
          e >>= -nBits;
          nBits += mLen;
          for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
          if (e === 0) {
            e = 1 - eBias;
          } else if (e === eMax) {
            return m ? NaN : (s ? -1 : 1) * Infinity;
          } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };
        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var i = isLE ? 0 : nBytes - 1;
          var d = isLE ? 1 : -1;
          var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
          value = Math.abs(value);
          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
          } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
            }
            if (e + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
              e++;
              c /= 2;
            }
            if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
            }
          }
          for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
          e = e << mLen | m;
          eLen += mLen;
          for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
          buffer[offset + i - d] |= s * 128;
        };
      }, {}],
      5: [function (require, module, exports) {
        // shim for using process in browser
        var process = module.exports = {};

        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
          throw new Error('setTimeout has not been defined');
        }
        function defaultClearTimeout() {
          throw new Error('clearTimeout has not been defined');
        }
        (function () {
          try {
            if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          }
          // if setTimeout wasn't available but was latter defined
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
          }
          // if clearTimeout wasn't available but was latter defined
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }
        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }
        process.nextTick = function (fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };

        // v8 likes predictible objects
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function () {
          this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};
        function noop() {}
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function (name) {
          return [];
        };
        process.binding = function (name) {
          throw new Error('process.binding is not supported');
        };
        process.cwd = function () {
          return '/';
        };
        process.chdir = function (dir) {
          throw new Error('process.chdir is not supported');
        };
        process.umask = function () {
          return 0;
        };
      }, {}],
      6: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.OperationTypeNode = exports.Kind = exports.GraphQLError = exports.BREAK = void 0;
        exports.parse = parse;
        exports.parseType = parseType;
        exports.parseValue = parseValue;
        exports.print = print;
        exports.printBlockString = printBlockString;
        exports.printString = printString;
        exports.valueFromASTUntyped = valueFromASTUntyped;
        exports.valueFromTypeNode = valueFromTypeNode;
        exports.visit = visit;
        var e = exports.Kind = {
          NAME: "Name",
          DOCUMENT: "Document",
          OPERATION_DEFINITION: "OperationDefinition",
          VARIABLE_DEFINITION: "VariableDefinition",
          SELECTION_SET: "SelectionSet",
          FIELD: "Field",
          ARGUMENT: "Argument",
          FRAGMENT_SPREAD: "FragmentSpread",
          INLINE_FRAGMENT: "InlineFragment",
          FRAGMENT_DEFINITION: "FragmentDefinition",
          VARIABLE: "Variable",
          INT: "IntValue",
          FLOAT: "FloatValue",
          STRING: "StringValue",
          BOOLEAN: "BooleanValue",
          NULL: "NullValue",
          ENUM: "EnumValue",
          LIST: "ListValue",
          OBJECT: "ObjectValue",
          OBJECT_FIELD: "ObjectField",
          DIRECTIVE: "Directive",
          NAMED_TYPE: "NamedType",
          LIST_TYPE: "ListType",
          NON_NULL_TYPE: "NonNullType"
        };
        var r = exports.OperationTypeNode = {
          QUERY: "query",
          MUTATION: "mutation",
          SUBSCRIPTION: "subscription"
        };
        class GraphQLError extends Error {
          constructor(e, r, i, n, a, t, l) {
            super(e);
            this.name = "GraphQLError";
            this.message = e;
            if (a) {
              this.path = a;
            }
            if (r) {
              this.nodes = Array.isArray(r) ? r : [r];
            }
            if (i) {
              this.source = i;
            }
            if (n) {
              this.positions = n;
            }
            if (t) {
              this.originalError = t;
            }
            var o = l;
            if (!o && t) {
              var u = t.extensions;
              if (u && "object" == typeof u) {
                o = u;
              }
            }
            this.extensions = o || {};
          }
          toJSON() {
            return {
              ...this,
              message: this.message
            };
          }
          toString() {
            return this.message;
          }
          get [Symbol.toStringTag]() {
            return "GraphQLError";
          }
        }
        exports.GraphQLError = GraphQLError;
        var i;
        var n;
        function error(e) {
          return new GraphQLError(`Syntax Error: Unexpected token at ${n} in ${e}`);
        }
        function advance(e) {
          e.lastIndex = n;
          if (e.test(i)) {
            return i.slice(n, n = e.lastIndex);
          }
        }
        var a = / +(?=[^\s])/y;
        function blockString(e) {
          var r = e.split("\n");
          var i = "";
          var n = 0;
          var t = 0;
          var l = r.length - 1;
          for (var o = 0; o < r.length; o++) {
            a.lastIndex = 0;
            if (a.test(r[o])) {
              if (o && (!n || a.lastIndex < n)) {
                n = a.lastIndex;
              }
              t = t || o;
              l = o;
            }
          }
          for (var u = t; u <= l; u++) {
            if (u !== t) {
              i += "\n";
            }
            i += r[u].slice(n).replace(/\\"""/g, '"""');
          }
          return i;
        }
        function ignored() {
          for (var e = 0 | i.charCodeAt(n++); 9 === e || 10 === e || 13 === e || 32 === e || 35 === e || 44 === e || 65279 === e; e = 0 | i.charCodeAt(n++)) {
            if (35 === e) {
              while (10 !== (e = i.charCodeAt(n++)) && 13 !== e) {}
            }
          }
          n--;
        }
        var t = /[_A-Za-z]\w*/y;
        var l = new RegExp("(?:(null|true|false)|\\$(" + t.source + ')|(-?\\d+)((?:\\.\\d+)?[eE][+-]?\\d+|\\.\\d+)?|("""(?:"""|(?:[\\s\\S]*?[^\\\\])"""))|("(?:"|[^\\r\\n]*?[^\\\\]"))|(' + t.source + "))", "y");
        var o = function (e) {
          e[e.Const = 1] = "Const";
          e[e.Var = 2] = "Var";
          e[e.Int = 3] = "Int";
          e[e.Float = 4] = "Float";
          e[e.BlockString = 5] = "BlockString";
          e[e.String = 6] = "String";
          e[e.Enum = 7] = "Enum";
          return e;
        }(o || {});
        var u = /\\/g;
        function value(e) {
          var r;
          var a;
          l.lastIndex = n;
          if (91 === i.charCodeAt(n)) {
            n++;
            ignored();
            var d = [];
            while (93 !== i.charCodeAt(n)) {
              d.push(value(e));
            }
            n++;
            ignored();
            return {
              kind: "ListValue",
              values: d
            };
          } else if (123 === i.charCodeAt(n)) {
            n++;
            ignored();
            var v = [];
            while (125 !== i.charCodeAt(n)) {
              if (null == (r = advance(t))) {
                throw error("ObjectField");
              }
              ignored();
              if (58 !== i.charCodeAt(n++)) {
                throw error("ObjectField");
              }
              ignored();
              v.push({
                kind: "ObjectField",
                name: {
                  kind: "Name",
                  value: r
                },
                value: value(e)
              });
            }
            n++;
            ignored();
            return {
              kind: "ObjectValue",
              fields: v
            };
          } else if (null != (a = l.exec(i))) {
            n = l.lastIndex;
            ignored();
            if (null != (r = a[o.Const])) {
              return "null" === r ? {
                kind: "NullValue"
              } : {
                kind: "BooleanValue",
                value: "true" === r
              };
            } else if (null != (r = a[o.Var])) {
              if (e) {
                throw error("Variable");
              } else {
                return {
                  kind: "Variable",
                  name: {
                    kind: "Name",
                    value: r
                  }
                };
              }
            } else if (null != (r = a[o.Int])) {
              var s;
              if (null != (s = a[o.Float])) {
                return {
                  kind: "FloatValue",
                  value: r + s
                };
              } else {
                return {
                  kind: "IntValue",
                  value: r
                };
              }
            } else if (null != (r = a[o.BlockString])) {
              return {
                kind: "StringValue",
                value: blockString(r.slice(3, -3)),
                block: !0
              };
            } else if (null != (r = a[o.String])) {
              return {
                kind: "StringValue",
                value: u.test(r) ? JSON.parse(r) : r.slice(1, -1),
                block: !1
              };
            } else if (null != (r = a[o.Enum])) {
              return {
                kind: "EnumValue",
                value: r
              };
            }
          }
          throw error("Value");
        }
        function arguments_(e) {
          if (40 === i.charCodeAt(n)) {
            var r = [];
            n++;
            ignored();
            var a;
            do {
              if (null == (a = advance(t))) {
                throw error("Argument");
              }
              ignored();
              if (58 !== i.charCodeAt(n++)) {
                throw error("Argument");
              }
              ignored();
              r.push({
                kind: "Argument",
                name: {
                  kind: "Name",
                  value: a
                },
                value: value(e)
              });
            } while (41 !== i.charCodeAt(n));
            n++;
            ignored();
            return r;
          }
        }
        function directives(e) {
          if (64 === i.charCodeAt(n)) {
            var r = [];
            var a;
            do {
              n++;
              if (null == (a = advance(t))) {
                throw error("Directive");
              }
              ignored();
              r.push({
                kind: "Directive",
                name: {
                  kind: "Name",
                  value: a
                },
                arguments: arguments_(e)
              });
            } while (64 === i.charCodeAt(n));
            return r;
          }
        }
        function type() {
          var e;
          var r = 0;
          while (91 === i.charCodeAt(n)) {
            r++;
            n++;
            ignored();
          }
          if (null == (e = advance(t))) {
            throw error("NamedType");
          }
          ignored();
          var a = {
            kind: "NamedType",
            name: {
              kind: "Name",
              value: e
            }
          };
          do {
            if (33 === i.charCodeAt(n)) {
              n++;
              ignored();
              a = {
                kind: "NonNullType",
                type: a
              };
            }
            if (r) {
              if (93 !== i.charCodeAt(n++)) {
                throw error("NamedType");
              }
              ignored();
              a = {
                kind: "ListType",
                type: a
              };
            }
          } while (r--);
          return a;
        }
        var d = new RegExp("(?:(\\.{3})|(" + t.source + "))", "y");
        var v = function (e) {
          e[e.Spread = 1] = "Spread";
          e[e.Name = 2] = "Name";
          return e;
        }(v || {});
        function selectionSet() {
          var e = [];
          var r;
          var a;
          do {
            d.lastIndex = n;
            if (null != (a = d.exec(i))) {
              n = d.lastIndex;
              if (null != a[v.Spread]) {
                ignored();
                var l = advance(t);
                if (null != l && "on" !== l) {
                  ignored();
                  e.push({
                    kind: "FragmentSpread",
                    name: {
                      kind: "Name",
                      value: l
                    },
                    directives: directives(!1)
                  });
                } else {
                  ignored();
                  if ("on" === l) {
                    if (null == (l = advance(t))) {
                      throw error("NamedType");
                    }
                    ignored();
                  }
                  var o = directives(!1);
                  if (123 !== i.charCodeAt(n++)) {
                    throw error("InlineFragment");
                  }
                  ignored();
                  e.push({
                    kind: "InlineFragment",
                    typeCondition: l ? {
                      kind: "NamedType",
                      name: {
                        kind: "Name",
                        value: l
                      }
                    } : void 0,
                    directives: o,
                    selectionSet: selectionSet()
                  });
                }
              } else if (null != (r = a[v.Name])) {
                var u = void 0;
                ignored();
                if (58 === i.charCodeAt(n)) {
                  n++;
                  ignored();
                  u = r;
                  if (null == (r = advance(t))) {
                    throw error("Field");
                  }
                  ignored();
                }
                var s = arguments_(!1);
                ignored();
                var c = directives(!1);
                var f = void 0;
                if (123 === i.charCodeAt(n)) {
                  n++;
                  ignored();
                  f = selectionSet();
                }
                e.push({
                  kind: "Field",
                  alias: u ? {
                    kind: "Name",
                    value: u
                  } : void 0,
                  name: {
                    kind: "Name",
                    value: r
                  },
                  arguments: s,
                  directives: c,
                  selectionSet: f
                });
              }
            } else {
              throw error("SelectionSet");
            }
          } while (125 !== i.charCodeAt(n));
          n++;
          ignored();
          return {
            kind: "SelectionSet",
            selections: e
          };
        }
        function fragmentDefinition() {
          var e;
          var r;
          if (null == (e = advance(t))) {
            throw error("FragmentDefinition");
          }
          ignored();
          if ("on" !== advance(t)) {
            throw error("FragmentDefinition");
          }
          ignored();
          if (null == (r = advance(t))) {
            throw error("FragmentDefinition");
          }
          ignored();
          var a = directives(!1);
          if (123 !== i.charCodeAt(n++)) {
            throw error("FragmentDefinition");
          }
          ignored();
          return {
            kind: "FragmentDefinition",
            name: {
              kind: "Name",
              value: e
            },
            typeCondition: {
              kind: "NamedType",
              name: {
                kind: "Name",
                value: r
              }
            },
            directives: a,
            selectionSet: selectionSet()
          };
        }
        var s = /(?:query|mutation|subscription|fragment)/y;
        function operationDefinition(e) {
          var r;
          var a;
          var l;
          if (e) {
            ignored();
            r = advance(t);
            a = function variableDefinitions() {
              ignored();
              if (40 === i.charCodeAt(n)) {
                var e = [];
                n++;
                ignored();
                var r;
                do {
                  if (36 !== i.charCodeAt(n++)) {
                    throw error("Variable");
                  }
                  if (null == (r = advance(t))) {
                    throw error("Variable");
                  }
                  ignored();
                  if (58 !== i.charCodeAt(n++)) {
                    throw error("VariableDefinition");
                  }
                  ignored();
                  var a = type();
                  var l = void 0;
                  if (61 === i.charCodeAt(n)) {
                    n++;
                    ignored();
                    l = value(!0);
                  }
                  ignored();
                  e.push({
                    kind: "VariableDefinition",
                    variable: {
                      kind: "Variable",
                      name: {
                        kind: "Name",
                        value: r
                      }
                    },
                    type: a,
                    defaultValue: l,
                    directives: directives(!0)
                  });
                } while (41 !== i.charCodeAt(n));
                n++;
                ignored();
                return e;
              }
            }();
            l = directives(!1);
          }
          if (123 === i.charCodeAt(n)) {
            n++;
            ignored();
            return {
              kind: "OperationDefinition",
              operation: e || "query",
              name: r ? {
                kind: "Name",
                value: r
              } : void 0,
              variableDefinitions: a,
              directives: l,
              selectionSet: selectionSet()
            };
          }
        }
        function parse(e, r) {
          i = "string" == typeof e.body ? e.body : e;
          n = 0;
          return function document() {
            var e;
            var r;
            ignored();
            var a = [];
            do {
              if ("fragment" === (e = advance(s))) {
                ignored();
                a.push(fragmentDefinition());
              } else if (null != (r = operationDefinition(e))) {
                a.push(r);
              } else {
                throw error("Document");
              }
            } while (n < i.length);
            return {
              kind: "Document",
              definitions: a
            };
          }();
        }
        function parseValue(e, r) {
          i = "string" == typeof e.body ? e.body : e;
          n = 0;
          ignored();
          return value(!1);
        }
        function parseType(e, r) {
          i = "string" == typeof e.body ? e.body : e;
          n = 0;
          return type();
        }
        var c = exports.BREAK = {};
        function visit(e, r) {
          var i = [];
          var n = [];
          try {
            var a = function traverse(e, a, t) {
              var l = !1;
              var o = r[e.kind] && r[e.kind].enter || r[e.kind] || r.enter;
              var u = o && o.call(r, e, a, t, n, i);
              if (!1 === u) {
                return e;
              } else if (null === u) {
                return null;
              } else if (u === c) {
                throw c;
              } else if (u && "string" == typeof u.kind) {
                l = u !== e;
                e = u;
              }
              if (t) {
                i.push(t);
              }
              var d;
              var v = {
                ...e
              };
              for (var s in e) {
                n.push(s);
                var f = e[s];
                if (Array.isArray(f)) {
                  var m = [];
                  for (var g = 0; g < f.length; g++) {
                    if (null != f[g] && "string" == typeof f[g].kind) {
                      i.push(e);
                      n.push(g);
                      d = traverse(f[g], g, f);
                      n.pop();
                      i.pop();
                      if (null == d) {
                        l = !0;
                      } else {
                        l = l || d !== f[g];
                        m.push(d);
                      }
                    }
                  }
                  f = m;
                } else if (null != f && "string" == typeof f.kind) {
                  if (void 0 !== (d = traverse(f, s, e))) {
                    l = l || f !== d;
                    f = d;
                  }
                }
                n.pop();
                if (l) {
                  v[s] = f;
                }
              }
              if (t) {
                i.pop();
              }
              var p = r[e.kind] && r[e.kind].leave || r.leave;
              var h = p && p.call(r, e, a, t, n, i);
              if (h === c) {
                throw c;
              } else if (void 0 !== h) {
                return h;
              } else if (void 0 !== u) {
                return l ? v : u;
              } else {
                return l ? v : e;
              }
            }(e);
            return void 0 !== a && !1 !== a ? a : e;
          } catch (r) {
            if (r !== c) {
              throw r;
            }
            return e;
          }
        }
        function mapJoin(e, r, i) {
          var n = "";
          for (var a = 0; a < e.length; a++) {
            if (a) {
              n += r;
            }
            n += i(e[a]);
          }
          return n;
        }
        function printString(e) {
          return JSON.stringify(e);
        }
        function printBlockString(e) {
          return '"""\n' + e.replace(/"""/g, '\\"""') + '\n"""';
        }
        var f = "\n";
        var m = {
          OperationDefinition(e) {
            var r = e.operation;
            if (e.name) {
              r += " " + e.name.value;
            }
            if (e.variableDefinitions && e.variableDefinitions.length) {
              if (!e.name) {
                r += " ";
              }
              r += "(" + mapJoin(e.variableDefinitions, ", ", m.VariableDefinition) + ")";
            }
            if (e.directives && e.directives.length) {
              r += " " + mapJoin(e.directives, " ", m.Directive);
            }
            return "query" !== r ? r + " " + m.SelectionSet(e.selectionSet) : m.SelectionSet(e.selectionSet);
          },
          VariableDefinition(e) {
            var r = m.Variable(e.variable) + ": " + _print(e.type);
            if (e.defaultValue) {
              r += " = " + _print(e.defaultValue);
            }
            if (e.directives && e.directives.length) {
              r += " " + mapJoin(e.directives, " ", m.Directive);
            }
            return r;
          },
          Field(e) {
            var r = e.alias ? e.alias.value + ": " + e.name.value : e.name.value;
            if (e.arguments && e.arguments.length) {
              var i = mapJoin(e.arguments, ", ", m.Argument);
              if (r.length + i.length + 2 > 80) {
                r += "(" + (f += "  ") + mapJoin(e.arguments, f, m.Argument) + (f = f.slice(0, -2)) + ")";
              } else {
                r += "(" + i + ")";
              }
            }
            if (e.directives && e.directives.length) {
              r += " " + mapJoin(e.directives, " ", m.Directive);
            }
            if (e.selectionSet) {
              r += " " + m.SelectionSet(e.selectionSet);
            }
            return r;
          },
          StringValue(e) {
            if (e.block) {
              return printBlockString(e.value).replace(/\n/g, f);
            } else {
              return printString(e.value);
            }
          },
          BooleanValue: e => "" + e.value,
          NullValue: e => "null",
          IntValue: e => e.value,
          FloatValue: e => e.value,
          EnumValue: e => e.value,
          Name: e => e.value,
          Variable: e => "$" + e.name.value,
          ListValue: e => "[" + mapJoin(e.values, ", ", _print) + "]",
          ObjectValue: e => "{" + mapJoin(e.fields, ", ", m.ObjectField) + "}",
          ObjectField: e => e.name.value + ": " + _print(e.value),
          Document(e) {
            if (!e.definitions || !e.definitions.length) {
              return "";
            }
            return mapJoin(e.definitions, "\n\n", _print);
          },
          SelectionSet: e => "{" + (f += "  ") + mapJoin(e.selections, f, _print) + (f = f.slice(0, -2)) + "}",
          Argument: e => e.name.value + ": " + _print(e.value),
          FragmentSpread(e) {
            var r = "..." + e.name.value;
            if (e.directives && e.directives.length) {
              r += " " + mapJoin(e.directives, " ", m.Directive);
            }
            return r;
          },
          InlineFragment(e) {
            var r = "...";
            if (e.typeCondition) {
              r += " on " + e.typeCondition.name.value;
            }
            if (e.directives && e.directives.length) {
              r += " " + mapJoin(e.directives, " ", m.Directive);
            }
            return r += " " + m.SelectionSet(e.selectionSet);
          },
          FragmentDefinition(e) {
            var r = "fragment " + e.name.value;
            r += " on " + e.typeCondition.name.value;
            if (e.directives && e.directives.length) {
              r += " " + mapJoin(e.directives, " ", m.Directive);
            }
            return r + " " + m.SelectionSet(e.selectionSet);
          },
          Directive(e) {
            var r = "@" + e.name.value;
            if (e.arguments && e.arguments.length) {
              r += "(" + mapJoin(e.arguments, ", ", m.Argument) + ")";
            }
            return r;
          },
          NamedType: e => e.name.value,
          ListType: e => "[" + _print(e.type) + "]",
          NonNullType: e => _print(e.type) + "!"
        };
        var _print = e => m[e.kind](e);
        function print(e) {
          f = "\n";
          return m[e.kind] ? m[e.kind](e) : "";
        }
        function valueFromASTUntyped(e, r) {
          switch (e.kind) {
            case "NullValue":
              return null;
            case "IntValue":
              return parseInt(e.value, 10);
            case "FloatValue":
              return parseFloat(e.value);
            case "StringValue":
            case "EnumValue":
            case "BooleanValue":
              return e.value;
            case "ListValue":
              var i = [];
              for (var n of e.values) {
                i.push(valueFromASTUntyped(n, r));
              }
              return i;
            case "ObjectValue":
              var a = Object.create(null);
              for (var t of e.fields) {
                a[t.name.value] = valueFromASTUntyped(t.value, r);
              }
              return a;
            case "Variable":
              return r && r[e.name.value];
          }
        }
        function valueFromTypeNode(e, r, i) {
          if ("Variable" === e.kind) {
            return i ? valueFromTypeNode(i[e.name.value], r, i) : void 0;
          } else if ("NonNullType" === r.kind) {
            return "NullValue" !== e.kind ? valueFromTypeNode(e, r, i) : void 0;
          } else if ("NullValue" === e.kind) {
            return null;
          } else if ("ListType" === r.kind) {
            if ("ListValue" === e.kind) {
              var n = [];
              for (var a of e.values) {
                var t = valueFromTypeNode(a, r.type, i);
                if (void 0 === t) {
                  return;
                } else {
                  n.push(t);
                }
              }
              return n;
            }
          } else if ("NamedType" === r.kind) {
            switch (r.name.value) {
              case "Int":
              case "Float":
              case "String":
              case "Bool":
                return r.name.value + "Value" === e.kind ? valueFromASTUntyped(e, i) : void 0;
              default:
                return valueFromASTUntyped(e, i);
            }
          }
        }
      }, {}],
      7: [function (require, module, exports) {
        (function (Buffer) {
          (function () {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            var _exportNames = {
              MultiSigClient: true,
              Obelisk: true,
              SuiAccountManager: true,
              SuiContractFactory: true,
              SuiTx: true,
              loadMetadata: true,
              bcs: true,
              BcsType: true
            };
            Object.defineProperty(exports, "BcsType", {
              enumerable: true,
              get: function () {
                return _bcs2.BcsType;
              }
            });
            exports.SuiTx = exports.SuiContractFactory = exports.SuiAccountManager = exports.Obelisk = exports.MultiSigClient = void 0;
            Object.defineProperty(exports, "bcs", {
              enumerable: true,
              get: function () {
                return _bcs2.bcs;
              }
            });
            exports.loadMetadata = loadMetadata;
            var _client = require("@mysten/sui/client");
            Object.keys(_client).forEach(function (key) {
              if (key === "default" || key === "__esModule") return;
              if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
              if (key in exports && exports[key] === _client[key]) return;
              Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                  return _client[key];
                }
              });
            });
            var _utils = require("@mysten/sui/utils");
            Object.keys(_utils).forEach(function (key) {
              if (key === "default" || key === "__esModule") return;
              if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
              if (key in exports && exports[key] === _utils[key]) return;
              Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                  return _utils[key];
                }
              });
            });
            var _transactions = require("@mysten/sui/transactions");
            Object.keys(_transactions).forEach(function (key) {
              if (key === "default" || key === "__esModule") return;
              if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
              if (key in exports && exports[key] === _transactions[key]) return;
              Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                  return _transactions[key];
                }
              });
            });
            var _bcs = require("@mysten/sui/bcs");
            Object.keys(_bcs).forEach(function (key) {
              if (key === "default" || key === "__esModule") return;
              if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
              if (key in exports && exports[key] === _bcs[key]) return;
              Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                  return _bcs[key];
                }
              });
            });
            var _ed = require("@mysten/sui/keypairs/ed25519");
            Object.keys(_ed).forEach(function (key) {
              if (key === "default" || key === "__esModule") return;
              if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
              if (key in exports && exports[key] === _ed[key]) return;
              Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                  return _ed[key];
                }
              });
            });
            var _secp256k = require("@mysten/sui/keypairs/secp256k1");
            Object.keys(_secp256k).forEach(function (key) {
              if (key === "default" || key === "__esModule") return;
              if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
              if (key in exports && exports[key] === _secp256k[key]) return;
              Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                  return _secp256k[key];
                }
              });
            });
            var _secp256r = require("@mysten/sui/keypairs/secp256r1");
            Object.keys(_secp256r).forEach(function (key) {
              if (key === "default" || key === "__esModule") return;
              if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
              if (key in exports && exports[key] === _secp256r[key]) return;
              Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                  return _secp256r[key];
                }
              });
            });
            var _bcs2 = require("@mysten/bcs");
            var _keccak = _interopRequireDefault(require("keccak256"));
            var _bip = require("@scure/bip39");
            var _english = require("@scure/bip39/wordlists/english");
            var _cryptography = require("@mysten/sui/cryptography");
            var _faucet = require("@mysten/sui/faucet");
            var _multisig = require("@mysten/sui/multisig");
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var __accessCheck = (obj, member, msg) => {
              if (!member.has(obj)) throw TypeError("Cannot " + msg);
            };
            var __privateGet = (obj, member, getter) => {
              __accessCheck(obj, member, "read from private field");
              return getter ? getter.call(obj) : member.get(obj);
            };
            var __privateAdd = (obj, member, value) => {
              if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
              member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
            };

            // src/index.ts

            // src/obelisk.ts

            // src/libs/suiAccountManager/index.ts

            // src/libs/suiAccountManager/keypair.ts

            var getDerivePathForSUI = (derivePathParams = {}) => {
              const {
                accountIndex = 0,
                isExternal = false,
                addressIndex = 0
              } = derivePathParams;
              return `m/44'/784'/${accountIndex}'/${isExternal ? 1 : 0}'/${addressIndex}'`;
            };
            var getKeyPair = (mnemonics, derivePathParams = {}) => {
              const derivePath = getDerivePathForSUI(derivePathParams);
              return _ed.Ed25519Keypair.deriveKeypair(mnemonics, derivePath);
            };

            // src/libs/suiAccountManager/util.ts

            var isHex = str => /^0x[0-9a-fA-F]+$|^[0-9a-fA-F]+$/.test(str);
            var isBase64 = str => /^[a-zA-Z0-9+/]+={0,2}$/g.test(str);
            var fromHEX = hexStr => {
              if (!hexStr) {
                throw new Error("cannot parse empty string to Uint8Array");
              }
              const intArr = hexStr.replace("0x", "").match(/.{1,2}/g)?.map(byte => parseInt(byte, 16));
              if (!intArr || intArr.length === 0) {
                throw new Error(`Unable to parse HEX: ${hexStr}`);
              }
              return Uint8Array.from(intArr);
            };
            var hexOrBase64ToUint8Array = str => {
              if (isHex(str)) {
                return fromHEX(str);
              } else if (isBase64(str)) {
                return (0, _utils.fromB64)(str);
              } else {
                throw new Error("The string is not a valid hex or base64 string.");
              }
            };
            var PRIVATE_KEY_SIZE = 32;
            var LEGACY_PRIVATE_KEY_SIZE = 64;
            var normalizePrivateKey = key => {
              if (key.length === LEGACY_PRIVATE_KEY_SIZE) {
                key = key.slice(0, PRIVATE_KEY_SIZE);
              } else if (key.length === PRIVATE_KEY_SIZE + 1 && key[0] === 0) {
                return key.slice(1);
              } else if (key.length === PRIVATE_KEY_SIZE) {
                return key;
              }
              throw new Error("invalid secret key");
            };

            // src/libs/suiAccountManager/crypto.ts

            var generateMnemonic = (numberOfWords = 24) => {
              const strength = numberOfWords === 12 ? 128 : 256;
              return (0, _bip.generateMnemonic)(_english.wordlist, strength);
            };

            // src/libs/suiAccountManager/index.ts

            var SuiAccountManager = class {
              /**
               * Support the following ways to init the SuiToolkit:
               * 1. mnemonics
               * 2. secretKey (base64 or hex)
               * If none of them is provided, will generate a random mnemonics with 24 words.
               *
               * @param mnemonics, 12 or 24 mnemonics words, separated by space
               * @param secretKey, base64 or hex string or Bech32 string, when mnemonics is provided, secretKey will be ignored
               */
              constructor({
                mnemonics,
                secretKey
              } = {}) {
                this.mnemonics = mnemonics || "";
                this.secretKey = secretKey || "";
                if (!this.mnemonics && !this.secretKey) {
                  this.mnemonics = generateMnemonic(24);
                }
                this.currentKeyPair = this.secretKey ? this.parseSecretKey(this.secretKey) : getKeyPair(this.mnemonics);
                this.currentAddress = this.currentKeyPair.getPublicKey().toSuiAddress();
              }
              /**
               * Check if the secretKey starts with bench32 format
               */
              parseSecretKey(secretKey) {
                if (secretKey.startsWith(_cryptography.SUI_PRIVATE_KEY_PREFIX)) {
                  const {
                    secretKey: uint8ArraySecretKey
                  } = (0, _cryptography.decodeSuiPrivateKey)(secretKey);
                  return _ed.Ed25519Keypair.fromSecretKey(normalizePrivateKey(uint8ArraySecretKey));
                }
                return _ed.Ed25519Keypair.fromSecretKey(normalizePrivateKey(hexOrBase64ToUint8Array(secretKey)));
              }
              /**
               * if derivePathParams is not provided or mnemonics is empty, it will return the currentKeyPair.
               * else:
               * it will generate keyPair from the mnemonic with the given derivePathParams.
               */
              getKeyPair(derivePathParams) {
                if (!derivePathParams || !this.mnemonics) return this.currentKeyPair;
                return getKeyPair(this.mnemonics, derivePathParams);
              }
              /**
               * if derivePathParams is not provided or mnemonics is empty, it will return the currentAddress.
               * else:
               * it will generate address from the mnemonic with the given derivePathParams.
               */
              getAddress(derivePathParams) {
                if (!derivePathParams || !this.mnemonics) return this.currentAddress;
                return getKeyPair(this.mnemonics, derivePathParams).getPublicKey().toSuiAddress();
              }
              /**
               * Switch the current account with the given derivePathParams.
               * This is only useful when the mnemonics is provided. For secretKey mode, it will always use the same account.
               */
              switchAccount(derivePathParams) {
                if (this.mnemonics) {
                  this.currentKeyPair = getKeyPair(this.mnemonics, derivePathParams);
                  this.currentAddress = this.currentKeyPair.getPublicKey().toSuiAddress();
                }
              }
            };

            // src/libs/suiTxBuilder/index.ts

            // src/libs/suiTxBuilder/util.ts
            exports.SuiAccountManager = SuiAccountManager;
            var getDefaultSuiInputType = value => {
              if (typeof value === "string" && (0, _utils.isValidSuiObjectId)(value)) {
                return "object";
              } else if (typeof value === "number" || typeof value === "bigint") {
                return "u64";
              } else if (typeof value === "boolean") {
                return "bool";
              } else {
                return void 0;
              }
            };
            function makeVecParam(txBlock, args, type) {
              if (args.length === 0) throw new Error("Transaction builder error: Empty array is not allowed");
              const defaultSuiType = getDefaultSuiInputType(args[0]);
              const VECTOR_REGEX = /^vector<(.+)>$/;
              const STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;
              type = type || defaultSuiType;
              if (type === "object") {
                const elements = args.map(arg => typeof arg === "string" && (0, _utils.isValidSuiObjectId)(arg) ? txBlock.object((0, _utils.normalizeSuiObjectId)(arg)) : convertObjArg(txBlock, arg));
                return txBlock.makeMoveVec({
                  elements
                });
              } else if (typeof type === "string" && !VECTOR_REGEX.test(type) && !STRUCT_REGEX.test(type)) {
                const bcsSchema = (0, _transactions.getPureBcsSchema)(type);
                return txBlock.pure(_bcs2.bcs.vector(bcsSchema).serialize(args));
              } else {
                const elements = args.map(arg => convertObjArg(txBlock, arg));
                return txBlock.makeMoveVec({
                  elements,
                  type
                });
              }
            }
            function isMoveVecArg(arg) {
              if (typeof arg === "object" && "vecType" in arg && "value" in arg) {
                return true;
              } else if (Array.isArray(arg)) {
                return true;
              }
              return false;
            }
            function convertArgs(txBlock, args) {
              return args.map(arg => {
                if (arg instanceof _bcs2.SerializedBcs || (0, _bcs2.isSerializedBcs)(arg)) {
                  return txBlock.pure(arg);
                }
                if (isMoveVecArg(arg)) {
                  const vecType = ("vecType" in arg);
                  return vecType ? makeVecParam(txBlock, arg.value, arg.vecType) : makeVecParam(txBlock, arg);
                }
                return arg;
              });
            }
            function convertAddressArg(txBlock, arg) {
              if (typeof arg === "string" && (0, _utils.isValidSuiAddress)(arg)) {
                return txBlock.pure.address((0, _utils.normalizeSuiAddress)(arg));
              } else {
                return convertArgs(txBlock, [arg])[0];
              }
            }
            function convertObjArg(txb, arg) {
              if (typeof arg === "string") {
                return txb.object(arg);
              }
              if ("digest" in arg && "version" in arg && "objectId" in arg) {
                return txb.objectRef(arg);
              }
              if ("objectId" in arg && "initialSharedVersion" in arg && "mutable" in arg) {
                return txb.sharedObjectRef(arg);
              }
              if ("Object" in arg) {
                if ("ImmOrOwnedObject" in arg.Object) {
                  return txb.object(_transactions.Inputs.ObjectRef(arg.Object.ImmOrOwnedObject));
                } else if ("SharedObject" in arg.Object) {
                  return txb.object(_transactions.Inputs.SharedObjectRef(arg.Object.SharedObject));
                } else {
                  throw new Error("Invalid argument type");
                }
              }
              if (typeof arg === "function") {
                return arg;
              }
              if ("GasCoin" in arg || "Input" in arg || "Result" in arg || "NestedResult" in arg) {
                return arg;
              }
              throw new Error("Invalid argument type");
            }
            function convertAmounts(txBlock, amounts) {
              return amounts.map(amount => {
                if (typeof amount === "number" || typeof amount === "bigint") {
                  return amount;
                } else {
                  return convertArgs(txBlock, [amount])[0];
                }
              });
            }

            // src/libs/suiTxBuilder/index.ts
            var SuiTx = class {
              constructor(transaction) {
                if (transaction !== void 0) {
                  this.tx = _transactions.Transaction.from(transaction);
                } else {
                  this.tx = new _transactions.Transaction();
                }
              }
              /* Directly wrap methods and properties of TransactionBlock */
              get gas() {
                return this.tx.gas;
              }
              get blockData() {
                return this.tx.blockData;
              }
              autoPure(value, type) {
                if (type === void 0) {
                  return convertArgs(this.tx, [value]);
                }
                return;
              }
              address(value) {
                return this.tx.pure.address(value);
              }
              get pure() {
                return this.tx.pure.bind(this.tx);
              }
              object(value) {
                return this.tx.object(value);
              }
              objectRef(ref) {
                return this.tx.objectRef(ref);
              }
              sharedObjectRef(ref) {
                return this.tx.sharedObjectRef(ref);
              }
              setSender(sender) {
                return this.tx.setSender(sender);
              }
              setSenderIfNotSet(sender) {
                return this.tx.setSenderIfNotSet(sender);
              }
              setExpiration(expiration) {
                return this.tx.setExpiration(expiration);
              }
              setGasPrice(price) {
                return this.tx.setGasPrice(price);
              }
              setGasBudget(budget) {
                return this.tx.setGasBudget(budget);
              }
              setGasOwner(owner) {
                return this.tx.setGasOwner(owner);
              }
              setGasPayment(payments) {
                return this.tx.setGasPayment(payments);
              }
              serialize() {
                return this.tx.serialize();
              }
              toJSON() {
                return this.tx.toJSON();
              }
              sign(params) {
                return this.tx.sign(params);
              }
              build(params = {}) {
                return this.tx.build(params);
              }
              getDigest(params = {}) {
                return this.tx.getDigest(params);
              }
              add(...args) {
                return this.tx.add(...args);
              }
              publish({
                modules,
                dependencies
              }) {
                return this.tx.publish({
                  modules,
                  dependencies
                });
              }
              upgrade(...args) {
                return this.tx.upgrade(...args);
              }
              makeMoveVec(...args) {
                return this.tx.makeMoveVec(...args);
              }
              /* Override methods of TransactionBlock */
              transferObjects(objects, address) {
                return this.tx.transferObjects(objects.map(object => convertObjArg(this.tx, object)), convertAddressArg(this.tx, address));
              }
              splitCoins(coin, amounts) {
                const res = this.tx.splitCoins(convertObjArg(this.tx, coin), convertArgs(this.tx, amounts));
                return amounts.map((_, i) => res[i]);
              }
              mergeCoins(destination, sources) {
                const destinationObject = convertObjArg(this.tx, destination);
                const sourceObjects = sources.map(source => convertObjArg(this.tx, source));
                return this.tx.mergeCoins(destinationObject, sourceObjects);
              }
              /**
               * @description Move call
               * @param target `${string}::${string}::${string}`, e.g. `0x3::sui_system::request_add_stake`
               * @param args the arguments of the move call, such as `['0x1', '0x2']`
               * @param typeArgs the type arguments of the move call, such as `['0x2::sui::SUI']`
               */
              moveCall(target, args = [], typeArgs = []) {
                const regex = /(?<package>[a-zA-Z0-9]+)::(?<module>[a-zA-Z0-9_]+)::(?<function>[a-zA-Z0-9_]+)/;
                const match = target.match(regex);
                if (match === null) throw new Error("Invalid target format. Expected `${string}::${string}::${string}`");
                const convertedArgs = convertArgs(this.tx, args);
                return this.tx.moveCall({
                  target,
                  arguments: convertedArgs,
                  typeArguments: typeArgs
                });
              }
              /* Enhance methods of TransactionBlock */
              transferSuiToMany(recipients, amounts) {
                if (recipients.length !== amounts.length) {
                  throw new Error("transferSuiToMany: recipients.length !== amounts.length");
                }
                const coins = this.tx.splitCoins(this.tx.gas, amounts.map(amount => typeof amount === "number" || typeof amount === "bigint" ? amount : convertArgs(this.tx, [amount])[0]));
                const recipientObjects = recipients.map(recipient => convertAddressArg(this.tx, recipient));
                recipientObjects.forEach((address, index) => {
                  this.tx.transferObjects([coins[index]], address);
                });
                return this;
              }
              transferSui(address, amount) {
                return this.transferSuiToMany([address], [amount]);
              }
              takeAmountFromCoins(coins, amount) {
                const coinObjects = coins.map(coin => convertObjArg(this.tx, coin));
                const mergedCoin = coinObjects[0];
                if (coins.length > 1) {
                  this.tx.mergeCoins(mergedCoin, coinObjects.slice(1));
                }
                const [sendCoin] = this.tx.splitCoins(mergedCoin, [typeof amount === "number" || typeof amount === "bigint" ? amount : convertArgs(this.tx, [amount])[0]]);
                return [sendCoin, mergedCoin];
              }
              splitSUIFromGas(amounts) {
                return this.tx.splitCoins(this.tx.gas, convertArgs(this.tx, amounts));
              }
              splitMultiCoins(coins, amounts) {
                const coinObjects = coins.map(coin => convertObjArg(this.tx, coin));
                const mergedCoin = coinObjects[0];
                if (coins.length > 1) {
                  this.tx.mergeCoins(mergedCoin, coinObjects.slice(1));
                }
                const splitedCoins = this.tx.splitCoins(mergedCoin, convertAmounts(this.tx, amounts));
                return {
                  splitedCoins,
                  mergedCoin
                };
              }
              transferCoinToMany(coins, sender, recipients, amounts) {
                if (recipients.length !== amounts.length) {
                  throw new Error("transferSuiToMany: recipients.length !== amounts.length");
                }
                const coinObjects = coins.map(coin => convertObjArg(this.tx, coin));
                const {
                  splitedCoins,
                  mergedCoin
                } = this.splitMultiCoins(coinObjects, amounts);
                const recipientObjects = recipients.map(recipient => convertAddressArg(this.tx, recipient));
                recipientObjects.forEach((address, index) => {
                  this.tx.transferObjects([splitedCoins[index]], address);
                });
                this.tx.transferObjects([mergedCoin], convertAddressArg(this.tx, sender));
                return this;
              }
              transferCoin(coins, sender, recipient, amount) {
                return this.transferCoinToMany(coins, sender, [recipient], [amount]);
              }
              stakeSui(amount, validatorAddr) {
                const [stakeCoin] = this.tx.splitCoins(this.tx.gas, convertAmounts(this.tx, [amount]));
                return this.tx.moveCall({
                  target: "0x3::sui_system::request_add_stake",
                  arguments: convertArgs(this.tx, [this.tx.object(_utils.SUI_SYSTEM_STATE_OBJECT_ID), stakeCoin, convertAddressArg(this.tx, validatorAddr)])
                });
              }
            };

            // src/libs/suiInteractor/suiInteractor.ts
            exports.SuiTx = SuiTx;
            // src/libs/suiModel/suiOwnedObject.ts
            var SuiOwnedObject = class {
              constructor(param) {
                this.objectId = param.objectId;
                this.version = param.version;
                this.digest = param.digest;
              }
              /**
               * Check if the object is fully initialized.
               * So that when it's used as an input, it won't be necessary to fetch from fullnode again.
               * Which can save time when sending transactions.
               */
              isFullObject() {
                return !!this.version && !!this.digest;
              }
              asCallArg() {
                if (!this.version || !this.digest) {
                  return this.objectId;
                }
                return {
                  $kind: "Object",
                  Object: {
                    $kind: "ImmOrOwnedObject",
                    ImmOrOwnedObject: {
                      objectId: this.objectId,
                      version: this.version,
                      digest: this.digest
                    }
                  }
                };
              }
              /**
               * Update object version & digest based on the transaction response.
               * @param txResponse
               */
              updateFromTxResponse(txResponse) {
                const changes = txResponse.objectChanges;
                if (!changes) {
                  throw new Error("Bad transaction response!");
                }
                for (const change of changes) {
                  if (change.type === "mutated" && change.objectId === this.objectId) {
                    this.digest = change.digest;
                    this.version = change.version;
                    return;
                  }
                }
                throw new Error("Could not find object in transaction response!");
              }
            };

            // src/libs/suiModel/suiSharedObject.ts
            var SuiSharedObject = class {
              constructor(param) {
                this.objectId = param.objectId;
                this.initialSharedVersion = param.initialSharedVersion;
              }
              asCallArg(mutable = false) {
                if (!this.initialSharedVersion) {
                  return this.objectId;
                }
                return {
                  $kind: "Object",
                  Object: {
                    $kind: "SharedObject",
                    SharedObject: {
                      objectId: this.objectId,
                      initialSharedVersion: this.initialSharedVersion,
                      mutable
                    }
                  }
                };
              }
            };

            // src/libs/suiInteractor/util.ts
            var delay = ms => new Promise(resolve => setTimeout(resolve, ms));

            // src/libs/suiInteractor/suiInteractor.ts
            var SuiInteractor = class {
              constructor(fullNodeUrls, network) {
                if (fullNodeUrls.length === 0) throw new Error("fullNodeUrls must not be empty");
                this.fullNodes = fullNodeUrls;
                this.clients = fullNodeUrls.map(url => new _client.SuiClient({
                  url
                }));
                this.currentFullNode = fullNodeUrls[0];
                this.currentClient = this.clients[0];
                this.network = network;
              }
              switchToNextClient() {
                const currentClientIdx = this.clients.indexOf(this.currentClient);
                this.currentClient = this.clients[(currentClientIdx + 1) % this.clients.length];
                this.currentFullNode = this.fullNodes[(currentClientIdx + 1) % this.clients.length];
              }
              async sendTx(transactionBlock, signature) {
                const txResOptions = {
                  showEvents: true,
                  showEffects: true,
                  showObjectChanges: true,
                  showBalanceChanges: true
                };
                for (const clientIdx in this.clients) {
                  try {
                    return await this.clients[clientIdx].executeTransactionBlock({
                      transactionBlock,
                      signature,
                      options: txResOptions
                    });
                  } catch (err) {
                    console.warn(`Failed to send transaction with fullnode ${this.fullNodes[clientIdx]}: ${err}`);
                    await delay(2e3);
                  }
                }
                throw new Error("Failed to send transaction with all fullnodes");
              }
              async getObjects(ids, options) {
                const opts = options ?? {
                  showContent: true,
                  showDisplay: true,
                  showType: true,
                  showOwner: true
                };
                for (const clientIdx in this.clients) {
                  try {
                    const objects = await this.clients[clientIdx].multiGetObjects({
                      ids,
                      options: opts
                    });
                    const parsedObjects = objects.map(object => {
                      return object.data;
                    }).filter(object => object !== null && object !== void 0);
                    return parsedObjects;
                  } catch (err) {
                    await delay(2e3);
                    console.warn(`Failed to get objects with fullnode ${this.fullNodes[clientIdx]}: ${err}`);
                  }
                }
                throw new Error("Failed to get objects with all fullnodes");
              }
              async getObject(id) {
                const objects = await this.getObjects([id]);
                return objects[0];
              }
              async getDynamicFieldObject(parentId, name) {
                for (const clientIdx in this.clients) {
                  try {
                    return await this.clients[clientIdx].getDynamicFieldObject({
                      parentId,
                      name
                    });
                  } catch (err) {
                    await delay(2e3);
                    console.warn(`Failed to get DynamicFieldObject with fullnode ${this.fullNodes[clientIdx]}: ${err}`);
                  }
                }
                throw new Error("Failed to get DynamicFieldObject with all fullnodes");
              }
              async getDynamicFields(parentId, cursor, limit) {
                for (const clientIdx in this.clients) {
                  try {
                    return await this.clients[clientIdx].getDynamicFields({
                      parentId,
                      cursor,
                      limit
                    });
                  } catch (err) {
                    await delay(2e3);
                    console.warn(`Failed to get DynamicFields with fullnode ${this.fullNodes[clientIdx]}: ${err}`);
                  }
                }
                throw new Error("Failed to get DynamicFields with all fullnodes");
              }
              async getTxDetails(digest) {
                for (const clientIdx in this.clients) {
                  try {
                    const txResOptions = {
                      showEvents: true,
                      showEffects: true,
                      showObjectChanges: true,
                      showBalanceChanges: true
                    };
                    return await this.clients[clientIdx].getTransactionBlock({
                      digest,
                      options: txResOptions
                    });
                  } catch (err) {
                    await delay(2e3);
                    console.warn(`Failed to get TransactionBlocks with fullnode ${this.fullNodes[clientIdx]}: ${err}`);
                  }
                }
                throw new Error("Failed to get TransactionBlocks with all fullnodes");
              }
              async getOwnedObjects(owner, cursor, limit) {
                for (const clientIdx in this.clients) {
                  try {
                    return await this.clients[clientIdx].getOwnedObjects({
                      owner,
                      cursor,
                      limit
                    });
                  } catch (err) {
                    await delay(2e3);
                    console.warn(`Failed to get OwnedObjects with fullnode ${this.fullNodes[clientIdx]}: ${err}`);
                  }
                }
                throw new Error("Failed to get OwnedObjects with all fullnodes");
              }
              async getNormalizedMoveModulesByPackage(packageId) {
                for (const clientIdx in this.clients) {
                  try {
                    return await this.clients[clientIdx].getNormalizedMoveModulesByPackage({
                      package: packageId
                    });
                  } catch (err) {
                    await delay(2e3);
                    console.warn(`Failed to get NormalizedMoveModules with fullnode ${this.fullNodes[clientIdx]}: ${err}`);
                  }
                }
                throw new Error("Failed to get NormalizedMoveModules with all fullnodes");
              }
              /**
               * @description Update objects in a batch
               * @param suiObjects
               */
              async updateObjects(suiObjects) {
                const objectIds = suiObjects.map(obj => obj.objectId);
                const objects = await this.getObjects(objectIds);
                for (const object of objects) {
                  const suiObject = suiObjects.find(obj => obj.objectId === object?.objectId);
                  if (suiObject instanceof SuiSharedObject) {
                    if (object.owner && typeof object.owner === "object" && "Shared" in object.owner) {
                      suiObject.initialSharedVersion = object.owner.Shared.initial_shared_version;
                    } else {
                      suiObject.initialSharedVersion = void 0;
                    }
                  } else if (suiObject instanceof SuiOwnedObject) {
                    suiObject.version = object?.version;
                    suiObject.digest = object?.digest;
                  }
                }
              }
              /**
               * @description Select coins that add up to the given amount.
               * @param addr the address of the owner
               * @param amount the amount that is needed for the coin
               * @param coinType the coin type, default is '0x2::SUI::SUI'
               */
              async selectCoins(addr, amount, coinType = "0x2::SUI::SUI") {
                const selectedCoins = [];
                let totalAmount = 0;
                let hasNext = true,
                  nextCursor = null;
                while (hasNext && totalAmount < amount) {
                  const coins = await this.currentClient.getCoins({
                    owner: addr,
                    coinType,
                    cursor: nextCursor
                  });
                  coins.data.sort((a, b) => parseInt(b.balance) - parseInt(a.balance));
                  for (const coinData of coins.data) {
                    selectedCoins.push({
                      objectId: coinData.coinObjectId,
                      digest: coinData.digest,
                      version: coinData.version
                    });
                    totalAmount = totalAmount + parseInt(coinData.balance);
                    if (totalAmount >= amount) {
                      break;
                    }
                  }
                  nextCursor = coins.nextCursor;
                  hasNext = coins.hasNextPage;
                }
                if (!selectedCoins.length) {
                  throw new Error("No valid coins found for the transaction.");
                }
                return selectedCoins;
              }
              /**
               * @description Select owned objects with objectType.
               * @param addr the address of the owner
               * @param objectType the coin type, default is '0x2::SUI::SUI'
               */
              async selectObjects(addr, objectType) {
                const selectedObjects = [];
                let hasNext = true,
                  nextCursor = null;
                while (hasNext) {
                  const ownedObjects = await this.currentClient.getOwnedObjects({
                    owner: addr,
                    cursor: nextCursor
                  });
                  for (const objectData of ownedObjects.data) {
                    const objectDetail = await this.getObject(objectData.data.objectId);
                    if (objectDetail.type === objectType) {
                      selectedObjects.push(objectDetail);
                    }
                  }
                  nextCursor = ownedObjects.nextCursor;
                  hasNext = ownedObjects.hasNextPage;
                }
                if (!selectedObjects.length) {
                  throw new Error("Not own this object found for the transaction.");
                }
                return selectedObjects;
              }
              async requestFaucet(address, network) {
                await (0, _faucet.requestSuiFromFaucetV0)({
                  host: (0, _faucet.getFaucetHost)(network),
                  recipient: address
                });
              }
            };

            // src/libs/suiContractFactory/index.ts
            var SuiContractFactory = class {
              // readonly #query: MapMessageQuery<ApiTypes> = {};
              // readonly #tx: MapMessageTx<ApiTypes> = {};
              /**
               * Support the following ways to init the SuiToolkit:
               * 1. mnemonics
               * 2. secretKey (base64 or hex)
               * If none of them is provided, will generate a random mnemonics with 24 words.
               *
               * @param mnemonics, 12 or 24 mnemonics words, separated by space
               * @param secretKey, base64 or hex string, when mnemonics is provided, secretKey will be ignored
               */
              constructor({
                packageId,
                metadata
              } = {}) {
                this.packageId = packageId || "";
                this.metadata = metadata || void 0;
              }
              getFuncByModuleName(moduleName) {
                Object.values(this.metadata).forEach(value => {
                  const data = value;
                  console.log(`moudle name: ${data.name}`);
                  Object.entries(data.exposedFunctions).forEach(([key, value2]) => {
                    console.log(`	func name: ${key}`);
                    Object.values(value2.parameters).forEach(values => {});
                  });
                });
              }
              getAllFunc() {
                Object.values(this.metadata).forEach(value => {
                  const data = value;
                  console.log(`moudle name: ${data.name}`);
                  Object.entries(data.exposedFunctions).forEach(([key, value2]) => {
                    console.log(`	func name: ${key}`);
                    console.log(`		${value2.parameters.length}`);
                    Object.values(value2.parameters).forEach(values => {
                      console.log(`		args: ${values}`);
                    });
                  });
                });
              }
              getAllModule() {
                Object.values(this.metadata).forEach((value, index) => {
                  const data = value;
                  console.log(`${index}. ${data.name}`);
                });
              }
              //   async call(arguments: ({
              //     kind: "Input";
              //     index: number;
              //     type?: "object" | "pure" | undefined;
              //     value?: any;
              // } | {
              //     kind: "GasCoin";
              // } | {
              //     kind: "Result";
              //     index: number;
              // } | {
              //     kind: "NestedResult";
              //     index: number;
              //     resultIndex: number;
              // })[], derivePathParams?: DerivePathParams) {
              //     const tx = new TransactionBlock();
              //     tx.moveCall({
              //       target: `${this.packageId}::${}::${}`,
              //       arguments,
              //     })
              //     return ;
              //   }
            };

            // src/utils/index.ts
            exports.SuiContractFactory = SuiContractFactory;
            function normalizeHexAddress(input) {
              const hexRegex = /^(0x)?[0-9a-fA-F]{64}$/;
              if (hexRegex.test(input)) {
                if (input.startsWith("0x")) {
                  return input;
                } else {
                  return "0x" + input;
                }
              } else {
                return null;
              }
            }
            function numberToAddressHex(num) {
              const hex = num.toString(16);
              const paddedHex = "0x" + hex.padStart(64, "0");
              return paddedHex;
            }

            // src/obelisk.ts

            function isUndefined(value) {
              return value === void 0;
            }
            function withMeta(meta, creator) {
              creator.meta = meta;
              return creator;
            }
            function createQuery(meta, fn) {
              return withMeta(meta, async (tx, params, typeArguments, isRaw) => {
                const result = await fn(tx, params, typeArguments, isRaw);
                return result;
              });
            }
            function createTx(meta, fn) {
              return withMeta(meta, async (tx, params, typeArguments, isRaw) => {
                return await fn(tx, params, typeArguments, isRaw);
              });
            }
            var _query, _tx, _struct, _exec, _read;
            var Obelisk = class {
              /**
               * Support the following ways to init the ObeliskClient:
               * 1. mnemonics
               * 2. secretKey (base64 or hex)
               * If none of them is provided, will generate a random mnemonics with 24 words.
               *
               * @param mnemonics, 12 or 24 mnemonics words, separated by space
               * @param secretKey, base64 or hex string or bech32, when mnemonics is provided, secretKey will be ignored
               * @param networkType, 'testnet' | 'mainnet' | 'devnet' | 'localnet', default is 'devnet'
               * @param fullnodeUrl, the fullnode url, default is the preconfig fullnode url for the given network type
               * @param packageId
               */
              constructor({
                mnemonics,
                secretKey,
                networkType,
                fullnodeUrls,
                packageId,
                metadata
              } = {}) {
                __privateAdd(this, _query, {});
                __privateAdd(this, _tx, {});
                __privateAdd(this, _struct, {});
                __privateAdd(this, _exec, async (meta, tx, params, typeArguments, isRaw) => {
                  if (isRaw === true) {
                    return tx.moveCall({
                      target: `${this.contractFactory.packageId}::${meta.moduleName}::${meta.funcName}`,
                      arguments: params,
                      typeArguments
                    });
                  }
                  tx.moveCall({
                    target: `${this.contractFactory.packageId}::${meta.moduleName}::${meta.funcName}`,
                    arguments: params,
                    typeArguments
                  });
                  return await this.signAndSendTxn(tx);
                });
                __privateAdd(this, _read, async (meta, tx, params, typeArguments, isRaw) => {
                  if (isRaw === true) {
                    return tx.moveCall({
                      target: `${this.contractFactory.packageId}::${meta.moduleName}::${meta.funcName}`,
                      arguments: params,
                      typeArguments
                    });
                  }
                  tx.moveCall({
                    target: `${this.contractFactory.packageId}::${meta.moduleName}::${meta.funcName}`,
                    arguments: params,
                    typeArguments
                  });
                  return await this.inspectTxn(tx);
                });
                this.accountManager = new SuiAccountManager({
                  mnemonics,
                  secretKey
                });
                fullnodeUrls = fullnodeUrls || [(0, _client.getFullnodeUrl)(networkType ?? "mainnet")];
                this.suiInteractor = new SuiInteractor(fullnodeUrls, networkType);
                this.packageId = packageId;
                if (metadata !== void 0) {
                  this.metadata = metadata;
                  Object.values(metadata).forEach(moudlevalue => {
                    const data = moudlevalue;
                    const moduleName = data.name;
                    Object.entries(data.exposedFunctions).forEach(([funcName, funcvalue]) => {
                      const meta = funcvalue;
                      meta.moduleName = moduleName;
                      meta.funcName = funcName;
                      if (isUndefined(__privateGet(this, _query)[moduleName])) {
                        __privateGet(this, _query)[moduleName] = {};
                      }
                      if (isUndefined(__privateGet(this, _query)[moduleName][funcName])) {
                        __privateGet(this, _query)[moduleName][funcName] = createQuery(meta, (tx, p, typeArguments, isRaw) => __privateGet(this, _read).call(this, meta, tx, p, typeArguments, isRaw));
                      }
                      if (isUndefined(__privateGet(this, _tx)[moduleName])) {
                        __privateGet(this, _tx)[moduleName] = {};
                      }
                      if (isUndefined(__privateGet(this, _tx)[moduleName][funcName])) {
                        __privateGet(this, _tx)[moduleName][funcName] = createTx(meta, (tx, p, typeArguments, isRaw) => __privateGet(this, _exec).call(this, meta, tx, p, typeArguments, isRaw));
                      }
                    });
                  });
                }
                this.contractFactory = new SuiContractFactory({
                  packageId,
                  metadata
                });
              }
              get query() {
                return __privateGet(this, _query);
              }
              get tx() {
                return __privateGet(this, _tx);
              }
              get struct() {
                return __privateGet(this, _struct);
              }
              /**
               * if derivePathParams is not provided or mnemonics is empty, it will return the keypair.
               * else:
               * it will generate signer from the mnemonic with the given derivePathParams.
               * @param derivePathParams, such as { accountIndex: 2, isExternal: false, addressIndex: 10 }, comply with the BIP44 standard
               */
              getKeypair(derivePathParams) {
                return this.accountManager.getKeyPair(derivePathParams);
              }
              /**
               * @description Switch the current account with the given derivePathParams
               * @param derivePathParams, such as { accountIndex: 2, isExternal: false, addressIndex: 10 }, comply with the BIP44 standard
               */
              switchAccount(derivePathParams) {
                this.accountManager.switchAccount(derivePathParams);
              }
              /**
               * @description Get the address of the account for the given derivePathParams
               * @param derivePathParams, such as { accountIndex: 2, isExternal: false, addressIndex: 10 }, comply with the BIP44 standard
               */
              getAddress(derivePathParams) {
                return this.accountManager.getAddress(derivePathParams);
              }
              currentAddress() {
                return this.accountManager.currentAddress;
              }
              getPackageId() {
                return this.contractFactory.packageId;
              }
              getMetadata() {
                return this.contractFactory.metadata;
              }
              getNetwork() {
                return this.suiInteractor.network;
              }
              /**
               * Request some SUI from faucet
               * @Returns {Promise<boolean>}, true if the request is successful, false otherwise.
               */
              async requestFaucet(address, network, derivePathParams) {
                if (address === void 0) {
                  address = this.accountManager.getAddress(derivePathParams);
                }
                if (network === void 0) {
                  network = this.getNetwork();
                }
                return this.suiInteractor.requestFaucet(address, network);
              }
              async getBalance(coinType, derivePathParams) {
                const owner = this.accountManager.getAddress(derivePathParams);
                return this.suiInteractor.currentClient.getBalance({
                  owner,
                  coinType
                });
              }
              async balanceOf(accountAddress, coinType, derivePathParams) {
                if (accountAddress === void 0) {
                  accountAddress = this.accountManager.getAddress(derivePathParams);
                }
                const owner = accountAddress;
                return this.suiInteractor.currentClient.getBalance({
                  owner,
                  coinType
                });
              }
              client() {
                return this.suiInteractor.currentClient;
              }
              async getObject(objectId) {
                return this.suiInteractor.getObject(objectId);
              }
              async getObjects(objectIds) {
                return this.suiInteractor.getObjects(objectIds);
              }
              async signTxn(tx, derivePathParams) {
                if (tx instanceof SuiTx || tx instanceof _transactions.Transaction) {
                  tx.setSender(this.getAddress(derivePathParams));
                }
                const txBlock = tx instanceof SuiTx ? tx.tx : tx;
                const txBytes = txBlock instanceof _transactions.Transaction ? await txBlock.build({
                  client: this.client()
                }) : txBlock;
                const keyPair = this.getKeypair(derivePathParams);
                return await keyPair.signTransaction(txBytes);
              }
              async signAndSendTxn(tx, derivePathParams) {
                const {
                  bytes,
                  signature
                } = await this.signTxn(tx, derivePathParams);
                return this.suiInteractor.sendTx(bytes, signature);
              }
              async sendTxn(transactionBlock, signature) {
                return this.suiInteractor.sendTx(transactionBlock, signature);
              }
              /**
               * Transfer the given amount of SUI to the recipient
               * @param recipient
               * @param amount
               * @param derivePathParams
               */
              async transferSui(recipient, amount, derivePathParams) {
                const tx = new SuiTx();
                tx.transferSui(recipient, amount);
                return this.signAndSendTxn(tx, derivePathParams);
              }
              /**
               * Transfer to mutliple recipients
               * @param recipients the recipients addresses
               * @param amounts the amounts of SUI to transfer to each recipient, the length of amounts should be the same as the length of recipients
               * @param derivePathParams
               */
              async transferSuiToMany(recipients, amounts, derivePathParams) {
                const tx = new SuiTx();
                tx.transferSuiToMany(recipients, amounts);
                return this.signAndSendTxn(tx, derivePathParams);
              }
              /**
               * Transfer the given amounts of coin to multiple recipients
               * @param recipients the list of recipient address
               * @param amounts the amounts to transfer for each recipient
               * @param coinType any custom coin type but not SUI
               * @param derivePathParams the derive path params for the current signer
               */
              async transferCoinToMany(recipients, amounts, coinType, derivePathParams) {
                const tx = new SuiTx();
                const owner = this.accountManager.getAddress(derivePathParams);
                const totalAmount = amounts.reduce((a, b) => a + b, 0);
                const coins = await this.suiInteractor.selectCoins(owner, totalAmount, coinType);
                tx.transferCoinToMany(coins.map(c => c.objectId), owner, recipients, amounts);
                return this.signAndSendTxn(tx, derivePathParams);
              }
              async transferCoin(recipient, amount, coinType, derivePathParams) {
                return this.transferCoinToMany([recipient], [amount], coinType, derivePathParams);
              }
              async transferObjects(objects, recipient, derivePathParams) {
                const tx = new SuiTx();
                tx.transferObjects(objects, recipient);
                return this.signAndSendTxn(tx, derivePathParams);
              }
              async moveCall(callParams) {
                const {
                  target,
                  arguments: args = [],
                  typeArguments = [],
                  derivePathParams
                } = callParams;
                const tx = new SuiTx();
                tx.moveCall(target, args, typeArguments);
                return this.signAndSendTxn(tx, derivePathParams);
              }
              /**
               * Select coins with the given amount and coin type, the total amount is greater than or equal to the given amount
               * @param amount
               * @param coinType
               * @param owner
               */
              async selectCoinsWithAmount(amount, coinType, owner) {
                owner = owner || this.accountManager.currentAddress;
                const coins = await this.suiInteractor.selectCoins(owner, amount, coinType);
                return coins.map(c => c.objectId);
              }
              async selectObjectsWithType(objectType, owner) {
                owner = owner || this.accountManager.currentAddress;
                const objects = await this.suiInteractor.selectObjects(owner, objectType);
                return objects.map(c => c.objectId);
              }
              /**
               * stake the given amount of SUI to the validator
               * @param amount the amount of SUI to stake
               * @param validatorAddr the validator address
               * @param derivePathParams the derive path params for the current signer
               */
              async stakeSui(amount, validatorAddr, derivePathParams) {
                const tx = new SuiTx();
                tx.stakeSui(amount, validatorAddr);
                return this.signAndSendTxn(tx, derivePathParams);
              }
              /**
               * Execute the transaction with on-chain data but without really submitting. Useful for querying the effects of a transaction.
               * Since the transaction is not submitted, its gas cost is not charged.
               * @param tx the transaction to execute
               * @param derivePathParams the derive path params
               * @returns the effects and events of the transaction, such as object changes, gas cost, event emitted.
               */
              async inspectTxn(tx, derivePathParams) {
                const txBlock = tx instanceof SuiTx ? tx.tx : tx;
                return this.suiInteractor.currentClient.devInspectTransactionBlock({
                  transactionBlock: txBlock,
                  sender: this.getAddress(derivePathParams)
                });
              }
              async getWorld(worldObjectId) {
                return this.suiInteractor.getObject(worldObjectId);
              }
              async listSchemaNames(worldId) {
                const worldObject = await this.getObject(worldId);
                const newObjectContent = worldObject.content;
                if (newObjectContent != null) {
                  const objectContent = newObjectContent;
                  const objectFields = objectContent.fields;
                  return objectFields["schema_names"];
                } else {
                  return [];
                }
              }
              async getEntity(worldId, schemaName, entityId) {
                const schemaModuleName = `${schemaName}_schema`;
                const tx = new _transactions.Transaction();
                const params = [tx.pure.address(worldId)];
                if (entityId !== void 0) {
                  params.push(tx.pure.address(entityId));
                }
                const getResult = await this.query[schemaModuleName].get(tx, params);
                let returnValues = [];
                if (getResult.effects.status.status === "success") {
                  const resultList = getResult.results[0].returnValues;
                  for (const res of resultList) {
                    let baseValue = res[0];
                    let baseType = res[1];
                    const value = Uint8Array.from(baseValue);
                    if (baseType === "address") {
                      const Address = _bcs2.bcs.bytes(32).transform({
                        // To change the input type, you need to provide a type definition for the input
                        input: val => (0, _bcs2.fromHEX)(val),
                        output: val => (0, _bcs2.toHEX)(val)
                      });
                      returnValues.push(Address.parse(value));
                    } else if (baseType === "u8") {
                      returnValues.push(_bcs2.bcs.u8().parse(value));
                    } else if (baseType === "u16") {
                      returnValues.push(_bcs2.bcs.u16().parse(value));
                    } else if (baseType === "u32") {
                      returnValues.push(_bcs2.bcs.u32().parse(value));
                    } else if (baseType === "u64") {
                      returnValues.push(_bcs2.bcs.u64().parse(value));
                    } else if (baseType === "u128") {
                      returnValues.push(_bcs2.bcs.u128().parse(value));
                    } else if (baseType === "u256") {
                      returnValues.push(_bcs2.bcs.u256().parse(value));
                    } else if (baseType === "bool") {
                      returnValues.push(_bcs2.bcs.bool().parse(value));
                    } else if (baseType === "0x1::ascii::String") {
                      returnValues.push(_bcs2.bcs.string().parse(value));
                    } else if (baseType === "vector<u8>") {
                      returnValues.push(_bcs2.bcs.vector(_bcs2.bcs.u8()).parse(value));
                    } else if (baseType === "0x1::option::Option<u8>") {
                      returnValues.push(_bcs2.bcs.option(_bcs2.bcs.u8()).parse(value));
                    }
                  }
                  return returnValues;
                } else {
                  return void 0;
                }
              }
              async containEntity(worldId, schemaName, entityId) {
                const schemaModuleName = `${schemaName}_schema`;
                const tx = new _transactions.Transaction();
                const params = [tx.pure.address(worldId)];
                if (entityId !== void 0) {
                  params.push(tx.pure.address(entityId));
                }
                const getResult = await this.query[schemaModuleName].contains(tx, params);
                if (getResult.effects.status.status === "success") {
                  const res = getResult.results[0].returnValues[0];
                  let baseValue = res[0];
                  const value = Uint8Array.from(baseValue);
                  return _bcs2.bcs.bool().parse(value);
                } else {
                  return void 0;
                }
              }
              // async getEntities(
              //   worldId: string,
              //   schemaName: string,
              //   cursor?: string,
              //   limit?: number
              // ) {
              //   let schemaModuleName = `${schemaName}_schema`;
              //   const tx = new TransactionBlock();
              //   let params = [tx.pure(worldId)] as SuiTxArgument[];
              //   const tableResult = (await this.query[schemaonentModuleName].entities(
              //     tx,
              //     params
              //   )) as DevInspectResults;
              //   const entities = tableResult.results as SuiReturnValues;
              //   const bcs = new BCS(getSuiMoveConfig());
              //   let value = Uint8Array.from(entities[0].returnValues[0][0]);
              //   let tableId = '0x' + bcs.de('address', value);
              //   let dynamicFields = await this.suiInteractor.getDynamicFields(
              //     tableId,
              //     cursor,
              //     limit
              //   );
              //   let objectIds = dynamicFields.data.map((field) => field.objectId);
              //   let objectDatas = await this.suiInteractor.getEntitiesObjects(objectIds);
              //   return {
              //     data: objectDatas,
              //     nextCursor: dynamicFields.nextCursor,
              //     hasNextPage: dynamicFields.hasNextPage,
              //   };
              // }
              async getOwnedObjects(owner, cursor, limit) {
                const ownedObjects = await this.suiInteractor.getOwnedObjects(owner, cursor, limit);
                const ownedObjectsRes = [];
                for (const object of ownedObjects.data) {
                  const objectDetail = await this.getObject(object.data.objectId);
                  if (objectDetail.type.split("::")[0] === this.contractFactory.packageId) {
                    ownedObjectsRes.push(objectDetail);
                  }
                }
                return ownedObjectsRes;
              }
              async entity_key_from_object(objectId) {
                const checkObjectId = normalizeHexAddress(objectId);
                if (checkObjectId !== null) {
                  objectId = checkObjectId;
                  return objectId;
                } else {
                  return void 0;
                }
              }
              async entity_key_from_bytes(bytes) {
                const hashBytes = (0, _keccak.default)(bytes);
                const hashU8Array = Array.from(hashBytes);
                const value = Uint8Array.from(hashU8Array);
                const Address = _bcs2.bcs.bytes(32).transform({
                  // To change the input type, you need to provide a type definition for the input
                  input: val => (0, _bcs2.fromHEX)(val),
                  output: val => (0, _bcs2.toHEX)(val)
                });
                const data = Address.parse(value);
                return "0x" + data;
              }
              async entity_key_from_address_with_seed(objectId, seed) {
                const checkObjectId = normalizeHexAddress(objectId);
                if (checkObjectId !== null) {
                  objectId = checkObjectId;
                  const bytes = Buffer.from(objectId.slice(2), "hex");
                  const newBuffer = Buffer.concat([bytes, Buffer.from(seed, "utf-8")]);
                  return this.entity_key_from_bytes(newBuffer);
                } else {
                  return void 0;
                }
              }
              async entity_key_from_address_with_u256(objectId, x) {
                const checkObjectId = normalizeHexAddress(objectId);
                if (checkObjectId !== null) {
                  objectId = checkObjectId;
                  const bytes = Buffer.from(objectId.slice(2), "hex");
                  const numberBytes = _bcs2.bcs.u256().serialize(x).toBytes();
                  return this.entity_key_from_bytes(Buffer.concat([bytes, numberBytes]));
                } else {
                  return void 0;
                }
              }
              async entity_key_from_u256(x) {
                return numberToAddressHex(x);
              }
              // async formatData(type: string, value: Buffer | number[] | Uint8Array) {
              //   const u8Value = Uint8Array.from(value);
              //   return bcs.de(type, u8Value);
              // }
              async autoFormatDryValue(value) {
                let returnValues = [];
                if (value.effects.status.status === "success") {
                  const resultList = value.results[0].returnValues;
                  for (const res of resultList) {
                    let baseValue = res[0];
                    let baseType = res[1];
                    const value2 = Uint8Array.from(baseValue);
                    if (baseType === "address") {
                      const Address = _bcs2.bcs.bytes(32).transform({
                        // To change the input type, you need to provide a type definition for the input
                        input: val => (0, _bcs2.fromHEX)(val),
                        output: val => (0, _bcs2.toHEX)(val)
                      });
                      returnValues.push(Address.parse(value2));
                    } else if (baseType === "u8") {
                      returnValues.push(_bcs2.bcs.u8().parse(value2));
                    } else if (baseType === "u16") {
                      returnValues.push(_bcs2.bcs.u16().parse(value2));
                    } else if (baseType === "u32") {
                      returnValues.push(_bcs2.bcs.u32().parse(value2));
                    } else if (baseType === "u64") {
                      returnValues.push(_bcs2.bcs.u64().parse(value2));
                    } else if (baseType === "u128") {
                      returnValues.push(_bcs2.bcs.u128().parse(value2));
                    } else if (baseType === "u256") {
                      returnValues.push(_bcs2.bcs.u256().parse(value2));
                    } else if (baseType === "bool") {
                      returnValues.push(_bcs2.bcs.bool().parse(value2));
                    } else if (baseType === "0x1::ascii::String") {
                      returnValues.push(_bcs2.bcs.string().parse(value2));
                    } else if (baseType === "vector<u8>") {
                      returnValues.push(_bcs2.bcs.vector(_bcs2.bcs.u8()).parse(value2));
                    } else if (baseType === "0x1::option::Option<u8>") {
                      returnValues.push(_bcs2.bcs.option(_bcs2.bcs.u8()).parse(value2));
                    }
                  }
                  return returnValues;
                } else {
                  return void 0;
                }
              }
            };
            exports.Obelisk = Obelisk;
            _query = new WeakMap();
            _tx = new WeakMap();
            _struct = new WeakMap();
            _exec = new WeakMap();
            _read = new WeakMap();

            // src/libs/multiSig/client.ts

            // src/libs/multiSig/publickey.ts

            function ed25519PublicKeyFromBase64(rawPubkey) {
              let bytes = (0, _utils.fromB64)(rawPubkey);
              if (bytes.length !== 32 && bytes.length !== 33) throw "invalid pubkey length";
              bytes = bytes.length === 33 ? bytes.slice(1) : bytes;
              return new _ed.Ed25519PublicKey(bytes);
            }

            // src/libs/multiSig/client.ts
            var MultiSigClient = exports.MultiSigClient = class _MultiSigClient {
              constructor(pks, threshold) {
                this.pksWeightPairs = pks;
                this.threshold = threshold;
                this.multiSigPublicKey = _multisig.MultiSigPublicKey.fromPublicKeys({
                  threshold: this.threshold,
                  publicKeys: this.pksWeightPairs
                });
              }
              static fromRawEd25519PublicKeys(rawPublicKeys, weights, threshold) {
                const pks = rawPublicKeys.map((rawPublicKey, i) => {
                  return {
                    publicKey: ed25519PublicKeyFromBase64(rawPublicKey),
                    weight: weights[i]
                  };
                });
                return new _MultiSigClient(pks, threshold);
              }
              multiSigAddress() {
                return this.multiSigPublicKey.toSuiAddress();
              }
              combinePartialSigs(sigs) {
                return this.multiSigPublicKey.combinePartialSignatures(sigs);
              }
            };

            // src/metadata/index.ts

            async function loadMetadata(networkType, packageId) {
              const fullnodeUrls = [(0, _client.getFullnodeUrl)(networkType)];
              const suiInteractor = new SuiInteractor(fullnodeUrls);
              if (packageId !== void 0) {
                const jsonData = await suiInteractor.getNormalizedMoveModulesByPackage(packageId);
                return jsonData;
              } else {
                console.error("please set your package id.");
              }
            }
          }).call(this);
        }).call(this, require("buffer").Buffer);
      }, {
        "@mysten/bcs": 13,
        "@mysten/sui/bcs": 20,
        "@mysten/sui/client": 25,
        "@mysten/sui/cryptography": 35,
        "@mysten/sui/faucet": 43,
        "@mysten/sui/keypairs/ed25519": 48,
        "@mysten/sui/keypairs/secp256k1": 51,
        "@mysten/sui/keypairs/secp256r1": 54,
        "@mysten/sui/multisig": 57,
        "@mysten/sui/transactions": 73,
        "@mysten/sui/utils": 81,
        "@scure/bip39": 128,
        "@scure/bip39/wordlists/english": 129,
        "buffer": 2,
        "keccak256": 281
      }],
      8: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.toB58 = exports.fromB58 = void 0;
        var _bs = _interopRequireDefault(require("bs58"));
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }
        const toB58 = buffer => _bs.default.encode(buffer);
        exports.toB58 = toB58;
        const fromB58 = str => _bs.default.decode(str);
        exports.fromB58 = fromB58;
      }, {
        "bs58": 134
      }],
      9: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.fromB64 = fromB64;
        exports.toB64 = toB64;
        function fromB64(base64String) {
          return Uint8Array.from(atob(base64String), char => char.charCodeAt(0));
        }
        const CHUNK_SIZE = 8192;
        function toB64(bytes) {
          if (bytes.length < CHUNK_SIZE) {
            return btoa(String.fromCharCode(...bytes));
          }
          let output = "";
          for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {
            const chunk = bytes.slice(i, i + CHUNK_SIZE);
            output += String.fromCharCode(...chunk);
          }
          return btoa(output);
        }
      }, {}],
      10: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SerializedBcs = exports.BcsType = void 0;
        exports.bigUIntBcsType = bigUIntBcsType;
        exports.dynamicSizeBcsType = dynamicSizeBcsType;
        exports.fixedSizeBcsType = fixedSizeBcsType;
        exports.isSerializedBcs = isSerializedBcs;
        exports.lazyBcsType = lazyBcsType;
        exports.stringLikeBcsType = stringLikeBcsType;
        exports.uIntBcsType = uIntBcsType;
        var _b = require("./b58.js");
        var _b2 = require("./b64.js");
        var _hex = require("./hex.js");
        var _reader = require("./reader.js");
        var _uleb = require("./uleb.js");
        var _writer = require("./writer.js");
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var _write, _serialize, _schema, _bytes;
        const _BcsType = class {
          constructor(options) {
            __privateAdd(this, _write, void 0);
            __privateAdd(this, _serialize, void 0);
            this.name = options.name;
            this.read = options.read;
            this.serializedSize = options.serializedSize ?? (() => null);
            __privateSet(this, _write, options.write);
            __privateSet(this, _serialize, options.serialize ?? ((value, options2) => {
              const writer = new _writer.BcsWriter({
                initialSize: this.serializedSize(value) ?? void 0,
                ...options2
              });
              __privateGet(this, _write).call(this, value, writer);
              return writer.toBytes();
            }));
            this.validate = options.validate ?? (() => {});
          }
          write(value, writer) {
            this.validate(value);
            __privateGet(this, _write).call(this, value, writer);
          }
          serialize(value, options) {
            this.validate(value);
            return new SerializedBcs(this, __privateGet(this, _serialize).call(this, value, options));
          }
          parse(bytes) {
            const reader = new _reader.BcsReader(bytes);
            return this.read(reader);
          }
          fromHex(hex) {
            return this.parse((0, _hex.fromHEX)(hex));
          }
          fromBase58(b64) {
            return this.parse((0, _b.fromB58)(b64));
          }
          fromBase64(b64) {
            return this.parse((0, _b2.fromB64)(b64));
          }
          transform({
            name,
            input,
            output,
            validate
          }) {
            return new _BcsType({
              name: name ?? this.name,
              read: reader => output(this.read(reader)),
              write: (value, writer) => __privateGet(this, _write).call(this, input(value), writer),
              serializedSize: value => this.serializedSize(input(value)),
              serialize: (value, options) => __privateGet(this, _serialize).call(this, input(value), options),
              validate: value => {
                validate?.(value);
                this.validate(input(value));
              }
            });
          }
        };
        let BcsType = exports.BcsType = _BcsType;
        _write = new WeakMap();
        _serialize = new WeakMap();
        const SERIALIZED_BCS_BRAND = Symbol.for("@mysten/serialized-bcs");
        function isSerializedBcs(obj) {
          return !!obj && typeof obj === "object" && obj[SERIALIZED_BCS_BRAND] === true;
        }
        class SerializedBcs {
          constructor(type, schema) {
            __privateAdd(this, _schema, void 0);
            __privateAdd(this, _bytes, void 0);
            __privateSet(this, _schema, type);
            __privateSet(this, _bytes, schema);
          }
          // Used to brand SerializedBcs so that they can be identified, even between multiple copies
          // of the @mysten/bcs package are installed
          get [SERIALIZED_BCS_BRAND]() {
            return true;
          }
          toBytes() {
            return __privateGet(this, _bytes);
          }
          toHex() {
            return (0, _hex.toHEX)(__privateGet(this, _bytes));
          }
          toBase64() {
            return (0, _b2.toB64)(__privateGet(this, _bytes));
          }
          toBase58() {
            return (0, _b.toB58)(__privateGet(this, _bytes));
          }
          parse() {
            return __privateGet(this, _schema).parse(__privateGet(this, _bytes));
          }
        }
        exports.SerializedBcs = SerializedBcs;
        _schema = new WeakMap();
        _bytes = new WeakMap();
        function fixedSizeBcsType({
          size,
          ...options
        }) {
          return new BcsType({
            ...options,
            serializedSize: () => size
          });
        }
        function uIntBcsType({
          readMethod,
          writeMethod,
          ...options
        }) {
          return fixedSizeBcsType({
            ...options,
            read: reader => reader[readMethod](),
            write: (value, writer) => writer[writeMethod](value),
            validate: value => {
              if (value < 0 || value > options.maxValue) {
                throw new TypeError(`Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`);
              }
              options.validate?.(value);
            }
          });
        }
        function bigUIntBcsType({
          readMethod,
          writeMethod,
          ...options
        }) {
          return fixedSizeBcsType({
            ...options,
            read: reader => reader[readMethod](),
            write: (value, writer) => writer[writeMethod](BigInt(value)),
            validate: val => {
              const value = BigInt(val);
              if (value < 0 || value > options.maxValue) {
                throw new TypeError(`Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`);
              }
              options.validate?.(value);
            }
          });
        }
        function dynamicSizeBcsType({
          serialize,
          ...options
        }) {
          const type = new BcsType({
            ...options,
            serialize,
            write: (value, writer) => {
              for (const byte of type.serialize(value).toBytes()) {
                writer.write8(byte);
              }
            }
          });
          return type;
        }
        function stringLikeBcsType({
          toBytes,
          fromBytes,
          ...options
        }) {
          return new BcsType({
            ...options,
            read: reader => {
              const length = reader.readULEB();
              const bytes = reader.readBytes(length);
              return fromBytes(bytes);
            },
            write: (hex, writer) => {
              const bytes = toBytes(hex);
              writer.writeULEB(bytes.length);
              for (let i = 0; i < bytes.length; i++) {
                writer.write8(bytes[i]);
              }
            },
            serialize: value => {
              const bytes = toBytes(value);
              const size = (0, _uleb.ulebEncode)(bytes.length);
              const result = new Uint8Array(size.length + bytes.length);
              result.set(size, 0);
              result.set(bytes, size.length);
              return result;
            },
            validate: value => {
              if (typeof value !== "string") {
                throw new TypeError(`Invalid ${options.name} value: ${value}. Expected string`);
              }
              options.validate?.(value);
            }
          });
        }
        function lazyBcsType(cb) {
          let lazyType = null;
          function getType() {
            if (!lazyType) {
              lazyType = cb();
            }
            return lazyType;
          }
          return new BcsType({
            name: "lazy",
            read: data => getType().read(data),
            serializedSize: value => getType().serializedSize(value),
            write: (value, writer) => getType().write(value, writer),
            serialize: (value, options) => getType().serialize(value, options).toBytes()
          });
        }
      }, {
        "./b58.js": 8,
        "./b64.js": 9,
        "./hex.js": 12,
        "./reader.js": 14,
        "./uleb.js": 15,
        "./writer.js": 17
      }],
      11: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.bcs = void 0;
        var _bcsType = require("./bcs-type.js");
        var _uleb = require("./uleb.js");
        const bcs = exports.bcs = {
          /**
           * Creates a BcsType that can be used to read and write an 8-bit unsigned integer.
           * @example
           * bcs.u8().serialize(255).toBytes() // Uint8Array [ 255 ]
           */
          u8(options) {
            return (0, _bcsType.uIntBcsType)({
              name: "u8",
              readMethod: "read8",
              writeMethod: "write8",
              size: 1,
              maxValue: 2 ** 8 - 1,
              ...options
            });
          },
          /**
           * Creates a BcsType that can be used to read and write a 16-bit unsigned integer.
           * @example
           * bcs.u16().serialize(65535).toBytes() // Uint8Array [ 255, 255 ]
           */
          u16(options) {
            return (0, _bcsType.uIntBcsType)({
              name: "u16",
              readMethod: "read16",
              writeMethod: "write16",
              size: 2,
              maxValue: 2 ** 16 - 1,
              ...options
            });
          },
          /**
           * Creates a BcsType that can be used to read and write a 32-bit unsigned integer.
           * @example
           * bcs.u32().serialize(4294967295).toBytes() // Uint8Array [ 255, 255, 255, 255 ]
           */
          u32(options) {
            return (0, _bcsType.uIntBcsType)({
              name: "u32",
              readMethod: "read32",
              writeMethod: "write32",
              size: 4,
              maxValue: 2 ** 32 - 1,
              ...options
            });
          },
          /**
           * Creates a BcsType that can be used to read and write a 64-bit unsigned integer.
           * @example
           * bcs.u64().serialize(1).toBytes() // Uint8Array [ 1, 0, 0, 0, 0, 0, 0, 0 ]
           */
          u64(options) {
            return (0, _bcsType.bigUIntBcsType)({
              name: "u64",
              readMethod: "read64",
              writeMethod: "write64",
              size: 8,
              maxValue: 2n ** 64n - 1n,
              ...options
            });
          },
          /**
           * Creates a BcsType that can be used to read and write a 128-bit unsigned integer.
           * @example
           * bcs.u128().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]
           */
          u128(options) {
            return (0, _bcsType.bigUIntBcsType)({
              name: "u128",
              readMethod: "read128",
              writeMethod: "write128",
              size: 16,
              maxValue: 2n ** 128n - 1n,
              ...options
            });
          },
          /**
           * Creates a BcsType that can be used to read and write a 256-bit unsigned integer.
           * @example
           * bcs.u256().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]
           */
          u256(options) {
            return (0, _bcsType.bigUIntBcsType)({
              name: "u256",
              readMethod: "read256",
              writeMethod: "write256",
              size: 32,
              maxValue: 2n ** 256n - 1n,
              ...options
            });
          },
          /**
           * Creates a BcsType that can be used to read and write boolean values.
           * @example
           * bcs.bool().serialize(true).toBytes() // Uint8Array [ 1 ]
           */
          bool(options) {
            return (0, _bcsType.fixedSizeBcsType)({
              name: "bool",
              size: 1,
              read: reader => reader.read8() === 1,
              write: (value, writer) => writer.write8(value ? 1 : 0),
              ...options,
              validate: value => {
                options?.validate?.(value);
                if (typeof value !== "boolean") {
                  throw new TypeError(`Expected boolean, found ${typeof value}`);
                }
              }
            });
          },
          /**
           * Creates a BcsType that can be used to read and write unsigned LEB encoded integers
           * @example
           *
           */
          uleb128(options) {
            return (0, _bcsType.dynamicSizeBcsType)({
              name: "uleb128",
              read: reader => reader.readULEB(),
              serialize: value => {
                return Uint8Array.from((0, _uleb.ulebEncode)(value));
              },
              ...options
            });
          },
          /**
           * Creates a BcsType representing a fixed length byte array
           * @param size The number of bytes this types represents
           * @example
           * bcs.bytes(3).serialize(new Uint8Array([1, 2, 3])).toBytes() // Uint8Array [1, 2, 3]
           */
          bytes(size, options) {
            return (0, _bcsType.fixedSizeBcsType)({
              name: `bytes[${size}]`,
              size,
              read: reader => reader.readBytes(size),
              write: (value, writer) => {
                for (let i = 0; i < size; i++) {
                  writer.write8(value[i] ?? 0);
                }
              },
              ...options,
              validate: value => {
                options?.validate?.(value);
                if (!value || typeof value !== "object" || !("length" in value)) {
                  throw new TypeError(`Expected array, found ${typeof value}`);
                }
                if (value.length !== size) {
                  throw new TypeError(`Expected array of length ${size}, found ${value.length}`);
                }
              }
            });
          },
          /**
           * Creates a BcsType that can ser/de string values.  Strings will be UTF-8 encoded
           * @example
           * bcs.string().serialize('a').toBytes() // Uint8Array [ 1, 97 ]
           */
          string(options) {
            return (0, _bcsType.stringLikeBcsType)({
              name: "string",
              toBytes: value => new TextEncoder().encode(value),
              fromBytes: bytes => new TextDecoder().decode(bytes),
              ...options
            });
          },
          /**
           * Creates a BcsType that represents a fixed length array of a given type
           * @param size The number of elements in the array
           * @param type The BcsType of each element in the array
           * @example
           * bcs.fixedArray(3, bcs.u8()).serialize([1, 2, 3]).toBytes() // Uint8Array [ 1, 2, 3 ]
           */
          fixedArray(size, type, options) {
            return new _bcsType.BcsType({
              name: `${type.name}[${size}]`,
              read: reader => {
                const result = new Array(size);
                for (let i = 0; i < size; i++) {
                  result[i] = type.read(reader);
                }
                return result;
              },
              write: (value, writer) => {
                for (const item of value) {
                  type.write(item, writer);
                }
              },
              ...options,
              validate: value => {
                options?.validate?.(value);
                if (!value || typeof value !== "object" || !("length" in value)) {
                  throw new TypeError(`Expected array, found ${typeof value}`);
                }
                if (value.length !== size) {
                  throw new TypeError(`Expected array of length ${size}, found ${value.length}`);
                }
              }
            });
          },
          /**
           * Creates a BcsType representing an optional value
           * @param type The BcsType of the optional value
           * @example
           * bcs.option(bcs.u8()).serialize(null).toBytes() // Uint8Array [ 0 ]
           * bcs.option(bcs.u8()).serialize(1).toBytes() // Uint8Array [ 1, 1 ]
           */
          option(type) {
            return bcs.enum(`Option<${type.name}>`, {
              None: null,
              Some: type
            }).transform({
              input: value => {
                if (value == null) {
                  return {
                    None: true
                  };
                }
                return {
                  Some: value
                };
              },
              output: value => {
                if (value.$kind === "Some") {
                  return value.Some;
                }
                return null;
              }
            });
          },
          /**
           * Creates a BcsType representing a variable length vector of a given type
           * @param type The BcsType of each element in the vector
           *
           * @example
           * bcs.vector(bcs.u8()).toBytes([1, 2, 3]) // Uint8Array [ 3, 1, 2, 3 ]
           */
          vector(type, options) {
            return new _bcsType.BcsType({
              name: `vector<${type.name}>`,
              read: reader => {
                const length = reader.readULEB();
                const result = new Array(length);
                for (let i = 0; i < length; i++) {
                  result[i] = type.read(reader);
                }
                return result;
              },
              write: (value, writer) => {
                writer.writeULEB(value.length);
                for (const item of value) {
                  type.write(item, writer);
                }
              },
              ...options,
              validate: value => {
                options?.validate?.(value);
                if (!value || typeof value !== "object" || !("length" in value)) {
                  throw new TypeError(`Expected array, found ${typeof value}`);
                }
              }
            });
          },
          /**
           * Creates a BcsType representing a tuple of a given set of types
           * @param types The BcsTypes for each element in the tuple
           *
           * @example
           * const tuple = bcs.tuple([bcs.u8(), bcs.string(), bcs.bool()])
           * tuple.serialize([1, 'a', true]).toBytes() // Uint8Array [ 1, 1, 97, 1 ]
           */
          tuple(types, options) {
            return new _bcsType.BcsType({
              name: `(${types.map(t => t.name).join(", ")})`,
              serializedSize: values => {
                let total = 0;
                for (let i = 0; i < types.length; i++) {
                  const size = types[i].serializedSize(values[i]);
                  if (size == null) {
                    return null;
                  }
                  total += size;
                }
                return total;
              },
              read: reader => {
                const result = [];
                for (const type of types) {
                  result.push(type.read(reader));
                }
                return result;
              },
              write: (value, writer) => {
                for (let i = 0; i < types.length; i++) {
                  types[i].write(value[i], writer);
                }
              },
              ...options,
              validate: value => {
                options?.validate?.(value);
                if (!Array.isArray(value)) {
                  throw new TypeError(`Expected array, found ${typeof value}`);
                }
                if (value.length !== types.length) {
                  throw new TypeError(`Expected array of length ${types.length}, found ${value.length}`);
                }
              }
            });
          },
          /**
           * Creates a BcsType representing a struct of a given set of fields
           * @param name The name of the struct
           * @param fields The fields of the struct. The order of the fields affects how data is serialized and deserialized
           *
           * @example
           * const struct = bcs.struct('MyStruct', {
           *  a: bcs.u8(),
           *  b: bcs.string(),
           * })
           * struct.serialize({ a: 1, b: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]
           */
          struct(name, fields, options) {
            const canonicalOrder = Object.entries(fields);
            return new _bcsType.BcsType({
              name,
              serializedSize: values => {
                let total = 0;
                for (const [field, type] of canonicalOrder) {
                  const size = type.serializedSize(values[field]);
                  if (size == null) {
                    return null;
                  }
                  total += size;
                }
                return total;
              },
              read: reader => {
                const result = {};
                for (const [field, type] of canonicalOrder) {
                  result[field] = type.read(reader);
                }
                return result;
              },
              write: (value, writer) => {
                for (const [field, type] of canonicalOrder) {
                  type.write(value[field], writer);
                }
              },
              ...options,
              validate: value => {
                options?.validate?.(value);
                if (typeof value !== "object" || value == null) {
                  throw new TypeError(`Expected object, found ${typeof value}`);
                }
              }
            });
          },
          /**
           * Creates a BcsType representing an enum of a given set of options
           * @param name The name of the enum
           * @param values The values of the enum. The order of the values affects how data is serialized and deserialized.
           * null can be used to represent a variant with no data.
           *
           * @example
           * const enum = bcs.enum('MyEnum', {
           *   A: bcs.u8(),
           *   B: bcs.string(),
           *   C: null,
           * })
           * enum.serialize({ A: 1 }).toBytes() // Uint8Array [ 0, 1 ]
           * enum.serialize({ B: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]
           * enum.serialize({ C: true }).toBytes() // Uint8Array [ 2 ]
           */
          enum(name, values, options) {
            const canonicalOrder = Object.entries(values);
            return new _bcsType.BcsType({
              name,
              read: reader => {
                const index = reader.readULEB();
                const [name2, type] = canonicalOrder[index];
                return {
                  [name2]: type?.read(reader) ?? true,
                  $kind: name2
                };
              },
              write: (value, writer) => {
                const [name2, val] = Object.entries(value).filter(([name3]) => Object.hasOwn(values, name3))[0];
                for (let i = 0; i < canonicalOrder.length; i++) {
                  const [optionName, optionType] = canonicalOrder[i];
                  if (optionName === name2) {
                    writer.writeULEB(i);
                    optionType?.write(val, writer);
                    return;
                  }
                }
              },
              ...options,
              validate: value => {
                options?.validate?.(value);
                if (typeof value !== "object" || value == null) {
                  throw new TypeError(`Expected object, found ${typeof value}`);
                }
                const keys = Object.keys(value).filter(k => value[k] !== void 0 && Object.hasOwn(values, k));
                if (keys.length !== 1) {
                  throw new TypeError(`Expected object with one key, but found ${keys.length} for type ${name}}`);
                }
                const [variant] = keys;
                if (!Object.hasOwn(values, variant)) {
                  throw new TypeError(`Invalid enum variant ${variant}`);
                }
              }
            });
          },
          /**
           * Creates a BcsType representing a map of a given key and value type
           * @param keyType The BcsType of the key
           * @param valueType The BcsType of the value
           * @example
           * const map = bcs.map(bcs.u8(), bcs.string())
           * map.serialize(new Map([[2, 'a']])).toBytes() // Uint8Array [ 1, 2, 1, 97 ]
           */
          map(keyType, valueType) {
            return bcs.vector(bcs.tuple([keyType, valueType])).transform({
              name: `Map<${keyType.name}, ${valueType.name}>`,
              input: value => {
                return [...value.entries()];
              },
              output: value => {
                const result = /* @__PURE__ */new Map();
                for (const [key, val] of value) {
                  result.set(key, val);
                }
                return result;
              }
            });
          },
          /**
           * Creates a BcsType that wraps another BcsType which is lazily evaluated. This is useful for creating recursive types.
           * @param cb A callback that returns the BcsType
           */
          lazy(cb) {
            return (0, _bcsType.lazyBcsType)(cb);
          }
        };
      }, {
        "./bcs-type.js": 10,
        "./uleb.js": 15
      }],
      12: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.fromHEX = fromHEX;
        exports.toHEX = toHEX;
        function fromHEX(hexStr) {
          const normalized = hexStr.startsWith("0x") ? hexStr.slice(2) : hexStr;
          const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}}`;
          const intArr = padded.match(/.{2}/g)?.map(byte => parseInt(byte, 16)) ?? [];
          return Uint8Array.from(intArr);
        }
        function toHEX(bytes) {
          return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
        }
      }, {}],
      13: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "BcsReader", {
          enumerable: true,
          get: function () {
            return _reader.BcsReader;
          }
        });
        Object.defineProperty(exports, "BcsType", {
          enumerable: true,
          get: function () {
            return _bcsType.BcsType;
          }
        });
        Object.defineProperty(exports, "BcsWriter", {
          enumerable: true,
          get: function () {
            return _writer.BcsWriter;
          }
        });
        Object.defineProperty(exports, "SerializedBcs", {
          enumerable: true,
          get: function () {
            return _bcsType.SerializedBcs;
          }
        });
        Object.defineProperty(exports, "bcs", {
          enumerable: true,
          get: function () {
            return _bcs.bcs;
          }
        });
        Object.defineProperty(exports, "decodeStr", {
          enumerable: true,
          get: function () {
            return _utils.decodeStr;
          }
        });
        Object.defineProperty(exports, "encodeStr", {
          enumerable: true,
          get: function () {
            return _utils.encodeStr;
          }
        });
        Object.defineProperty(exports, "fromB58", {
          enumerable: true,
          get: function () {
            return _b.fromB58;
          }
        });
        Object.defineProperty(exports, "fromB64", {
          enumerable: true,
          get: function () {
            return _b2.fromB64;
          }
        });
        Object.defineProperty(exports, "fromHEX", {
          enumerable: true,
          get: function () {
            return _hex.fromHEX;
          }
        });
        Object.defineProperty(exports, "isSerializedBcs", {
          enumerable: true,
          get: function () {
            return _bcsType.isSerializedBcs;
          }
        });
        Object.defineProperty(exports, "splitGenericParameters", {
          enumerable: true,
          get: function () {
            return _utils.splitGenericParameters;
          }
        });
        Object.defineProperty(exports, "toB58", {
          enumerable: true,
          get: function () {
            return _b.toB58;
          }
        });
        Object.defineProperty(exports, "toB64", {
          enumerable: true,
          get: function () {
            return _b2.toB64;
          }
        });
        Object.defineProperty(exports, "toHEX", {
          enumerable: true,
          get: function () {
            return _hex.toHEX;
          }
        });
        var _b = require("./b58.js");
        var _b2 = require("./b64.js");
        var _bcsType = require("./bcs-type.js");
        var _bcs = require("./bcs.js");
        var _hex = require("./hex.js");
        var _reader = require("./reader.js");
        var _utils = require("./utils.js");
        var _writer = require("./writer.js");
      }, {
        "./b58.js": 8,
        "./b64.js": 9,
        "./bcs-type.js": 10,
        "./bcs.js": 11,
        "./hex.js": 12,
        "./reader.js": 14,
        "./utils.js": 16,
        "./writer.js": 17
      }],
      14: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BcsReader = void 0;
        var _uleb = require("./uleb.js");
        class BcsReader {
          /**
           * @param {Uint8Array} data Data to use as a buffer.
           */
          constructor(data) {
            this.bytePosition = 0;
            this.dataView = new DataView(data.buffer);
          }
          /**
           * Shift current cursor position by `bytes`.
           *
           * @param {Number} bytes Number of bytes to
           * @returns {this} Self for possible chaining.
           */
          shift(bytes) {
            this.bytePosition += bytes;
            return this;
          }
          /**
           * Read U8 value from the buffer and shift cursor by 1.
           * @returns
           */
          read8() {
            let value = this.dataView.getUint8(this.bytePosition);
            this.shift(1);
            return value;
          }
          /**
           * Read U16 value from the buffer and shift cursor by 2.
           * @returns
           */
          read16() {
            let value = this.dataView.getUint16(this.bytePosition, true);
            this.shift(2);
            return value;
          }
          /**
           * Read U32 value from the buffer and shift cursor by 4.
           * @returns
           */
          read32() {
            let value = this.dataView.getUint32(this.bytePosition, true);
            this.shift(4);
            return value;
          }
          /**
           * Read U64 value from the buffer and shift cursor by 8.
           * @returns
           */
          read64() {
            let value1 = this.read32();
            let value2 = this.read32();
            let result = value2.toString(16) + value1.toString(16).padStart(8, "0");
            return BigInt("0x" + result).toString(10);
          }
          /**
           * Read U128 value from the buffer and shift cursor by 16.
           */
          read128() {
            let value1 = BigInt(this.read64());
            let value2 = BigInt(this.read64());
            let result = value2.toString(16) + value1.toString(16).padStart(16, "0");
            return BigInt("0x" + result).toString(10);
          }
          /**
           * Read U128 value from the buffer and shift cursor by 32.
           * @returns
           */
          read256() {
            let value1 = BigInt(this.read128());
            let value2 = BigInt(this.read128());
            let result = value2.toString(16) + value1.toString(16).padStart(32, "0");
            return BigInt("0x" + result).toString(10);
          }
          /**
           * Read `num` number of bytes from the buffer and shift cursor by `num`.
           * @param num Number of bytes to read.
           */
          readBytes(num) {
            let start = this.bytePosition + this.dataView.byteOffset;
            let value = new Uint8Array(this.dataView.buffer, start, num);
            this.shift(num);
            return value;
          }
          /**
           * Read ULEB value - an integer of varying size. Used for enum indexes and
           * vector lengths.
           * @returns {Number} The ULEB value.
           */
          readULEB() {
            let start = this.bytePosition + this.dataView.byteOffset;
            let buffer = new Uint8Array(this.dataView.buffer, start);
            let {
              value,
              length
            } = (0, _uleb.ulebDecode)(buffer);
            this.shift(length);
            return value;
          }
          /**
           * Read a BCS vector: read a length and then apply function `cb` X times
           * where X is the length of the vector, defined as ULEB in BCS bytes.
           * @param cb Callback to process elements of vector.
           * @returns {Array<Any>} Array of the resulting values, returned by callback.
           */
          readVec(cb) {
            let length = this.readULEB();
            let result = [];
            for (let i = 0; i < length; i++) {
              result.push(cb(this, i, length));
            }
            return result;
          }
        }
        exports.BcsReader = BcsReader;
      }, {
        "./uleb.js": 15
      }],
      15: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ulebDecode = ulebDecode;
        exports.ulebEncode = ulebEncode;
        function ulebEncode(num) {
          let arr = [];
          let len = 0;
          if (num === 0) {
            return [0];
          }
          while (num > 0) {
            arr[len] = num & 127;
            if (num >>= 7) {
              arr[len] |= 128;
            }
            len += 1;
          }
          return arr;
        }
        function ulebDecode(arr) {
          let total = 0;
          let shift = 0;
          let len = 0;
          while (true) {
            let byte = arr[len];
            len += 1;
            total |= (byte & 127) << shift;
            if ((byte & 128) === 0) {
              break;
            }
            shift += 7;
          }
          return {
            value: total,
            length: len
          };
        }
      }, {}],
      16: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.decodeStr = decodeStr;
        exports.encodeStr = encodeStr;
        exports.splitGenericParameters = splitGenericParameters;
        var _b = require("./b58.js");
        var _b2 = require("./b64.js");
        var _hex = require("./hex.js");
        function encodeStr(data, encoding) {
          switch (encoding) {
            case "base58":
              return (0, _b.toB58)(data);
            case "base64":
              return (0, _b2.toB64)(data);
            case "hex":
              return (0, _hex.toHEX)(data);
            default:
              throw new Error("Unsupported encoding, supported values are: base64, hex");
          }
        }
        function decodeStr(data, encoding) {
          switch (encoding) {
            case "base58":
              return (0, _b.fromB58)(data);
            case "base64":
              return (0, _b2.fromB64)(data);
            case "hex":
              return (0, _hex.fromHEX)(data);
            default:
              throw new Error("Unsupported encoding, supported values are: base64, hex");
          }
        }
        function splitGenericParameters(str, genericSeparators = ["<", ">"]) {
          const [left, right] = genericSeparators;
          const tok = [];
          let word = "";
          let nestedAngleBrackets = 0;
          for (let i = 0; i < str.length; i++) {
            const char = str[i];
            if (char === left) {
              nestedAngleBrackets++;
            }
            if (char === right) {
              nestedAngleBrackets--;
            }
            if (nestedAngleBrackets === 0 && char === ",") {
              tok.push(word.trim());
              word = "";
              continue;
            }
            word += char;
          }
          tok.push(word.trim());
          return tok;
        }
      }, {
        "./b58.js": 8,
        "./b64.js": 9,
        "./hex.js": 12
      }],
      17: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BcsWriter = void 0;
        var _uleb = require("./uleb.js");
        var _utils = require("./utils.js");
        class BcsWriter {
          constructor({
            initialSize = 1024,
            maxSize = Infinity,
            allocateSize = 1024
          } = {}) {
            this.bytePosition = 0;
            this.size = initialSize;
            this.maxSize = maxSize;
            this.allocateSize = allocateSize;
            this.dataView = new DataView(new ArrayBuffer(initialSize));
          }
          ensureSizeOrGrow(bytes) {
            const requiredSize = this.bytePosition + bytes;
            if (requiredSize > this.size) {
              const nextSize = Math.min(this.maxSize, this.size + this.allocateSize);
              if (requiredSize > nextSize) {
                throw new Error(`Attempting to serialize to BCS, but buffer does not have enough size. Allocated size: ${this.size}, Max size: ${this.maxSize}, Required size: ${requiredSize}`);
              }
              this.size = nextSize;
              const nextBuffer = new ArrayBuffer(this.size);
              new Uint8Array(nextBuffer).set(new Uint8Array(this.dataView.buffer));
              this.dataView = new DataView(nextBuffer);
            }
          }
          /**
           * Shift current cursor position by `bytes`.
           *
           * @param {Number} bytes Number of bytes to
           * @returns {this} Self for possible chaining.
           */
          shift(bytes) {
            this.bytePosition += bytes;
            return this;
          }
          /**
           * Write a U8 value into a buffer and shift cursor position by 1.
           * @param {Number} value Value to write.
           * @returns {this}
           */
          write8(value) {
            this.ensureSizeOrGrow(1);
            this.dataView.setUint8(this.bytePosition, Number(value));
            return this.shift(1);
          }
          /**
           * Write a U16 value into a buffer and shift cursor position by 2.
           * @param {Number} value Value to write.
           * @returns {this}
           */
          write16(value) {
            this.ensureSizeOrGrow(2);
            this.dataView.setUint16(this.bytePosition, Number(value), true);
            return this.shift(2);
          }
          /**
           * Write a U32 value into a buffer and shift cursor position by 4.
           * @param {Number} value Value to write.
           * @returns {this}
           */
          write32(value) {
            this.ensureSizeOrGrow(4);
            this.dataView.setUint32(this.bytePosition, Number(value), true);
            return this.shift(4);
          }
          /**
           * Write a U64 value into a buffer and shift cursor position by 8.
           * @param {bigint} value Value to write.
           * @returns {this}
           */
          write64(value) {
            toLittleEndian(BigInt(value), 8).forEach(el => this.write8(el));
            return this;
          }
          /**
           * Write a U128 value into a buffer and shift cursor position by 16.
           *
           * @param {bigint} value Value to write.
           * @returns {this}
           */
          write128(value) {
            toLittleEndian(BigInt(value), 16).forEach(el => this.write8(el));
            return this;
          }
          /**
           * Write a U256 value into a buffer and shift cursor position by 16.
           *
           * @param {bigint} value Value to write.
           * @returns {this}
           */
          write256(value) {
            toLittleEndian(BigInt(value), 32).forEach(el => this.write8(el));
            return this;
          }
          /**
           * Write a ULEB value into a buffer and shift cursor position by number of bytes
           * written.
           * @param {Number} value Value to write.
           * @returns {this}
           */
          writeULEB(value) {
            (0, _uleb.ulebEncode)(value).forEach(el => this.write8(el));
            return this;
          }
          /**
           * Write a vector into a buffer by first writing the vector length and then calling
           * a callback on each passed value.
           *
           * @param {Array<Any>} vector Array of elements to write.
           * @param {WriteVecCb} cb Callback to call on each element of the vector.
           * @returns {this}
           */
          writeVec(vector, cb) {
            this.writeULEB(vector.length);
            Array.from(vector).forEach((el, i) => cb(this, el, i, vector.length));
            return this;
          }
          /**
           * Adds support for iterations over the object.
           * @returns {Uint8Array}
           */
          *[Symbol.iterator]() {
            for (let i = 0; i < this.bytePosition; i++) {
              yield this.dataView.getUint8(i);
            }
            return this.toBytes();
          }
          /**
           * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).
           * @returns {Uint8Array} Resulting bcs.
           */
          toBytes() {
            return new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));
          }
          /**
           * Represent data as 'hex' or 'base64'
           * @param encoding Encoding to use: 'base64' or 'hex'
           */
          toString(encoding) {
            return (0, _utils.encodeStr)(this.toBytes(), encoding);
          }
        }
        exports.BcsWriter = BcsWriter;
        function toLittleEndian(bigint, size) {
          let result = new Uint8Array(size);
          let i = 0;
          while (bigint > 0) {
            result[i] = Number(bigint % BigInt(256));
            bigint = bigint / BigInt(256);
            i += 1;
          }
          return result;
        }
      }, {
        "./uleb.js": 15,
        "./utils.js": 16
      }],
      18: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var bcs_exports = {};
        __export(bcs_exports, {
          Address: () => Address,
          AppId: () => AppId,
          Argument: () => Argument,
          CallArg: () => CallArg,
          Command: () => Command,
          CompressedSignature: () => CompressedSignature,
          GasData: () => GasData,
          Intent: () => Intent,
          IntentMessage: () => IntentMessage,
          IntentScope: () => IntentScope,
          IntentVersion: () => IntentVersion,
          MultiSig: () => MultiSig,
          MultiSigPkMap: () => MultiSigPkMap,
          MultiSigPublicKey: () => MultiSigPublicKey,
          ObjectArg: () => ObjectArg,
          ObjectDigest: () => ObjectDigest,
          ProgrammableMoveCall: () => ProgrammableMoveCall,
          ProgrammableTransaction: () => ProgrammableTransaction,
          PublicKey: () => PublicKey,
          SenderSignedData: () => SenderSignedData,
          SenderSignedTransaction: () => SenderSignedTransaction,
          SharedObjectRef: () => SharedObjectRef,
          StructTag: () => StructTag,
          SuiObjectRef: () => SuiObjectRef,
          TransactionData: () => TransactionData,
          TransactionDataV1: () => TransactionDataV1,
          TransactionExpiration: () => TransactionExpiration,
          TransactionKind: () => TransactionKind,
          TypeTag: () => TypeTag,
          base64String: () => base64String
        });
        module.exports = __toCommonJS(bcs_exports);
        var import_bcs = require("@mysten/bcs");
        var import_sui_types = require("../utils/sui-types.js");
        var import_type_tag_serializer = require("./type-tag-serializer.js");
        function unsafe_u64(options) {
          return import_bcs.bcs.u64({
            name: "unsafe_u64",
            ...options
          }).transform({
            input: val => val,
            output: val => Number(val)
          });
        }
        function optionEnum(type) {
          return import_bcs.bcs.enum("Option", {
            None: null,
            Some: type
          });
        }
        const Address = import_bcs.bcs.bytes(import_sui_types.SUI_ADDRESS_LENGTH).transform({
          validate: val => {
            const address = typeof val === "string" ? val : (0, import_bcs.toHEX)(val);
            if (!address || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(address))) {
              throw new Error(`Invalid Sui address ${address}`);
            }
          },
          input: val => typeof val === "string" ? (0, import_bcs.fromHEX)((0, import_sui_types.normalizeSuiAddress)(val)) : val,
          output: val => (0, import_sui_types.normalizeSuiAddress)((0, import_bcs.toHEX)(val))
        });
        const ObjectDigest = import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
          name: "ObjectDigest",
          input: value => (0, import_bcs.fromB58)(value),
          output: value => (0, import_bcs.toB58)(new Uint8Array(value)),
          validate: value => {
            if ((0, import_bcs.fromB58)(value).length !== 32) {
              throw new Error("ObjectDigest must be 32 bytes");
            }
          }
        });
        const SuiObjectRef = import_bcs.bcs.struct("SuiObjectRef", {
          objectId: Address,
          version: import_bcs.bcs.u64(),
          digest: ObjectDigest
        });
        const SharedObjectRef = import_bcs.bcs.struct("SharedObjectRef", {
          objectId: Address,
          initialSharedVersion: import_bcs.bcs.u64(),
          mutable: import_bcs.bcs.bool()
        });
        const ObjectArg = import_bcs.bcs.enum("ObjectArg", {
          ImmOrOwnedObject: SuiObjectRef,
          SharedObject: SharedObjectRef,
          Receiving: SuiObjectRef
        });
        const CallArg = import_bcs.bcs.enum("CallArg", {
          Pure: import_bcs.bcs.struct("Pure", {
            bytes: import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
              input: val => typeof val === "string" ? (0, import_bcs.fromB64)(val) : val,
              output: val => (0, import_bcs.toB64)(new Uint8Array(val))
            })
          }),
          Object: ObjectArg
        });
        const InnerTypeTag = import_bcs.bcs.enum("TypeTag", {
          bool: null,
          u8: null,
          u64: null,
          u128: null,
          address: null,
          signer: null,
          vector: import_bcs.bcs.lazy(() => InnerTypeTag),
          struct: import_bcs.bcs.lazy(() => StructTag),
          u16: null,
          u32: null,
          u256: null
        });
        const TypeTag = InnerTypeTag.transform({
          input: typeTag => typeof typeTag === "string" ? import_type_tag_serializer.TypeTagSerializer.parseFromStr(typeTag, true) : typeTag,
          output: typeTag => import_type_tag_serializer.TypeTagSerializer.tagToString(typeTag)
        });
        const Argument = import_bcs.bcs.enum("Argument", {
          GasCoin: null,
          Input: import_bcs.bcs.u16(),
          Result: import_bcs.bcs.u16(),
          NestedResult: import_bcs.bcs.tuple([import_bcs.bcs.u16(), import_bcs.bcs.u16()])
        });
        const ProgrammableMoveCall = import_bcs.bcs.struct("ProgrammableMoveCall", {
          package: Address,
          module: import_bcs.bcs.string(),
          function: import_bcs.bcs.string(),
          typeArguments: import_bcs.bcs.vector(TypeTag),
          arguments: import_bcs.bcs.vector(Argument)
        });
        const Command = import_bcs.bcs.enum("Command", {
          /**
           * A Move Call - any public Move function can be called via
           * this transaction. The results can be used that instant to pass
           * into the next transaction.
           */
          MoveCall: ProgrammableMoveCall,
          /**
           * Transfer vector of objects to a receiver.
           */
          TransferObjects: import_bcs.bcs.struct("TransferObjects", {
            objects: import_bcs.bcs.vector(Argument),
            address: Argument
          }),
          // /**
          //  * Split `amount` from a `coin`.
          //  */
          SplitCoins: import_bcs.bcs.struct("SplitCoins", {
            coin: Argument,
            amounts: import_bcs.bcs.vector(Argument)
          }),
          // /**
          //  * Merge Vector of Coins (`sources`) into a `destination`.
          //  */
          MergeCoins: import_bcs.bcs.struct("MergeCoins", {
            destination: Argument,
            sources: import_bcs.bcs.vector(Argument)
          }),
          // /**
          //  * Publish a Move module.
          //  */
          Publish: import_bcs.bcs.struct("Publish", {
            modules: import_bcs.bcs.vector(import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
              input: val => typeof val === "string" ? (0, import_bcs.fromB64)(val) : val,
              output: val => (0, import_bcs.toB64)(new Uint8Array(val))
            })),
            dependencies: import_bcs.bcs.vector(Address)
          }),
          // /**
          //  * Build a vector of objects using the input arguments.
          //  * It is impossible to export construct a `vector<T: key>` otherwise,
          //  * so this call serves a utility function.
          //  */
          MakeMoveVec: import_bcs.bcs.struct("MakeMoveVec", {
            type: optionEnum(TypeTag).transform({
              input: val => val === null ? {
                None: true
              } : {
                Some: val
              },
              output: val => val.Some ?? null
            }),
            elements: import_bcs.bcs.vector(Argument)
          }),
          Upgrade: import_bcs.bcs.struct("Upgrade", {
            modules: import_bcs.bcs.vector(import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
              input: val => typeof val === "string" ? (0, import_bcs.fromB64)(val) : val,
              output: val => (0, import_bcs.toB64)(new Uint8Array(val))
            })),
            dependencies: import_bcs.bcs.vector(Address),
            package: Address,
            ticket: Argument
          })
        });
        const ProgrammableTransaction = import_bcs.bcs.struct("ProgrammableTransaction", {
          inputs: import_bcs.bcs.vector(CallArg),
          commands: import_bcs.bcs.vector(Command)
        });
        const TransactionKind = import_bcs.bcs.enum("TransactionKind", {
          ProgrammableTransaction,
          ChangeEpoch: null,
          Genesis: null,
          ConsensusCommitPrologue: null
        });
        const TransactionExpiration = import_bcs.bcs.enum("TransactionExpiration", {
          None: null,
          Epoch: unsafe_u64()
        });
        const StructTag = import_bcs.bcs.struct("StructTag", {
          address: Address,
          module: import_bcs.bcs.string(),
          name: import_bcs.bcs.string(),
          typeParams: import_bcs.bcs.vector(InnerTypeTag)
        });
        const GasData = import_bcs.bcs.struct("GasData", {
          payment: import_bcs.bcs.vector(SuiObjectRef),
          owner: Address,
          price: import_bcs.bcs.u64(),
          budget: import_bcs.bcs.u64()
        });
        const TransactionDataV1 = import_bcs.bcs.struct("TransactionDataV1", {
          kind: TransactionKind,
          sender: Address,
          gasData: GasData,
          expiration: TransactionExpiration
        });
        const TransactionData = import_bcs.bcs.enum("TransactionData", {
          V1: TransactionDataV1
        });
        const IntentScope = import_bcs.bcs.enum("IntentScope", {
          TransactionData: null,
          TransactionEffects: null,
          CheckpointSummary: null,
          PersonalMessage: null
        });
        const IntentVersion = import_bcs.bcs.enum("IntentVersion", {
          V0: null
        });
        const AppId = import_bcs.bcs.enum("AppId", {
          Sui: null
        });
        const Intent = import_bcs.bcs.struct("Intent", {
          scope: IntentScope,
          version: IntentVersion,
          appId: AppId
        });
        function IntentMessage(T) {
          return import_bcs.bcs.struct(`IntentMessage<${T.name}>`, {
            intent: Intent,
            value: T
          });
        }
        const CompressedSignature = import_bcs.bcs.enum("CompressedSignature", {
          ED25519: import_bcs.bcs.fixedArray(64, import_bcs.bcs.u8()),
          Secp256k1: import_bcs.bcs.fixedArray(64, import_bcs.bcs.u8()),
          Secp256r1: import_bcs.bcs.fixedArray(64, import_bcs.bcs.u8()),
          ZkLogin: import_bcs.bcs.vector(import_bcs.bcs.u8())
        });
        const PublicKey = import_bcs.bcs.enum("PublicKey", {
          ED25519: import_bcs.bcs.fixedArray(32, import_bcs.bcs.u8()),
          Secp256k1: import_bcs.bcs.fixedArray(33, import_bcs.bcs.u8()),
          Secp256r1: import_bcs.bcs.fixedArray(33, import_bcs.bcs.u8()),
          ZkLogin: import_bcs.bcs.vector(import_bcs.bcs.u8())
        });
        const MultiSigPkMap = import_bcs.bcs.struct("MultiSigPkMap", {
          pubKey: PublicKey,
          weight: import_bcs.bcs.u8()
        });
        const MultiSigPublicKey = import_bcs.bcs.struct("MultiSigPublicKey", {
          pk_map: import_bcs.bcs.vector(MultiSigPkMap),
          threshold: import_bcs.bcs.u16()
        });
        const MultiSig = import_bcs.bcs.struct("MultiSig", {
          sigs: import_bcs.bcs.vector(CompressedSignature),
          bitmap: import_bcs.bcs.u16(),
          multisig_pk: MultiSigPublicKey
        });
        const base64String = import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
          input: val => typeof val === "string" ? (0, import_bcs.fromB64)(val) : val,
          output: val => (0, import_bcs.toB64)(new Uint8Array(val))
        });
        const SenderSignedTransaction = import_bcs.bcs.struct("SenderSignedTransaction", {
          intentMessage: IntentMessage(TransactionData),
          txSignatures: import_bcs.bcs.vector(base64String)
        });
        const SenderSignedData = import_bcs.bcs.vector(SenderSignedTransaction, {
          name: "SenderSignedData"
        });
      }, {
        "../utils/sui-types.js": 82,
        "./type-tag-serializer.js": 21,
        "@mysten/bcs": 13
      }],
      19: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var effects_exports = {};
        __export(effects_exports, {
          TransactionEffects: () => TransactionEffects
        });
        module.exports = __toCommonJS(effects_exports);
        var import_bcs = require("@mysten/bcs");
        var import_bcs2 = require("./bcs.js");
        const PackageUpgradeError = import_bcs.bcs.enum("PackageUpgradeError", {
          UnableToFetchPackage: import_bcs.bcs.struct("UnableToFetchPackage", {
            packageId: import_bcs2.Address
          }),
          NotAPackage: import_bcs.bcs.struct("NotAPackage", {
            objectId: import_bcs2.Address
          }),
          IncompatibleUpgrade: null,
          DigestDoesNotMatch: import_bcs.bcs.struct("DigestDoesNotMatch", {
            digest: import_bcs.bcs.vector(import_bcs.bcs.u8())
          }),
          UnknownUpgradePolicy: import_bcs.bcs.struct("UnknownUpgradePolicy", {
            policy: import_bcs.bcs.u8()
          }),
          PackageIDDoesNotMatch: import_bcs.bcs.struct("PackageIDDoesNotMatch", {
            packageId: import_bcs2.Address,
            ticketId: import_bcs2.Address
          })
        });
        const ModuleId = import_bcs.bcs.struct("ModuleId", {
          address: import_bcs2.Address,
          name: import_bcs.bcs.string()
        });
        const MoveLocation = import_bcs.bcs.struct("MoveLocation", {
          module: ModuleId,
          function: import_bcs.bcs.u16(),
          instruction: import_bcs.bcs.u16(),
          functionName: import_bcs.bcs.option(import_bcs.bcs.string())
        });
        const CommandArgumentError = import_bcs.bcs.enum("CommandArgumentError", {
          TypeMismatch: null,
          InvalidBCSBytes: null,
          InvalidUsageOfPureArg: null,
          InvalidArgumentToPrivateEntryFunction: null,
          IndexOutOfBounds: import_bcs.bcs.struct("IndexOutOfBounds", {
            idx: import_bcs.bcs.u16()
          }),
          SecondaryIndexOutOfBounds: import_bcs.bcs.struct("SecondaryIndexOutOfBounds", {
            resultIdx: import_bcs.bcs.u16(),
            secondaryIdx: import_bcs.bcs.u16()
          }),
          InvalidResultArity: import_bcs.bcs.struct("InvalidResultArity", {
            resultIdx: import_bcs.bcs.u16()
          }),
          InvalidGasCoinUsage: null,
          InvalidValueUsage: null,
          InvalidObjectByValue: null,
          InvalidObjectByMutRef: null,
          SharedObjectOperationNotAllowed: null
        });
        const TypeArgumentError = import_bcs.bcs.enum("TypeArgumentError", {
          TypeNotFound: null,
          ConstraintNotSatisfied: null
        });
        const ExecutionFailureStatus = import_bcs.bcs.enum("ExecutionFailureStatus", {
          InsufficientGas: null,
          InvalidGasObject: null,
          InvariantViolation: null,
          FeatureNotYetSupported: null,
          MoveObjectTooBig: import_bcs.bcs.struct("MoveObjectTooBig", {
            objectSize: import_bcs.bcs.u64(),
            maxObjectSize: import_bcs.bcs.u64()
          }),
          MovePackageTooBig: import_bcs.bcs.struct("MovePackageTooBig", {
            objectSize: import_bcs.bcs.u64(),
            maxObjectSize: import_bcs.bcs.u64()
          }),
          CircularObjectOwnership: import_bcs.bcs.struct("CircularObjectOwnership", {
            object: import_bcs2.Address
          }),
          InsufficientCoinBalance: null,
          CoinBalanceOverflow: null,
          PublishErrorNonZeroAddress: null,
          SuiMoveVerificationError: null,
          MovePrimitiveRuntimeError: import_bcs.bcs.option(MoveLocation),
          MoveAbort: import_bcs.bcs.tuple([MoveLocation, import_bcs.bcs.u64()]),
          VMVerificationOrDeserializationError: null,
          VMInvariantViolation: null,
          FunctionNotFound: null,
          ArityMismatch: null,
          TypeArityMismatch: null,
          NonEntryFunctionInvoked: null,
          CommandArgumentError: import_bcs.bcs.struct("CommandArgumentError", {
            argIdx: import_bcs.bcs.u16(),
            kind: CommandArgumentError
          }),
          TypeArgumentError: import_bcs.bcs.struct("TypeArgumentError", {
            argumentIdx: import_bcs.bcs.u16(),
            kind: TypeArgumentError
          }),
          UnusedValueWithoutDrop: import_bcs.bcs.struct("UnusedValueWithoutDrop", {
            resultIdx: import_bcs.bcs.u16(),
            secondaryIdx: import_bcs.bcs.u16()
          }),
          InvalidPublicFunctionReturnType: import_bcs.bcs.struct("InvalidPublicFunctionReturnType", {
            idx: import_bcs.bcs.u16()
          }),
          InvalidTransferObject: null,
          EffectsTooLarge: import_bcs.bcs.struct("EffectsTooLarge", {
            currentSize: import_bcs.bcs.u64(),
            maxSize: import_bcs.bcs.u64()
          }),
          PublishUpgradeMissingDependency: null,
          PublishUpgradeDependencyDowngrade: null,
          PackageUpgradeError: import_bcs.bcs.struct("PackageUpgradeError", {
            upgradeError: PackageUpgradeError
          }),
          WrittenObjectsTooLarge: import_bcs.bcs.struct("WrittenObjectsTooLarge", {
            currentSize: import_bcs.bcs.u64(),
            maxSize: import_bcs.bcs.u64()
          }),
          CertificateDenied: null,
          SuiMoveVerificationTimedout: null,
          SharedObjectOperationNotAllowed: null,
          InputObjectDeleted: null
        });
        const ExecutionStatus = import_bcs.bcs.enum("ExecutionStatus", {
          Success: null,
          Failed: import_bcs.bcs.struct("ExecutionFailed", {
            error: ExecutionFailureStatus,
            command: import_bcs.bcs.option(import_bcs.bcs.u64())
          })
        });
        const GasCostSummary = import_bcs.bcs.struct("GasCostSummary", {
          computationCost: import_bcs.bcs.u64(),
          storageCost: import_bcs.bcs.u64(),
          storageRebate: import_bcs.bcs.u64(),
          nonRefundableStorageFee: import_bcs.bcs.u64()
        });
        const Owner = import_bcs.bcs.enum("Owner", {
          AddressOwner: import_bcs2.Address,
          ObjectOwner: import_bcs2.Address,
          Shared: import_bcs.bcs.struct("Shared", {
            initialSharedVersion: import_bcs.bcs.u64()
          }),
          Immutable: null
        });
        const TransactionEffectsV1 = import_bcs.bcs.struct("TransactionEffectsV1", {
          status: ExecutionStatus,
          executedEpoch: import_bcs.bcs.u64(),
          gasUsed: GasCostSummary,
          modifiedAtVersions: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.Address, import_bcs.bcs.u64()])),
          sharedObjects: import_bcs.bcs.vector(import_bcs2.SuiObjectRef),
          transactionDigest: import_bcs2.ObjectDigest,
          created: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.SuiObjectRef, Owner])),
          mutated: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.SuiObjectRef, Owner])),
          unwrapped: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.SuiObjectRef, Owner])),
          deleted: import_bcs.bcs.vector(import_bcs2.SuiObjectRef),
          unwrappedThenDeleted: import_bcs.bcs.vector(import_bcs2.SuiObjectRef),
          wrapped: import_bcs.bcs.vector(import_bcs2.SuiObjectRef),
          gasObject: import_bcs.bcs.tuple([import_bcs2.SuiObjectRef, Owner]),
          eventsDigest: import_bcs.bcs.option(import_bcs2.ObjectDigest),
          dependencies: import_bcs.bcs.vector(import_bcs2.ObjectDigest)
        });
        const VersionDigest = import_bcs.bcs.tuple([import_bcs.bcs.u64(), import_bcs2.ObjectDigest]);
        const ObjectIn = import_bcs.bcs.enum("ObjectIn", {
          NotExist: null,
          Exist: import_bcs.bcs.tuple([VersionDigest, Owner])
        });
        const ObjectOut = import_bcs.bcs.enum("ObjectOut", {
          NotExist: null,
          ObjectWrite: import_bcs.bcs.tuple([import_bcs2.ObjectDigest, Owner]),
          PackageWrite: VersionDigest
        });
        const IDOperation = import_bcs.bcs.enum("IDOperation", {
          None: null,
          Created: null,
          Deleted: null
        });
        const EffectsObjectChange = import_bcs.bcs.struct("EffectsObjectChange", {
          inputState: ObjectIn,
          outputState: ObjectOut,
          idOperation: IDOperation
        });
        const UnchangedSharedKind = import_bcs.bcs.enum("UnchangedSharedKind", {
          ReadOnlyRoot: VersionDigest,
          MutateDeleted: import_bcs.bcs.u64(),
          ReadDeleted: import_bcs.bcs.u64()
        });
        const TransactionEffectsV2 = import_bcs.bcs.struct("TransactionEffectsV2", {
          status: ExecutionStatus,
          executedEpoch: import_bcs.bcs.u64(),
          gasUsed: GasCostSummary,
          transactionDigest: import_bcs2.ObjectDigest,
          gasObjectIndex: import_bcs.bcs.option(import_bcs.bcs.u32()),
          eventsDigest: import_bcs.bcs.option(import_bcs2.ObjectDigest),
          dependencies: import_bcs.bcs.vector(import_bcs2.ObjectDigest),
          lamportVersion: import_bcs.bcs.u64(),
          changedObjects: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.Address, EffectsObjectChange])),
          unchangedSharedObjects: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.Address, UnchangedSharedKind])),
          auxDataDigest: import_bcs.bcs.option(import_bcs2.ObjectDigest)
        });
        const TransactionEffects = import_bcs.bcs.enum("TransactionEffects", {
          V1: TransactionEffectsV1,
          V2: TransactionEffectsV2
        });
      }, {
        "./bcs.js": 18,
        "@mysten/bcs": 13
      }],
      20: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var bcs_exports = {};
        __export(bcs_exports, {
          BcsType: () => import_bcs3.BcsType,
          TypeTagSerializer: () => import_type_tag_serializer.TypeTagSerializer,
          bcs: () => suiBcs
        });
        module.exports = __toCommonJS(bcs_exports);
        var import_bcs = require("@mysten/bcs");
        var import_bcs2 = require("./bcs.js");
        var import_effects = require("./effects.js");
        var import_type_tag_serializer = require("./type-tag-serializer.js");
        var import_bcs3 = require("@mysten/bcs");
        const suiBcs = {
          ...import_bcs.bcs,
          U8: import_bcs.bcs.u8(),
          U16: import_bcs.bcs.u16(),
          U32: import_bcs.bcs.u32(),
          U64: import_bcs.bcs.u64(),
          U128: import_bcs.bcs.u128(),
          U256: import_bcs.bcs.u256(),
          ULEB128: import_bcs.bcs.uleb128(),
          Bool: import_bcs.bcs.bool(),
          String: import_bcs.bcs.string(),
          Address: import_bcs2.Address,
          AppId: import_bcs2.AppId,
          Argument: import_bcs2.Argument,
          CallArg: import_bcs2.CallArg,
          CompressedSignature: import_bcs2.CompressedSignature,
          GasData: import_bcs2.GasData,
          Intent: import_bcs2.Intent,
          IntentMessage: import_bcs2.IntentMessage,
          IntentScope: import_bcs2.IntentScope,
          IntentVersion: import_bcs2.IntentVersion,
          MultiSig: import_bcs2.MultiSig,
          MultiSigPkMap: import_bcs2.MultiSigPkMap,
          MultiSigPublicKey: import_bcs2.MultiSigPublicKey,
          ObjectArg: import_bcs2.ObjectArg,
          ObjectDigest: import_bcs2.ObjectDigest,
          ProgrammableMoveCall: import_bcs2.ProgrammableMoveCall,
          ProgrammableTransaction: import_bcs2.ProgrammableTransaction,
          PublicKey: import_bcs2.PublicKey,
          SenderSignedData: import_bcs2.SenderSignedData,
          SenderSignedTransaction: import_bcs2.SenderSignedTransaction,
          SharedObjectRef: import_bcs2.SharedObjectRef,
          StructTag: import_bcs2.StructTag,
          SuiObjectRef: import_bcs2.SuiObjectRef,
          Command: import_bcs2.Command,
          TransactionData: import_bcs2.TransactionData,
          TransactionDataV1: import_bcs2.TransactionDataV1,
          TransactionExpiration: import_bcs2.TransactionExpiration,
          TransactionKind: import_bcs2.TransactionKind,
          TypeTag: import_bcs2.TypeTag,
          TransactionEffects: import_effects.TransactionEffects
        };
      }, {
        "./bcs.js": 18,
        "./effects.js": 19,
        "./type-tag-serializer.js": 21,
        "@mysten/bcs": 13
      }],
      21: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var type_tag_serializer_exports = {};
        __export(type_tag_serializer_exports, {
          TypeTagSerializer: () => TypeTagSerializer
        });
        module.exports = __toCommonJS(type_tag_serializer_exports);
        var import_bcs = require("@mysten/bcs");
        var import_sui_types = require("../utils/sui-types.js");
        const VECTOR_REGEX = /^vector<(.+)>$/;
        const STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;
        class TypeTagSerializer {
          static parseFromStr(str, normalizeAddress = false) {
            if (str === "address") {
              return {
                address: null
              };
            } else if (str === "bool") {
              return {
                bool: null
              };
            } else if (str === "u8") {
              return {
                u8: null
              };
            } else if (str === "u16") {
              return {
                u16: null
              };
            } else if (str === "u32") {
              return {
                u32: null
              };
            } else if (str === "u64") {
              return {
                u64: null
              };
            } else if (str === "u128") {
              return {
                u128: null
              };
            } else if (str === "u256") {
              return {
                u256: null
              };
            } else if (str === "signer") {
              return {
                signer: null
              };
            }
            const vectorMatch = str.match(VECTOR_REGEX);
            if (vectorMatch) {
              return {
                vector: TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress)
              };
            }
            const structMatch = str.match(STRUCT_REGEX);
            if (structMatch) {
              const address = normalizeAddress ? (0, import_sui_types.normalizeSuiAddress)(structMatch[1]) : structMatch[1];
              return {
                struct: {
                  address,
                  module: structMatch[2],
                  name: structMatch[3],
                  typeParams: structMatch[5] === void 0 ? [] : TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress)
                }
              };
            }
            throw new Error(`Encountered unexpected token when parsing type args for ${str}`);
          }
          static parseStructTypeArgs(str, normalizeAddress = false) {
            return (0, import_bcs.splitGenericParameters)(str).map(tok => TypeTagSerializer.parseFromStr(tok, normalizeAddress));
          }
          static tagToString(tag) {
            if ("bool" in tag) {
              return "bool";
            }
            if ("u8" in tag) {
              return "u8";
            }
            if ("u16" in tag) {
              return "u16";
            }
            if ("u32" in tag) {
              return "u32";
            }
            if ("u64" in tag) {
              return "u64";
            }
            if ("u128" in tag) {
              return "u128";
            }
            if ("u256" in tag) {
              return "u256";
            }
            if ("address" in tag) {
              return "address";
            }
            if ("signer" in tag) {
              return "signer";
            }
            if ("vector" in tag) {
              return `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;
            }
            if ("struct" in tag) {
              const struct = tag.struct;
              const typeParams = struct.typeParams.map(TypeTagSerializer.tagToString).join(", ");
              return `${struct.address}::${struct.module}::${struct.name}${typeParams ? `<${typeParams}>` : ""}`;
            }
            throw new Error("Invalid TypeTag");
          }
        }
      }, {
        "../utils/sui-types.js": 82,
        "@mysten/bcs": 13
      }],
      22: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var client_exports = {};
        __export(client_exports, {
          SuiClient: () => SuiClient,
          isSuiClient: () => isSuiClient
        });
        module.exports = __toCommonJS(client_exports);
        var import_bcs = require("@mysten/bcs");
        var import_transactions = require("../transactions/index.js");
        var import_sui_types = require("../utils/sui-types.js");
        var import_suins = require("../utils/suins.js");
        var import_http_transport = require("./http-transport.js");
        const SUI_CLIENT_BRAND = Symbol.for("@mysten/SuiClient");
        function isSuiClient(client) {
          return typeof client === "object" && client !== null && client[SUI_CLIENT_BRAND] === true;
        }
        class SuiClient {
          get [SUI_CLIENT_BRAND]() {
            return true;
          }
          /**
           * Establish a connection to a Sui RPC endpoint
           *
           * @param options configuration options for the API Client
           */
          constructor(options) {
            this.transport = options.transport ?? new import_http_transport.SuiHTTPTransport({
              url: options.url
            });
          }
          async getRpcApiVersion() {
            const resp = await this.transport.request({
              method: "rpc.discover",
              params: []
            });
            return resp.info.version;
          }
          /**
           * Get all Coin<`coin_type`> objects owned by an address.
           */
          async getCoins(input) {
            if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
              throw new Error("Invalid Sui address");
            }
            return await this.transport.request({
              method: "suix_getCoins",
              params: [input.owner, input.coinType, input.cursor, input.limit]
            });
          }
          /**
           * Get all Coin objects owned by an address.
           */
          async getAllCoins(input) {
            if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
              throw new Error("Invalid Sui address");
            }
            return await this.transport.request({
              method: "suix_getAllCoins",
              params: [input.owner, input.cursor, input.limit]
            });
          }
          /**
           * Get the total coin balance for one coin type, owned by the address owner.
           */
          async getBalance(input) {
            if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
              throw new Error("Invalid Sui address");
            }
            return await this.transport.request({
              method: "suix_getBalance",
              params: [input.owner, input.coinType]
            });
          }
          /**
           * Get the total coin balance for all coin types, owned by the address owner.
           */
          async getAllBalances(input) {
            if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
              throw new Error("Invalid Sui address");
            }
            return await this.transport.request({
              method: "suix_getAllBalances",
              params: [input.owner]
            });
          }
          /**
           * Fetch CoinMetadata for a given coin type
           */
          async getCoinMetadata(input) {
            return await this.transport.request({
              method: "suix_getCoinMetadata",
              params: [input.coinType]
            });
          }
          /**
           *  Fetch total supply for a coin
           */
          async getTotalSupply(input) {
            return await this.transport.request({
              method: "suix_getTotalSupply",
              params: [input.coinType]
            });
          }
          /**
           * Invoke any RPC method
           * @param method the method to be invoked
           * @param args the arguments to be passed to the RPC request
           */
          async call(method, params) {
            return await this.transport.request({
              method,
              params
            });
          }
          /**
           * Get Move function argument types like read, write and full access
           */
          async getMoveFunctionArgTypes(input) {
            return await this.transport.request({
              method: "sui_getMoveFunctionArgTypes",
              params: [input.package, input.module, input.function]
            });
          }
          /**
           * Get a map from module name to
           * structured representations of Move modules
           */
          async getNormalizedMoveModulesByPackage(input) {
            return await this.transport.request({
              method: "sui_getNormalizedMoveModulesByPackage",
              params: [input.package]
            });
          }
          /**
           * Get a structured representation of Move module
           */
          async getNormalizedMoveModule(input) {
            return await this.transport.request({
              method: "sui_getNormalizedMoveModule",
              params: [input.package, input.module]
            });
          }
          /**
           * Get a structured representation of Move function
           */
          async getNormalizedMoveFunction(input) {
            return await this.transport.request({
              method: "sui_getNormalizedMoveFunction",
              params: [input.package, input.module, input.function]
            });
          }
          /**
           * Get a structured representation of Move struct
           */
          async getNormalizedMoveStruct(input) {
            return await this.transport.request({
              method: "sui_getNormalizedMoveStruct",
              params: [input.package, input.module, input.struct]
            });
          }
          /**
           * Get all objects owned by an address
           */
          async getOwnedObjects(input) {
            if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
              throw new Error("Invalid Sui address");
            }
            return await this.transport.request({
              method: "suix_getOwnedObjects",
              params: [input.owner, {
                filter: input.filter,
                options: input.options
              }, input.cursor, input.limit]
            });
          }
          /**
           * Get details about an object
           */
          async getObject(input) {
            if (!input.id || !(0, import_sui_types.isValidSuiObjectId)((0, import_sui_types.normalizeSuiObjectId)(input.id))) {
              throw new Error("Invalid Sui Object id");
            }
            return await this.transport.request({
              method: "sui_getObject",
              params: [input.id, input.options]
            });
          }
          async tryGetPastObject(input) {
            return await this.transport.request({
              method: "sui_tryGetPastObject",
              params: [input.id, input.version, input.options]
            });
          }
          /**
           * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail
           */
          async multiGetObjects(input) {
            input.ids.forEach(id => {
              if (!id || !(0, import_sui_types.isValidSuiObjectId)((0, import_sui_types.normalizeSuiObjectId)(id))) {
                throw new Error(`Invalid Sui Object id ${id}`);
              }
            });
            const hasDuplicates = input.ids.length !== new Set(input.ids).size;
            if (hasDuplicates) {
              throw new Error(`Duplicate object ids in batch call ${input.ids}`);
            }
            return await this.transport.request({
              method: "sui_multiGetObjects",
              params: [input.ids, input.options]
            });
          }
          /**
           * Get transaction blocks for a given query criteria
           */
          async queryTransactionBlocks(input) {
            return await this.transport.request({
              method: "suix_queryTransactionBlocks",
              params: [{
                filter: input.filter,
                options: input.options
              }, input.cursor, input.limit, (input.order || "descending") === "descending"]
            });
          }
          async getTransactionBlock(input) {
            if (!(0, import_sui_types.isValidTransactionDigest)(input.digest)) {
              throw new Error("Invalid Transaction digest");
            }
            return await this.transport.request({
              method: "sui_getTransactionBlock",
              params: [input.digest, input.options]
            });
          }
          async multiGetTransactionBlocks(input) {
            input.digests.forEach(d => {
              if (!(0, import_sui_types.isValidTransactionDigest)(d)) {
                throw new Error(`Invalid Transaction digest ${d}`);
              }
            });
            const hasDuplicates = input.digests.length !== new Set(input.digests).size;
            if (hasDuplicates) {
              throw new Error(`Duplicate digests in batch call ${input.digests}`);
            }
            return await this.transport.request({
              method: "sui_multiGetTransactionBlocks",
              params: [input.digests, input.options]
            });
          }
          async executeTransactionBlock(input) {
            return await this.transport.request({
              method: "sui_executeTransactionBlock",
              params: [typeof input.transactionBlock === "string" ? input.transactionBlock : (0, import_bcs.toB64)(input.transactionBlock), Array.isArray(input.signature) ? input.signature : [input.signature], input.options, input.requestType]
            });
          }
          async signAndExecuteTransaction({
            transaction,
            signer,
            ...input
          }) {
            let transactionBytes;
            if (transaction instanceof Uint8Array) {
              transactionBytes = transaction;
            } else {
              transaction.setSenderIfNotSet(signer.toSuiAddress());
              transactionBytes = await transaction.build({
                client: this
              });
            }
            const {
              signature,
              bytes
            } = await signer.signTransaction(transactionBytes);
            return this.executeTransactionBlock({
              transactionBlock: bytes,
              signature,
              ...input
            });
          }
          /**
           * Get total number of transactions
           */
          async getTotalTransactionBlocks() {
            const resp = await this.transport.request({
              method: "sui_getTotalTransactionBlocks",
              params: []
            });
            return BigInt(resp);
          }
          /**
           * Getting the reference gas price for the network
           */
          async getReferenceGasPrice() {
            const resp = await this.transport.request({
              method: "suix_getReferenceGasPrice",
              params: []
            });
            return BigInt(resp);
          }
          /**
           * Return the delegated stakes for an address
           */
          async getStakes(input) {
            if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
              throw new Error("Invalid Sui address");
            }
            return await this.transport.request({
              method: "suix_getStakes",
              params: [input.owner]
            });
          }
          /**
           * Return the delegated stakes queried by id.
           */
          async getStakesByIds(input) {
            input.stakedSuiIds.forEach(id => {
              if (!id || !(0, import_sui_types.isValidSuiObjectId)((0, import_sui_types.normalizeSuiObjectId)(id))) {
                throw new Error(`Invalid Sui Stake id ${id}`);
              }
            });
            return await this.transport.request({
              method: "suix_getStakesByIds",
              params: [input.stakedSuiIds]
            });
          }
          /**
           * Return the latest system state content.
           */
          async getLatestSuiSystemState() {
            return await this.transport.request({
              method: "suix_getLatestSuiSystemState",
              params: []
            });
          }
          /**
           * Get events for a given query criteria
           */
          async queryEvents(input) {
            return await this.transport.request({
              method: "suix_queryEvents",
              params: [input.query, input.cursor, input.limit, (input.order || "descending") === "descending"]
            });
          }
          /**
           * Subscribe to get notifications whenever an event matching the filter occurs
           */
          async subscribeEvent(input) {
            return this.transport.subscribe({
              method: "suix_subscribeEvent",
              unsubscribe: "suix_unsubscribeEvent",
              params: [input.filter],
              onMessage: input.onMessage
            });
          }
          async subscribeTransaction(input) {
            return this.transport.subscribe({
              method: "suix_subscribeTransaction",
              unsubscribe: "suix_unsubscribeTransaction",
              params: [input.filter],
              onMessage: input.onMessage
            });
          }
          /**
           * Runs the transaction block in dev-inspect mode. Which allows for nearly any
           * transaction (or Move call) with any arguments. Detailed results are
           * provided, including both the transaction effects and any return values.
           */
          async devInspectTransactionBlock(input) {
            let devInspectTxBytes;
            if ((0, import_transactions.isTransaction)(input.transactionBlock)) {
              input.transactionBlock.setSenderIfNotSet(input.sender);
              devInspectTxBytes = (0, import_bcs.toB64)(await input.transactionBlock.build({
                client: this,
                onlyTransactionKind: true
              }));
            } else if (typeof input.transactionBlock === "string") {
              devInspectTxBytes = input.transactionBlock;
            } else if (input.transactionBlock instanceof Uint8Array) {
              devInspectTxBytes = (0, import_bcs.toB64)(input.transactionBlock);
            } else {
              throw new Error("Unknown transaction block format.");
            }
            return await this.transport.request({
              method: "sui_devInspectTransactionBlock",
              params: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch]
            });
          }
          /**
           * Dry run a transaction block and return the result.
           */
          async dryRunTransactionBlock(input) {
            return await this.transport.request({
              method: "sui_dryRunTransactionBlock",
              params: [typeof input.transactionBlock === "string" ? input.transactionBlock : (0, import_bcs.toB64)(input.transactionBlock)]
            });
          }
          /**
           * Return the list of dynamic field objects owned by an object
           */
          async getDynamicFields(input) {
            if (!input.parentId || !(0, import_sui_types.isValidSuiObjectId)((0, import_sui_types.normalizeSuiObjectId)(input.parentId))) {
              throw new Error("Invalid Sui Object id");
            }
            return await this.transport.request({
              method: "suix_getDynamicFields",
              params: [input.parentId, input.cursor, input.limit]
            });
          }
          /**
           * Return the dynamic field object information for a specified object
           */
          async getDynamicFieldObject(input) {
            return await this.transport.request({
              method: "suix_getDynamicFieldObject",
              params: [input.parentId, input.name]
            });
          }
          /**
           * Get the sequence number of the latest checkpoint that has been executed
           */
          async getLatestCheckpointSequenceNumber() {
            const resp = await this.transport.request({
              method: "sui_getLatestCheckpointSequenceNumber",
              params: []
            });
            return String(resp);
          }
          /**
           * Returns information about a given checkpoint
           */
          async getCheckpoint(input) {
            return await this.transport.request({
              method: "sui_getCheckpoint",
              params: [input.id]
            });
          }
          /**
           * Returns historical checkpoints paginated
           */
          async getCheckpoints(input) {
            return await this.transport.request({
              method: "sui_getCheckpoints",
              params: [input.cursor, input?.limit, input.descendingOrder]
            });
          }
          /**
           * Return the committee information for the asked epoch
           */
          async getCommitteeInfo(input) {
            return await this.transport.request({
              method: "suix_getCommitteeInfo",
              params: [input?.epoch]
            });
          }
          async getNetworkMetrics() {
            return await this.transport.request({
              method: "suix_getNetworkMetrics",
              params: []
            });
          }
          async getAddressMetrics() {
            return await this.transport.request({
              method: "suix_getLatestAddressMetrics",
              params: []
            });
          }
          async getEpochMetrics(input) {
            return await this.transport.request({
              method: "suix_getEpochMetrics",
              params: [input?.cursor, input?.limit, input?.descendingOrder]
            });
          }
          async getAllEpochAddressMetrics(input) {
            return await this.transport.request({
              method: "suix_getAllEpochAddressMetrics",
              params: [input?.descendingOrder]
            });
          }
          /**
           * Return the committee information for the asked epoch
           */
          async getEpochs(input) {
            return await this.transport.request({
              method: "suix_getEpochs",
              params: [input?.cursor, input?.limit, input?.descendingOrder]
            });
          }
          /**
           * Returns list of top move calls by usage
           */
          async getMoveCallMetrics() {
            return await this.transport.request({
              method: "suix_getMoveCallMetrics",
              params: []
            });
          }
          /**
           * Return the committee information for the asked epoch
           */
          async getCurrentEpoch() {
            return await this.transport.request({
              method: "suix_getCurrentEpoch",
              params: []
            });
          }
          /**
           * Return the Validators APYs
           */
          async getValidatorsApy() {
            return await this.transport.request({
              method: "suix_getValidatorsApy",
              params: []
            });
          }
          // TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.
          async getChainIdentifier() {
            const checkpoint = await this.getCheckpoint({
              id: "0"
            });
            const bytes = (0, import_bcs.fromB58)(checkpoint.digest);
            return (0, import_bcs.toHEX)(bytes.slice(0, 4));
          }
          async resolveNameServiceAddress(input) {
            return await this.transport.request({
              method: "suix_resolveNameServiceAddress",
              params: [input.name]
            });
          }
          async resolveNameServiceNames({
            format = "dot",
            ...input
          }) {
            const {
              nextCursor,
              hasNextPage,
              data
            } = await this.transport.request({
              method: "suix_resolveNameServiceNames",
              params: [input.address, input.cursor, input.limit]
            });
            return {
              hasNextPage,
              nextCursor,
              data: data.map(name => (0, import_suins.normalizeSuiNSName)(name, format))
            };
          }
          async getProtocolConfig(input) {
            return await this.transport.request({
              method: "sui_getProtocolConfig",
              params: [input?.version]
            });
          }
          /**
           * Wait for a transaction block result to be available over the API.
           * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to
           * be available via the API.
           * This currently polls the `getTransactionBlock` API to check for the transaction.
           */
          async waitForTransaction({
            signal,
            timeout = 60 * 1e3,
            pollInterval = 2 * 1e3,
            ...input
          }) {
            const timeoutSignal = AbortSignal.timeout(timeout);
            const timeoutPromise = new Promise((_, reject) => {
              timeoutSignal.addEventListener("abort", () => reject(timeoutSignal.reason));
            });
            timeoutPromise.catch(() => {});
            while (!timeoutSignal.aborted) {
              signal?.throwIfAborted();
              try {
                return await this.getTransactionBlock(input);
              } catch (e) {
                await Promise.race([new Promise(resolve => setTimeout(resolve, pollInterval)), timeoutPromise]);
              }
            }
            timeoutSignal.throwIfAborted();
            throw new Error("Unexpected error while waiting for transaction block.");
          }
        }
      }, {
        "../transactions/index.js": 73,
        "../utils/sui-types.js": 82,
        "../utils/suins.js": 83,
        "./http-transport.js": 24,
        "@mysten/bcs": 13
      }],
      23: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var errors_exports = {};
        __export(errors_exports, {
          JsonRpcError: () => JsonRpcError,
          SuiHTTPStatusError: () => SuiHTTPStatusError,
          SuiHTTPTransportError: () => SuiHTTPTransportError
        });
        module.exports = __toCommonJS(errors_exports);
        const CODE_TO_ERROR_TYPE = {
          "-32700": "ParseError",
          "-32701": "OversizedRequest",
          "-32702": "OversizedResponse",
          "-32600": "InvalidRequest",
          "-32601": "MethodNotFound",
          "-32602": "InvalidParams",
          "-32603": "InternalError",
          "-32604": "ServerBusy",
          "-32000": "CallExecutionFailed",
          "-32001": "UnknownError",
          "-32003": "SubscriptionClosed",
          "-32004": "SubscriptionClosedWithError",
          "-32005": "BatchesNotSupported",
          "-32006": "TooManySubscriptions",
          "-32050": "TransientError",
          "-32002": "TransactionExecutionClientError"
        };
        class SuiHTTPTransportError extends Error {}
        class JsonRpcError extends SuiHTTPTransportError {
          constructor(message, code) {
            super(message);
            this.code = code;
            this.type = CODE_TO_ERROR_TYPE[code] ?? "ServerError";
          }
        }
        class SuiHTTPStatusError extends SuiHTTPTransportError {
          constructor(message, status, statusText) {
            super(message);
            this.status = status;
            this.statusText = statusText;
          }
        }
      }, {}],
      24: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var __privateMethod = (obj, member, method) => {
          __accessCheck(obj, member, "access private method");
          return method;
        };
        var http_transport_exports = {};
        __export(http_transport_exports, {
          SuiHTTPTransport: () => SuiHTTPTransport
        });
        module.exports = __toCommonJS(http_transport_exports);
        var import_version = require("../version.js");
        var import_errors = require("./errors.js");
        var import_rpc_websocket_client = require("./rpc-websocket-client.js");
        var _requestId, _options, _websocketClient, _getWebsocketClient, getWebsocketClient_fn;
        class SuiHTTPTransport {
          constructor(options) {
            __privateAdd(this, _getWebsocketClient);
            __privateAdd(this, _requestId, 0);
            __privateAdd(this, _options, void 0);
            __privateAdd(this, _websocketClient, void 0);
            __privateSet(this, _options, options);
          }
          fetch(input, init) {
            const fetchFn = __privateGet(this, _options).fetch ?? fetch;
            if (!fetchFn) {
              throw new Error("The current environment does not support fetch, you can provide a fetch implementation in the options for SuiHTTPTransport.");
            }
            return fetchFn(input, init);
          }
          async request(input) {
            __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);
            const res = await this.fetch(__privateGet(this, _options).rpc?.url ?? __privateGet(this, _options).url, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "Client-Sdk-Type": "typescript",
                "Client-Sdk-Version": import_version.PACKAGE_VERSION,
                "Client-Target-Api-Version": import_version.TARGETED_RPC_VERSION,
                ...__privateGet(this, _options).rpc?.headers
              },
              body: JSON.stringify({
                jsonrpc: "2.0",
                id: __privateGet(this, _requestId),
                method: input.method,
                params: input.params
              })
            });
            if (!res.ok) {
              throw new import_errors.SuiHTTPStatusError(`Unexpected status code: ${res.status}`, res.status, res.statusText);
            }
            const data = await res.json();
            if ("error" in data && data.error != null) {
              throw new import_errors.JsonRpcError(data.error.message, data.error.code);
            }
            return data.result;
          }
          async subscribe(input) {
            const unsubscribe = await __privateMethod(this, _getWebsocketClient, getWebsocketClient_fn).call(this).subscribe(input);
            return async () => !!(await unsubscribe());
          }
        }
        _requestId = new WeakMap();
        _options = new WeakMap();
        _websocketClient = new WeakMap();
        _getWebsocketClient = new WeakSet();
        getWebsocketClient_fn = function () {
          if (!__privateGet(this, _websocketClient)) {
            const WebSocketConstructor = __privateGet(this, _options).WebSocketConstructor ?? WebSocket;
            if (!WebSocketConstructor) {
              throw new Error("The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for SuiHTTPTransport.");
            }
            __privateSet(this, _websocketClient, new import_rpc_websocket_client.WebsocketClient(__privateGet(this, _options).websocket?.url ?? __privateGet(this, _options).url, {
              WebSocketConstructor,
              ...__privateGet(this, _options).websocket
            }));
          }
          return __privateGet(this, _websocketClient);
        };
      }, {
        "../version.js": 86,
        "./errors.js": 23,
        "./rpc-websocket-client.js": 27
      }],
      25: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var client_exports = {};
        __export(client_exports, {
          JsonRpcError: () => import_errors.JsonRpcError,
          SuiClient: () => import_client.SuiClient,
          SuiHTTPStatusError: () => import_errors.SuiHTTPStatusError,
          SuiHTTPTransport: () => import_http_transport.SuiHTTPTransport,
          SuiHTTPTransportError: () => import_errors.SuiHTTPTransportError,
          getFullnodeUrl: () => import_network.getFullnodeUrl,
          isSuiClient: () => import_client.isSuiClient
        });
        module.exports = __toCommonJS(client_exports);
        var import_http_transport = require("./http-transport.js");
        var import_network = require("./network.js");
        __reExport(client_exports, require("./types/index.js"), module.exports);
        var import_client = require("./client.js");
        var import_errors = require("./errors.js");
      }, {
        "./client.js": 22,
        "./errors.js": 23,
        "./http-transport.js": 24,
        "./network.js": 26,
        "./types/index.js": 33
      }],
      26: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var network_exports = {};
        __export(network_exports, {
          getFullnodeUrl: () => getFullnodeUrl
        });
        module.exports = __toCommonJS(network_exports);
        function getFullnodeUrl(network) {
          switch (network) {
            case "mainnet":
              return "https://fullnode.mainnet.sui.io:443";
            case "testnet":
              return "https://fullnode.testnet.sui.io:443";
            case "devnet":
              return "https://fullnode.devnet.sui.io:443";
            case "localnet":
              return "http://127.0.0.1:9000";
            default:
              throw new Error(`Unknown network: ${network}`);
          }
        }
      }, {}],
      27: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var __privateWrapper = (obj, member, setter, getter) => ({
          set _(value) {
            __privateSet(obj, member, value, setter);
          },
          get _() {
            return __privateGet(obj, member, getter);
          }
        });
        var __privateMethod = (obj, member, method) => {
          __accessCheck(obj, member, "access private method");
          return method;
        };
        var rpc_websocket_client_exports = {};
        __export(rpc_websocket_client_exports, {
          DEFAULT_CLIENT_OPTIONS: () => DEFAULT_CLIENT_OPTIONS,
          WebsocketClient: () => WebsocketClient
        });
        module.exports = __toCommonJS(rpc_websocket_client_exports);
        var import_errors = require("./errors.js");
        var _requestId, _disconnects, _webSocket, _connectionPromise, _subscriptions, _pendingRequests, _setupWebSocket, setupWebSocket_fn, _reconnect, reconnect_fn;
        function getWebsocketUrl(httpUrl) {
          const url = new URL(httpUrl);
          url.protocol = url.protocol.replace("http", "ws");
          return url.toString();
        }
        const DEFAULT_CLIENT_OPTIONS = {
          // We fudge the typing because we also check for undefined in the constructor:
          WebSocketConstructor: typeof WebSocket !== "undefined" ? WebSocket : void 0,
          callTimeout: 3e4,
          reconnectTimeout: 3e3,
          maxReconnects: 5
        };
        class WebsocketClient {
          constructor(endpoint, options = {}) {
            __privateAdd(this, _setupWebSocket);
            __privateAdd(this, _reconnect);
            __privateAdd(this, _requestId, 0);
            __privateAdd(this, _disconnects, 0);
            __privateAdd(this, _webSocket, null);
            __privateAdd(this, _connectionPromise, null);
            __privateAdd(this, _subscriptions, /* @__PURE__ */new Set());
            __privateAdd(this, _pendingRequests, /* @__PURE__ */new Map());
            this.endpoint = endpoint;
            this.options = {
              ...DEFAULT_CLIENT_OPTIONS,
              ...options
            };
            if (!this.options.WebSocketConstructor) {
              throw new Error("Missing WebSocket constructor");
            }
            if (this.endpoint.startsWith("http")) {
              this.endpoint = getWebsocketUrl(this.endpoint);
            }
          }
          async makeRequest(method, params) {
            const webSocket = await __privateMethod(this, _setupWebSocket, setupWebSocket_fn).call(this);
            return new Promise((resolve, reject) => {
              __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);
              __privateGet(this, _pendingRequests).set(__privateGet(this, _requestId), {
                resolve,
                reject,
                timeout: setTimeout(() => {
                  __privateGet(this, _pendingRequests).delete(__privateGet(this, _requestId));
                  reject(new Error(`Request timeout: ${method}`));
                }, this.options.callTimeout)
              });
              webSocket.send(JSON.stringify({
                jsonrpc: "2.0",
                id: __privateGet(this, _requestId),
                method,
                params
              }));
            }).then(({
              error,
              result
            }) => {
              if (error) {
                throw new import_errors.JsonRpcError(error.message, error.code);
              }
              return result;
            });
          }
          async subscribe(input) {
            const subscription = new RpcSubscription(input);
            __privateGet(this, _subscriptions).add(subscription);
            await subscription.subscribe(this);
            return () => subscription.unsubscribe(this);
          }
        }
        _requestId = new WeakMap();
        _disconnects = new WeakMap();
        _webSocket = new WeakMap();
        _connectionPromise = new WeakMap();
        _subscriptions = new WeakMap();
        _pendingRequests = new WeakMap();
        _setupWebSocket = new WeakSet();
        setupWebSocket_fn = function () {
          if (__privateGet(this, _connectionPromise)) {
            return __privateGet(this, _connectionPromise);
          }
          __privateSet(this, _connectionPromise, new Promise(resolve => {
            __privateGet(this, _webSocket)?.close();
            __privateSet(this, _webSocket, new this.options.WebSocketConstructor(this.endpoint));
            __privateGet(this, _webSocket).addEventListener("open", () => {
              __privateSet(this, _disconnects, 0);
              resolve(__privateGet(this, _webSocket));
            });
            __privateGet(this, _webSocket).addEventListener("close", () => {
              __privateWrapper(this, _disconnects)._++;
              if (__privateGet(this, _disconnects) <= this.options.maxReconnects) {
                setTimeout(() => {
                  __privateMethod(this, _reconnect, reconnect_fn).call(this);
                }, this.options.reconnectTimeout);
              }
            });
            __privateGet(this, _webSocket).addEventListener("message", ({
              data
            }) => {
              let json;
              try {
                json = JSON.parse(data);
              } catch (error) {
                console.error(new Error(`Failed to parse RPC message: ${data}`, {
                  cause: error
                }));
                return;
              }
              if ("id" in json && json.id != null && __privateGet(this, _pendingRequests).has(json.id)) {
                const {
                  resolve: resolve2,
                  timeout
                } = __privateGet(this, _pendingRequests).get(json.id);
                clearTimeout(timeout);
                resolve2(json);
              } else if ("params" in json) {
                const {
                  params
                } = json;
                __privateGet(this, _subscriptions).forEach(subscription => {
                  if (subscription.subscriptionId === params.subscription) {
                    if (params.subscription === subscription.subscriptionId) {
                      subscription.onMessage(params.result);
                    }
                  }
                });
              }
            });
          }));
          return __privateGet(this, _connectionPromise);
        };
        _reconnect = new WeakSet();
        reconnect_fn = async function () {
          __privateGet(this, _webSocket)?.close();
          __privateSet(this, _connectionPromise, null);
          return Promise.allSettled([...__privateGet(this, _subscriptions)].map(subscription => subscription.subscribe(this)));
        };
        class RpcSubscription {
          constructor(input) {
            this.subscriptionId = null;
            this.subscribed = false;
            this.input = input;
          }
          onMessage(message) {
            if (this.subscribed) {
              this.input.onMessage(message);
            }
          }
          async unsubscribe(client) {
            const {
              subscriptionId
            } = this;
            this.subscribed = false;
            if (subscriptionId == null) return false;
            this.subscriptionId = null;
            return client.makeRequest(this.input.unsubscribe, [subscriptionId]);
          }
          async subscribe(client) {
            this.subscriptionId = null;
            this.subscribed = true;
            const newSubscriptionId = await client.makeRequest(this.input.method, this.input.params);
            if (this.subscribed) {
              this.subscriptionId = newSubscriptionId;
            }
          }
        }
      }, {
        "./errors.js": 23
      }],
      28: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var chain_exports = {};
        module.exports = __toCommonJS(chain_exports);
      }, {}],
      29: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var changes_exports = {};
        module.exports = __toCommonJS(changes_exports);
      }, {}],
      30: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var coins_exports = {};
        module.exports = __toCommonJS(coins_exports);
      }, {}],
      31: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var common_exports = {};
        module.exports = __toCommonJS(common_exports);
      }, {}],
      32: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var generated_exports = {};
        module.exports = __toCommonJS(generated_exports);
      }, {}],
      33: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var types_exports = {};
        module.exports = __toCommonJS(types_exports);
        __reExport(types_exports, require("./chain.js"), module.exports);
        __reExport(types_exports, require("./coins.js"), module.exports);
        __reExport(types_exports, require("./common.js"), module.exports);
        __reExport(types_exports, require("./changes.js"), module.exports);
        __reExport(types_exports, require("./generated.js"), module.exports);
        __reExport(types_exports, require("./params.js"), module.exports);
      }, {
        "./chain.js": 28,
        "./changes.js": 29,
        "./coins.js": 30,
        "./common.js": 31,
        "./generated.js": 32,
        "./params.js": 34
      }],
      34: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var params_exports = {};
        module.exports = __toCommonJS(params_exports);
      }, {}],
      35: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var cryptography_exports = {};
        __export(cryptography_exports, {
          Keypair: () => import_keypair.Keypair,
          LEGACY_PRIVATE_KEY_SIZE: () => import_keypair.LEGACY_PRIVATE_KEY_SIZE,
          PRIVATE_KEY_SIZE: () => import_keypair.PRIVATE_KEY_SIZE,
          PublicKey: () => import_publickey.PublicKey,
          SIGNATURE_FLAG_TO_SCHEME: () => import_signature_scheme.SIGNATURE_FLAG_TO_SCHEME,
          SIGNATURE_SCHEME_TO_FLAG: () => import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG,
          SIGNATURE_SCHEME_TO_SIZE: () => import_signature_scheme.SIGNATURE_SCHEME_TO_SIZE,
          SUI_PRIVATE_KEY_PREFIX: () => import_keypair.SUI_PRIVATE_KEY_PREFIX,
          Signer: () => import_keypair.Signer,
          decodeSuiPrivateKey: () => import_keypair.decodeSuiPrivateKey,
          encodeSuiPrivateKey: () => import_keypair.encodeSuiPrivateKey,
          isValidBIP32Path: () => import_mnemonics.isValidBIP32Path,
          isValidHardenedPath: () => import_mnemonics.isValidHardenedPath,
          messageWithIntent: () => import_intent.messageWithIntent,
          mnemonicToSeed: () => import_mnemonics.mnemonicToSeed,
          mnemonicToSeedHex: () => import_mnemonics.mnemonicToSeedHex,
          parseSerializedSignature: () => import_signature.parseSerializedSignature,
          toSerializedSignature: () => import_signature.toSerializedSignature
        });
        module.exports = __toCommonJS(cryptography_exports);
        var import_signature = require("./signature.js");
        var import_signature_scheme = require("./signature-scheme.js");
        var import_mnemonics = require("./mnemonics.js");
        var import_intent = require("./intent.js");
        var import_keypair = require("./keypair.js");
        var import_publickey = require("./publickey.js");
      }, {
        "./intent.js": 36,
        "./keypair.js": 37,
        "./mnemonics.js": 38,
        "./publickey.js": 39,
        "./signature-scheme.js": 40,
        "./signature.js": 41
      }],
      36: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var intent_exports = {};
        __export(intent_exports, {
          messageWithIntent: () => messageWithIntent
        });
        module.exports = __toCommonJS(intent_exports);
        var import_bcs = require("../bcs/index.js");
        function messageWithIntent(scope, message) {
          return import_bcs.bcs.IntentMessage(import_bcs.bcs.fixedArray(message.length, import_bcs.bcs.u8())).serialize({
            intent: {
              scope: {
                [scope]: true
              },
              version: {
                V0: true
              },
              appId: {
                Sui: true
              }
            },
            value: message
          }).toBytes();
        }
      }, {
        "../bcs/index.js": 20
      }],
      37: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var keypair_exports = {};
        __export(keypair_exports, {
          Keypair: () => Keypair,
          LEGACY_PRIVATE_KEY_SIZE: () => LEGACY_PRIVATE_KEY_SIZE,
          PRIVATE_KEY_SIZE: () => PRIVATE_KEY_SIZE,
          SUI_PRIVATE_KEY_PREFIX: () => SUI_PRIVATE_KEY_PREFIX,
          Signer: () => Signer,
          decodeSuiPrivateKey: () => decodeSuiPrivateKey,
          encodeSuiPrivateKey: () => encodeSuiPrivateKey
        });
        module.exports = __toCommonJS(keypair_exports);
        var import_bcs = require("@mysten/bcs");
        var import_blake2b = require("@noble/hashes/blake2b");
        var import_bech32 = require("bech32");
        var import_intent = require("./intent.js");
        var import_signature_scheme = require("./signature-scheme.js");
        var import_signature = require("./signature.js");
        const PRIVATE_KEY_SIZE = 32;
        const LEGACY_PRIVATE_KEY_SIZE = 64;
        const SUI_PRIVATE_KEY_PREFIX = "suiprivkey";
        class Signer {
          /**
           * Sign messages with a specific intent. By combining the message bytes with the intent before hashing and signing,
           * it ensures that a signed message is tied to a specific purpose and domain separator is provided
           */
          async signWithIntent(bytes, intent) {
            const intentMessage = (0, import_intent.messageWithIntent)(intent, bytes);
            const digest = (0, import_blake2b.blake2b)(intentMessage, {
              dkLen: 32
            });
            const signature = (0, import_signature.toSerializedSignature)({
              signature: await this.sign(digest),
              signatureScheme: this.getKeyScheme(),
              publicKey: this.getPublicKey()
            });
            return {
              signature,
              bytes: (0, import_bcs.toB64)(bytes)
            };
          }
          /**
           * Signs provided transaction by calling `signWithIntent()` with a `TransactionData` provided as intent scope
           */
          async signTransaction(bytes) {
            return this.signWithIntent(bytes, "TransactionData");
          }
          /**
           * Signs provided personal message by calling `signWithIntent()` with a `PersonalMessage` provided as intent scope
           */
          async signPersonalMessage(bytes) {
            const {
              signature
            } = await this.signWithIntent(import_bcs.bcs.vector(import_bcs.bcs.u8()).serialize(bytes).toBytes(), "PersonalMessage");
            return {
              bytes: (0, import_bcs.toB64)(bytes),
              signature
            };
          }
          toSuiAddress() {
            return this.getPublicKey().toSuiAddress();
          }
        }
        class Keypair extends Signer {}
        function decodeSuiPrivateKey(value) {
          const {
            prefix,
            words
          } = import_bech32.bech32.decode(value);
          if (prefix !== SUI_PRIVATE_KEY_PREFIX) {
            throw new Error("invalid private key prefix");
          }
          const extendedSecretKey = new Uint8Array(import_bech32.bech32.fromWords(words));
          const secretKey = extendedSecretKey.slice(1);
          const signatureScheme = import_signature_scheme.SIGNATURE_FLAG_TO_SCHEME[extendedSecretKey[0]];
          return {
            schema: signatureScheme,
            secretKey
          };
        }
        function encodeSuiPrivateKey(bytes, scheme) {
          if (bytes.length !== PRIVATE_KEY_SIZE) {
            throw new Error("Invalid bytes length");
          }
          const flag = import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG[scheme];
          const privKeyBytes = new Uint8Array(bytes.length + 1);
          privKeyBytes.set([flag]);
          privKeyBytes.set(bytes, 1);
          return import_bech32.bech32.encode(SUI_PRIVATE_KEY_PREFIX, import_bech32.bech32.toWords(privKeyBytes));
        }
      }, {
        "./intent.js": 36,
        "./signature-scheme.js": 40,
        "./signature.js": 41,
        "@mysten/bcs": 13,
        "@noble/hashes/blake2b": 110,
        "bech32": 131
      }],
      38: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var mnemonics_exports = {};
        __export(mnemonics_exports, {
          isValidBIP32Path: () => isValidBIP32Path,
          isValidHardenedPath: () => isValidHardenedPath,
          mnemonicToSeed: () => mnemonicToSeed,
          mnemonicToSeedHex: () => mnemonicToSeedHex
        });
        module.exports = __toCommonJS(mnemonics_exports);
        var import_bcs = require("@mysten/bcs");
        var import_bip39 = require("@scure/bip39");
        function isValidHardenedPath(path) {
          if (!new RegExp("^m\\/44'\\/784'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'+$").test(path)) {
            return false;
          }
          return true;
        }
        function isValidBIP32Path(path) {
          if (!new RegExp("^m\\/(54|74)'\\/784'\\/[0-9]+'\\/[0-9]+\\/[0-9]+$").test(path)) {
            return false;
          }
          return true;
        }
        function mnemonicToSeed(mnemonics) {
          return (0, import_bip39.mnemonicToSeedSync)(mnemonics, "");
        }
        function mnemonicToSeedHex(mnemonics) {
          return (0, import_bcs.toHEX)(mnemonicToSeed(mnemonics));
        }
      }, {
        "@mysten/bcs": 13,
        "@scure/bip39": 128
      }],
      39: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var publickey_exports = {};
        __export(publickey_exports, {
          PublicKey: () => PublicKey,
          bytesEqual: () => bytesEqual
        });
        module.exports = __toCommonJS(publickey_exports);
        var import_bcs = require("@mysten/bcs");
        var import_blake2b = require("@noble/hashes/blake2b");
        var import_utils = require("@noble/hashes/utils");
        var import_bcs2 = require("../bcs/index.js");
        var import_sui_types = require("../utils/sui-types.js");
        var import_intent = require("./intent.js");
        function bytesEqual(a, b) {
          if (a === b) return true;
          if (a.length !== b.length) {
            return false;
          }
          for (let i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
              return false;
            }
          }
          return true;
        }
        class PublicKey {
          /**
           * Checks if two public keys are equal
           */
          equals(publicKey) {
            return bytesEqual(this.toRawBytes(), publicKey.toRawBytes());
          }
          /**
           * Return the base-64 representation of the public key
           */
          toBase64() {
            return (0, import_bcs.toB64)(this.toRawBytes());
          }
          toString() {
            throw new Error("`toString` is not implemented on public keys. Use `toBase64()` or `toRawBytes()` instead.");
          }
          /**
           * Return the Sui representation of the public key encoded in
           * base-64. A Sui public key is formed by the concatenation
           * of the scheme flag with the raw bytes of the public key
           */
          toSuiPublicKey() {
            const bytes = this.toSuiBytes();
            return (0, import_bcs.toB64)(bytes);
          }
          verifyWithIntent(bytes, signature, intent) {
            const intentMessage = (0, import_intent.messageWithIntent)(intent, bytes);
            const digest = (0, import_blake2b.blake2b)(intentMessage, {
              dkLen: 32
            });
            return this.verify(digest, signature);
          }
          /**
           * Verifies that the signature is valid for for the provided PersonalMessage
           */
          verifyPersonalMessage(message, signature) {
            return this.verifyWithIntent(import_bcs2.bcs.vector(import_bcs2.bcs.u8()).serialize(message).toBytes(), signature, "PersonalMessage");
          }
          /**
           * Verifies that the signature is valid for for the provided Transaction
           */
          verifyTransaction(transaction, signature) {
            return this.verifyWithIntent(transaction, signature, "TransactionData");
          }
          /**
           * Returns the bytes representation of the public key
           * prefixed with the signature scheme flag
           */
          toSuiBytes() {
            const rawBytes = this.toRawBytes();
            const suiBytes = new Uint8Array(rawBytes.length + 1);
            suiBytes.set([this.flag()]);
            suiBytes.set(rawBytes, 1);
            return suiBytes;
          }
          /**
           * Return the Sui address associated with this Ed25519 public key
           */
          toSuiAddress() {
            return (0, import_sui_types.normalizeSuiAddress)((0, import_utils.bytesToHex)((0, import_blake2b.blake2b)(this.toSuiBytes(), {
              dkLen: 32
            })).slice(0, import_sui_types.SUI_ADDRESS_LENGTH * 2));
          }
        }
      }, {
        "../bcs/index.js": 20,
        "../utils/sui-types.js": 82,
        "./intent.js": 36,
        "@mysten/bcs": 13,
        "@noble/hashes/blake2b": 110,
        "@noble/hashes/utils": 116
      }],
      40: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var signature_scheme_exports = {};
        __export(signature_scheme_exports, {
          SIGNATURE_FLAG_TO_SCHEME: () => SIGNATURE_FLAG_TO_SCHEME,
          SIGNATURE_SCHEME_TO_FLAG: () => SIGNATURE_SCHEME_TO_FLAG,
          SIGNATURE_SCHEME_TO_SIZE: () => SIGNATURE_SCHEME_TO_SIZE
        });
        module.exports = __toCommonJS(signature_scheme_exports);
        const SIGNATURE_SCHEME_TO_FLAG = {
          ED25519: 0,
          Secp256k1: 1,
          Secp256r1: 2,
          MultiSig: 3,
          ZkLogin: 5
        };
        const SIGNATURE_SCHEME_TO_SIZE = {
          ED25519: 32,
          Secp256k1: 33,
          Secp256r1: 33
        };
        const SIGNATURE_FLAG_TO_SCHEME = {
          0: "ED25519",
          1: "Secp256k1",
          2: "Secp256r1",
          3: "MultiSig",
          5: "ZkLogin"
        };
      }, {}],
      41: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var signature_exports = {};
        __export(signature_exports, {
          parseSerializedSignature: () => parseSerializedSignature,
          toSerializedSignature: () => toSerializedSignature
        });
        module.exports = __toCommonJS(signature_exports);
        var import_bcs = require("@mysten/bcs");
        var import_bcs2 = require("../bcs/index.js");
        var import_publickey = require("../zklogin/publickey.js");
        var import_signature_scheme = require("./signature-scheme.js");
        function toSerializedSignature({
          signature,
          signatureScheme,
          publicKey
        }) {
          if (!publicKey) {
            throw new Error("`publicKey` is required");
          }
          const pubKeyBytes = publicKey.toRawBytes();
          const serializedSignature = new Uint8Array(1 + signature.length + pubKeyBytes.length);
          serializedSignature.set([import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);
          serializedSignature.set(signature, 1);
          serializedSignature.set(pubKeyBytes, 1 + signature.length);
          return (0, import_bcs.toB64)(serializedSignature);
        }
        function parseSerializedSignature(serializedSignature) {
          const bytes = (0, import_bcs.fromB64)(serializedSignature);
          const signatureScheme = import_signature_scheme.SIGNATURE_FLAG_TO_SCHEME[bytes[0]];
          switch (signatureScheme) {
            case "MultiSig":
              const multisig = import_bcs2.bcs.MultiSig.parse(bytes.slice(1));
              return {
                serializedSignature,
                signatureScheme,
                multisig,
                bytes
              };
            case "ZkLogin":
              return (0, import_publickey.parseSerializedZkLoginSignature)(serializedSignature);
            case "ED25519":
            case "Secp256k1":
            case "Secp256r1":
              const size = import_signature_scheme.SIGNATURE_SCHEME_TO_SIZE[signatureScheme];
              const signature = bytes.slice(1, bytes.length - size);
              const publicKey = bytes.slice(1 + signature.length);
              return {
                serializedSignature,
                signatureScheme,
                signature,
                publicKey,
                bytes
              };
            default:
              throw new Error("Unsupported signature scheme");
          }
        }
      }, {
        "../bcs/index.js": 20,
        "../zklogin/publickey.js": 89,
        "./signature-scheme.js": 40,
        "@mysten/bcs": 13
      }],
      42: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var faucet_exports = {};
        __export(faucet_exports, {
          FaucetRateLimitError: () => FaucetRateLimitError,
          getFaucetHost: () => getFaucetHost,
          getFaucetRequestStatus: () => getFaucetRequestStatus,
          requestSuiFromFaucetV0: () => requestSuiFromFaucetV0,
          requestSuiFromFaucetV1: () => requestSuiFromFaucetV1
        });
        module.exports = __toCommonJS(faucet_exports);
        class FaucetRateLimitError extends Error {}
        async function faucetRequest({
          host,
          path,
          body,
          headers,
          method
        }) {
          const endpoint = new URL(path, host).toString();
          const res = await fetch(endpoint, {
            method,
            body: body ? JSON.stringify(body) : void 0,
            headers: {
              "Content-Type": "application/json",
              ...(headers || {})
            }
          });
          if (res.status === 429) {
            throw new FaucetRateLimitError(`Too many requests from this client have been sent to the faucet. Please retry later`);
          }
          try {
            const parsed = await res.json();
            if (parsed.error) {
              throw new Error(`Faucet returns error: ${parsed.error}`);
            }
            return parsed;
          } catch (e) {
            throw new Error(`Encountered error when parsing response from faucet, error: ${e}, status ${res.status}, response ${res}`);
          }
        }
        async function requestSuiFromFaucetV0(input) {
          return faucetRequest({
            host: input.host,
            path: "/gas",
            body: {
              FixedAmountRequest: {
                recipient: input.recipient
              }
            },
            headers: input.headers,
            method: "POST"
          });
        }
        async function requestSuiFromFaucetV1(input) {
          return faucetRequest({
            host: input.host,
            path: "/v1/gas",
            body: {
              FixedAmountRequest: {
                recipient: input.recipient
              }
            },
            headers: input.headers,
            method: "POST"
          });
        }
        async function getFaucetRequestStatus(input) {
          return faucetRequest({
            host: input.host,
            path: `/v1/status/${input.taskId}`,
            headers: input.headers,
            method: "GET"
          });
        }
        function getFaucetHost(network) {
          switch (network) {
            case "testnet":
              return "https://faucet.testnet.sui.io";
            case "devnet":
              return "https://faucet.devnet.sui.io";
            case "localnet":
              return "http://127.0.0.1:9123";
            default:
              throw new Error(`Unknown network: ${network}`);
          }
        }
      }, {}],
      43: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var faucet_exports = {};
        __export(faucet_exports, {
          FaucetRateLimitError: () => import_faucet.FaucetRateLimitError,
          getFaucetHost: () => import_faucet.getFaucetHost,
          getFaucetRequestStatus: () => import_faucet.getFaucetRequestStatus,
          requestSuiFromFaucetV0: () => import_faucet.requestSuiFromFaucetV0,
          requestSuiFromFaucetV1: () => import_faucet.requestSuiFromFaucetV1
        });
        module.exports = __toCommonJS(faucet_exports);
        var import_faucet = require("./faucet.js");
      }, {
        "./faucet.js": 42
      }],
      44: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var client_exports = {};
        __export(client_exports, {
          SuiGraphQLClient: () => SuiGraphQLClient,
          SuiGraphQLRequestError: () => SuiGraphQLRequestError
        });
        module.exports = __toCommonJS(client_exports);
        var import_graphql = require("graphql");
        var _url, _queries, _headers, _fetch;
        class SuiGraphQLRequestError extends Error {}
        class SuiGraphQLClient {
          constructor({
            url,
            fetch: fetchFn = fetch,
            headers = {},
            queries = {}
          }) {
            __privateAdd(this, _url, void 0);
            __privateAdd(this, _queries, void 0);
            __privateAdd(this, _headers, void 0);
            __privateAdd(this, _fetch, void 0);
            __privateSet(this, _url, url);
            __privateSet(this, _queries, queries);
            __privateSet(this, _headers, headers);
            __privateSet(this, _fetch, (...args) => fetchFn(...args));
          }
          async query(options) {
            const res = await __privateGet(this, _fetch).call(this, __privateGet(this, _url), {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                ...__privateGet(this, _headers)
              },
              body: JSON.stringify({
                query: typeof options.query === "string" ? String(options.query) : (0, import_graphql.print)(options.query),
                variables: options.variables,
                extensions: options.extensions,
                operationName: options.operationName
              })
            });
            if (!res.ok) {
              throw new SuiGraphQLRequestError(`GraphQL request failed: ${res.statusText} (${res.status})`);
            }
            return await res.json();
          }
          async execute(query, options) {
            return this.query({
              ...options,
              query: __privateGet(this, _queries)[query]
            });
          }
        }
        _url = new WeakMap();
        _queries = new WeakMap();
        _headers = new WeakMap();
        _fetch = new WeakMap();
      }, {
        "graphql": 147
      }],
      45: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __exports = {};
        __export(__exports, {
          graphql: () => graphql,
          maskFragments: () => import_gql2.maskFragments,
          readFragment: () => import_gql2.readFragment
        });
        module.exports = __toCommonJS(__exports);
        var import_gql = require("gql.tada");
        __reExport(__exports, require("../../types.js"), module.exports);
        var import_gql2 = require("gql.tada");
        const graphql = (0, import_gql.initGraphQLTada)();
      }, {
        "../../types.js": 46,
        "gql.tada": 135
      }],
      46: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var types_exports = {};
        module.exports = __toCommonJS(types_exports);
      }, {}],
      47: [function (require, module, exports) {
        "use strict";

        var __create = Object.create;
        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __getProtoOf = Object.getPrototypeOf;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
        // If the importer is in node compatibility mode or this is not an ESM
        // file that has been converted to a CommonJS file using a Babel-
        // compatible transform (i.e. "__esModule" has not been set), then set
        // "default" to the CommonJS "module.exports" for node compatibility.
        isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
          value: mod,
          enumerable: true
        }) : target, mod));
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var ed25519_hd_key_exports = {};
        __export(ed25519_hd_key_exports, {
          derivePath: () => derivePath,
          getMasterKeyFromSeed: () => getMasterKeyFromSeed,
          getPublicKey: () => getPublicKey,
          isValidPath: () => isValidPath,
          pathRegex: () => pathRegex,
          replaceDerive: () => replaceDerive
        });
        module.exports = __toCommonJS(ed25519_hd_key_exports);
        var import_bcs = require("@mysten/bcs");
        var import_hmac = require("@noble/hashes/hmac");
        var import_sha512 = require("@noble/hashes/sha512");
        var import_tweetnacl = __toESM(require("tweetnacl"));
        const ED25519_CURVE = "ed25519 seed";
        const HARDENED_OFFSET = 2147483648;
        const pathRegex = new RegExp("^m(\\/[0-9]+')+$");
        const replaceDerive = val => val.replace("'", "");
        const getMasterKeyFromSeed = seed => {
          const h = import_hmac.hmac.create(import_sha512.sha512, ED25519_CURVE);
          const I = h.update((0, import_bcs.fromHEX)(seed)).digest();
          const IL = I.slice(0, 32);
          const IR = I.slice(32);
          return {
            key: IL,
            chainCode: IR
          };
        };
        const CKDPriv = ({
          key,
          chainCode
        }, index) => {
          const indexBuffer = new ArrayBuffer(4);
          const cv = new DataView(indexBuffer);
          cv.setUint32(0, index);
          const data = new Uint8Array(1 + key.length + indexBuffer.byteLength);
          data.set(new Uint8Array(1).fill(0));
          data.set(key, 1);
          data.set(new Uint8Array(indexBuffer, 0, indexBuffer.byteLength), key.length + 1);
          const I = import_hmac.hmac.create(import_sha512.sha512, chainCode).update(data).digest();
          const IL = I.slice(0, 32);
          const IR = I.slice(32);
          return {
            key: IL,
            chainCode: IR
          };
        };
        const getPublicKey = (privateKey, withZeroByte = true) => {
          const keyPair = import_tweetnacl.default.sign.keyPair.fromSeed(privateKey);
          const signPk = keyPair.secretKey.subarray(32);
          const newArr = new Uint8Array(signPk.length + 1);
          newArr.set([0]);
          newArr.set(signPk, 1);
          return withZeroByte ? newArr : signPk;
        };
        const isValidPath = path => {
          if (!pathRegex.test(path)) {
            return false;
          }
          return !path.split("/").slice(1).map(replaceDerive).some(isNaN
          /* ts T_T*/);
        };

        const derivePath = (path, seed, offset = HARDENED_OFFSET) => {
          if (!isValidPath(path)) {
            throw new Error("Invalid derivation path");
          }
          const {
            key,
            chainCode
          } = getMasterKeyFromSeed(seed);
          const segments = path.split("/").slice(1).map(replaceDerive).map(el => parseInt(el, 10));
          return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {
            key,
            chainCode
          });
        };
      }, {
        "@mysten/bcs": 13,
        "@noble/hashes/hmac": 112,
        "@noble/hashes/sha512": 115,
        "tweetnacl": 284
      }],
      48: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var ed25519_exports = {};
        __export(ed25519_exports, {
          DEFAULT_ED25519_DERIVATION_PATH: () => import_keypair.DEFAULT_ED25519_DERIVATION_PATH,
          Ed25519Keypair: () => import_keypair.Ed25519Keypair,
          Ed25519PublicKey: () => import_publickey.Ed25519PublicKey
        });
        module.exports = __toCommonJS(ed25519_exports);
        var import_keypair = require("./keypair.js");
        var import_publickey = require("./publickey.js");
      }, {
        "./keypair.js": 49,
        "./publickey.js": 50
      }],
      49: [function (require, module, exports) {
        "use strict";

        var __create = Object.create;
        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __getProtoOf = Object.getPrototypeOf;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
        // If the importer is in node compatibility mode or this is not an ESM
        // file that has been converted to a CommonJS file using a Babel-
        // compatible transform (i.e. "__esModule" has not been set), then set
        // "default" to the CommonJS "module.exports" for node compatibility.
        isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
          value: mod,
          enumerable: true
        }) : target, mod));
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var keypair_exports = {};
        __export(keypair_exports, {
          DEFAULT_ED25519_DERIVATION_PATH: () => DEFAULT_ED25519_DERIVATION_PATH,
          Ed25519Keypair: () => Ed25519Keypair
        });
        module.exports = __toCommonJS(keypair_exports);
        var import_tweetnacl = __toESM(require("tweetnacl"));
        var import_keypair = require("../../cryptography/keypair.js");
        var import_mnemonics = require("../../cryptography/mnemonics.js");
        var import_ed25519_hd_key = require("./ed25519-hd-key.js");
        var import_publickey = require("./publickey.js");
        const DEFAULT_ED25519_DERIVATION_PATH = "m/44'/784'/0'/0'/0'";
        class Ed25519Keypair extends import_keypair.Keypair {
          /**
           * Create a new Ed25519 keypair instance.
           * Generate random keypair if no {@link Ed25519Keypair} is provided.
           *
           * @param keypair Ed25519 keypair
           */
          constructor(keypair) {
            super();
            if (keypair) {
              this.keypair = keypair;
            } else {
              this.keypair = import_tweetnacl.default.sign.keyPair();
            }
          }
          /**
           * Get the key scheme of the keypair ED25519
           */
          getKeyScheme() {
            return "ED25519";
          }
          /**
           * Generate a new random Ed25519 keypair
           */
          static generate() {
            return new Ed25519Keypair(import_tweetnacl.default.sign.keyPair());
          }
          /**
           * Create a Ed25519 keypair from a raw secret key byte array, also known as seed.
           * This is NOT the private scalar which is result of hashing and bit clamping of
           * the raw secret key.
           *
           * @throws error if the provided secret key is invalid and validation is not skipped.
           *
           * @param secretKey secret key byte array
           * @param options: skip secret key validation
           */
          static fromSecretKey(secretKey, options) {
            const secretKeyLength = secretKey.length;
            if (secretKeyLength !== import_keypair.PRIVATE_KEY_SIZE) {
              throw new Error(`Wrong secretKey size. Expected ${import_keypair.PRIVATE_KEY_SIZE} bytes, got ${secretKeyLength}.`);
            }
            const keypair = import_tweetnacl.default.sign.keyPair.fromSeed(secretKey);
            if (!options || !options.skipValidation) {
              const encoder = new TextEncoder();
              const signData = encoder.encode("sui validation");
              const signature = import_tweetnacl.default.sign.detached(signData, keypair.secretKey);
              if (!import_tweetnacl.default.sign.detached.verify(signData, signature, keypair.publicKey)) {
                throw new Error("provided secretKey is invalid");
              }
            }
            return new Ed25519Keypair(keypair);
          }
          /**
           * The public key for this Ed25519 keypair
           */
          getPublicKey() {
            return new import_publickey.Ed25519PublicKey(this.keypair.publicKey);
          }
          /**
           * The Bech32 secret key string for this Ed25519 keypair
           */
          getSecretKey() {
            return (0, import_keypair.encodeSuiPrivateKey)(this.keypair.secretKey.slice(0, import_keypair.PRIVATE_KEY_SIZE), this.getKeyScheme());
          }
          /**
           * Return the signature for the provided data using Ed25519.
           */
          async sign(data) {
            return import_tweetnacl.default.sign.detached(data, this.keypair.secretKey);
          }
          /**
           * Derive Ed25519 keypair from mnemonics and path. The mnemonics must be normalized
           * and validated against the english wordlist.
           *
           * If path is none, it will default to m/44'/784'/0'/0'/0', otherwise the path must
           * be compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.
           */
          static deriveKeypair(mnemonics, path) {
            if (path == null) {
              path = DEFAULT_ED25519_DERIVATION_PATH;
            }
            if (!(0, import_mnemonics.isValidHardenedPath)(path)) {
              throw new Error("Invalid derivation path");
            }
            const {
              key
            } = (0, import_ed25519_hd_key.derivePath)(path, (0, import_mnemonics.mnemonicToSeedHex)(mnemonics));
            return Ed25519Keypair.fromSecretKey(key);
          }
          /**
           * Derive Ed25519 keypair from mnemonicSeed and path.
           *
           * If path is none, it will default to m/44'/784'/0'/0'/0', otherwise the path must
           * be compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.
           */
          static deriveKeypairFromSeed(seedHex, path) {
            if (path == null) {
              path = DEFAULT_ED25519_DERIVATION_PATH;
            }
            if (!(0, import_mnemonics.isValidHardenedPath)(path)) {
              throw new Error("Invalid derivation path");
            }
            const {
              key
            } = (0, import_ed25519_hd_key.derivePath)(path, seedHex);
            return Ed25519Keypair.fromSecretKey(key);
          }
        }
      }, {
        "../../cryptography/keypair.js": 37,
        "../../cryptography/mnemonics.js": 38,
        "./ed25519-hd-key.js": 47,
        "./publickey.js": 50,
        "tweetnacl": 284
      }],
      50: [function (require, module, exports) {
        "use strict";

        var __create = Object.create;
        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __getProtoOf = Object.getPrototypeOf;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
        // If the importer is in node compatibility mode or this is not an ESM
        // file that has been converted to a CommonJS file using a Babel-
        // compatible transform (i.e. "__esModule" has not been set), then set
        // "default" to the CommonJS "module.exports" for node compatibility.
        isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
          value: mod,
          enumerable: true
        }) : target, mod));
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var publickey_exports = {};
        __export(publickey_exports, {
          Ed25519PublicKey: () => Ed25519PublicKey
        });
        module.exports = __toCommonJS(publickey_exports);
        var import_bcs = require("@mysten/bcs");
        var import_tweetnacl = __toESM(require("tweetnacl"));
        var import_publickey = require("../../cryptography/publickey.js");
        var import_signature_scheme = require("../../cryptography/signature-scheme.js");
        var import_signature = require("../../cryptography/signature.js");
        const PUBLIC_KEY_SIZE = 32;
        class Ed25519PublicKey extends import_publickey.PublicKey {
          /**
           * Create a new Ed25519PublicKey object
           * @param value ed25519 public key as buffer or base-64 encoded string
           */
          constructor(value) {
            super();
            if (typeof value === "string") {
              this.data = (0, import_bcs.fromB64)(value);
            } else if (value instanceof Uint8Array) {
              this.data = value;
            } else {
              this.data = Uint8Array.from(value);
            }
            if (this.data.length !== PUBLIC_KEY_SIZE) {
              throw new Error(`Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`);
            }
          }
          /**
           * Checks if two Ed25519 public keys are equal
           */
          equals(publicKey) {
            return super.equals(publicKey);
          }
          /**
           * Return the byte array representation of the Ed25519 public key
           */
          toRawBytes() {
            return this.data;
          }
          /**
           * Return the Sui address associated with this Ed25519 public key
           */
          flag() {
            return import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG["ED25519"];
          }
          /**
           * Verifies that the signature is valid for for the provided message
           */
          async verify(message, signature) {
            let bytes;
            if (typeof signature === "string") {
              const parsed = (0, import_signature.parseSerializedSignature)(signature);
              if (parsed.signatureScheme !== "ED25519") {
                throw new Error("Invalid signature scheme");
              }
              if (!(0, import_publickey.bytesEqual)(this.toRawBytes(), parsed.publicKey)) {
                throw new Error("Signature does not match public key");
              }
              bytes = parsed.signature;
            } else {
              bytes = signature;
            }
            return import_tweetnacl.default.sign.detached.verify(message, bytes, this.toRawBytes());
          }
        }
        Ed25519PublicKey.SIZE = PUBLIC_KEY_SIZE;
      }, {
        "../../cryptography/publickey.js": 39,
        "../../cryptography/signature-scheme.js": 40,
        "../../cryptography/signature.js": 41,
        "@mysten/bcs": 13,
        "tweetnacl": 284
      }],
      51: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var secp256k1_exports = {};
        __export(secp256k1_exports, {
          DEFAULT_SECP256K1_DERIVATION_PATH: () => import_keypair.DEFAULT_SECP256K1_DERIVATION_PATH,
          Secp256k1Keypair: () => import_keypair.Secp256k1Keypair,
          Secp256k1PublicKey: () => import_publickey.Secp256k1PublicKey
        });
        module.exports = __toCommonJS(secp256k1_exports);
        var import_keypair = require("./keypair.js");
        var import_publickey = require("./publickey.js");
      }, {
        "./keypair.js": 52,
        "./publickey.js": 53
      }],
      52: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var keypair_exports = {};
        __export(keypair_exports, {
          DEFAULT_SECP256K1_DERIVATION_PATH: () => DEFAULT_SECP256K1_DERIVATION_PATH,
          Secp256k1Keypair: () => Secp256k1Keypair
        });
        module.exports = __toCommonJS(keypair_exports);
        var import_secp256k1 = require("@noble/curves/secp256k1");
        var import_blake2b = require("@noble/hashes/blake2b");
        var import_sha256 = require("@noble/hashes/sha256");
        var import_utils = require("@noble/hashes/utils");
        var import_bip32 = require("@scure/bip32");
        var import_keypair = require("../../cryptography/keypair.js");
        var import_mnemonics = require("../../cryptography/mnemonics.js");
        var import_publickey = require("./publickey.js");
        const DEFAULT_SECP256K1_DERIVATION_PATH = "m/54'/784'/0'/0/0";
        class Secp256k1Keypair extends import_keypair.Keypair {
          /**
           * Create a new keypair instance.
           * Generate random keypair if no {@link Secp256k1Keypair} is provided.
           *
           * @param keypair secp256k1 keypair
           */
          constructor(keypair) {
            super();
            if (keypair) {
              this.keypair = keypair;
            } else {
              const secretKey = import_secp256k1.secp256k1.utils.randomPrivateKey();
              const publicKey = import_secp256k1.secp256k1.getPublicKey(secretKey, true);
              this.keypair = {
                publicKey,
                secretKey
              };
            }
          }
          /**
           * Get the key scheme of the keypair Secp256k1
           */
          getKeyScheme() {
            return "Secp256k1";
          }
          /**
           * Generate a new random keypair
           */
          static generate() {
            return new Secp256k1Keypair();
          }
          /**
           * Create a keypair from a raw secret key byte array.
           *
           * This method should only be used to recreate a keypair from a previously
           * generated secret key. Generating keypairs from a random seed should be done
           * with the {@link Keypair.fromSeed} method.
           *
           * @throws error if the provided secret key is invalid and validation is not skipped.
           *
           * @param secretKey secret key byte array
           * @param options: skip secret key validation
           */
          static fromSecretKey(secretKey, options) {
            const publicKey = import_secp256k1.secp256k1.getPublicKey(secretKey, true);
            if (!options || !options.skipValidation) {
              const encoder = new TextEncoder();
              const signData = encoder.encode("sui validation");
              const msgHash = (0, import_utils.bytesToHex)((0, import_blake2b.blake2b)(signData, {
                dkLen: 32
              }));
              const signature = import_secp256k1.secp256k1.sign(msgHash, secretKey);
              if (!import_secp256k1.secp256k1.verify(signature, msgHash, publicKey, {
                lowS: true
              })) {
                throw new Error("Provided secretKey is invalid");
              }
            }
            return new Secp256k1Keypair({
              publicKey,
              secretKey
            });
          }
          /**
           * Generate a keypair from a 32 byte seed.
           *
           * @param seed seed byte array
           */
          static fromSeed(seed) {
            let publicKey = import_secp256k1.secp256k1.getPublicKey(seed, true);
            return new Secp256k1Keypair({
              publicKey,
              secretKey: seed
            });
          }
          /**
           * The public key for this keypair
           */
          getPublicKey() {
            return new import_publickey.Secp256k1PublicKey(this.keypair.publicKey);
          }
          /**
           * The Bech32 secret key string for this Secp256k1 keypair
           */
          getSecretKey() {
            return (0, import_keypair.encodeSuiPrivateKey)(this.keypair.secretKey, this.getKeyScheme());
          }
          /**
           * Return the signature for the provided data.
           */
          async sign(data) {
            const msgHash = (0, import_sha256.sha256)(data);
            const sig = import_secp256k1.secp256k1.sign(msgHash, this.keypair.secretKey, {
              lowS: true
            });
            return sig.toCompactRawBytes();
          }
          /**
           * Derive Secp256k1 keypair from mnemonics and path. The mnemonics must be normalized
           * and validated against the english wordlist.
           *
           * If path is none, it will default to m/54'/784'/0'/0/0, otherwise the path must
           * be compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}.
           */
          static deriveKeypair(mnemonics, path) {
            if (path == null) {
              path = DEFAULT_SECP256K1_DERIVATION_PATH;
            }
            if (!(0, import_mnemonics.isValidBIP32Path)(path)) {
              throw new Error("Invalid derivation path");
            }
            const key = import_bip32.HDKey.fromMasterSeed((0, import_mnemonics.mnemonicToSeed)(mnemonics)).derive(path);
            if (key.publicKey == null || key.privateKey == null) {
              throw new Error("Invalid key");
            }
            return new Secp256k1Keypair({
              publicKey: key.publicKey,
              secretKey: key.privateKey
            });
          }
        }
      }, {
        "../../cryptography/keypair.js": 37,
        "../../cryptography/mnemonics.js": 38,
        "./publickey.js": 53,
        "@noble/curves/secp256k1": 105,
        "@noble/hashes/blake2b": 110,
        "@noble/hashes/sha256": 114,
        "@noble/hashes/utils": 116,
        "@scure/bip32": 118
      }],
      53: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var publickey_exports = {};
        __export(publickey_exports, {
          Secp256k1PublicKey: () => Secp256k1PublicKey
        });
        module.exports = __toCommonJS(publickey_exports);
        var import_bcs = require("@mysten/bcs");
        var import_secp256k1 = require("@noble/curves/secp256k1");
        var import_sha256 = require("@noble/hashes/sha256");
        var import_publickey = require("../../cryptography/publickey.js");
        var import_signature_scheme = require("../../cryptography/signature-scheme.js");
        var import_signature = require("../../cryptography/signature.js");
        const SECP256K1_PUBLIC_KEY_SIZE = 33;
        class Secp256k1PublicKey extends import_publickey.PublicKey {
          /**
           * Create a new Secp256k1PublicKey object
           * @param value secp256k1 public key as buffer or base-64 encoded string
           */
          constructor(value) {
            super();
            if (typeof value === "string") {
              this.data = (0, import_bcs.fromB64)(value);
            } else if (value instanceof Uint8Array) {
              this.data = value;
            } else {
              this.data = Uint8Array.from(value);
            }
            if (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {
              throw new Error(`Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`);
            }
          }
          /**
           * Checks if two Secp256k1 public keys are equal
           */
          equals(publicKey) {
            return super.equals(publicKey);
          }
          /**
           * Return the byte array representation of the Secp256k1 public key
           */
          toRawBytes() {
            return this.data;
          }
          /**
           * Return the Sui address associated with this Secp256k1 public key
           */
          flag() {
            return import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG["Secp256k1"];
          }
          /**
           * Verifies that the signature is valid for for the provided message
           */
          async verify(message, signature) {
            let bytes;
            if (typeof signature === "string") {
              const parsed = (0, import_signature.parseSerializedSignature)(signature);
              if (parsed.signatureScheme !== "Secp256k1") {
                throw new Error("Invalid signature scheme");
              }
              if (!(0, import_publickey.bytesEqual)(this.toRawBytes(), parsed.publicKey)) {
                throw new Error("Signature does not match public key");
              }
              bytes = parsed.signature;
            } else {
              bytes = signature;
            }
            return import_secp256k1.secp256k1.verify(import_secp256k1.secp256k1.Signature.fromCompact(bytes), (0, import_sha256.sha256)(message), this.toRawBytes());
          }
        }
        Secp256k1PublicKey.SIZE = SECP256K1_PUBLIC_KEY_SIZE;
      }, {
        "../../cryptography/publickey.js": 39,
        "../../cryptography/signature-scheme.js": 40,
        "../../cryptography/signature.js": 41,
        "@mysten/bcs": 13,
        "@noble/curves/secp256k1": 105,
        "@noble/hashes/sha256": 114
      }],
      54: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var secp256r1_exports = {};
        __export(secp256r1_exports, {
          DEFAULT_SECP256R1_DERIVATION_PATH: () => import_keypair.DEFAULT_SECP256R1_DERIVATION_PATH,
          Secp256r1Keypair: () => import_keypair.Secp256r1Keypair,
          Secp256r1PublicKey: () => import_publickey.Secp256r1PublicKey
        });
        module.exports = __toCommonJS(secp256r1_exports);
        var import_keypair = require("./keypair.js");
        var import_publickey = require("./publickey.js");
      }, {
        "./keypair.js": 55,
        "./publickey.js": 56
      }],
      55: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var keypair_exports = {};
        __export(keypair_exports, {
          DEFAULT_SECP256R1_DERIVATION_PATH: () => DEFAULT_SECP256R1_DERIVATION_PATH,
          Secp256r1Keypair: () => Secp256r1Keypair
        });
        module.exports = __toCommonJS(keypair_exports);
        var import_p256 = require("@noble/curves/p256");
        var import_blake2b = require("@noble/hashes/blake2b");
        var import_sha256 = require("@noble/hashes/sha256");
        var import_utils = require("@noble/hashes/utils");
        var import_bip32 = require("@scure/bip32");
        var import_keypair = require("../../cryptography/keypair.js");
        var import_mnemonics = require("../../cryptography/mnemonics.js");
        var import_publickey = require("./publickey.js");
        const DEFAULT_SECP256R1_DERIVATION_PATH = "m/74'/784'/0'/0/0";
        class Secp256r1Keypair extends import_keypair.Keypair {
          /**
           * Create a new keypair instance.
           * Generate random keypair if no {@link Secp256r1Keypair} is provided.
           *
           * @param keypair Secp256r1 keypair
           */
          constructor(keypair) {
            super();
            if (keypair) {
              this.keypair = keypair;
            } else {
              const secretKey = import_p256.secp256r1.utils.randomPrivateKey();
              const publicKey = import_p256.secp256r1.getPublicKey(secretKey, true);
              this.keypair = {
                publicKey,
                secretKey
              };
            }
          }
          /**
           * Get the key scheme of the keypair Secp256r1
           */
          getKeyScheme() {
            return "Secp256r1";
          }
          /**
           * Generate a new random keypair
           */
          static generate() {
            return new Secp256r1Keypair();
          }
          /**
           * Create a keypair from a raw secret key byte array.
           *
           * This method should only be used to recreate a keypair from a previously
           * generated secret key. Generating keypairs from a random seed should be done
           * with the {@link Keypair.fromSeed} method.
           *
           * @throws error if the provided secret key is invalid and validation is not skipped.
           *
           * @param secretKey secret key byte array
           * @param options: skip secret key validation
           */
          static fromSecretKey(secretKey, options) {
            const publicKey = import_p256.secp256r1.getPublicKey(secretKey, true);
            if (!options || !options.skipValidation) {
              const encoder = new TextEncoder();
              const signData = encoder.encode("sui validation");
              const msgHash = (0, import_utils.bytesToHex)((0, import_blake2b.blake2b)(signData, {
                dkLen: 32
              }));
              const signature = import_p256.secp256r1.sign(msgHash, secretKey, {
                lowS: true
              });
              if (!import_p256.secp256r1.verify(signature, msgHash, publicKey, {
                lowS: true
              })) {
                throw new Error("Provided secretKey is invalid");
              }
            }
            return new Secp256r1Keypair({
              publicKey,
              secretKey
            });
          }
          /**
           * Generate a keypair from a 32 byte seed.
           *
           * @param seed seed byte array
           */
          static fromSeed(seed) {
            let publicKey = import_p256.secp256r1.getPublicKey(seed, true);
            return new Secp256r1Keypair({
              publicKey,
              secretKey: seed
            });
          }
          /**
           * The public key for this keypair
           */
          getPublicKey() {
            return new import_publickey.Secp256r1PublicKey(this.keypair.publicKey);
          }
          /**
           * The Bech32 secret key string for this Secp256r1 keypair
           */
          getSecretKey() {
            return (0, import_keypair.encodeSuiPrivateKey)(this.keypair.secretKey, this.getKeyScheme());
          }
          /**
           * Return the signature for the provided data.
           */
          async sign(data) {
            const msgHash = (0, import_sha256.sha256)(data);
            const sig = import_p256.secp256r1.sign(msgHash, this.keypair.secretKey, {
              lowS: true
            });
            return sig.toCompactRawBytes();
          }
          /**
           * Derive Secp256r1 keypair from mnemonics and path. The mnemonics must be normalized
           * and validated against the english wordlist.
           *
           * If path is none, it will default to m/74'/784'/0'/0/0, otherwise the path must
           * be compliant to BIP-32 in form m/74'/784'/{account_index}'/{change_index}/{address_index}.
           */
          static deriveKeypair(mnemonics, path) {
            if (path == null) {
              path = DEFAULT_SECP256R1_DERIVATION_PATH;
            }
            if (!(0, import_mnemonics.isValidBIP32Path)(path)) {
              throw new Error("Invalid derivation path");
            }
            const privateKey = import_bip32.HDKey.fromMasterSeed((0, import_mnemonics.mnemonicToSeed)(mnemonics)).derive(path).privateKey;
            return Secp256r1Keypair.fromSecretKey(privateKey);
          }
        }
      }, {
        "../../cryptography/keypair.js": 37,
        "../../cryptography/mnemonics.js": 38,
        "./publickey.js": 56,
        "@noble/curves/p256": 104,
        "@noble/hashes/blake2b": 110,
        "@noble/hashes/sha256": 114,
        "@noble/hashes/utils": 116,
        "@scure/bip32": 118
      }],
      56: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var publickey_exports = {};
        __export(publickey_exports, {
          Secp256r1PublicKey: () => Secp256r1PublicKey
        });
        module.exports = __toCommonJS(publickey_exports);
        var import_bcs = require("@mysten/bcs");
        var import_p256 = require("@noble/curves/p256");
        var import_sha256 = require("@noble/hashes/sha256");
        var import_publickey = require("../../cryptography/publickey.js");
        var import_signature_scheme = require("../../cryptography/signature-scheme.js");
        var import_signature = require("../../cryptography/signature.js");
        const SECP256R1_PUBLIC_KEY_SIZE = 33;
        class Secp256r1PublicKey extends import_publickey.PublicKey {
          /**
           * Create a new Secp256r1PublicKey object
           * @param value secp256r1 public key as buffer or base-64 encoded string
           */
          constructor(value) {
            super();
            if (typeof value === "string") {
              this.data = (0, import_bcs.fromB64)(value);
            } else if (value instanceof Uint8Array) {
              this.data = value;
            } else {
              this.data = Uint8Array.from(value);
            }
            if (this.data.length !== SECP256R1_PUBLIC_KEY_SIZE) {
              throw new Error(`Invalid public key input. Expected ${SECP256R1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`);
            }
          }
          /**
           * Checks if two Secp256r1 public keys are equal
           */
          equals(publicKey) {
            return super.equals(publicKey);
          }
          /**
           * Return the byte array representation of the Secp256r1 public key
           */
          toRawBytes() {
            return this.data;
          }
          /**
           * Return the Sui address associated with this Secp256r1 public key
           */
          flag() {
            return import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG["Secp256r1"];
          }
          /**
           * Verifies that the signature is valid for for the provided message
           */
          async verify(message, signature) {
            let bytes;
            if (typeof signature === "string") {
              const parsed = (0, import_signature.parseSerializedSignature)(signature);
              if (parsed.signatureScheme !== "Secp256r1") {
                throw new Error("Invalid signature scheme");
              }
              if (!(0, import_publickey.bytesEqual)(this.toRawBytes(), parsed.publicKey)) {
                throw new Error("Signature does not match public key");
              }
              bytes = parsed.signature;
            } else {
              bytes = signature;
            }
            return import_p256.secp256r1.verify(import_p256.secp256r1.Signature.fromCompact(bytes), (0, import_sha256.sha256)(message), this.toRawBytes());
          }
        }
        Secp256r1PublicKey.SIZE = SECP256R1_PUBLIC_KEY_SIZE;
      }, {
        "../../cryptography/publickey.js": 39,
        "../../cryptography/signature-scheme.js": 40,
        "../../cryptography/signature.js": 41,
        "@mysten/bcs": 13,
        "@noble/curves/p256": 104,
        "@noble/hashes/sha256": 114
      }],
      57: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var multisig_exports = {};
        __export(multisig_exports, {
          MultiSigPublicKey: () => import_publickey.MultiSigPublicKey,
          MultiSigSigner: () => import_signer.MultiSigSigner,
          parsePartialSignatures: () => import_publickey.parsePartialSignatures
        });
        module.exports = __toCommonJS(multisig_exports);
        var import_signer = require("./signer.js");
        var import_publickey = require("./publickey.js");
      }, {
        "./publickey.js": 58,
        "./signer.js": 59
      }],
      58: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var publickey_exports = {};
        __export(publickey_exports, {
          MAX_SIGNER_IN_MULTISIG: () => MAX_SIGNER_IN_MULTISIG,
          MIN_SIGNER_IN_MULTISIG: () => MIN_SIGNER_IN_MULTISIG,
          MultiSigPublicKey: () => MultiSigPublicKey,
          parsePartialSignatures: () => parsePartialSignatures
        });
        module.exports = __toCommonJS(publickey_exports);
        var import_bcs = require("@mysten/bcs");
        var import_blake2b = require("@noble/hashes/blake2b");
        var import_utils = require("@noble/hashes/utils");
        var import_bcs2 = require("../bcs/index.js");
        var import_publickey = require("../cryptography/publickey.js");
        var import_signature_scheme = require("../cryptography/signature-scheme.js");
        var import_signature = require("../cryptography/signature.js");
        var import_sui_types = require("../utils/sui-types.js");
        var import_verify = require("../verify/index.js");
        var import_publickey2 = require("../zklogin/publickey.js");
        var import_signer = require("./signer.js");
        const MAX_SIGNER_IN_MULTISIG = 10;
        const MIN_SIGNER_IN_MULTISIG = 1;
        class MultiSigPublicKey extends import_publickey.PublicKey {
          /**
           * Create a new MultiSigPublicKey object
           */
          constructor(value, options = {}) {
            super();
            if (typeof value === "string") {
              this.rawBytes = (0, import_bcs.fromB64)(value);
              this.multisigPublicKey = import_bcs2.bcs.MultiSigPublicKey.parse(this.rawBytes);
            } else if (value instanceof Uint8Array) {
              this.rawBytes = value;
              this.multisigPublicKey = import_bcs2.bcs.MultiSigPublicKey.parse(this.rawBytes);
            } else {
              this.multisigPublicKey = value;
              this.rawBytes = import_bcs2.bcs.MultiSigPublicKey.serialize(value).toBytes();
            }
            if (this.multisigPublicKey.threshold < 1) {
              throw new Error("Invalid threshold");
            }
            const seenPublicKeys = /* @__PURE__ */new Set();
            this.publicKeys = this.multisigPublicKey.pk_map.map(({
              pubKey,
              weight
            }) => {
              const [scheme, bytes] = Object.entries(pubKey).filter(([name]) => name !== "$kind")[0];
              const publicKeyStr = Uint8Array.from(bytes).toString();
              if (seenPublicKeys.has(publicKeyStr)) {
                throw new Error(`Multisig does not support duplicate public keys`);
              }
              seenPublicKeys.add(publicKeyStr);
              if (weight < 1) {
                throw new Error(`Invalid weight`);
              }
              return {
                publicKey: (0, import_verify.publicKeyFromRawBytes)(scheme, Uint8Array.from(bytes), options),
                weight
              };
            });
            const totalWeight = this.publicKeys.reduce((sum, {
              weight
            }) => sum + weight, 0);
            if (this.multisigPublicKey.threshold > totalWeight) {
              throw new Error(`Unreachable threshold`);
            }
            if (this.publicKeys.length > MAX_SIGNER_IN_MULTISIG) {
              throw new Error(`Max number of signers in a multisig is ${MAX_SIGNER_IN_MULTISIG}`);
            }
            if (this.publicKeys.length < MIN_SIGNER_IN_MULTISIG) {
              throw new Error(`Min number of signers in a multisig is ${MIN_SIGNER_IN_MULTISIG}`);
            }
          }
          /**
           * 	A static method to create a new MultiSig publickey instance from a set of public keys and their associated weights pairs and threshold.
           */
          static fromPublicKeys({
            threshold,
            publicKeys
          }) {
            return new MultiSigPublicKey({
              pk_map: publicKeys.map(({
                publicKey,
                weight
              }) => {
                const scheme = import_signature_scheme.SIGNATURE_FLAG_TO_SCHEME[publicKey.flag()];
                return {
                  pubKey: {
                    [scheme]: Array.from(publicKey.toRawBytes())
                  },
                  weight
                };
              }),
              threshold
            });
          }
          /**
           * Checks if two MultiSig public keys are equal
           */
          equals(publicKey) {
            return super.equals(publicKey);
          }
          /**
           * Return the byte array representation of the MultiSig public key
           */
          toRawBytes() {
            return this.rawBytes;
          }
          getPublicKeys() {
            return this.publicKeys;
          }
          getThreshold() {
            return this.multisigPublicKey.threshold;
          }
          getSigner(...signers) {
            return new import_signer.MultiSigSigner(this, signers);
          }
          /**
           * Return the Sui address associated with this MultiSig public key
           */
          toSuiAddress() {
            const maxLength = 1 + (64 + 1) * MAX_SIGNER_IN_MULTISIG + 2;
            const tmp = new Uint8Array(maxLength);
            tmp.set([import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG["MultiSig"]]);
            tmp.set(import_bcs2.bcs.u16().serialize(this.multisigPublicKey.threshold).toBytes(), 1);
            let i = 3;
            for (const {
              publicKey,
              weight
            } of this.publicKeys) {
              const bytes = publicKey.toSuiBytes();
              tmp.set(bytes, i);
              i += bytes.length;
              tmp.set([weight], i++);
            }
            return (0, import_sui_types.normalizeSuiAddress)((0, import_utils.bytesToHex)((0, import_blake2b.blake2b)(tmp.slice(0, i), {
              dkLen: 32
            })));
          }
          /**
           * Return the Sui address associated with this MultiSig public key
           */
          flag() {
            return import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG["MultiSig"];
          }
          /**
           * Verifies that the signature is valid for for the provided message
           */
          async verify(message, multisigSignature) {
            const parsed = (0, import_signature.parseSerializedSignature)(multisigSignature);
            if (parsed.signatureScheme !== "MultiSig") {
              throw new Error("Invalid signature scheme");
            }
            const {
              multisig
            } = parsed;
            let signatureWeight = 0;
            if (!(0, import_publickey.bytesEqual)(import_bcs2.bcs.MultiSigPublicKey.serialize(this.multisigPublicKey).toBytes(), import_bcs2.bcs.MultiSigPublicKey.serialize(multisig.multisig_pk).toBytes())) {
              return false;
            }
            for (const {
              publicKey,
              weight,
              signature
            } of parsePartialSignatures(multisig)) {
              if (!(await publicKey.verify(message, signature))) {
                return false;
              }
              signatureWeight += weight;
            }
            return signatureWeight >= this.multisigPublicKey.threshold;
          }
          /**
           * Combines multiple partial signatures into a single multisig, ensuring that each public key signs only once
           * and that all the public keys involved are known and valid, and then serializes multisig into the standard format
           */
          combinePartialSignatures(signatures) {
            if (signatures.length > MAX_SIGNER_IN_MULTISIG) {
              throw new Error(`Max number of signatures in a multisig is ${MAX_SIGNER_IN_MULTISIG}`);
            }
            let bitmap = 0;
            const compressedSignatures = new Array(signatures.length);
            for (let i = 0; i < signatures.length; i++) {
              let parsed = (0, import_signature.parseSerializedSignature)(signatures[i]);
              if (parsed.signatureScheme === "MultiSig") {
                throw new Error("MultiSig is not supported inside MultiSig");
              }
              let publicKey;
              if (parsed.signatureScheme === "ZkLogin") {
                publicKey = (0, import_publickey2.toZkLoginPublicIdentifier)(parsed.zkLogin?.addressSeed, parsed.zkLogin?.iss).toRawBytes();
              } else {
                publicKey = parsed.publicKey;
              }
              compressedSignatures[i] = {
                [parsed.signatureScheme]: Array.from(parsed.signature.map(x => Number(x)))
              };
              let publicKeyIndex;
              for (let j = 0; j < this.publicKeys.length; j++) {
                if ((0, import_publickey.bytesEqual)(publicKey, this.publicKeys[j].publicKey.toRawBytes())) {
                  if (bitmap & 1 << j) {
                    throw new Error("Received multiple signatures from the same public key");
                  }
                  publicKeyIndex = j;
                  break;
                }
              }
              if (publicKeyIndex === void 0) {
                throw new Error("Received signature from unknown public key");
              }
              bitmap |= 1 << publicKeyIndex;
            }
            let multisig = {
              sigs: compressedSignatures,
              bitmap,
              multisig_pk: this.multisigPublicKey
            };
            const bytes = import_bcs2.bcs.MultiSig.serialize(multisig, {
              maxSize: 8192
            }).toBytes();
            let tmp = new Uint8Array(bytes.length + 1);
            tmp.set([import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG["MultiSig"]]);
            tmp.set(bytes, 1);
            return (0, import_bcs.toB64)(tmp);
          }
        }
        function parsePartialSignatures(multisig, options = {}) {
          let res = new Array(multisig.sigs.length);
          for (let i = 0; i < multisig.sigs.length; i++) {
            const [signatureScheme, signature] = Object.entries(multisig.sigs[i]).filter(([name]) => name !== "$kind")[0];
            const pkIndex = asIndices(multisig.bitmap).at(i);
            const pair = multisig.multisig_pk.pk_map[pkIndex];
            const pkBytes = Uint8Array.from(Object.values(pair.pubKey)[0]);
            if (signatureScheme === "MultiSig") {
              throw new Error("MultiSig is not supported inside MultiSig");
            }
            const publicKey = (0, import_verify.publicKeyFromRawBytes)(signatureScheme, pkBytes, options);
            res[i] = {
              signatureScheme,
              signature: Uint8Array.from(signature),
              publicKey,
              weight: pair.weight
            };
          }
          return res;
        }
        function asIndices(bitmap) {
          if (bitmap < 0 || bitmap > 1024) {
            throw new Error("Invalid bitmap");
          }
          let res = [];
          for (let i = 0; i < 10; i++) {
            if ((bitmap & 1 << i) !== 0) {
              res.push(i);
            }
          }
          return Uint8Array.from(res);
        }
      }, {
        "../bcs/index.js": 20,
        "../cryptography/publickey.js": 39,
        "../cryptography/signature-scheme.js": 40,
        "../cryptography/signature.js": 41,
        "../utils/sui-types.js": 82,
        "../verify/index.js": 84,
        "../zklogin/publickey.js": 89,
        "./signer.js": 59,
        "@mysten/bcs": 13,
        "@noble/hashes/blake2b": 110,
        "@noble/hashes/utils": 116
      }],
      59: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var signer_exports = {};
        __export(signer_exports, {
          MultiSigSigner: () => MultiSigSigner
        });
        module.exports = __toCommonJS(signer_exports);
        var import_bcs = require("@mysten/bcs");
        var import_cryptography = require("../cryptography/index.js");
        var _pubkey, _signers;
        class MultiSigSigner extends import_cryptography.Signer {
          constructor(pubkey, signers = []) {
            super();
            __privateAdd(this, _pubkey, void 0);
            __privateAdd(this, _signers, void 0);
            __privateSet(this, _pubkey, pubkey);
            __privateSet(this, _signers, signers);
            let uniqueKeys = /* @__PURE__ */new Set();
            let combinedWeight = 0;
            const weights = pubkey.getPublicKeys().map(({
              weight,
              publicKey
            }) => ({
              weight,
              address: publicKey.toSuiAddress()
            }));
            for (let signer of signers) {
              const address = signer.toSuiAddress();
              if (uniqueKeys.has(address)) {
                throw new Error(`Can't create MultiSigSigner with duplicate signers`);
              }
              uniqueKeys.add(address);
              const weight = weights.find(w => w.address === address)?.weight;
              if (!weight) {
                throw new Error(`Signer ${address} is not part of the MultiSig public key`);
              }
              combinedWeight += weight;
            }
            if (combinedWeight < pubkey.getThreshold()) {
              throw new Error(`Combined weight of signers is less than threshold`);
            }
          }
          getKeyScheme() {
            return "MultiSig";
          }
          getPublicKey() {
            return __privateGet(this, _pubkey);
          }
          sign(_data) {
            throw new Error("MultiSigSigner does not support signing directly. Use signTransaction or signPersonalMessage instead");
          }
          signData(_data) {
            throw new Error("MultiSigSigner does not support signing directly. Use signTransaction or signPersonalMessage instead");
          }
          async signTransaction(bytes) {
            const signature = __privateGet(this, _pubkey).combinePartialSignatures(await Promise.all(__privateGet(this, _signers).map(async signer => (await signer.signTransaction(bytes)).signature)));
            return {
              signature,
              bytes: (0, import_bcs.toB64)(bytes)
            };
          }
          async signPersonalMessage(bytes) {
            const signature = __privateGet(this, _pubkey).combinePartialSignatures(await Promise.all(__privateGet(this, _signers).map(async signer => (await signer.signPersonalMessage(bytes)).signature)));
            return {
              signature,
              bytes: (0, import_bcs.toB64)(bytes)
            };
          }
        }
        _pubkey = new WeakMap();
        _signers = new WeakMap();
      }, {
        "../cryptography/index.js": 35,
        "@mysten/bcs": 13
      }],
      60: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var Commands_exports = {};
        __export(Commands_exports, {
          Commands: () => Commands,
          UpgradePolicy: () => UpgradePolicy
        });
        module.exports = __toCommonJS(Commands_exports);
        var import_bcs = require("@mysten/bcs");
        var import_valibot = require("valibot");
        var import_sui_types = require("../utils/sui-types.js");
        var import_internal = require("./data/internal.js");
        var UpgradePolicy = /* @__PURE__ */(UpgradePolicy2 => {
          UpgradePolicy2[UpgradePolicy2["COMPATIBLE"] = 0] = "COMPATIBLE";
          UpgradePolicy2[UpgradePolicy2["ADDITIVE"] = 128] = "ADDITIVE";
          UpgradePolicy2[UpgradePolicy2["DEP_ONLY"] = 192] = "DEP_ONLY";
          return UpgradePolicy2;
        })(UpgradePolicy || {});
        const Commands = {
          MoveCall(input) {
            const [pkg, mod = "", fn = ""] = "target" in input ? input.target.split("::") : [input.package, input.module, input.function];
            return {
              $kind: "MoveCall",
              MoveCall: {
                package: pkg,
                module: mod,
                function: fn,
                typeArguments: input.typeArguments ?? [],
                arguments: input.arguments ?? []
              }
            };
          },
          TransferObjects(objects, address) {
            return {
              $kind: "TransferObjects",
              TransferObjects: {
                objects: objects.map(o => (0, import_valibot.parse)(import_internal.Argument, o)),
                address: (0, import_valibot.parse)(import_internal.Argument, address)
              }
            };
          },
          SplitCoins(coin, amounts) {
            return {
              $kind: "SplitCoins",
              SplitCoins: {
                coin: (0, import_valibot.parse)(import_internal.Argument, coin),
                amounts: amounts.map(o => (0, import_valibot.parse)(import_internal.Argument, o))
              }
            };
          },
          MergeCoins(destination, sources) {
            return {
              $kind: "MergeCoins",
              MergeCoins: {
                destination: (0, import_valibot.parse)(import_internal.Argument, destination),
                sources: sources.map(o => (0, import_valibot.parse)(import_internal.Argument, o))
              }
            };
          },
          Publish({
            modules,
            dependencies
          }) {
            return {
              $kind: "Publish",
              Publish: {
                modules: modules.map(module2 => typeof module2 === "string" ? module2 : (0, import_bcs.toB64)(new Uint8Array(module2))),
                dependencies: dependencies.map(dep => (0, import_sui_types.normalizeSuiObjectId)(dep))
              }
            };
          },
          Upgrade({
            modules,
            dependencies,
            package: packageId,
            ticket
          }) {
            return {
              $kind: "Upgrade",
              Upgrade: {
                modules: modules.map(module2 => typeof module2 === "string" ? module2 : (0, import_bcs.toB64)(new Uint8Array(module2))),
                dependencies: dependencies.map(dep => (0, import_sui_types.normalizeSuiObjectId)(dep)),
                package: packageId,
                ticket: (0, import_valibot.parse)(import_internal.Argument, ticket)
              }
            };
          },
          MakeMoveVec({
            type,
            elements
          }) {
            return {
              $kind: "MakeMoveVec",
              MakeMoveVec: {
                type: type ?? null,
                elements: elements.map(o => (0, import_valibot.parse)(import_internal.Argument, o))
              }
            };
          },
          Intent({
            name,
            inputs = {},
            data = {}
          }) {
            return {
              $kind: "$Intent",
              $Intent: {
                name,
                inputs: Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, Array.isArray(value) ? value.map(o => (0, import_valibot.parse)(import_internal.Argument, o)) : (0, import_valibot.parse)(import_internal.Argument, value)])),
                data
              }
            };
          }
        };
      }, {
        "../utils/sui-types.js": 82,
        "./data/internal.js": 65,
        "@mysten/bcs": 13,
        "valibot": 286
      }],
      61: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var Inputs_exports = {};
        __export(Inputs_exports, {
          Inputs: () => Inputs
        });
        module.exports = __toCommonJS(Inputs_exports);
        var import_bcs = require("@mysten/bcs");
        var import_sui_types = require("../utils/sui-types.js");
        function Pure(data) {
          return {
            $kind: "Pure",
            Pure: {
              bytes: data instanceof Uint8Array ? (0, import_bcs.toB64)(data) : data.toBase64()
            }
          };
        }
        const Inputs = {
          Pure,
          ObjectRef({
            objectId,
            digest,
            version
          }) {
            return {
              $kind: "Object",
              Object: {
                $kind: "ImmOrOwnedObject",
                ImmOrOwnedObject: {
                  digest,
                  version,
                  objectId: (0, import_sui_types.normalizeSuiAddress)(objectId)
                }
              }
            };
          },
          SharedObjectRef({
            objectId,
            mutable,
            initialSharedVersion
          }) {
            return {
              $kind: "Object",
              Object: {
                $kind: "SharedObject",
                SharedObject: {
                  mutable,
                  initialSharedVersion,
                  objectId: (0, import_sui_types.normalizeSuiAddress)(objectId)
                }
              }
            };
          },
          ReceivingRef({
            objectId,
            digest,
            version
          }) {
            return {
              $kind: "Object",
              Object: {
                $kind: "Receiving",
                Receiving: {
                  digest,
                  version,
                  objectId: (0, import_sui_types.normalizeSuiAddress)(objectId)
                }
              }
            };
          }
        };
      }, {
        "../utils/sui-types.js": 82,
        "@mysten/bcs": 13
      }],
      62: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var ObjectCache_exports = {};
        __export(ObjectCache_exports, {
          AsyncCache: () => AsyncCache,
          InMemoryCache: () => InMemoryCache,
          ObjectCache: () => ObjectCache
        });
        module.exports = __toCommonJS(ObjectCache_exports);
        var import_sui_types = require("../utils/sui-types.js");
        var _caches, _cache;
        class AsyncCache {
          async getObject(id) {
            const [owned, shared] = await Promise.all([this.get("OwnedObject", id), this.get("SharedOrImmutableObject", id)]);
            return owned ?? shared ?? null;
          }
          async getObjects(ids) {
            return Promise.all([...ids.map(id => this.getObject(id))]);
          }
          async addObject(object) {
            if (object.owner) {
              await this.set("OwnedObject", object.objectId, object);
            } else {
              await this.set("SharedOrImmutableObject", object.objectId, object);
            }
            return object;
          }
          async addObjects(objects) {
            await Promise.all(objects.map(async object => this.addObject(object)));
          }
          async deleteObject(id) {
            await Promise.all([this.delete("OwnedObject", id), this.delete("SharedOrImmutableObject", id)]);
          }
          async deleteObjects(ids) {
            await Promise.all(ids.map(id => this.deleteObject(id)));
          }
          async getMoveFunctionDefinition(ref) {
            const functionName = `${(0, import_sui_types.normalizeSuiAddress)(ref.package)}::${ref.module}::${ref.function}`;
            return this.get("MoveFunction", functionName);
          }
          async addMoveFunctionDefinition(functionEntry) {
            const pkg = (0, import_sui_types.normalizeSuiAddress)(functionEntry.package);
            const functionName = `${pkg}::${functionEntry.module}::${functionEntry.function}`;
            const entry = {
              ...functionEntry,
              package: pkg
            };
            await this.set("MoveFunction", functionName, entry);
            return entry;
          }
          async deleteMoveFunctionDefinition(ref) {
            const functionName = `${(0, import_sui_types.normalizeSuiAddress)(ref.package)}::${ref.module}::${ref.function}`;
            await this.delete("MoveFunction", functionName);
          }
          async getCustom(key) {
            return this.get("Custom", key);
          }
          async setCustom(key, value) {
            return this.set("Custom", key, value);
          }
          async deleteCustom(key) {
            return this.delete("Custom", key);
          }
        }
        class InMemoryCache extends AsyncCache {
          constructor() {
            super(...arguments);
            __privateAdd(this, _caches, {
              OwnedObject: /* @__PURE__ */new Map(),
              SharedOrImmutableObject: /* @__PURE__ */new Map(),
              MoveFunction: /* @__PURE__ */new Map(),
              Custom: /* @__PURE__ */new Map()
            });
          }
          async get(type, key) {
            return __privateGet(this, _caches)[type].get(key) ?? null;
          }
          async set(type, key, value) {
            __privateGet(this, _caches)[type].set(key, value);
          }
          async delete(type, key) {
            __privateGet(this, _caches)[type].delete(key);
          }
          async clear(type) {
            if (type) {
              __privateGet(this, _caches)[type].clear();
            } else {
              for (const cache of Object.values(__privateGet(this, _caches))) {
                cache.clear();
              }
            }
          }
        }
        _caches = new WeakMap();
        class ObjectCache {
          constructor({
            cache = new InMemoryCache()
          }) {
            __privateAdd(this, _cache, void 0);
            __privateSet(this, _cache, cache);
          }
          asPlugin() {
            return async (transactionData, _options, next) => {
              const unresolvedObjects = transactionData.inputs.filter(input => input.UnresolvedObject).map(input => input.UnresolvedObject.objectId);
              const cached = (await __privateGet(this, _cache).getObjects(unresolvedObjects)).filter(obj => obj !== null);
              const byId = new Map(cached.map(obj => [obj.objectId, obj]));
              for (const input of transactionData.inputs) {
                if (!input.UnresolvedObject) {
                  continue;
                }
                const cached2 = byId.get(input.UnresolvedObject.objectId);
                if (!cached2) {
                  continue;
                }
                if (cached2.initialSharedVersion && !input.UnresolvedObject.initialSharedVersion) {
                  input.UnresolvedObject.initialSharedVersion = cached2.initialSharedVersion;
                }
                if (cached2.version && !input.UnresolvedObject.version) {
                  input.UnresolvedObject.version = cached2.version;
                }
                if (cached2.digest && !input.UnresolvedObject.digest) {
                  input.UnresolvedObject.digest = cached2.digest;
                }
              }
              await Promise.all(transactionData.commands.map(async commands => {
                if (commands.MoveCall) {
                  const def = await this.getMoveFunctionDefinition({
                    package: commands.MoveCall.package,
                    module: commands.MoveCall.module,
                    function: commands.MoveCall.function
                  });
                  if (def) {
                    commands.MoveCall._argumentTypes = def.parameters;
                  }
                }
              }));
              await next();
              await Promise.all(transactionData.commands.map(async commands => {
                if (commands.MoveCall?._argumentTypes) {
                  await __privateGet(this, _cache).addMoveFunctionDefinition({
                    package: commands.MoveCall.package,
                    module: commands.MoveCall.module,
                    function: commands.MoveCall.function,
                    parameters: commands.MoveCall._argumentTypes
                  });
                }
              }));
            };
          }
          async clear() {
            await __privateGet(this, _cache).clear();
          }
          async getMoveFunctionDefinition(ref) {
            return __privateGet(this, _cache).getMoveFunctionDefinition(ref);
          }
          async getObjects(ids) {
            return __privateGet(this, _cache).getObjects(ids);
          }
          async deleteObjects(ids) {
            return __privateGet(this, _cache).deleteObjects(ids);
          }
          async clearOwnedObjects() {
            await __privateGet(this, _cache).clear("OwnedObject");
          }
          async clearCustom() {
            await __privateGet(this, _cache).clear("Custom");
          }
          async getCustom(key) {
            return __privateGet(this, _cache).getCustom(key);
          }
          async setCustom(key, value) {
            return __privateGet(this, _cache).setCustom(key, value);
          }
          async deleteCustom(key) {
            return __privateGet(this, _cache).deleteCustom(key);
          }
          async applyEffects(effects) {
            if (!effects.V2) {
              throw new Error(`Unsupported transaction effects version ${effects.$kind}`);
            }
            const {
              lamportVersion,
              changedObjects
            } = effects.V2;
            const deletedIds = [];
            const addedObjects = [];
            changedObjects.map(async ([id, change]) => {
              if (change.outputState.NotExist) {
                await __privateGet(this, _cache).deleteObject(id);
              } else if (change.outputState.ObjectWrite) {
                const [digest, owner] = change.outputState.ObjectWrite;
                addedObjects.push({
                  objectId: id,
                  digest,
                  version: lamportVersion,
                  owner: owner.AddressOwner ?? owner.ObjectOwner ?? null,
                  initialSharedVersion: owner.Shared?.initialSharedVersion ?? null
                });
              }
            });
            await Promise.all([__privateGet(this, _cache).addObjects(addedObjects), __privateGet(this, _cache).deleteObjects(deletedIds)]);
          }
        }
        _cache = new WeakMap();
      }, {
        "../utils/sui-types.js": 82
      }],
      63: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var __privateMethod = (obj, member, method) => {
          __accessCheck(obj, member, "access private method");
          return method;
        };
        var Transaction_exports = {};
        __export(Transaction_exports, {
          Transaction: () => Transaction,
          isTransaction: () => isTransaction
        });
        module.exports = __toCommonJS(Transaction_exports);
        var import_bcs = require("@mysten/bcs");
        var import_valibot = require("valibot");
        var import_sui_types = require("../utils/sui-types.js");
        var import_Commands = require("./Commands.js");
        var import_internal = require("./data/internal.js");
        var import_v1 = require("./data/v1.js");
        var import_v2 = require("./data/v2.js");
        var import_Inputs = require("./Inputs.js");
        var import_json_rpc_resolver = require("./json-rpc-resolver.js");
        var import_pure = require("./pure.js");
        var import_TransactionData = require("./TransactionData.js");
        var import_utils = require("./utils.js");
        var _serializationPlugins, _buildPlugins, _intentResolvers, _data, _normalizeTransactionArgument, normalizeTransactionArgument_fn, _resolveArgument, resolveArgument_fn, _prepareBuild, prepareBuild_fn, _runPlugins, runPlugins_fn;
        function createTransactionResult(index) {
          const baseResult = {
            $kind: "Result",
            Result: index
          };
          const nestedResults = [];
          const nestedResultFor = resultIndex => nestedResults[resultIndex] ?? (nestedResults[resultIndex] = {
            $kind: "NestedResult",
            NestedResult: [index, resultIndex]
          });
          return new Proxy(baseResult, {
            set() {
              throw new Error("The transaction result is a proxy, and does not support setting properties directly");
            },
            // TODO: Instead of making this return a concrete argument, we should ideally
            // make it reference-based (so that this gets resolved at build-time), which
            // allows re-ordering transactions.
            get(target, property) {
              if (property in target) {
                return Reflect.get(target, property);
              }
              if (property === Symbol.iterator) {
                return function* () {
                  let i = 0;
                  while (true) {
                    yield nestedResultFor(i);
                    i++;
                  }
                };
              }
              if (typeof property === "symbol") return;
              const resultIndex = parseInt(property, 10);
              if (Number.isNaN(resultIndex) || resultIndex < 0) return;
              return nestedResultFor(resultIndex);
            }
          });
        }
        const TRANSACTION_BRAND = Symbol.for("@mysten/transaction");
        function isTransaction(obj) {
          return !!obj && typeof obj === "object" && obj[TRANSACTION_BRAND] === true;
        }
        const _Transaction = class {
          constructor() {
            __privateAdd(this, _normalizeTransactionArgument);
            __privateAdd(this, _resolveArgument);
            /**
             * Prepare the transaction by validating the transaction data and resolving all inputs
             * so that it can be built into bytes.
             */
            __privateAdd(this, _prepareBuild);
            __privateAdd(this, _runPlugins);
            __privateAdd(this, _serializationPlugins, []);
            __privateAdd(this, _buildPlugins, []);
            __privateAdd(this, _intentResolvers, /* @__PURE__ */new Map());
            __privateAdd(this, _data, void 0);
            __privateSet(this, _data, new import_TransactionData.TransactionDataBuilder());
          }
          /**
           * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.
           * Supports either a byte array, or base64-encoded bytes.
           */
          static fromKind(serialized) {
            const tx = new _Transaction();
            __privateSet(tx, _data, import_TransactionData.TransactionDataBuilder.fromKindBytes(typeof serialized === "string" ? (0, import_bcs.fromB64)(serialized) : serialized));
            return tx;
          }
          /**
           * Converts from a serialized transaction format to a `Transaction` class.
           * There are two supported serialized formats:
           * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.
           * - A byte array (or base64-encoded bytes) containing BCS transaction data.
           */
          static from(transaction) {
            const newTransaction = new _Transaction();
            if (isTransaction(transaction)) {
              __privateSet(newTransaction, _data, new import_TransactionData.TransactionDataBuilder(transaction.getData()));
            } else if (typeof transaction !== "string" || !transaction.startsWith("{")) {
              __privateSet(newTransaction, _data, import_TransactionData.TransactionDataBuilder.fromBytes(typeof transaction === "string" ? (0, import_bcs.fromB64)(transaction) : transaction));
            } else {
              __privateSet(newTransaction, _data, import_TransactionData.TransactionDataBuilder.restore(JSON.parse(transaction)));
            }
            return newTransaction;
          }
          addSerializationPlugin(step) {
            __privateGet(this, _serializationPlugins).push(step);
          }
          addBuildPlugin(step) {
            __privateGet(this, _buildPlugins).push(step);
          }
          addIntentResolver(intent, resolver) {
            if (__privateGet(this, _intentResolvers).has(intent) && __privateGet(this, _intentResolvers).get(intent) !== resolver) {
              throw new Error(`Intent resolver for ${intent} already exists`);
            }
            __privateGet(this, _intentResolvers).set(intent, resolver);
          }
          setSender(sender) {
            __privateGet(this, _data).sender = sender;
          }
          /**
           * Sets the sender only if it has not already been set.
           * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.
           */
          setSenderIfNotSet(sender) {
            if (!__privateGet(this, _data).sender) {
              __privateGet(this, _data).sender = sender;
            }
          }
          setExpiration(expiration) {
            __privateGet(this, _data).expiration = expiration ? (0, import_valibot.parse)(import_internal.TransactionExpiration, expiration) : null;
          }
          setGasPrice(price) {
            __privateGet(this, _data).gasConfig.price = String(price);
          }
          setGasBudget(budget) {
            __privateGet(this, _data).gasConfig.budget = String(budget);
          }
          setGasOwner(owner) {
            __privateGet(this, _data).gasConfig.owner = owner;
          }
          setGasPayment(payments) {
            __privateGet(this, _data).gasConfig.payment = payments.map(payment => (0, import_valibot.parse)(import_internal.ObjectRef, payment));
          }
          /** @deprecated Use `getData()` instead. */
          get blockData() {
            return (0, import_v1.serializeV1TransactionData)(__privateGet(this, _data).snapshot());
          }
          /** Get a snapshot of the transaction data, in JSON form: */
          getData() {
            return __privateGet(this, _data).snapshot();
          }
          // Used to brand transaction classes so that they can be identified, even between multiple copies
          // of the builder.
          get [TRANSACTION_BRAND]() {
            return true;
          }
          // Temporary workaround for the wallet interface accidentally serializing transactions via postMessage
          get pure() {
            Object.defineProperty(this, "pure", {
              enumerable: false,
              value: (0, import_pure.createPure)(value => {
                if ((0, import_bcs.isSerializedBcs)(value)) {
                  return __privateGet(this, _data).addInput("pure", {
                    $kind: "Pure",
                    Pure: {
                      bytes: value.toBase64()
                    }
                  });
                }
                return __privateGet(this, _data).addInput("pure", (0, import_valibot.is)(import_internal.NormalizedCallArg, value) ? (0, import_valibot.parse)(import_internal.NormalizedCallArg, value) : value instanceof Uint8Array ? import_Inputs.Inputs.Pure(value) : {
                  $kind: "UnresolvedPure",
                  UnresolvedPure: {
                    value
                  }
                });
              })
            });
            return this.pure;
          }
          /** Returns an argument for the gas coin, to be used in a transaction. */
          get gas() {
            return {
              $kind: "GasCoin",
              GasCoin: true
            };
          }
          /**
           * Add a new object input to the transaction.
           */
          object(value) {
            if (typeof value === "function") {
              return this.object(value(this));
            }
            if (typeof value === "object" && (0, import_valibot.is)(import_internal.Argument, value)) {
              return value;
            }
            const id = (0, import_utils.getIdFromCallArg)(value);
            const inserted = __privateGet(this, _data).inputs.find(i => id === (0, import_utils.getIdFromCallArg)(i));
            if (inserted?.Object?.SharedObject && typeof value === "object" && value.Object?.SharedObject) {
              inserted.Object.SharedObject.mutable = inserted.Object.SharedObject.mutable || value.Object.SharedObject.mutable;
            }
            return inserted ? {
              $kind: "Input",
              Input: __privateGet(this, _data).inputs.indexOf(inserted),
              type: "object"
            } : __privateGet(this, _data).addInput("object", typeof value === "string" ? {
              $kind: "UnresolvedObject",
              UnresolvedObject: {
                objectId: (0, import_sui_types.normalizeSuiAddress)(value)
              }
            } : value);
          }
          /**
           * Add a new object input to the transaction using the fully-resolved object reference.
           * If you only have an object ID, use `builder.object(id)` instead.
           */
          objectRef(...args) {
            return this.object(import_Inputs.Inputs.ObjectRef(...args));
          }
          /**
           * Add a new receiving input to the transaction using the fully-resolved object reference.
           * If you only have an object ID, use `builder.object(id)` instead.
           */
          receivingRef(...args) {
            return this.object(import_Inputs.Inputs.ReceivingRef(...args));
          }
          /**
           * Add a new shared object input to the transaction using the fully-resolved shared object reference.
           * If you only have an object ID, use `builder.object(id)` instead.
           */
          sharedObjectRef(...args) {
            return this.object(import_Inputs.Inputs.SharedObjectRef(...args));
          }
          /** Add a transaction to the transaction */
          add(command) {
            if (typeof command === "function") {
              return command(this);
            }
            const index = __privateGet(this, _data).commands.push(command);
            return createTransactionResult(index - 1);
          }
          // Method shorthands:
          splitCoins(coin, amounts) {
            return this.add(import_Commands.Commands.SplitCoins(typeof coin === "string" ? this.object(coin) : __privateMethod(this, _resolveArgument, resolveArgument_fn).call(this, coin), amounts.map(amount => typeof amount === "number" || typeof amount === "bigint" || typeof amount === "string" ? this.pure.u64(amount) : __privateMethod(this, _normalizeTransactionArgument, normalizeTransactionArgument_fn).call(this, amount))));
          }
          mergeCoins(destination, sources) {
            return this.add(import_Commands.Commands.MergeCoins(this.object(destination), sources.map(src => this.object(src))));
          }
          publish({
            modules,
            dependencies
          }) {
            return this.add(import_Commands.Commands.Publish({
              modules,
              dependencies
            }));
          }
          upgrade({
            modules,
            dependencies,
            package: packageId,
            ticket
          }) {
            return this.add(import_Commands.Commands.Upgrade({
              modules,
              dependencies,
              package: packageId,
              ticket: this.object(ticket)
            }));
          }
          moveCall({
            arguments: args,
            ...input
          }) {
            return this.add(import_Commands.Commands.MoveCall({
              ...input,
              arguments: args?.map(arg => __privateMethod(this, _normalizeTransactionArgument, normalizeTransactionArgument_fn).call(this, arg))
            }));
          }
          transferObjects(objects, address) {
            return this.add(import_Commands.Commands.TransferObjects(objects.map(obj => this.object(obj)), typeof address === "string" ? this.pure.address(address) : __privateMethod(this, _normalizeTransactionArgument, normalizeTransactionArgument_fn).call(this, address)));
          }
          makeMoveVec({
            type,
            elements
          }) {
            return this.add(import_Commands.Commands.MakeMoveVec({
              type,
              elements: elements.map(obj => this.object(obj))
            }));
          }
          /**
           * @deprecated Use toJSON instead.
           * For synchronous serialization, you can use `getData()`
           * */
          serialize() {
            return JSON.stringify((0, import_v1.serializeV1TransactionData)(__privateGet(this, _data).snapshot()));
          }
          async toJSON(options = {}) {
            await this.prepareForSerialization(options);
            return JSON.stringify((0, import_valibot.parse)(import_v2.SerializedTransactionDataV2, __privateGet(this, _data).snapshot()), (_key, value) => typeof value === "bigint" ? value.toString() : value, 2);
          }
          /** Build the transaction to BCS bytes, and sign it with the provided keypair. */
          async sign(options) {
            const {
              signer,
              ...buildOptions
            } = options;
            const bytes = await this.build(buildOptions);
            return signer.signTransaction(bytes);
          }
          /** Build the transaction to BCS bytes. */
          async build(options = {}) {
            await this.prepareForSerialization(options);
            await __privateMethod(this, _prepareBuild, prepareBuild_fn).call(this, options);
            return __privateGet(this, _data).build({
              onlyTransactionKind: options.onlyTransactionKind
            });
          }
          /** Derive transaction digest */
          async getDigest(options = {}) {
            await __privateMethod(this, _prepareBuild, prepareBuild_fn).call(this, options);
            return __privateGet(this, _data).getDigest();
          }
          async prepareForSerialization(options) {
            const intents = /* @__PURE__ */new Set();
            for (const command of __privateGet(this, _data).commands) {
              if (command.$Intent) {
                intents.add(command.$Intent.name);
              }
            }
            const steps = [...__privateGet(this, _serializationPlugins)];
            for (const intent of intents) {
              if (options.supportedIntents?.includes(intent)) {
                continue;
              }
              if (!__privateGet(this, _intentResolvers).has(intent)) {
                throw new Error(`Missing intent resolver for ${intent}`);
              }
              steps.push(__privateGet(this, _intentResolvers).get(intent));
            }
            await __privateMethod(this, _runPlugins, runPlugins_fn).call(this, steps, options);
          }
        };
        let Transaction = _Transaction;
        _serializationPlugins = new WeakMap();
        _buildPlugins = new WeakMap();
        _intentResolvers = new WeakMap();
        _data = new WeakMap();
        _normalizeTransactionArgument = new WeakSet();
        normalizeTransactionArgument_fn = function (arg) {
          if ((0, import_bcs.isSerializedBcs)(arg)) {
            return this.pure(arg);
          }
          return __privateMethod(this, _resolveArgument, resolveArgument_fn).call(this, arg);
        };
        _resolveArgument = new WeakSet();
        resolveArgument_fn = function (arg) {
          if (typeof arg === "function") {
            return (0, import_valibot.parse)(import_internal.Argument, arg(this));
          }
          return (0, import_valibot.parse)(import_internal.Argument, arg);
        };
        _prepareBuild = new WeakSet();
        prepareBuild_fn = async function (options) {
          if (!options.onlyTransactionKind && !__privateGet(this, _data).sender) {
            throw new Error("Missing transaction sender");
          }
          await __privateMethod(this, _runPlugins, runPlugins_fn).call(this, [...__privateGet(this, _buildPlugins), import_json_rpc_resolver.resolveTransactionData], options);
        };
        _runPlugins = new WeakSet();
        runPlugins_fn = async function (plugins, options) {
          const createNext = i => {
            if (i >= plugins.length) {
              return () => {};
            }
            const plugin = plugins[i];
            return async () => {
              const next = createNext(i + 1);
              let calledNext = false;
              let nextResolved = false;
              await plugin(__privateGet(this, _data), options, async () => {
                if (calledNext) {
                  throw new Error(`next() was call multiple times in TransactionPlugin ${i}`);
                }
                calledNext = true;
                await next();
                nextResolved = true;
              });
              if (!calledNext) {
                throw new Error(`next() was not called in TransactionPlugin ${i}`);
              }
              if (!nextResolved) {
                throw new Error(`next() was not awaited in TransactionPlugin ${i}`);
              }
            };
          };
          await createNext(0)();
        };
      }, {
        "../utils/sui-types.js": 82,
        "./Commands.js": 60,
        "./Inputs.js": 61,
        "./TransactionData.js": 64,
        "./data/internal.js": 65,
        "./data/v1.js": 66,
        "./data/v2.js": 67,
        "./json-rpc-resolver.js": 75,
        "./pure.js": 76,
        "./utils.js": 78,
        "@mysten/bcs": 13,
        "valibot": 286
      }],
      64: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var TransactionData_exports = {};
        __export(TransactionData_exports, {
          TransactionDataBuilder: () => TransactionDataBuilder
        });
        module.exports = __toCommonJS(TransactionData_exports);
        var import_bcs = require("@mysten/bcs");
        var import_valibot = require("valibot");
        var import_bcs2 = require("../bcs/index.js");
        var import_sui_types = require("../utils/sui-types.js");
        var import_internal = require("./data/internal.js");
        var import_v1 = require("./data/v1.js");
        var import_hash = require("./hash.js");
        function prepareSuiAddress(address) {
          return (0, import_sui_types.normalizeSuiAddress)(address).replace("0x", "");
        }
        class TransactionDataBuilder {
          constructor(clone) {
            this.version = 2;
            this.sender = clone?.sender ?? null;
            this.expiration = clone?.expiration ?? null;
            this.inputs = clone?.inputs ?? [];
            this.commands = clone?.commands ?? [];
            this.gasData = clone?.gasData ?? {
              budget: null,
              price: null,
              owner: null,
              payment: null
            };
          }
          static fromKindBytes(bytes) {
            const kind = import_bcs2.bcs.TransactionKind.parse(bytes);
            const programmableTx = kind.ProgrammableTransaction;
            if (!programmableTx) {
              throw new Error("Unable to deserialize from bytes.");
            }
            return TransactionDataBuilder.restore({
              version: 2,
              sender: null,
              expiration: null,
              gasData: {
                budget: null,
                owner: null,
                payment: null,
                price: null
              },
              inputs: programmableTx.inputs,
              commands: programmableTx.commands
            });
          }
          static fromBytes(bytes) {
            const rawData = import_bcs2.bcs.TransactionData.parse(bytes);
            const data = rawData?.V1;
            const programmableTx = data.kind.ProgrammableTransaction;
            if (!data || !programmableTx) {
              throw new Error("Unable to deserialize from bytes.");
            }
            return TransactionDataBuilder.restore({
              version: 2,
              sender: data.sender,
              expiration: data.expiration,
              gasData: data.gasData,
              inputs: programmableTx.inputs,
              commands: programmableTx.commands
            });
          }
          static restore(data) {
            if (data.version === 2) {
              return new TransactionDataBuilder((0, import_valibot.parse)(import_internal.TransactionData, data));
            } else {
              return new TransactionDataBuilder((0, import_valibot.parse)(import_internal.TransactionData, (0, import_v1.transactionDataFromV1)(data)));
            }
          }
          /**
           * Generate transaction digest.
           *
           * @param bytes BCS serialized transaction data
           * @returns transaction digest.
           */
          static getDigestFromBytes(bytes) {
            const hash = (0, import_hash.hashTypedData)("TransactionData", bytes);
            return (0, import_bcs.toB58)(hash);
          }
          // @deprecated use gasData instead
          get gasConfig() {
            return this.gasData;
          }
          // @deprecated use gasData instead
          set gasConfig(value) {
            this.gasData = value;
          }
          build({
            maxSizeBytes = Infinity,
            overrides,
            onlyTransactionKind
          } = {}) {
            const inputs = this.inputs;
            const commands = this.commands;
            const kind = {
              ProgrammableTransaction: {
                inputs,
                commands
              }
            };
            if (onlyTransactionKind) {
              return import_bcs2.bcs.TransactionKind.serialize(kind, {
                maxSize: maxSizeBytes
              }).toBytes();
            }
            const expiration = overrides?.expiration ?? this.expiration;
            const sender = overrides?.sender ?? this.sender;
            const gasData = {
              ...this.gasData,
              ...overrides?.gasConfig,
              ...overrides?.gasData
            };
            if (!sender) {
              throw new Error("Missing transaction sender");
            }
            if (!gasData.budget) {
              throw new Error("Missing gas budget");
            }
            if (!gasData.payment) {
              throw new Error("Missing gas payment");
            }
            if (!gasData.price) {
              throw new Error("Missing gas price");
            }
            const transactionData = {
              sender: prepareSuiAddress(sender),
              expiration: expiration ? expiration : {
                None: true
              },
              gasData: {
                payment: gasData.payment,
                owner: prepareSuiAddress(this.gasData.owner ?? sender),
                price: BigInt(gasData.price),
                budget: BigInt(gasData.budget)
              },
              kind: {
                ProgrammableTransaction: {
                  inputs,
                  commands
                }
              }
            };
            return import_bcs2.bcs.TransactionData.serialize({
              V1: transactionData
            }, {
              maxSize: maxSizeBytes
            }).toBytes();
          }
          addInput(type, arg) {
            const index = this.inputs.length;
            this.inputs.push(arg);
            return {
              Input: index,
              type,
              $kind: "Input"
            };
          }
          getInputUses(index, fn) {
            this.mapArguments((arg, command) => {
              if (arg.$kind === "Input" && arg.Input === index) {
                fn(arg, command);
              }
              return arg;
            });
          }
          mapArguments(fn) {
            for (const command of this.commands) {
              switch (command.$kind) {
                case "MoveCall":
                  command.MoveCall.arguments = command.MoveCall.arguments.map(arg => fn(arg, command));
                  break;
                case "TransferObjects":
                  command.TransferObjects.objects = command.TransferObjects.objects.map(arg => fn(arg, command));
                  command.TransferObjects.address = fn(command.TransferObjects.address, command);
                  break;
                case "SplitCoins":
                  command.SplitCoins.coin = fn(command.SplitCoins.coin, command);
                  command.SplitCoins.amounts = command.SplitCoins.amounts.map(arg => fn(arg, command));
                  break;
                case "MergeCoins":
                  command.MergeCoins.destination = fn(command.MergeCoins.destination, command);
                  command.MergeCoins.sources = command.MergeCoins.sources.map(arg => fn(arg, command));
                  break;
                case "MakeMoveVec":
                  command.MakeMoveVec.elements = command.MakeMoveVec.elements.map(arg => fn(arg, command));
                  break;
                case "Upgrade":
                  command.Upgrade.ticket = fn(command.Upgrade.ticket, command);
                  break;
                case "$Intent":
                  const inputs = command.$Intent.inputs;
                  command.$Intent.inputs = {};
                  for (const [key, value] of Object.entries(inputs)) {
                    command.$Intent.inputs[key] = Array.isArray(value) ? value.map(arg => fn(arg, command)) : fn(value, command);
                  }
                  break;
                case "Publish":
                  break;
                default:
                  throw new Error(`Unexpected transaction kind: ${command.$kind}`);
              }
            }
          }
          replaceCommand(index, replacement) {
            if (!Array.isArray(replacement)) {
              this.commands[index] = replacement;
              return;
            }
            const sizeDiff = replacement.length - 1;
            this.commands.splice(index, 1, ...replacement);
            if (sizeDiff !== 0) {
              this.mapArguments(arg => {
                switch (arg.$kind) {
                  case "Result":
                    if (arg.Result > index) {
                      arg.Result += sizeDiff;
                    }
                    break;
                  case "NestedResult":
                    if (arg.NestedResult[0] > index) {
                      arg.NestedResult[0] += sizeDiff;
                    }
                    break;
                }
                return arg;
              });
            }
          }
          getDigest() {
            const bytes = this.build({
              onlyTransactionKind: false
            });
            return TransactionDataBuilder.getDigestFromBytes(bytes);
          }
          snapshot() {
            return (0, import_valibot.parse)(import_internal.TransactionData, this);
          }
        }
      }, {
        "../bcs/index.js": 20,
        "../utils/sui-types.js": 82,
        "./data/internal.js": 65,
        "./data/v1.js": 66,
        "./hash.js": 72,
        "@mysten/bcs": 13,
        "valibot": 286
      }],
      65: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var internal_exports = {};
        __export(internal_exports, {
          $Intent: () => $Intent,
          Argument: () => Argument,
          BCSBytes: () => BCSBytes,
          Command: () => Command,
          GasData: () => GasData,
          JsonU64: () => JsonU64,
          NormalizedCallArg: () => NormalizedCallArg,
          ObjectArg: () => ObjectArg,
          ObjectID: () => ObjectID,
          ObjectRef: () => ObjectRef,
          OpenMoveTypeSignature: () => OpenMoveTypeSignature,
          OpenMoveTypeSignatureBody: () => OpenMoveTypeSignatureBody,
          StructTag: () => StructTag,
          SuiAddress: () => SuiAddress,
          TransactionData: () => TransactionData,
          TransactionExpiration: () => TransactionExpiration,
          safeEnum: () => safeEnum
        });
        module.exports = __toCommonJS(internal_exports);
        var import_valibot = require("valibot");
        var import_sui_types = require("../../utils/sui-types.js");
        function safeEnum(options) {
          const unionOptions = Object.entries(options).map(([key, value]) => (0, import_valibot.object)({
            [key]: value
          }));
          return (0, import_valibot.transform)((0, import_valibot.union)(unionOptions), value => ({
            ...value,
            $kind: Object.keys(value)[0]
          }));
        }
        const SuiAddress = (0, import_valibot.transform)((0, import_valibot.string)(), value => (0, import_sui_types.normalizeSuiAddress)(value), [(0, import_valibot.custom)(import_sui_types.isValidSuiAddress)]);
        const ObjectID = SuiAddress;
        const BCSBytes = (0, import_valibot.string)();
        const JsonU64 = (0, import_valibot.union)([(0, import_valibot.string)(), (0, import_valibot.number)([(0, import_valibot.integer)()])], [(0, import_valibot.custom)(val => {
          try {
            BigInt(val);
            return BigInt(val) >= 0 && BigInt(val) <= 18446744073709551615n;
          } catch {
            return false;
          }
        }, "Invalid u64")]);
        const ObjectRef = (0, import_valibot.object)({
          objectId: SuiAddress,
          version: JsonU64,
          digest: (0, import_valibot.string)()
        });
        const Argument = (0, import_valibot.transform)((0, import_valibot.union)([(0, import_valibot.object)({
          GasCoin: (0, import_valibot.literal)(true)
        }), (0, import_valibot.object)({
          Input: (0, import_valibot.number)([(0, import_valibot.integer)()]),
          type: (0, import_valibot.optional)((0, import_valibot.literal)("pure"))
        }), (0, import_valibot.object)({
          Input: (0, import_valibot.number)([(0, import_valibot.integer)()]),
          type: (0, import_valibot.optional)((0, import_valibot.literal)("object"))
        }), (0, import_valibot.object)({
          Result: (0, import_valibot.number)([(0, import_valibot.integer)()])
        }), (0, import_valibot.object)({
          NestedResult: (0, import_valibot.tuple)([(0, import_valibot.number)([(0, import_valibot.integer)()]), (0, import_valibot.number)([(0, import_valibot.integer)()])])
        })]), value => ({
          ...value,
          $kind: Object.keys(value)[0]
        })
        // Defined manually to add `type?: 'pure' | 'object'` to Input
        );

        const GasData = (0, import_valibot.object)({
          budget: (0, import_valibot.nullable)(JsonU64),
          price: (0, import_valibot.nullable)(JsonU64),
          owner: (0, import_valibot.nullable)(SuiAddress),
          payment: (0, import_valibot.nullable)((0, import_valibot.array)(ObjectRef))
        });
        const StructTag = (0, import_valibot.object)({
          address: (0, import_valibot.string)(),
          module: (0, import_valibot.string)(),
          name: (0, import_valibot.string)(),
          // type_params in rust, should be updated to use camelCase
          typeParams: (0, import_valibot.array)((0, import_valibot.string)())
        });
        const OpenMoveTypeSignatureBody = (0, import_valibot.union)([(0, import_valibot.literal)("address"), (0, import_valibot.literal)("bool"), (0, import_valibot.literal)("u8"), (0, import_valibot.literal)("u16"), (0, import_valibot.literal)("u32"), (0, import_valibot.literal)("u64"), (0, import_valibot.literal)("u128"), (0, import_valibot.literal)("u256"), (0, import_valibot.object)({
          vector: (0, import_valibot.recursive)(() => OpenMoveTypeSignatureBody)
        }), (0, import_valibot.object)({
          datatype: (0, import_valibot.object)({
            package: (0, import_valibot.string)(),
            module: (0, import_valibot.string)(),
            type: (0, import_valibot.string)(),
            typeParameters: (0, import_valibot.array)((0, import_valibot.recursive)(() => OpenMoveTypeSignatureBody))
          })
        }), (0, import_valibot.object)({
          typeParameter: (0, import_valibot.number)([(0, import_valibot.integer)()])
        })]);
        const OpenMoveTypeSignature = (0, import_valibot.object)({
          ref: (0, import_valibot.nullable)((0, import_valibot.union)([(0, import_valibot.literal)("&"), (0, import_valibot.literal)("&mut")])),
          body: OpenMoveTypeSignatureBody
        });
        const ProgrammableMoveCall = (0, import_valibot.object)({
          package: ObjectID,
          module: (0, import_valibot.string)(),
          function: (0, import_valibot.string)(),
          // snake case in rust
          typeArguments: (0, import_valibot.array)((0, import_valibot.string)()),
          arguments: (0, import_valibot.array)(Argument),
          _argumentTypes: (0, import_valibot.optional)((0, import_valibot.nullable)((0, import_valibot.array)(OpenMoveTypeSignature)))
        });
        const $Intent = (0, import_valibot.object)({
          name: (0, import_valibot.string)(),
          inputs: (0, import_valibot.record)((0, import_valibot.string)(), (0, import_valibot.union)([Argument, (0, import_valibot.array)(Argument)])),
          data: (0, import_valibot.record)((0, import_valibot.string)(), (0, import_valibot.unknown)())
        });
        const Command = safeEnum({
          MoveCall: ProgrammableMoveCall,
          TransferObjects: (0, import_valibot.object)({
            objects: (0, import_valibot.array)(Argument),
            address: Argument
          }),
          SplitCoins: (0, import_valibot.object)({
            coin: Argument,
            amounts: (0, import_valibot.array)(Argument)
          }),
          MergeCoins: (0, import_valibot.object)({
            destination: Argument,
            sources: (0, import_valibot.array)(Argument)
          }),
          Publish: (0, import_valibot.object)({
            modules: (0, import_valibot.array)(BCSBytes),
            dependencies: (0, import_valibot.array)(ObjectID)
          }),
          MakeMoveVec: (0, import_valibot.object)({
            type: (0, import_valibot.nullable)((0, import_valibot.string)()),
            elements: (0, import_valibot.array)(Argument)
          }),
          Upgrade: (0, import_valibot.object)({
            modules: (0, import_valibot.array)(BCSBytes),
            dependencies: (0, import_valibot.array)(ObjectID),
            package: ObjectID,
            ticket: Argument
          }),
          $Intent
        });
        const ObjectArg = safeEnum({
          ImmOrOwnedObject: ObjectRef,
          SharedObject: (0, import_valibot.object)({
            objectId: ObjectID,
            // snake case in rust
            initialSharedVersion: JsonU64,
            mutable: (0, import_valibot.boolean)()
          }),
          Receiving: ObjectRef
        });
        const CallArg = safeEnum({
          Object: ObjectArg,
          Pure: (0, import_valibot.object)({
            bytes: BCSBytes
          }),
          UnresolvedPure: (0, import_valibot.object)({
            value: (0, import_valibot.unknown)()
          }),
          UnresolvedObject: (0, import_valibot.object)({
            objectId: ObjectID,
            version: (0, import_valibot.optional)((0, import_valibot.nullable)(JsonU64)),
            digest: (0, import_valibot.optional)((0, import_valibot.nullable)((0, import_valibot.string)())),
            initialSharedVersion: (0, import_valibot.optional)((0, import_valibot.nullable)(JsonU64))
          })
        });
        const NormalizedCallArg = safeEnum({
          Object: ObjectArg,
          Pure: (0, import_valibot.object)({
            bytes: BCSBytes
          })
        });
        const TransactionExpiration = safeEnum({
          None: (0, import_valibot.literal)(true),
          Epoch: JsonU64
        });
        const TransactionData = (0, import_valibot.object)({
          version: (0, import_valibot.literal)(2),
          sender: (0, import_valibot.nullish)(SuiAddress),
          expiration: (0, import_valibot.nullish)(TransactionExpiration),
          gasData: GasData,
          inputs: (0, import_valibot.array)(CallArg),
          commands: (0, import_valibot.array)(Command)
        });
      }, {
        "../../utils/sui-types.js": 82,
        "valibot": 286
      }],
      66: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var v1_exports = {};
        __export(v1_exports, {
          NormalizedCallArg: () => NormalizedCallArg,
          ObjectRef: () => ObjectRef,
          SerializedTransactionDataV1: () => SerializedTransactionDataV1,
          StructTag: () => StructTag,
          TransactionArgument: () => TransactionArgument,
          TypeTag: () => TypeTag,
          serializeV1TransactionData: () => serializeV1TransactionData,
          transactionDataFromV1: () => transactionDataFromV1
        });
        module.exports = __toCommonJS(v1_exports);
        var import_bcs = require("@mysten/bcs");
        var import_valibot = require("valibot");
        var import_bcs2 = require("../../bcs/index.js");
        var import_internal = require("./internal.js");
        const ObjectRef = (0, import_valibot.object)({
          digest: (0, import_valibot.string)(),
          objectId: (0, import_valibot.string)(),
          version: (0, import_valibot.union)([(0, import_valibot.number)([(0, import_valibot.integer)()]), (0, import_valibot.string)(), (0, import_valibot.bigint)()])
        });
        const ObjectArg = (0, import_internal.safeEnum)({
          ImmOrOwned: ObjectRef,
          Shared: (0, import_valibot.object)({
            objectId: import_internal.ObjectID,
            initialSharedVersion: import_internal.JsonU64,
            mutable: (0, import_valibot.boolean)()
          }),
          Receiving: ObjectRef
        });
        const NormalizedCallArg = (0, import_internal.safeEnum)({
          Object: ObjectArg,
          Pure: (0, import_valibot.array)((0, import_valibot.number)([(0, import_valibot.integer)()]))
        });
        const TransactionInput = (0, import_valibot.union)([(0, import_valibot.object)({
          kind: (0, import_valibot.literal)("Input"),
          index: (0, import_valibot.number)([(0, import_valibot.integer)()]),
          value: (0, import_valibot.unknown)(),
          type: (0, import_valibot.optional)((0, import_valibot.literal)("object"))
        }), (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("Input"),
          index: (0, import_valibot.number)([(0, import_valibot.integer)()]),
          value: (0, import_valibot.unknown)(),
          type: (0, import_valibot.literal)("pure")
        })]);
        const TransactionExpiration = (0, import_valibot.union)([(0, import_valibot.object)({
          Epoch: (0, import_valibot.number)([(0, import_valibot.integer)()])
        }), (0, import_valibot.object)({
          None: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
        })]);
        const StringEncodedBigint = (0, import_valibot.union)([(0, import_valibot.number)(), (0, import_valibot.string)(), (0, import_valibot.bigint)()], [(0, import_valibot.custom)(val => {
          if (!["string", "number", "bigint"].includes(typeof val)) return false;
          try {
            BigInt(val);
            return true;
          } catch {
            return false;
          }
        })]);
        const TypeTag = (0, import_valibot.union)([(0, import_valibot.object)({
          bool: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
        }), (0, import_valibot.object)({
          u8: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
        }), (0, import_valibot.object)({
          u64: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
        }), (0, import_valibot.object)({
          u128: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
        }), (0, import_valibot.object)({
          address: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
        }), (0, import_valibot.object)({
          signer: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
        }), (0, import_valibot.object)({
          vector: (0, import_valibot.recursive)(() => TypeTag)
        }), (0, import_valibot.object)({
          struct: (0, import_valibot.recursive)(() => StructTag)
        }), (0, import_valibot.object)({
          u16: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
        }), (0, import_valibot.object)({
          u32: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
        }), (0, import_valibot.object)({
          u256: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
        })]);
        const StructTag = (0, import_valibot.object)({
          address: (0, import_valibot.string)(),
          module: (0, import_valibot.string)(),
          name: (0, import_valibot.string)(),
          typeParams: (0, import_valibot.array)(TypeTag)
        });
        const GasConfig = (0, import_valibot.object)({
          budget: (0, import_valibot.optional)(StringEncodedBigint),
          price: (0, import_valibot.optional)(StringEncodedBigint),
          payment: (0, import_valibot.optional)((0, import_valibot.array)(ObjectRef)),
          owner: (0, import_valibot.optional)((0, import_valibot.string)())
        });
        const TransactionArgumentTypes = [TransactionInput, (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("GasCoin")
        }), (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("Result"),
          index: (0, import_valibot.number)([(0, import_valibot.integer)()])
        }), (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("NestedResult"),
          index: (0, import_valibot.number)([(0, import_valibot.integer)()]),
          resultIndex: (0, import_valibot.number)([(0, import_valibot.integer)()])
        })];
        const TransactionArgument = (0, import_valibot.union)([...TransactionArgumentTypes]);
        const MoveCallTransaction = (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("MoveCall"),
          target: (0, import_valibot.string)([(0, import_valibot.custom)(target => target.split("::").length === 3)]),
          typeArguments: (0, import_valibot.array)((0, import_valibot.string)()),
          arguments: (0, import_valibot.array)(TransactionArgument)
        });
        const TransferObjectsTransaction = (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("TransferObjects"),
          objects: (0, import_valibot.array)(TransactionArgument),
          address: TransactionArgument
        });
        const SplitCoinsTransaction = (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("SplitCoins"),
          coin: TransactionArgument,
          amounts: (0, import_valibot.array)(TransactionArgument)
        });
        const MergeCoinsTransaction = (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("MergeCoins"),
          destination: TransactionArgument,
          sources: (0, import_valibot.array)(TransactionArgument)
        });
        const MakeMoveVecTransaction = (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("MakeMoveVec"),
          type: (0, import_valibot.union)([(0, import_valibot.object)({
            Some: TypeTag
          }), (0, import_valibot.object)({
            None: (0, import_valibot.nullable)((0, import_valibot.literal)(true))
          })]),
          objects: (0, import_valibot.array)(TransactionArgument)
        });
        const PublishTransaction = (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("Publish"),
          modules: (0, import_valibot.array)((0, import_valibot.array)((0, import_valibot.number)([(0, import_valibot.integer)()]))),
          dependencies: (0, import_valibot.array)((0, import_valibot.string)())
        });
        const UpgradeTransaction = (0, import_valibot.object)({
          kind: (0, import_valibot.literal)("Upgrade"),
          modules: (0, import_valibot.array)((0, import_valibot.array)((0, import_valibot.number)([(0, import_valibot.integer)()]))),
          dependencies: (0, import_valibot.array)((0, import_valibot.string)()),
          packageId: (0, import_valibot.string)(),
          ticket: TransactionArgument
        });
        const TransactionTypes = [MoveCallTransaction, TransferObjectsTransaction, SplitCoinsTransaction, MergeCoinsTransaction, PublishTransaction, UpgradeTransaction, MakeMoveVecTransaction];
        const TransactionType = (0, import_valibot.union)([...TransactionTypes]);
        const SerializedTransactionDataV1 = (0, import_valibot.object)({
          version: (0, import_valibot.literal)(1),
          sender: (0, import_valibot.optional)((0, import_valibot.string)()),
          expiration: (0, import_valibot.nullish)(TransactionExpiration),
          gasConfig: GasConfig,
          inputs: (0, import_valibot.array)(TransactionInput),
          transactions: (0, import_valibot.array)(TransactionType)
        });
        function serializeV1TransactionData(transactionData) {
          const inputs = transactionData.inputs.map((input, index) => {
            if (input.Object) {
              return {
                kind: "Input",
                index,
                value: {
                  Object: input.Object.ImmOrOwnedObject ? {
                    ImmOrOwned: input.Object.ImmOrOwnedObject
                  } : input.Object.Receiving ? {
                    Receiving: {
                      digest: input.Object.Receiving.digest,
                      version: input.Object.Receiving.version,
                      objectId: input.Object.Receiving.objectId
                    }
                  } : {
                    Shared: {
                      mutable: input.Object.SharedObject.mutable,
                      initialSharedVersion: input.Object.SharedObject.initialSharedVersion,
                      objectId: input.Object.SharedObject.objectId
                    }
                  }
                },
                type: "object"
              };
            }
            if (input.Pure) {
              return {
                kind: "Input",
                index,
                value: {
                  Pure: Array.from((0, import_bcs.fromB64)(input.Pure.bytes))
                },
                type: "pure"
              };
            }
            if (input.UnresolvedPure) {
              return {
                kind: "Input",
                type: "pure",
                index,
                value: input.UnresolvedPure.value
              };
            }
            if (input.UnresolvedObject) {
              return {
                kind: "Input",
                type: "object",
                index,
                value: input.UnresolvedObject.objectId
              };
            }
            throw new Error("Invalid input");
          });
          return {
            version: 1,
            sender: transactionData.sender ?? void 0,
            expiration: transactionData.expiration?.$kind === "Epoch" ? {
              Epoch: Number(transactionData.expiration.Epoch)
            } : transactionData.expiration ? {
              None: true
            } : null,
            gasConfig: {
              owner: transactionData.gasData.owner ?? void 0,
              budget: transactionData.gasData.budget ?? void 0,
              price: transactionData.gasData.price ?? void 0,
              payment: transactionData.gasData.payment ?? void 0
            },
            inputs,
            transactions: transactionData.commands.map(command => {
              if (command.MakeMoveVec) {
                return {
                  kind: "MakeMoveVec",
                  type: command.MakeMoveVec.type === null ? {
                    None: true
                  } : {
                    Some: import_bcs2.TypeTagSerializer.parseFromStr(command.MakeMoveVec.type)
                  },
                  objects: command.MakeMoveVec.elements.map(arg => convertTransactionArgument(arg, inputs))
                };
              }
              if (command.MergeCoins) {
                return {
                  kind: "MergeCoins",
                  destination: convertTransactionArgument(command.MergeCoins.destination, inputs),
                  sources: command.MergeCoins.sources.map(arg => convertTransactionArgument(arg, inputs))
                };
              }
              if (command.MoveCall) {
                return {
                  kind: "MoveCall",
                  target: `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`,
                  typeArguments: command.MoveCall.typeArguments,
                  arguments: command.MoveCall.arguments.map(arg => convertTransactionArgument(arg, inputs))
                };
              }
              if (command.Publish) {
                return {
                  kind: "Publish",
                  modules: command.Publish.modules.map(mod => Array.from((0, import_bcs.fromB64)(mod))),
                  dependencies: command.Publish.dependencies
                };
              }
              if (command.SplitCoins) {
                return {
                  kind: "SplitCoins",
                  coin: convertTransactionArgument(command.SplitCoins.coin, inputs),
                  amounts: command.SplitCoins.amounts.map(arg => convertTransactionArgument(arg, inputs))
                };
              }
              if (command.TransferObjects) {
                return {
                  kind: "TransferObjects",
                  objects: command.TransferObjects.objects.map(arg => convertTransactionArgument(arg, inputs)),
                  address: convertTransactionArgument(command.TransferObjects.address, inputs)
                };
              }
              if (command.Upgrade) {
                return {
                  kind: "Upgrade",
                  modules: command.Upgrade.modules.map(mod => Array.from((0, import_bcs.fromB64)(mod))),
                  dependencies: command.Upgrade.dependencies,
                  packageId: command.Upgrade.package,
                  ticket: convertTransactionArgument(command.Upgrade.ticket, inputs)
                };
              }
              throw new Error(`Unknown transaction ${Object.keys(command)}`);
            })
          };
        }
        function convertTransactionArgument(arg, inputs) {
          if (arg.$kind === "GasCoin") {
            return {
              kind: "GasCoin"
            };
          }
          if (arg.$kind === "Result") {
            return {
              kind: "Result",
              index: arg.Result
            };
          }
          if (arg.$kind === "NestedResult") {
            return {
              kind: "NestedResult",
              index: arg.NestedResult[0],
              resultIndex: arg.NestedResult[1]
            };
          }
          if (arg.$kind === "Input") {
            return inputs[arg.Input];
          }
          throw new Error(`Invalid argument ${Object.keys(arg)}`);
        }
        function transactionDataFromV1(data) {
          return (0, import_valibot.parse)(import_internal.TransactionData, {
            version: 2,
            sender: data.sender ?? null,
            expiration: data.expiration ? "Epoch" in data.expiration ? {
              Epoch: data.expiration.Epoch
            } : {
              None: true
            } : null,
            gasData: {
              owner: data.gasConfig.owner ?? null,
              budget: data.gasConfig.budget?.toString() ?? null,
              price: data.gasConfig.price?.toString() ?? null,
              payment: data.gasConfig.payment?.map(ref => ({
                digest: ref.digest,
                objectId: ref.objectId,
                version: ref.version.toString()
              })) ?? null
            },
            inputs: data.inputs.map(input => {
              if (input.kind === "Input") {
                if ((0, import_valibot.is)(NormalizedCallArg, input.value)) {
                  const value = (0, import_valibot.parse)(NormalizedCallArg, input.value);
                  if (value.Object) {
                    if (value.Object.ImmOrOwned) {
                      return {
                        Object: {
                          ImmOrOwnedObject: {
                            objectId: value.Object.ImmOrOwned.objectId,
                            version: String(value.Object.ImmOrOwned.version),
                            digest: value.Object.ImmOrOwned.digest
                          }
                        }
                      };
                    }
                    if (value.Object.Shared) {
                      return {
                        Object: {
                          SharedObject: {
                            mutable: value.Object.Shared.mutable ?? null,
                            initialSharedVersion: value.Object.Shared.initialSharedVersion,
                            objectId: value.Object.Shared.objectId
                          }
                        }
                      };
                    }
                    if (value.Object.Receiving) {
                      return {
                        Object: {
                          Receiving: {
                            digest: value.Object.Receiving.digest,
                            version: String(value.Object.Receiving.version),
                            objectId: value.Object.Receiving.objectId
                          }
                        }
                      };
                    }
                    throw new Error("Invalid object input");
                  }
                  return {
                    Pure: {
                      bytes: (0, import_bcs.toB64)(new Uint8Array(value.Pure))
                    }
                  };
                }
                if (input.type === "object") {
                  return {
                    UnresolvedObject: {
                      objectId: input.value
                    }
                  };
                }
                return {
                  UnresolvedPure: {
                    value: input.value
                  }
                };
              }
              throw new Error("Invalid input");
            }),
            commands: data.transactions.map(transaction => {
              switch (transaction.kind) {
                case "MakeMoveVec":
                  return {
                    MakeMoveVec: {
                      type: "Some" in transaction.type ? import_bcs2.TypeTagSerializer.tagToString(transaction.type.Some) : null,
                      elements: transaction.objects.map(arg => parseV1TransactionArgument(arg))
                    }
                  };
                case "MergeCoins":
                  {
                    return {
                      MergeCoins: {
                        destination: parseV1TransactionArgument(transaction.destination),
                        sources: transaction.sources.map(arg => parseV1TransactionArgument(arg))
                      }
                    };
                  }
                case "MoveCall":
                  {
                    const [pkg, mod, fn] = transaction.target.split("::");
                    return {
                      MoveCall: {
                        package: pkg,
                        module: mod,
                        function: fn,
                        typeArguments: transaction.typeArguments,
                        arguments: transaction.arguments.map(arg => parseV1TransactionArgument(arg))
                      }
                    };
                  }
                case "Publish":
                  {
                    return {
                      Publish: {
                        modules: transaction.modules.map(mod => (0, import_bcs.toB64)(Uint8Array.from(mod))),
                        dependencies: transaction.dependencies
                      }
                    };
                  }
                case "SplitCoins":
                  {
                    return {
                      SplitCoins: {
                        coin: parseV1TransactionArgument(transaction.coin),
                        amounts: transaction.amounts.map(arg => parseV1TransactionArgument(arg))
                      }
                    };
                  }
                case "TransferObjects":
                  {
                    return {
                      TransferObjects: {
                        objects: transaction.objects.map(arg => parseV1TransactionArgument(arg)),
                        address: parseV1TransactionArgument(transaction.address)
                      }
                    };
                  }
                case "Upgrade":
                  {
                    return {
                      Upgrade: {
                        modules: transaction.modules.map(mod => (0, import_bcs.toB64)(Uint8Array.from(mod))),
                        dependencies: transaction.dependencies,
                        package: transaction.packageId,
                        ticket: parseV1TransactionArgument(transaction.ticket)
                      }
                    };
                  }
              }
              throw new Error(`Unknown transaction ${Object.keys(transaction)}`);
            })
          });
        }
        function parseV1TransactionArgument(arg) {
          switch (arg.kind) {
            case "GasCoin":
              {
                return {
                  GasCoin: true
                };
              }
            case "Result":
              return {
                Result: arg.index
              };
            case "NestedResult":
              {
                return {
                  NestedResult: [arg.index, arg.resultIndex]
                };
              }
            case "Input":
              {
                return {
                  Input: arg.index
                };
              }
          }
        }
      }, {
        "../../bcs/index.js": 20,
        "./internal.js": 65,
        "@mysten/bcs": 13,
        "valibot": 286
      }],
      67: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var v2_exports = {};
        __export(v2_exports, {
          SerializedTransactionDataV2: () => SerializedTransactionDataV2
        });
        module.exports = __toCommonJS(v2_exports);
        var import_valibot = require("valibot");
        var import_internal = require("./internal.js");
        function enumUnion(options) {
          return (0, import_valibot.union)(Object.entries(options).map(([key, value]) => (0, import_valibot.object)({
            [key]: value
          })));
        }
        const Argument = enumUnion({
          GasCoin: (0, import_valibot.literal)(true),
          Input: (0, import_valibot.number)([(0, import_valibot.integer)()]),
          Result: (0, import_valibot.number)([(0, import_valibot.integer)()]),
          NestedResult: (0, import_valibot.tuple)([(0, import_valibot.number)([(0, import_valibot.integer)()]), (0, import_valibot.number)([(0, import_valibot.integer)()])])
        });
        const GasData = (0, import_valibot.object)({
          budget: (0, import_valibot.nullable)(import_internal.JsonU64),
          price: (0, import_valibot.nullable)(import_internal.JsonU64),
          owner: (0, import_valibot.nullable)(import_internal.SuiAddress),
          payment: (0, import_valibot.nullable)((0, import_valibot.array)(import_internal.ObjectRef))
        });
        const ProgrammableMoveCall = (0, import_valibot.object)({
          package: import_internal.ObjectID,
          module: (0, import_valibot.string)(),
          function: (0, import_valibot.string)(),
          // snake case in rust
          typeArguments: (0, import_valibot.array)((0, import_valibot.string)()),
          arguments: (0, import_valibot.array)(Argument)
        });
        const $Intent = (0, import_valibot.object)({
          name: (0, import_valibot.string)(),
          inputs: (0, import_valibot.record)((0, import_valibot.string)(), (0, import_valibot.union)([Argument, (0, import_valibot.array)(Argument)])),
          data: (0, import_valibot.record)((0, import_valibot.string)(), (0, import_valibot.unknown)())
        });
        const Command = enumUnion({
          MoveCall: ProgrammableMoveCall,
          TransferObjects: (0, import_valibot.object)({
            objects: (0, import_valibot.array)(Argument),
            address: Argument
          }),
          SplitCoins: (0, import_valibot.object)({
            coin: Argument,
            amounts: (0, import_valibot.array)(Argument)
          }),
          MergeCoins: (0, import_valibot.object)({
            destination: Argument,
            sources: (0, import_valibot.array)(Argument)
          }),
          Publish: (0, import_valibot.object)({
            modules: (0, import_valibot.array)(import_internal.BCSBytes),
            dependencies: (0, import_valibot.array)(import_internal.ObjectID)
          }),
          MakeMoveVec: (0, import_valibot.object)({
            type: (0, import_valibot.nullable)((0, import_valibot.string)()),
            elements: (0, import_valibot.array)(Argument)
          }),
          Upgrade: (0, import_valibot.object)({
            modules: (0, import_valibot.array)(import_internal.BCSBytes),
            dependencies: (0, import_valibot.array)(import_internal.ObjectID),
            package: import_internal.ObjectID,
            ticket: Argument
          }),
          $Intent
        });
        const ObjectArg = enumUnion({
          ImmOrOwnedObject: import_internal.ObjectRef,
          SharedObject: (0, import_valibot.object)({
            objectId: import_internal.ObjectID,
            // snake case in rust
            initialSharedVersion: import_internal.JsonU64,
            mutable: (0, import_valibot.boolean)()
          }),
          Receiving: import_internal.ObjectRef
        });
        const CallArg = enumUnion({
          Object: ObjectArg,
          Pure: (0, import_valibot.object)({
            bytes: import_internal.BCSBytes
          }),
          UnresolvedPure: (0, import_valibot.object)({
            value: (0, import_valibot.unknown)()
          }),
          UnresolvedObject: (0, import_valibot.object)({
            objectId: import_internal.ObjectID,
            version: (0, import_valibot.optional)((0, import_valibot.nullable)(import_internal.JsonU64)),
            digest: (0, import_valibot.optional)((0, import_valibot.nullable)((0, import_valibot.string)())),
            initialSharedVersion: (0, import_valibot.optional)((0, import_valibot.nullable)(import_internal.JsonU64))
          })
        });
        const TransactionExpiration = enumUnion({
          None: (0, import_valibot.literal)(true),
          Epoch: import_internal.JsonU64
        });
        const SerializedTransactionDataV2 = (0, import_valibot.object)({
          version: (0, import_valibot.literal)(2),
          sender: (0, import_valibot.nullish)(import_internal.SuiAddress),
          expiration: (0, import_valibot.nullish)(TransactionExpiration),
          gasData: GasData,
          inputs: (0, import_valibot.array)(CallArg),
          commands: (0, import_valibot.array)(Command)
        });
      }, {
        "./internal.js": 65,
        "valibot": 286
      }],
      68: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var caching_exports = {};
        __export(caching_exports, {
          CachingTransactionExecutor: () => CachingTransactionExecutor
        });
        module.exports = __toCommonJS(caching_exports);
        var import_bcs = require("../../bcs/index.js");
        var import_ObjectCache = require("../ObjectCache.js");
        var import_Transaction = require("../Transaction.js");
        var _client;
        class CachingTransactionExecutor {
          constructor({
            client,
            ...options
          }) {
            __privateAdd(this, _client, void 0);
            __privateSet(this, _client, client);
            this.cache = new import_ObjectCache.ObjectCache(options);
          }
          /**
           * Clears all Owned objects
           * Immutable objects, Shared objects, and Move function definitions will be preserved
           */
          async reset() {
            await this.cache.clearOwnedObjects();
            await this.cache.clearCustom();
          }
          async buildTransaction({
            transaction
          }) {
            transaction.addBuildPlugin(this.cache.asPlugin());
            return transaction.build({
              client: __privateGet(this, _client)
            });
          }
          async executeTransaction({
            transaction,
            options,
            ...input
          }) {
            const bytes = (0, import_Transaction.isTransaction)(transaction) ? await this.buildTransaction({
              transaction
            }) : transaction;
            const results = await __privateGet(this, _client).executeTransactionBlock({
              ...input,
              transactionBlock: bytes,
              options: {
                ...options,
                showRawEffects: true
              }
            });
            if (results.rawEffects) {
              const effects = import_bcs.bcs.TransactionEffects.parse(Uint8Array.from(results.rawEffects));
              await this.applyEffects(effects);
            }
            return results;
          }
          async signAndExecuteTransaction({
            options,
            transaction,
            ...input
          }) {
            transaction.setSenderIfNotSet(input.signer.toSuiAddress());
            const bytes = await this.buildTransaction({
              transaction
            });
            const {
              signature
            } = await input.signer.signTransaction(bytes);
            const results = await this.executeTransaction({
              transaction: bytes,
              signature,
              options
            });
            return results;
          }
          async applyEffects(effects) {
            await this.cache.applyEffects(effects);
          }
        }
        _client = new WeakMap();
      }, {
        "../../bcs/index.js": 20,
        "../ObjectCache.js": 62,
        "../Transaction.js": 63
      }],
      69: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var __privateMethod = (obj, member, method) => {
          __accessCheck(obj, member, "access private method");
          return method;
        };
        var parallel_exports = {};
        __export(parallel_exports, {
          ParallelTransactionExecutor: () => ParallelTransactionExecutor
        });
        module.exports = __toCommonJS(parallel_exports);
        var import_bcs = require("@mysten/bcs");
        var import_bcs2 = require("../../bcs/index.js");
        var import_Transaction = require("../Transaction.js");
        var import_caching = require("./caching.js");
        var import_queue = require("./queue.js");
        var import_serial = require("./serial.js");
        var _signer, _client, _coinBatchSize, _initialCoinBalance, _minimumCoinBalance, _maxPoolSize, _sourceCoins, _coinPool, _cache, _objectIdQueues, _buildQueue, _executeQueue, _getUsedObjects, getUsedObjects_fn, _execute, execute_fn, _getGasCoin, getGasCoin_fn, _refillCoinPool, refillCoinPool_fn;
        const PARALLEL_EXECUTOR_DEFAULTS = {
          coinBatchSize: 20,
          initialCoinBalance: 200000000n,
          minimumCoinBalance: 50000000n,
          maxPoolSize: 50
        };
        class ParallelTransactionExecutor {
          constructor(options) {
            __privateAdd(this, _getUsedObjects);
            __privateAdd(this, _execute);
            __privateAdd(this, _getGasCoin);
            __privateAdd(this, _refillCoinPool);
            __privateAdd(this, _signer, void 0);
            __privateAdd(this, _client, void 0);
            __privateAdd(this, _coinBatchSize, void 0);
            __privateAdd(this, _initialCoinBalance, void 0);
            __privateAdd(this, _minimumCoinBalance, void 0);
            __privateAdd(this, _maxPoolSize, void 0);
            __privateAdd(this, _sourceCoins, void 0);
            __privateAdd(this, _coinPool, []);
            __privateAdd(this, _cache, void 0);
            __privateAdd(this, _objectIdQueues, /* @__PURE__ */new Map());
            __privateAdd(this, _buildQueue, new import_queue.SerialQueue());
            __privateAdd(this, _executeQueue, void 0);
            __privateSet(this, _signer, options.signer);
            __privateSet(this, _client, options.client);
            __privateSet(this, _coinBatchSize, options.coinBatchSize ?? PARALLEL_EXECUTOR_DEFAULTS.coinBatchSize);
            __privateSet(this, _initialCoinBalance, options.initialCoinBalance ?? PARALLEL_EXECUTOR_DEFAULTS.initialCoinBalance);
            __privateSet(this, _minimumCoinBalance, options.minimumCoinBalance ?? PARALLEL_EXECUTOR_DEFAULTS.minimumCoinBalance);
            __privateSet(this, _maxPoolSize, options.maxPoolSize ?? PARALLEL_EXECUTOR_DEFAULTS.maxPoolSize);
            __privateSet(this, _cache, new import_caching.CachingTransactionExecutor({
              client: options.client,
              cache: options.cache
            }));
            __privateSet(this, _executeQueue, new import_queue.ParallelQueue(__privateGet(this, _maxPoolSize)));
            __privateSet(this, _sourceCoins, options.sourceCoins ? new Map(options.sourceCoins.map(id => [id, null])) : null);
          }
          resetCache() {
            return __privateGet(this, _cache).reset();
          }
          async executeTransaction(transaction) {
            const {
              promise,
              resolve,
              reject
            } = promiseWithResolvers();
            const usedObjects = await __privateMethod(this, _getUsedObjects, getUsedObjects_fn).call(this, transaction);
            const execute = () => {
              __privateGet(this, _executeQueue).runTask(() => {
                const promise2 = __privateMethod(this, _execute, execute_fn).call(this, transaction, usedObjects);
                return promise2.then(resolve, reject);
              });
            };
            const conflicts = /* @__PURE__ */new Set();
            usedObjects.forEach(objectId => {
              const queue = __privateGet(this, _objectIdQueues).get(objectId);
              if (queue) {
                conflicts.add(objectId);
                __privateGet(this, _objectIdQueues).get(objectId).push(() => {
                  conflicts.delete(objectId);
                  if (conflicts.size === 0) {
                    execute();
                  }
                });
              } else {
                __privateGet(this, _objectIdQueues).set(objectId, []);
              }
            });
            if (conflicts.size === 0) {
              execute();
            }
            return promise;
          }
        }
        _signer = new WeakMap();
        _client = new WeakMap();
        _coinBatchSize = new WeakMap();
        _initialCoinBalance = new WeakMap();
        _minimumCoinBalance = new WeakMap();
        _maxPoolSize = new WeakMap();
        _sourceCoins = new WeakMap();
        _coinPool = new WeakMap();
        _cache = new WeakMap();
        _objectIdQueues = new WeakMap();
        _buildQueue = new WeakMap();
        _executeQueue = new WeakMap();
        _getUsedObjects = new WeakSet();
        getUsedObjects_fn = async function (transaction) {
          const usedObjects = /* @__PURE__ */new Set();
          let serialized = false;
          transaction.addSerializationPlugin(async (blockData, _options, next) => {
            await next();
            if (serialized) {
              return;
            }
            serialized = true;
            blockData.inputs.forEach(input => {
              if (input.Object?.ImmOrOwnedObject?.objectId) {
                usedObjects.add(input.Object.ImmOrOwnedObject.objectId);
              } else if (input.Object?.Receiving?.objectId) {
                usedObjects.add(input.Object.Receiving.objectId);
              } else if (input.UnresolvedObject?.objectId && !input.UnresolvedObject.initialSharedVersion) {
                usedObjects.add(input.UnresolvedObject.objectId);
              }
            });
          });
          await transaction.prepareForSerialization({
            client: __privateGet(this, _client)
          });
          return usedObjects;
        };
        _execute = new WeakSet();
        execute_fn = async function (transaction, usedObjects) {
          let gasCoin;
          try {
            const bytes = await __privateGet(this, _buildQueue).runTask(async () => {
              gasCoin = await __privateMethod(this, _getGasCoin, getGasCoin_fn).call(this);
              transaction.setGasPayment([{
                objectId: gasCoin.id,
                version: gasCoin.version,
                digest: gasCoin.digest
              }]);
              transaction.setSenderIfNotSet(__privateGet(this, _signer).toSuiAddress());
              return __privateGet(this, _cache).buildTransaction({
                transaction
              });
            });
            const {
              signature
            } = await __privateGet(this, _signer).signTransaction(bytes);
            const results = await __privateGet(this, _cache).executeTransaction({
              transaction: bytes,
              signature,
              options: {
                showEffects: true
              }
            });
            const effectsBytes = Uint8Array.from(results.rawEffects);
            const effects = import_bcs2.bcs.TransactionEffects.parse(effectsBytes);
            const gasResult = (0, import_serial.getGasCoinFromEffects)(effects);
            const gasUsed = effects.V2?.gasUsed;
            if (gasCoin && gasUsed && gasResult.owner === __privateGet(this, _signer).toSuiAddress()) {
              const totalUsed = BigInt(gasUsed.computationCost) + BigInt(gasUsed.storageCost) + BigInt(gasUsed.storageCost) - BigInt(gasUsed.storageRebate);
              if (gasCoin.balance >= __privateGet(this, _minimumCoinBalance)) {
                __privateGet(this, _coinPool).push({
                  id: gasResult.ref.objectId,
                  version: gasResult.ref.version,
                  digest: gasResult.ref.digest,
                  balance: gasCoin.balance - totalUsed
                });
              } else {
                if (!__privateGet(this, _sourceCoins)) {
                  __privateSet(this, _sourceCoins, /* @__PURE__ */new Map());
                }
                __privateGet(this, _sourceCoins).set(gasResult.ref.objectId, gasResult.ref);
              }
            }
            return {
              digest: results.digest,
              effects: (0, import_bcs.toB64)(effectsBytes)
            };
          } catch (error) {
            if (gasCoin) {
              if (!__privateGet(this, _sourceCoins)) {
                __privateSet(this, _sourceCoins, /* @__PURE__ */new Map());
              }
              __privateGet(this, _sourceCoins).set(gasCoin.id, null);
            }
            await __privateGet(this, _cache).cache.deleteObjects([...usedObjects]);
            throw error;
          } finally {
            usedObjects.forEach(objectId => {
              const queue = __privateGet(this, _objectIdQueues).get(objectId);
              if (queue && queue.length > 0) {
                queue.shift()();
              } else if (queue) {
                __privateGet(this, _objectIdQueues).delete(objectId);
              }
            });
          }
        };
        _getGasCoin = new WeakSet();
        getGasCoin_fn = async function () {
          if (__privateGet(this, _coinPool).length === 0 && __privateGet(this, _executeQueue).activeTasks <= __privateGet(this, _maxPoolSize)) {
            await __privateMethod(this, _refillCoinPool, refillCoinPool_fn).call(this);
          }
          if (__privateGet(this, _coinPool).length === 0) {
            throw new Error("No coins available");
          }
          const coin = __privateGet(this, _coinPool).shift();
          return coin;
        };
        _refillCoinPool = new WeakSet();
        refillCoinPool_fn = async function () {
          const batchSize = Math.min(__privateGet(this, _coinBatchSize), __privateGet(this, _maxPoolSize) - (__privateGet(this, _coinPool).length + __privateGet(this, _executeQueue).activeTasks) + 1);
          if (batchSize === 0) {
            return;
          }
          const txb = new import_Transaction.Transaction();
          const address = __privateGet(this, _signer).toSuiAddress();
          txb.setSender(address);
          if (__privateGet(this, _sourceCoins)) {
            const refs = [];
            const ids = [];
            for (const [id, ref] of __privateGet(this, _sourceCoins)) {
              if (ref) {
                refs.push(ref);
              } else {
                ids.push(id);
              }
            }
            if (ids.length > 0) {
              const coins = await __privateGet(this, _client).multiGetObjects({
                ids
              });
              refs.push(...coins.filter(coin => coin.data !== null).map(({
                data
              }) => ({
                objectId: data.objectId,
                version: data.version,
                digest: data.digest
              })));
            }
            txb.setGasPayment(refs);
            __privateSet(this, _sourceCoins, /* @__PURE__ */new Map());
          }
          const amounts = new Array(batchSize).fill(__privateGet(this, _initialCoinBalance));
          const results = txb.splitCoins(txb.gas, amounts);
          const coinResults = [];
          for (let i = 0; i < amounts.length; i++) {
            coinResults.push(results[i]);
          }
          txb.transferObjects(coinResults, address);
          const result = await __privateGet(this, _client).signAndExecuteTransaction({
            transaction: txb,
            signer: __privateGet(this, _signer),
            options: {
              showRawEffects: true
            }
          });
          const effects = import_bcs2.bcs.TransactionEffects.parse(Uint8Array.from(result.rawEffects));
          effects.V2?.changedObjects.forEach(([id, {
            outputState
          }], i) => {
            if (i === effects.V2?.gasObjectIndex || !outputState.ObjectWrite) {
              return;
            }
            __privateGet(this, _coinPool).push({
              id,
              version: effects.V2.lamportVersion,
              digest: outputState.ObjectWrite[0],
              balance: BigInt(__privateGet(this, _initialCoinBalance))
            });
          });
          if (!__privateGet(this, _sourceCoins)) {
            __privateSet(this, _sourceCoins, /* @__PURE__ */new Map());
          }
          const gasObject = (0, import_serial.getGasCoinFromEffects)(effects).ref;
          __privateGet(this, _sourceCoins).set(gasObject.objectId, gasObject);
          await __privateGet(this, _client).waitForTransaction({
            digest: result.digest
          });
        };
        function promiseWithResolvers() {
          let resolve;
          let reject;
          const promise = new Promise((_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
          });
          return {
            promise,
            resolve,
            reject
          };
        }
      }, {
        "../../bcs/index.js": 20,
        "../Transaction.js": 63,
        "./caching.js": 68,
        "./queue.js": 70,
        "./serial.js": 71,
        "@mysten/bcs": 13
      }],
      70: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var queue_exports = {};
        __export(queue_exports, {
          ParallelQueue: () => ParallelQueue,
          SerialQueue: () => SerialQueue
        });
        module.exports = __toCommonJS(queue_exports);
        var _queue, _queue2;
        class SerialQueue {
          constructor() {
            __privateAdd(this, _queue, []);
          }
          async runTask(task) {
            return new Promise((resolve, reject) => {
              __privateGet(this, _queue).push(() => {
                task().finally(() => {
                  __privateGet(this, _queue).shift();
                  if (__privateGet(this, _queue).length > 0) {
                    __privateGet(this, _queue)[0]();
                  }
                }).then(resolve, reject);
              });
              if (__privateGet(this, _queue).length === 1) {
                __privateGet(this, _queue)[0]();
              }
            });
          }
        }
        _queue = new WeakMap();
        class ParallelQueue {
          constructor(maxTasks) {
            __privateAdd(this, _queue2, []);
            this.activeTasks = 0;
            this.maxTasks = maxTasks;
          }
          runTask(task) {
            return new Promise((resolve, reject) => {
              if (this.activeTasks < this.maxTasks) {
                this.activeTasks++;
                task().finally(() => {
                  if (__privateGet(this, _queue2).length > 0) {
                    __privateGet(this, _queue2).shift()();
                  } else {
                    this.activeTasks--;
                  }
                }).then(resolve, reject);
              } else {
                __privateGet(this, _queue2).push(() => {
                  task().finally(() => {
                    if (__privateGet(this, _queue2).length > 0) {
                      __privateGet(this, _queue2).shift()();
                    } else {
                      this.activeTasks--;
                    }
                  }).then(resolve, reject);
                });
              }
            });
          }
        }
        _queue2 = new WeakMap();
      }, {}],
      71: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var serial_exports = {};
        __export(serial_exports, {
          SerialTransactionExecutor: () => SerialTransactionExecutor,
          getGasCoinFromEffects: () => getGasCoinFromEffects
        });
        module.exports = __toCommonJS(serial_exports);
        var import_bcs = require("@mysten/bcs");
        var import_bcs2 = require("../../bcs/index.js");
        var import_Transaction = require("../Transaction.js");
        var import_caching = require("./caching.js");
        var import_queue = require("./queue.js");
        var _queue, _signer, _cache, _cacheGasCoin, _buildTransaction;
        class SerialTransactionExecutor {
          constructor({
            signer,
            ...options
          }) {
            __privateAdd(this, _queue, new import_queue.SerialQueue());
            __privateAdd(this, _signer, void 0);
            __privateAdd(this, _cache, void 0);
            __privateAdd(this, _cacheGasCoin, async effects => {
              if (!effects.V2) {
                return;
              }
              const gasCoin = getGasCoinFromEffects(effects).ref;
              if (gasCoin) {
                __privateGet(this, _cache).cache.setCustom("gasCoin", gasCoin);
              } else {
                __privateGet(this, _cache).cache.deleteCustom("gasCoin");
              }
            });
            __privateAdd(this, _buildTransaction, async transaction => {
              const gasCoin = await __privateGet(this, _cache).cache.getCustom("gasCoin");
              const copy = import_Transaction.Transaction.from(transaction);
              if (gasCoin) {
                copy.setGasPayment([gasCoin]);
              }
              copy.setSenderIfNotSet(__privateGet(this, _signer).toSuiAddress());
              return __privateGet(this, _cache).buildTransaction({
                transaction: copy
              });
            });
            __privateSet(this, _signer, signer);
            __privateSet(this, _cache, new import_caching.CachingTransactionExecutor({
              client: options.client,
              cache: options.cache
            }));
          }
          async applyEffects(effects) {
            return Promise.all([__privateGet(this, _cacheGasCoin).call(this, effects), __privateGet(this, _cache).cache.applyEffects(effects)]);
          }
          async buildTransaction(transaction) {
            return __privateGet(this, _queue).runTask(() => __privateGet(this, _buildTransaction).call(this, transaction));
          }
          resetCache() {
            return __privateGet(this, _cache).reset();
          }
          executeTransaction(transaction) {
            return __privateGet(this, _queue).runTask(async () => {
              const bytes = (0, import_Transaction.isTransaction)(transaction) ? await __privateGet(this, _buildTransaction).call(this, transaction) : transaction;
              const {
                signature
              } = await __privateGet(this, _signer).signTransaction(bytes);
              const results = await __privateGet(this, _cache).executeTransaction({
                signature,
                transaction: bytes
              }).catch(async error => {
                await this.resetCache();
                throw error;
              });
              const effectsBytes = Uint8Array.from(results.rawEffects);
              const effects = import_bcs2.bcs.TransactionEffects.parse(effectsBytes);
              await this.applyEffects(effects);
              return {
                digest: results.digest,
                effects: (0, import_bcs.toB64)(effectsBytes)
              };
            });
          }
        }
        _queue = new WeakMap();
        _signer = new WeakMap();
        _cache = new WeakMap();
        _cacheGasCoin = new WeakMap();
        _buildTransaction = new WeakMap();
        function getGasCoinFromEffects(effects) {
          if (!effects.V2) {
            throw new Error("Unexpected effects version");
          }
          const gasObjectChange = effects.V2.changedObjects[effects.V2.gasObjectIndex];
          if (!gasObjectChange) {
            throw new Error("Gas object not found in effects");
          }
          const [objectId, {
            outputState
          }] = gasObjectChange;
          if (!outputState.ObjectWrite) {
            throw new Error("Unexpected gas object state");
          }
          const [digest, owner] = outputState.ObjectWrite;
          return {
            ref: {
              objectId,
              digest,
              version: effects.V2.lamportVersion
            },
            owner: owner.AddressOwner || owner.ObjectOwner
          };
        }
      }, {
        "../../bcs/index.js": 20,
        "../Transaction.js": 63,
        "./caching.js": 68,
        "./queue.js": 70,
        "@mysten/bcs": 13
      }],
      72: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var hash_exports = {};
        __export(hash_exports, {
          hashTypedData: () => hashTypedData
        });
        module.exports = __toCommonJS(hash_exports);
        var import_blake2b = require("@noble/hashes/blake2b");
        function hashTypedData(typeTag, data) {
          const typeTagBytes = Array.from(`${typeTag}::`).map(e => e.charCodeAt(0));
          const dataWithTag = new Uint8Array(typeTagBytes.length + data.length);
          dataWithTag.set(typeTagBytes);
          dataWithTag.set(data, typeTagBytes.length);
          return (0, import_blake2b.blake2b)(dataWithTag, {
            dkLen: 32
          });
        }
      }, {
        "@noble/hashes/blake2b": 110
      }],
      73: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var transactions_exports = {};
        __export(transactions_exports, {
          AsyncCache: () => import_ObjectCache.AsyncCache,
          Commands: () => import_Commands.Commands,
          Inputs: () => import_Inputs.Inputs,
          ObjectCache: () => import_ObjectCache.ObjectCache,
          ParallelTransactionExecutor: () => import_parallel.ParallelTransactionExecutor,
          SerialTransactionExecutor: () => import_serial.SerialTransactionExecutor,
          Transaction: () => import_Transaction.Transaction,
          TransactionDataBuilder: () => import_TransactionData.TransactionDataBuilder,
          UpgradePolicy: () => import_Commands.UpgradePolicy,
          coinWithBalance: () => import_CoinWithBalance.coinWithBalance,
          getPureBcsSchema: () => import_serializer.getPureBcsSchema,
          isTransaction: () => import_Transaction.isTransaction,
          normalizedTypeToMoveTypeSignature: () => import_serializer.normalizedTypeToMoveTypeSignature
        });
        module.exports = __toCommonJS(transactions_exports);
        var import_serializer = require("./serializer.js");
        var import_Inputs = require("./Inputs.js");
        var import_Commands = require("./Commands.js");
        var import_Transaction = require("./Transaction.js");
        var import_v2 = require("./data/v2.js");
        var import_v1 = require("./data/v1.js");
        var import_TransactionData = require("./TransactionData.js");
        var import_ObjectCache = require("./ObjectCache.js");
        var import_serial = require("./executor/serial.js");
        var import_parallel = require("./executor/parallel.js");
        var import_CoinWithBalance = require("./intents/CoinWithBalance.js");
      }, {
        "./Commands.js": 60,
        "./Inputs.js": 61,
        "./ObjectCache.js": 62,
        "./Transaction.js": 63,
        "./TransactionData.js": 64,
        "./data/v1.js": 66,
        "./data/v2.js": 67,
        "./executor/parallel.js": 69,
        "./executor/serial.js": 71,
        "./intents/CoinWithBalance.js": 74,
        "./serializer.js": 77
      }],
      74: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var CoinWithBalance_exports = {};
        __export(CoinWithBalance_exports, {
          coinWithBalance: () => coinWithBalance
        });
        module.exports = __toCommonJS(CoinWithBalance_exports);
        var import_valibot = require("valibot");
        var import_bcs = require("../../bcs/index.js");
        var import_sui_types = require("../../utils/sui-types.js");
        var import_Commands = require("../Commands.js");
        var import_Inputs = require("../Inputs.js");
        var import_json_rpc_resolver = require("../json-rpc-resolver.js");
        const COIN_WITH_BALANCE = "CoinWithBalance";
        const SUI_TYPE = (0, import_sui_types.normalizeStructTag)("0x2::sui::SUI");
        function coinWithBalance({
          type = SUI_TYPE,
          balance,
          useGasCoin = true
        }) {
          return tx => {
            tx.addIntentResolver(COIN_WITH_BALANCE, resolveCoinBalance);
            const coinType = type === "gas" ? type : (0, import_sui_types.normalizeStructTag)(type);
            return tx.add(import_Commands.Commands.Intent({
              name: COIN_WITH_BALANCE,
              inputs: {},
              data: {
                type: coinType === SUI_TYPE && useGasCoin ? "gas" : coinType,
                balance: BigInt(balance)
              }
            }));
          };
        }
        const CoinWithBalanceData = (0, import_valibot.object)({
          type: (0, import_valibot.string)(),
          balance: (0, import_valibot.bigint)()
        });
        async function resolveCoinBalance(transactionData, buildOptions, next) {
          const coinTypes = /* @__PURE__ */new Set();
          const totalByType = /* @__PURE__ */new Map();
          if (!transactionData.sender) {
            throw new Error("Sender must be set to resolve CoinWithBalance");
          }
          for (const command of transactionData.commands) {
            if (command.$kind === "$Intent" && command.$Intent.name === COIN_WITH_BALANCE) {
              const {
                type,
                balance
              } = (0, import_valibot.parse)(CoinWithBalanceData, command.$Intent.data);
              if (type !== "gas") {
                coinTypes.add(type);
              }
              totalByType.set(type, (totalByType.get(type) ?? 0n) + balance);
            }
          }
          const usedIds = /* @__PURE__ */new Set();
          for (const input of transactionData.inputs) {
            if (input.Object?.ImmOrOwnedObject) {
              usedIds.add(input.Object.ImmOrOwnedObject.objectId);
            }
            if (input.UnresolvedObject?.objectId) {
              usedIds.add(input.UnresolvedObject.objectId);
            }
          }
          const coinsByType = /* @__PURE__ */new Map();
          const client = (0, import_json_rpc_resolver.getClient)(buildOptions);
          await Promise.all([...coinTypes].map(async coinType => {
            coinsByType.set(coinType, await getCoinsOfType({
              coinType,
              balance: totalByType.get(coinType),
              client,
              owner: transactionData.sender,
              usedIds
            }));
          }));
          const mergedCoins = /* @__PURE__ */new Map();
          mergedCoins.set("gas", {
            $kind: "GasCoin",
            GasCoin: true
          });
          for (const [index, transaction] of transactionData.commands.entries()) {
            if (transaction.$kind !== "$Intent" || transaction.$Intent.name !== COIN_WITH_BALANCE) {
              continue;
            }
            const {
              type,
              balance
            } = transaction.$Intent.data;
            const commands = [];
            if (!mergedCoins.has(type)) {
              const [first, ...rest] = coinsByType.get(type).map(coin => transactionData.addInput("object", import_Inputs.Inputs.ObjectRef({
                objectId: coin.coinObjectId,
                digest: coin.digest,
                version: coin.version
              })));
              if (rest.length > 0) {
                commands.push(import_Commands.Commands.MergeCoins(first, rest));
              }
              mergedCoins.set(type, first);
            }
            commands.push(import_Commands.Commands.SplitCoins(mergedCoins.get(type), [transactionData.addInput("pure", import_Inputs.Inputs.Pure(import_bcs.bcs.u64().serialize(balance)))]));
            transactionData.replaceCommand(index, commands);
            transactionData.mapArguments(arg => {
              if (arg.$kind === "Result" && arg.Result === index) {
                return {
                  $kind: "NestedResult",
                  NestedResult: [index + commands.length - 1, 0]
                };
              }
              return arg;
            });
          }
          return next();
        }
        async function getCoinsOfType({
          coinType,
          balance,
          client,
          owner,
          usedIds
        }) {
          let remainingBalance = balance;
          const coins = [];
          return loadMoreCoins();
          async function loadMoreCoins(cursor = null) {
            const {
              data,
              hasNextPage,
              nextCursor
            } = await client.getCoins({
              owner,
              coinType,
              cursor
            });
            const sortedCoins = data.sort((a, b) => Number(BigInt(b.balance) - BigInt(a.balance)));
            for (const coin of sortedCoins) {
              if (usedIds.has(coin.coinObjectId)) {
                continue;
              }
              const coinBalance = BigInt(coin.balance);
              coins.push(coin);
              remainingBalance -= coinBalance;
              if (remainingBalance <= 0) {
                return coins;
              }
            }
            if (hasNextPage) {
              return loadMoreCoins(nextCursor);
            }
            throw new Error(`Not enough coins of type ${coinType} to satisfy requested balance`);
          }
        }
      }, {
        "../../bcs/index.js": 20,
        "../../utils/sui-types.js": 82,
        "../Commands.js": 60,
        "../Inputs.js": 61,
        "../json-rpc-resolver.js": 75,
        "valibot": 286
      }],
      75: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var json_rpc_resolver_exports = {};
        __export(json_rpc_resolver_exports, {
          getClient: () => getClient,
          resolveTransactionData: () => resolveTransactionData
        });
        module.exports = __toCommonJS(json_rpc_resolver_exports);
        var import_valibot = require("valibot");
        var import_bcs = require("../bcs/index.js");
        var import_utils = require("../utils/index.js");
        var import_internal = require("./data/internal.js");
        var import_Inputs = require("./Inputs.js");
        var import_serializer = require("./serializer.js");
        const MAX_OBJECTS_PER_FETCH = 50;
        const GAS_SAFE_OVERHEAD = 1000n;
        const MAX_GAS = 5e10;
        async function resolveTransactionData(transactionData, options, next) {
          await normalizeInputs(transactionData, options);
          await resolveObjectReferences(transactionData, options);
          if (!options.onlyTransactionKind) {
            await setGasPrice(transactionData, options);
            await setGasBudget(transactionData, options);
            await setGasPayment(transactionData, options);
          }
          await validate(transactionData);
          return await next();
        }
        async function setGasPrice(transactionData, options) {
          if (!transactionData.gasConfig.price) {
            transactionData.gasConfig.price = String(await getClient(options).getReferenceGasPrice());
          }
        }
        async function setGasBudget(transactionData, options) {
          if (transactionData.gasConfig.budget) {
            return;
          }
          const dryRunResult = await getClient(options).dryRunTransactionBlock({
            transactionBlock: transactionData.build({
              overrides: {
                gasData: {
                  budget: String(MAX_GAS),
                  payment: []
                }
              }
            })
          });
          if (dryRunResult.effects.status.status !== "success") {
            throw new Error(`Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`, {
              cause: dryRunResult
            });
          }
          const safeOverhead = GAS_SAFE_OVERHEAD * BigInt(transactionData.gasConfig.price || 1n);
          const baseComputationCostWithOverhead = BigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;
          const gasBudget = baseComputationCostWithOverhead + BigInt(dryRunResult.effects.gasUsed.storageCost) - BigInt(dryRunResult.effects.gasUsed.storageRebate);
          transactionData.gasConfig.budget = String(gasBudget > baseComputationCostWithOverhead ? gasBudget : baseComputationCostWithOverhead);
        }
        async function setGasPayment(transactionData, options) {
          if (!transactionData.gasConfig.payment) {
            const coins = await getClient(options).getCoins({
              owner: transactionData.gasConfig.owner || transactionData.sender,
              coinType: import_utils.SUI_TYPE_ARG
            });
            const paymentCoins = coins.data.filter(coin => {
              const matchingInput = transactionData.inputs.find(input => {
                if (input.Object?.ImmOrOwnedObject) {
                  return coin.coinObjectId === input.Object.ImmOrOwnedObject.objectId;
                }
                return false;
              });
              return !matchingInput;
            }).map(coin => ({
              objectId: coin.coinObjectId,
              digest: coin.digest,
              version: coin.version
            }));
            if (!paymentCoins.length) {
              throw new Error("No valid gas coins found for the transaction.");
            }
            transactionData.gasConfig.payment = paymentCoins.map(payment => (0, import_valibot.parse)(import_internal.ObjectRef, payment));
          }
        }
        async function resolveObjectReferences(transactionData, options) {
          const objectsToResolve = transactionData.inputs.filter(input => {
            return input.UnresolvedObject && !input.UnresolvedObject.version || input.UnresolvedObject?.initialSharedVersion;
          });
          const dedupedIds = [...new Set(objectsToResolve.map(input => (0, import_utils.normalizeSuiObjectId)(input.UnresolvedObject.objectId)))];
          const objectChunks = dedupedIds.length ? chunk(dedupedIds, MAX_OBJECTS_PER_FETCH) : [];
          const resolved = (await Promise.all(objectChunks.map(chunk2 => getClient(options).multiGetObjects({
            ids: chunk2,
            options: {
              showOwner: true
            }
          })))).flat();
          const responsesById = new Map(dedupedIds.map((id, index) => {
            return [id, resolved[index]];
          }));
          const invalidObjects = Array.from(responsesById).filter(([_, obj]) => obj.error).map(([id, _obj]) => id);
          if (invalidObjects.length) {
            throw new Error(`The following input objects are invalid: ${invalidObjects.join(", ")}`);
          }
          const objects = resolved.map(object => {
            if (object.error || !object.data) {
              throw new Error(`Failed to fetch object: ${object.error}`);
            }
            const owner = object.data.owner;
            const initialSharedVersion = owner && typeof owner === "object" && "Shared" in owner ? owner.Shared.initial_shared_version : null;
            return {
              objectId: object.data.objectId,
              digest: object.data.digest,
              version: object.data.version,
              initialSharedVersion
            };
          });
          const objectsById = new Map(dedupedIds.map((id, index) => {
            return [id, objects[index]];
          }));
          for (const [index, input] of transactionData.inputs.entries()) {
            if (!input.UnresolvedObject) {
              continue;
            }
            let updated;
            const id = (0, import_utils.normalizeSuiAddress)(input.UnresolvedObject.objectId);
            const object = objectsById.get(id);
            if (object?.initialSharedVersion) {
              updated = import_Inputs.Inputs.SharedObjectRef({
                objectId: id,
                initialSharedVersion: object.initialSharedVersion,
                mutable: isUsedAsMutable(transactionData, index)
              });
            } else if (isUsedAsReceiving(transactionData, index)) {
              updated = import_Inputs.Inputs.ReceivingRef({
                objectId: id,
                digest: input.UnresolvedObject.digest ?? object?.digest,
                version: input.UnresolvedObject.version ?? object?.version
              });
            }
            transactionData.inputs[transactionData.inputs.indexOf(input)] = updated ?? import_Inputs.Inputs.ObjectRef({
              objectId: id,
              digest: input.UnresolvedObject.digest ?? object?.digest,
              version: input.UnresolvedObject.version ?? object?.version
            });
          }
        }
        async function normalizeInputs(transactionData, options) {
          const {
            inputs,
            commands
          } = transactionData;
          const moveCallsToResolve = [];
          const moveFunctionsToResolve = /* @__PURE__ */new Set();
          commands.forEach(command => {
            if (command.MoveCall) {
              if (command.MoveCall._argumentTypes) {
                return;
              }
              const inputs2 = command.MoveCall.arguments.map(arg => {
                if (arg.$kind === "Input") {
                  return transactionData.inputs[arg.Input];
                }
                return null;
              });
              const needsResolution = inputs2.some(input => input?.UnresolvedPure || input?.UnresolvedObject);
              if (needsResolution) {
                const functionName = `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`;
                moveFunctionsToResolve.add(functionName);
                moveCallsToResolve.push(command.MoveCall);
              }
            }
            switch (command.$kind) {
              case "SplitCoins":
                command.SplitCoins.amounts.forEach(amount => {
                  normalizeRawArgument(amount, import_bcs.bcs.U64, transactionData);
                });
                break;
              case "TransferObjects":
                normalizeRawArgument(command.TransferObjects.address, import_bcs.bcs.Address, transactionData);
                break;
            }
          });
          const moveFunctionParameters = /* @__PURE__ */new Map();
          if (moveFunctionsToResolve.size > 0) {
            const client = getClient(options);
            await Promise.all([...moveFunctionsToResolve].map(async functionName => {
              const [packageId, moduleId, functionId] = functionName.split("::");
              const def = await client.getNormalizedMoveFunction({
                package: packageId,
                module: moduleId,
                function: functionId
              });
              moveFunctionParameters.set(functionName, def.parameters.map(param => (0, import_serializer.normalizedTypeToMoveTypeSignature)(param)));
            }));
          }
          if (moveCallsToResolve.length) {
            await Promise.all(moveCallsToResolve.map(async moveCall => {
              const parameters = moveFunctionParameters.get(`${moveCall.package}::${moveCall.module}::${moveCall.function}`);
              if (!parameters) {
                return;
              }
              const hasTxContext = parameters.length > 0 && (0, import_serializer.isTxContext)(parameters.at(-1));
              const params = hasTxContext ? parameters.slice(0, parameters.length - 1) : parameters;
              moveCall._argumentTypes = params;
            }));
          }
          commands.forEach(command => {
            if (!command.MoveCall) {
              return;
            }
            const moveCall = command.MoveCall;
            const fnName = `${moveCall.package}::${moveCall.module}::${moveCall.function}`;
            const params = moveCall._argumentTypes;
            if (!params) {
              return;
            }
            if (params.length !== command.MoveCall.arguments.length) {
              throw new Error(`Incorrect number of arguments for ${fnName}`);
            }
            params.forEach((param, i) => {
              const arg = moveCall.arguments[i];
              if (arg.$kind !== "Input") return;
              const input = inputs[arg.Input];
              if (!input.UnresolvedPure && !input.UnresolvedObject) {
                return;
              }
              const inputValue = input.UnresolvedPure?.value ?? input.UnresolvedObject?.objectId;
              const schema = (0, import_serializer.getPureBcsSchema)(param.body);
              if (schema) {
                arg.type = "pure";
                inputs[inputs.indexOf(input)] = import_Inputs.Inputs.Pure(schema.serialize(inputValue));
                return;
              }
              if (typeof inputValue !== "string") {
                throw new Error(`Expect the argument to be an object id string, got ${JSON.stringify(inputValue, null, 2)}`);
              }
              arg.type = "object";
              const unresolvedObject = input.UnresolvedPure ? {
                $kind: "UnresolvedObject",
                UnresolvedObject: {
                  objectId: inputValue
                }
              } : input;
              inputs[arg.Input] = unresolvedObject;
            });
          });
        }
        function validate(transactionData) {
          transactionData.inputs.forEach((input, index) => {
            if (input.$kind !== "Object" && input.$kind !== "Pure") {
              throw new Error(`Input at index ${index} has not been resolved.  Expected a Pure or Object input, but found ${JSON.stringify(input)}`);
            }
          });
        }
        function normalizeRawArgument(arg, schema, transactionData) {
          if (arg.$kind !== "Input") {
            return;
          }
          const input = transactionData.inputs[arg.Input];
          if (input.$kind !== "UnresolvedPure") {
            return;
          }
          transactionData.inputs[arg.Input] = import_Inputs.Inputs.Pure(schema.serialize(input.UnresolvedPure.value));
        }
        function isUsedAsMutable(transactionData, index) {
          let usedAsMutable = false;
          transactionData.getInputUses(index, (arg, tx) => {
            if (tx.MoveCall && tx.MoveCall._argumentTypes) {
              const argIndex = tx.MoveCall.arguments.indexOf(arg);
              usedAsMutable = tx.MoveCall._argumentTypes[argIndex].ref !== "&" || usedAsMutable;
            }
          });
          return usedAsMutable;
        }
        function isUsedAsReceiving(transactionData, index) {
          let usedAsReceiving = false;
          transactionData.getInputUses(index, (arg, tx) => {
            if (tx.MoveCall && tx.MoveCall._argumentTypes) {
              const argIndex = tx.MoveCall.arguments.indexOf(arg);
              usedAsReceiving = isReceivingType(tx.MoveCall._argumentTypes[argIndex]) || usedAsReceiving;
            }
          });
          return usedAsReceiving;
        }
        function isReceivingType(type) {
          if (typeof type.body !== "object" || !("datatype" in type.body)) {
            return false;
          }
          return type.body.datatype.package === "0x2" && type.body.datatype.module === "transfer" && type.body.datatype.type === "Receiving";
        }
        function getClient(options) {
          if (!options.client) {
            throw new Error(`No provider passed to Transaction#build, but transaction data was not sufficient to build offline.`);
          }
          return options.client;
        }
        function chunk(arr, size) {
          return Array.from({
            length: Math.ceil(arr.length / size)
          }, (_, i) => arr.slice(i * size, i * size + size));
        }
      }, {
        "../bcs/index.js": 20,
        "../utils/index.js": 81,
        "./Inputs.js": 61,
        "./data/internal.js": 65,
        "./serializer.js": 77,
        "valibot": 286
      }],
      76: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var pure_exports = {};
        __export(pure_exports, {
          createPure: () => createPure
        });
        module.exports = __toCommonJS(pure_exports);
        var import_bcs = require("../bcs/index.js");
        function createPure(makePure) {
          function pure(value) {
            return makePure(value);
          }
          pure.u8 = value => makePure(import_bcs.bcs.U8.serialize(value));
          pure.u16 = value => makePure(import_bcs.bcs.U16.serialize(value));
          pure.u32 = value => makePure(import_bcs.bcs.U32.serialize(value));
          pure.u64 = value => makePure(import_bcs.bcs.U64.serialize(value));
          pure.u128 = value => makePure(import_bcs.bcs.U128.serialize(value));
          pure.u256 = value => makePure(import_bcs.bcs.U256.serialize(value));
          pure.bool = value => makePure(import_bcs.bcs.Bool.serialize(value));
          pure.string = value => makePure(import_bcs.bcs.String.serialize(value));
          pure.address = value => makePure(import_bcs.bcs.Address.serialize(value));
          pure.id = pure.address;
          return pure;
        }
      }, {
        "../bcs/index.js": 20
      }],
      77: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var serializer_exports = {};
        __export(serializer_exports, {
          getPureBcsSchema: () => getPureBcsSchema,
          isTxContext: () => isTxContext,
          normalizedTypeToMoveTypeSignature: () => normalizedTypeToMoveTypeSignature,
          pureBcsSchemaFromOpenMoveTypeSignatureBody: () => pureBcsSchemaFromOpenMoveTypeSignatureBody
        });
        module.exports = __toCommonJS(serializer_exports);
        var import_bcs = require("../bcs/index.js");
        var import_utils = require("../utils/index.js");
        var import_sui_types = require("../utils/sui-types.js");
        const OBJECT_MODULE_NAME = "object";
        const ID_STRUCT_NAME = "ID";
        const STD_ASCII_MODULE_NAME = "ascii";
        const STD_ASCII_STRUCT_NAME = "String";
        const STD_UTF8_MODULE_NAME = "string";
        const STD_UTF8_STRUCT_NAME = "String";
        const STD_OPTION_MODULE_NAME = "option";
        const STD_OPTION_STRUCT_NAME = "Option";
        function isTxContext(param) {
          const struct = typeof param.body === "object" && "datatype" in param.body ? param.body.datatype : null;
          return !!struct && (0, import_sui_types.normalizeSuiAddress)(struct.package) === (0, import_sui_types.normalizeSuiAddress)("0x2") && struct.module === "tx_context" && struct.type === "TxContext";
        }
        function getPureBcsSchema(typeSignature) {
          if (typeof typeSignature === "string") {
            switch (typeSignature) {
              case "address":
                return import_bcs.bcs.Address;
              case "bool":
                return import_bcs.bcs.Bool;
              case "u8":
                return import_bcs.bcs.U8;
              case "u16":
                return import_bcs.bcs.U16;
              case "u32":
                return import_bcs.bcs.U32;
              case "u64":
                return import_bcs.bcs.U64;
              case "u128":
                return import_bcs.bcs.U128;
              case "u256":
                return import_bcs.bcs.U256;
              default:
                throw new Error(`Unknown type signature ${typeSignature}`);
            }
          }
          if ("vector" in typeSignature) {
            if (typeSignature.vector === "u8") {
              return import_bcs.bcs.vector(import_bcs.bcs.U8).transform({
                input: val => typeof val === "string" ? new TextEncoder().encode(val) : val,
                output: val => val
              });
            }
            const type = getPureBcsSchema(typeSignature.vector);
            return type ? import_bcs.bcs.vector(type) : null;
          }
          if ("datatype" in typeSignature) {
            const pkg = (0, import_sui_types.normalizeSuiAddress)(typeSignature.datatype.package);
            if (pkg === (0, import_sui_types.normalizeSuiAddress)(import_utils.MOVE_STDLIB_ADDRESS)) {
              if (typeSignature.datatype.module === STD_ASCII_MODULE_NAME && typeSignature.datatype.type === STD_ASCII_STRUCT_NAME) {
                return import_bcs.bcs.String;
              }
              if (typeSignature.datatype.module === STD_UTF8_MODULE_NAME && typeSignature.datatype.type === STD_UTF8_STRUCT_NAME) {
                return import_bcs.bcs.String;
              }
              if (typeSignature.datatype.module === STD_OPTION_MODULE_NAME && typeSignature.datatype.type === STD_OPTION_STRUCT_NAME) {
                const type = getPureBcsSchema(typeSignature.datatype.typeParameters[0]);
                return type ? import_bcs.bcs.vector(type) : null;
              }
            }
            if (pkg === (0, import_sui_types.normalizeSuiAddress)(import_utils.SUI_FRAMEWORK_ADDRESS) && typeSignature.datatype.module === OBJECT_MODULE_NAME && typeSignature.datatype.type === ID_STRUCT_NAME) {
              return import_bcs.bcs.Address;
            }
          }
          return null;
        }
        function normalizedTypeToMoveTypeSignature(type) {
          if (typeof type === "object" && "Reference" in type) {
            return {
              ref: "&",
              body: normalizedTypeToMoveTypeSignatureBody(type.Reference)
            };
          }
          if (typeof type === "object" && "MutableReference" in type) {
            return {
              ref: "&mut",
              body: normalizedTypeToMoveTypeSignatureBody(type.MutableReference)
            };
          }
          return {
            ref: null,
            body: normalizedTypeToMoveTypeSignatureBody(type)
          };
        }
        function normalizedTypeToMoveTypeSignatureBody(type) {
          if (typeof type === "string") {
            switch (type) {
              case "Address":
                return "address";
              case "Bool":
                return "bool";
              case "U8":
                return "u8";
              case "U16":
                return "u16";
              case "U32":
                return "u32";
              case "U64":
                return "u64";
              case "U128":
                return "u128";
              case "U256":
                return "u256";
              default:
                throw new Error(`Unexpected type ${type}`);
            }
          }
          if ("Vector" in type) {
            return {
              vector: normalizedTypeToMoveTypeSignatureBody(type.Vector)
            };
          }
          if ("Struct" in type) {
            return {
              datatype: {
                package: type.Struct.address,
                module: type.Struct.module,
                type: type.Struct.name,
                typeParameters: type.Struct.typeArguments.map(normalizedTypeToMoveTypeSignatureBody)
              }
            };
          }
          if ("TypeParameter" in type) {
            return {
              typeParameter: type.TypeParameter
            };
          }
          throw new Error(`Unexpected type ${JSON.stringify(type)}`);
        }
        function pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature) {
          if (typeof typeSignature === "string") {
            switch (typeSignature) {
              case "address":
                return import_bcs.bcs.Address;
              case "bool":
                return import_bcs.bcs.Bool;
              case "u8":
                return import_bcs.bcs.U8;
              case "u16":
                return import_bcs.bcs.U16;
              case "u32":
                return import_bcs.bcs.U32;
              case "u64":
                return import_bcs.bcs.U64;
              case "u128":
                return import_bcs.bcs.U128;
              case "u256":
                return import_bcs.bcs.U256;
              default:
                throw new Error(`Unknown type signature ${typeSignature}`);
            }
          }
          if ("vector" in typeSignature) {
            return import_bcs.bcs.vector(pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature.vector));
          }
          throw new Error(`Expected pure typeSignature, but got ${JSON.stringify(typeSignature)}`);
        }
      }, {
        "../bcs/index.js": 20,
        "../utils/index.js": 81,
        "../utils/sui-types.js": 82
      }],
      78: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var utils_exports = {};
        __export(utils_exports, {
          extractMutableReference: () => extractMutableReference,
          extractReference: () => extractReference,
          extractStructTag: () => extractStructTag,
          getIdFromCallArg: () => getIdFromCallArg
        });
        module.exports = __toCommonJS(utils_exports);
        var import_sui_types = require("../utils/sui-types.js");
        function extractMutableReference(normalizedType) {
          return typeof normalizedType === "object" && "MutableReference" in normalizedType ? normalizedType.MutableReference : void 0;
        }
        function extractReference(normalizedType) {
          return typeof normalizedType === "object" && "Reference" in normalizedType ? normalizedType.Reference : void 0;
        }
        function extractStructTag(normalizedType) {
          if (typeof normalizedType === "object" && "Struct" in normalizedType) {
            return normalizedType;
          }
          const ref = extractReference(normalizedType);
          const mutRef = extractMutableReference(normalizedType);
          if (typeof ref === "object" && "Struct" in ref) {
            return ref;
          }
          if (typeof mutRef === "object" && "Struct" in mutRef) {
            return mutRef;
          }
          return void 0;
        }
        function getIdFromCallArg(arg) {
          if (typeof arg === "string") {
            return (0, import_sui_types.normalizeSuiAddress)(arg);
          }
          if (arg.Object) {
            if (arg.Object.ImmOrOwnedObject) {
              return (0, import_sui_types.normalizeSuiAddress)(arg.Object.ImmOrOwnedObject.objectId);
            }
            if (arg.Object.Receiving) {
              return (0, import_sui_types.normalizeSuiAddress)(arg.Object.Receiving.objectId);
            }
            return (0, import_sui_types.normalizeSuiAddress)(arg.Object.SharedObject.objectId);
          }
          if (arg.UnresolvedObject) {
            return (0, import_sui_types.normalizeSuiAddress)(arg.UnresolvedObject.objectId);
          }
          return void 0;
        }
      }, {
        "../utils/sui-types.js": 82
      }],
      79: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var constants_exports = {};
        __export(constants_exports, {
          MIST_PER_SUI: () => MIST_PER_SUI,
          MOVE_STDLIB_ADDRESS: () => MOVE_STDLIB_ADDRESS,
          SUI_CLOCK_OBJECT_ID: () => SUI_CLOCK_OBJECT_ID,
          SUI_DECIMALS: () => SUI_DECIMALS,
          SUI_FRAMEWORK_ADDRESS: () => SUI_FRAMEWORK_ADDRESS,
          SUI_SYSTEM_ADDRESS: () => SUI_SYSTEM_ADDRESS,
          SUI_SYSTEM_MODULE_NAME: () => SUI_SYSTEM_MODULE_NAME,
          SUI_SYSTEM_STATE_OBJECT_ID: () => SUI_SYSTEM_STATE_OBJECT_ID,
          SUI_TYPE_ARG: () => SUI_TYPE_ARG
        });
        module.exports = __toCommonJS(constants_exports);
        var import_sui_types = require("./sui-types.js");
        const SUI_DECIMALS = 9;
        const MIST_PER_SUI = BigInt(1e9);
        const MOVE_STDLIB_ADDRESS = "0x1";
        const SUI_FRAMEWORK_ADDRESS = "0x2";
        const SUI_SYSTEM_ADDRESS = "0x3";
        const SUI_CLOCK_OBJECT_ID = (0, import_sui_types.normalizeSuiObjectId)("0x6");
        const SUI_SYSTEM_MODULE_NAME = "sui_system";
        const SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;
        const SUI_SYSTEM_STATE_OBJECT_ID = (0, import_sui_types.normalizeSuiObjectId)("0x5");
      }, {
        "./sui-types.js": 82
      }],
      80: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var format_exports = {};
        __export(format_exports, {
          formatAddress: () => formatAddress,
          formatDigest: () => formatDigest
        });
        module.exports = __toCommonJS(format_exports);
        const ELLIPSIS = "\u2026";
        function formatAddress(address) {
          if (address.length <= 6) {
            return address;
          }
          const offset = address.startsWith("0x") ? 2 : 0;
          return `0x${address.slice(offset, offset + 4)}${ELLIPSIS}${address.slice(-4)}`;
        }
        function formatDigest(digest) {
          return `${digest.slice(0, 10)}${ELLIPSIS}`;
        }
      }, {}],
      81: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var utils_exports = {};
        __export(utils_exports, {
          MIST_PER_SUI: () => import_constants.MIST_PER_SUI,
          MOVE_STDLIB_ADDRESS: () => import_constants.MOVE_STDLIB_ADDRESS,
          SUI_ADDRESS_LENGTH: () => import_sui_types.SUI_ADDRESS_LENGTH,
          SUI_CLOCK_OBJECT_ID: () => import_constants.SUI_CLOCK_OBJECT_ID,
          SUI_DECIMALS: () => import_constants.SUI_DECIMALS,
          SUI_FRAMEWORK_ADDRESS: () => import_constants.SUI_FRAMEWORK_ADDRESS,
          SUI_SYSTEM_ADDRESS: () => import_constants.SUI_SYSTEM_ADDRESS,
          SUI_SYSTEM_MODULE_NAME: () => import_constants.SUI_SYSTEM_MODULE_NAME,
          SUI_SYSTEM_STATE_OBJECT_ID: () => import_constants.SUI_SYSTEM_STATE_OBJECT_ID,
          SUI_TYPE_ARG: () => import_constants.SUI_TYPE_ARG,
          formatAddress: () => import_format.formatAddress,
          formatDigest: () => import_format.formatDigest,
          fromB64: () => import_bcs.fromB64,
          fromHEX: () => import_bcs.fromHEX,
          isValidSuiAddress: () => import_sui_types.isValidSuiAddress,
          isValidSuiNSName: () => import_suins.isValidSuiNSName,
          isValidSuiObjectId: () => import_sui_types.isValidSuiObjectId,
          isValidTransactionDigest: () => import_sui_types.isValidTransactionDigest,
          normalizeStructTag: () => import_sui_types.normalizeStructTag,
          normalizeSuiAddress: () => import_sui_types.normalizeSuiAddress,
          normalizeSuiNSName: () => import_suins.normalizeSuiNSName,
          normalizeSuiObjectId: () => import_sui_types.normalizeSuiObjectId,
          parseStructTag: () => import_sui_types.parseStructTag,
          toB64: () => import_bcs.toB64,
          toHEX: () => import_bcs.toHEX
        });
        module.exports = __toCommonJS(utils_exports);
        var import_format = require("./format.js");
        var import_sui_types = require("./sui-types.js");
        var import_bcs = require("@mysten/bcs");
        var import_suins = require("./suins.js");
        var import_constants = require("./constants.js");
      }, {
        "./constants.js": 79,
        "./format.js": 80,
        "./sui-types.js": 82,
        "./suins.js": 83,
        "@mysten/bcs": 13
      }],
      82: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var sui_types_exports = {};
        __export(sui_types_exports, {
          SUI_ADDRESS_LENGTH: () => SUI_ADDRESS_LENGTH,
          isValidSuiAddress: () => isValidSuiAddress,
          isValidSuiObjectId: () => isValidSuiObjectId,
          isValidTransactionDigest: () => isValidTransactionDigest,
          normalizeStructTag: () => normalizeStructTag,
          normalizeSuiAddress: () => normalizeSuiAddress,
          normalizeSuiObjectId: () => normalizeSuiObjectId,
          parseStructTag: () => parseStructTag
        });
        module.exports = __toCommonJS(sui_types_exports);
        var import_bcs = require("@mysten/bcs");
        const TX_DIGEST_LENGTH = 32;
        function isValidTransactionDigest(value) {
          try {
            const buffer = (0, import_bcs.fromB58)(value);
            return buffer.length === TX_DIGEST_LENGTH;
          } catch (e) {
            return false;
          }
        }
        const SUI_ADDRESS_LENGTH = 32;
        function isValidSuiAddress(value) {
          return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;
        }
        function isValidSuiObjectId(value) {
          return isValidSuiAddress(value);
        }
        function parseTypeTag(type) {
          if (!type.includes("::")) return type;
          return parseStructTag(type);
        }
        function parseStructTag(type) {
          const [address, module2] = type.split("::");
          const rest = type.slice(address.length + module2.length + 4);
          const name = rest.includes("<") ? rest.slice(0, rest.indexOf("<")) : rest;
          const typeParams = rest.includes("<") ? (0, import_bcs.splitGenericParameters)(rest.slice(rest.indexOf("<") + 1, rest.lastIndexOf(">"))).map(typeParam => parseTypeTag(typeParam.trim())) : [];
          return {
            address: normalizeSuiAddress(address),
            module: module2,
            name,
            typeParams
          };
        }
        function normalizeStructTag(type) {
          const {
            address,
            module: module2,
            name,
            typeParams
          } = typeof type === "string" ? parseStructTag(type) : type;
          const formattedTypeParams = typeParams?.length > 0 ? `<${typeParams.map(typeParam => typeof typeParam === "string" ? typeParam : normalizeStructTag(typeParam)).join(",")}>` : "";
          return `${address}::${module2}::${name}${formattedTypeParams}`;
        }
        function normalizeSuiAddress(value, forceAdd0x = false) {
          let address = value.toLowerCase();
          if (!forceAdd0x && address.startsWith("0x")) {
            address = address.slice(2);
          }
          return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, "0")}`;
        }
        function normalizeSuiObjectId(value, forceAdd0x = false) {
          return normalizeSuiAddress(value, forceAdd0x);
        }
        function isHex(value) {
          return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;
        }
        function getHexByteLength(value) {
          return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;
        }
      }, {
        "@mysten/bcs": 13
      }],
      83: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var suins_exports = {};
        __export(suins_exports, {
          isValidSuiNSName: () => isValidSuiNSName,
          normalizeSuiNSName: () => normalizeSuiNSName
        });
        module.exports = __toCommonJS(suins_exports);
        const SUI_NS_NAME_REGEX = /^(?:[a-z0-9][a-z0-9-]{0,62}(?:\.[a-z0-9][a-z0-9-]{0,62})*)?@[a-z0-9][a-z0-9-]{0,62}$/i;
        const SUI_NS_DOMAIN_REGEX = /^(?:[a-z0-9][a-z0-9-]{0,62}\.)+sui$/i;
        const MAX_SUI_NS_NAME_LENGTH = 235;
        function isValidSuiNSName(name) {
          if (name.length > MAX_SUI_NS_NAME_LENGTH) {
            return false;
          }
          if (name.includes("@")) {
            return SUI_NS_NAME_REGEX.test(name);
          }
          return SUI_NS_DOMAIN_REGEX.test(name);
        }
        function normalizeSuiNSName(name, format = "at") {
          const lowerCase = name.toLowerCase();
          let parts;
          if (lowerCase.includes("@")) {
            if (!SUI_NS_NAME_REGEX.test(lowerCase)) {
              throw new Error(`Invalid SuiNS name ${name}`);
            }
            const [labels, domain] = lowerCase.split("@");
            parts = [...(labels ? labels.split(".") : []), domain];
          } else {
            if (!SUI_NS_DOMAIN_REGEX.test(lowerCase)) {
              throw new Error(`Invalid SuiNS name ${name}`);
            }
            parts = lowerCase.split(".").slice(0, -1);
          }
          if (format === "dot") {
            return `${parts.join(".")}.sui`;
          }
          return `${parts.slice(0, -1).join(".")}@${parts[parts.length - 1]}`;
        }
      }, {}],
      84: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var verify_exports = {};
        __export(verify_exports, {
          publicKeyFromRawBytes: () => import_verify.publicKeyFromRawBytes,
          publicKeyFromSuiBytes: () => import_verify.publicKeyFromSuiBytes,
          verifyPersonalMessageSignature: () => import_verify.verifyPersonalMessageSignature,
          verifySignature: () => import_verify.verifySignature,
          verifyTransactionSignature: () => import_verify.verifyTransactionSignature
        });
        module.exports = __toCommonJS(verify_exports);
        var import_verify = require("./verify.js");
      }, {
        "./verify.js": 85
      }],
      85: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var verify_exports = {};
        __export(verify_exports, {
          publicKeyFromRawBytes: () => publicKeyFromRawBytes,
          publicKeyFromSuiBytes: () => publicKeyFromSuiBytes,
          verifyPersonalMessageSignature: () => verifyPersonalMessageSignature,
          verifySignature: () => verifySignature,
          verifyTransactionSignature: () => verifyTransactionSignature
        });
        module.exports = __toCommonJS(verify_exports);
        var import_bcs = require("@mysten/bcs");
        var import_cryptography = require("../cryptography/index.js");
        var import_publickey = require("../keypairs/ed25519/publickey.js");
        var import_publickey2 = require("../keypairs/secp256k1/publickey.js");
        var import_publickey3 = require("../keypairs/secp256r1/publickey.js");
        var import_publickey4 = require("../multisig/publickey.js");
        var import_publickey5 = require("../zklogin/publickey.js");
        async function verifySignature(bytes, signature) {
          const parsedSignature = parseSignature(signature);
          if (!(await parsedSignature.publicKey.verify(bytes, parsedSignature.serializedSignature))) {
            throw new Error(`Signature is not valid for the provided data`);
          }
          return parsedSignature.publicKey;
        }
        async function verifyPersonalMessageSignature(message, signature, options = {}) {
          const parsedSignature = parseSignature(signature, options);
          if (!(await parsedSignature.publicKey.verifyPersonalMessage(message, parsedSignature.serializedSignature))) {
            throw new Error(`Signature is not valid for the provided message`);
          }
          return parsedSignature.publicKey;
        }
        async function verifyTransactionSignature(transaction, signature) {
          const parsedSignature = parseSignature(signature);
          if (!(await parsedSignature.publicKey.verifyTransaction(transaction, parsedSignature.serializedSignature))) {
            throw new Error(`Signature is not valid for the provided Transaction`);
          }
          return parsedSignature.publicKey;
        }
        function parseSignature(signature, options = {}) {
          const parsedSignature = (0, import_cryptography.parseSerializedSignature)(signature);
          if (parsedSignature.signatureScheme === "MultiSig") {
            return {
              ...parsedSignature,
              publicKey: new import_publickey4.MultiSigPublicKey(parsedSignature.multisig.multisig_pk)
            };
          }
          const publicKey = publicKeyFromRawBytes(parsedSignature.signatureScheme, parsedSignature.publicKey, options);
          return {
            ...parsedSignature,
            publicKey
          };
        }
        function publicKeyFromRawBytes(signatureScheme, bytes, options = {}) {
          switch (signatureScheme) {
            case "ED25519":
              return new import_publickey.Ed25519PublicKey(bytes);
            case "Secp256k1":
              return new import_publickey2.Secp256k1PublicKey(bytes);
            case "Secp256r1":
              return new import_publickey3.Secp256r1PublicKey(bytes);
            case "MultiSig":
              return new import_publickey4.MultiSigPublicKey(bytes);
            case "ZkLogin":
              return new import_publickey5.ZkLoginPublicIdentifier(bytes, options);
            default:
              throw new Error(`Unsupported signature scheme ${signatureScheme}`);
          }
        }
        function publicKeyFromSuiBytes(publicKey) {
          const bytes = typeof publicKey === "string" ? (0, import_bcs.fromB64)(publicKey) : publicKey;
          const signatureScheme = import_cryptography.SIGNATURE_FLAG_TO_SCHEME[bytes[0]];
          return publicKeyFromRawBytes(signatureScheme, bytes.slice(1));
        }
      }, {
        "../cryptography/index.js": 35,
        "../keypairs/ed25519/publickey.js": 50,
        "../keypairs/secp256k1/publickey.js": 53,
        "../keypairs/secp256r1/publickey.js": 56,
        "../multisig/publickey.js": 58,
        "../zklogin/publickey.js": 89,
        "@mysten/bcs": 13
      }],
      86: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var version_exports = {};
        __export(version_exports, {
          PACKAGE_VERSION: () => PACKAGE_VERSION,
          TARGETED_RPC_VERSION: () => TARGETED_RPC_VERSION
        });
        module.exports = __toCommonJS(version_exports);
        const PACKAGE_VERSION = "1.1.2";
        const TARGETED_RPC_VERSION = "1.28.0";
      }, {}],
      87: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var bcs_exports = {};
        __export(bcs_exports, {
          zkLoginSignature: () => zkLoginSignature
        });
        module.exports = __toCommonJS(bcs_exports);
        var import_bcs = require("@mysten/bcs");
        const zkLoginSignature = import_bcs.bcs.struct("ZkLoginSignature", {
          inputs: import_bcs.bcs.struct("ZkLoginSignatureInputs", {
            proofPoints: import_bcs.bcs.struct("ZkLoginSignatureInputsProofPoints", {
              a: import_bcs.bcs.vector(import_bcs.bcs.string()),
              b: import_bcs.bcs.vector(import_bcs.bcs.vector(import_bcs.bcs.string())),
              c: import_bcs.bcs.vector(import_bcs.bcs.string())
            }),
            issBase64Details: import_bcs.bcs.struct("ZkLoginSignatureInputsClaim", {
              value: import_bcs.bcs.string(),
              indexMod4: import_bcs.bcs.u8()
            }),
            headerBase64: import_bcs.bcs.string(),
            addressSeed: import_bcs.bcs.string()
          }),
          maxEpoch: import_bcs.bcs.u64(),
          userSignature: import_bcs.bcs.vector(import_bcs.bcs.u8())
        });
      }, {
        "@mysten/bcs": 13
      }],
      88: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var jwt_utils_exports = {};
        __export(jwt_utils_exports, {
          extractClaimValue: () => extractClaimValue
        });
        module.exports = __toCommonJS(jwt_utils_exports);
        function base64UrlCharTo6Bits(base64UrlChar) {
          if (base64UrlChar.length !== 1) {
            throw new Error("Invalid base64Url character: " + base64UrlChar);
          }
          const base64UrlCharacterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
          const index = base64UrlCharacterSet.indexOf(base64UrlChar);
          if (index === -1) {
            throw new Error("Invalid base64Url character: " + base64UrlChar);
          }
          const binaryString = index.toString(2).padStart(6, "0");
          const bits = Array.from(binaryString).map(Number);
          return bits;
        }
        function base64UrlStringToBitVector(base64UrlString) {
          let bitVector = [];
          for (let i = 0; i < base64UrlString.length; i++) {
            const base64UrlChar = base64UrlString.charAt(i);
            const bits = base64UrlCharTo6Bits(base64UrlChar);
            bitVector = bitVector.concat(bits);
          }
          return bitVector;
        }
        function decodeBase64URL(s, i) {
          if (s.length < 2) {
            throw new Error(`Input (s = ${s}) is not tightly packed because s.length < 2`);
          }
          let bits = base64UrlStringToBitVector(s);
          const firstCharOffset = i % 4;
          if (firstCharOffset === 0) {} else if (firstCharOffset === 1) {
            bits = bits.slice(2);
          } else if (firstCharOffset === 2) {
            bits = bits.slice(4);
          } else {
            throw new Error(`Input (s = ${s}) is not tightly packed because i%4 = 3 (i = ${i}))`);
          }
          const lastCharOffset = (i + s.length - 1) % 4;
          if (lastCharOffset === 3) {} else if (lastCharOffset === 2) {
            bits = bits.slice(0, bits.length - 2);
          } else if (lastCharOffset === 1) {
            bits = bits.slice(0, bits.length - 4);
          } else {
            throw new Error(`Input (s = ${s}) is not tightly packed because (i + s.length - 1)%4 = 0 (i = ${i}))`);
          }
          if (bits.length % 8 !== 0) {
            throw new Error(`We should never reach here...`);
          }
          const bytes = new Uint8Array(Math.floor(bits.length / 8));
          let currentByteIndex = 0;
          for (let i2 = 0; i2 < bits.length; i2 += 8) {
            const bitChunk = bits.slice(i2, i2 + 8);
            const byte = parseInt(bitChunk.join(""), 2);
            bytes[currentByteIndex++] = byte;
          }
          return new TextDecoder().decode(bytes);
        }
        function verifyExtendedClaim(claim) {
          if (!(claim.slice(-1) === "}" || claim.slice(-1) === ",")) {
            throw new Error("Invalid claim");
          }
          const json = JSON.parse("{" + claim.slice(0, -1) + "}");
          if (Object.keys(json).length !== 1) {
            throw new Error("Invalid claim");
          }
          const key = Object.keys(json)[0];
          return [key, json[key]];
        }
        function extractClaimValue(claim, claimName) {
          const extendedClaim = decodeBase64URL(claim.value, claim.indexMod4);
          const [name, value] = verifyExtendedClaim(extendedClaim);
          if (name !== claimName) {
            throw new Error(`Invalid field name: found ${name} expected ${claimName}`);
          }
          return value;
        }
      }, {}],
      89: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var __accessCheck = (obj, member, msg) => {
          if (!member.has(obj)) throw TypeError("Cannot " + msg);
        };
        var __privateGet = (obj, member, getter) => {
          __accessCheck(obj, member, "read from private field");
          return getter ? getter.call(obj) : member.get(obj);
        };
        var __privateAdd = (obj, member, value) => {
          if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
          member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
        };
        var __privateSet = (obj, member, value, setter) => {
          __accessCheck(obj, member, "write to private field");
          setter ? setter.call(obj, value) : member.set(obj, value);
          return value;
        };
        var publickey_exports = {};
        __export(publickey_exports, {
          ZkLoginPublicIdentifier: () => ZkLoginPublicIdentifier,
          parseSerializedZkLoginSignature: () => parseSerializedZkLoginSignature,
          toZkLoginPublicIdentifier: () => toZkLoginPublicIdentifier
        });
        module.exports = __toCommonJS(publickey_exports);
        var import_bcs = require("@mysten/bcs");
        var import_publickey = require("../cryptography/publickey.js");
        var import_signature_scheme = require("../cryptography/signature-scheme.js");
        var import_client = require("../graphql/client.js");
        var import__ = require("../graphql/schemas/2024.4/index.js");
        var import_jwt_utils = require("./jwt-utils.js");
        var import_signature = require("./signature.js");
        var import_utils = require("./utils.js");
        var _data, _client;
        const _ZkLoginPublicIdentifier = class extends import_publickey.PublicKey {
          /**
           * Create a new ZkLoginPublicIdentifier object
           * @param value zkLogin public identifier as buffer or base-64 encoded string
           */
          constructor(value, {
            client
          } = {}) {
            super();
            __privateAdd(this, _data, void 0);
            __privateAdd(this, _client, void 0);
            __privateSet(this, _client, client);
            if (typeof value === "string") {
              __privateSet(this, _data, (0, import_bcs.fromB64)(value));
            } else if (value instanceof Uint8Array) {
              __privateSet(this, _data, value);
            } else {
              __privateSet(this, _data, Uint8Array.from(value));
            }
          }
          /**
           * Checks if two zkLogin public identifiers are equal
           */
          equals(publicKey) {
            return super.equals(publicKey);
          }
          /**
           * Return the byte array representation of the zkLogin public identifier
           */
          toRawBytes() {
            return __privateGet(this, _data);
          }
          /**
           * Return the Sui address associated with this ZkLogin public identifier
           */
          flag() {
            return import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG["ZkLogin"];
          }
          /**
           * Verifies that the signature is valid for for the provided message
           */
          async verify(_message, _signature) {
            throw Error("does not support");
          }
          /**
           * Verifies that the signature is valid for for the provided PersonalMessage
           */
          verifyPersonalMessage(message, signature) {
            const parsedSignature = parseSerializedZkLoginSignature(signature);
            const address = new _ZkLoginPublicIdentifier(parsedSignature.publicKey).toSuiAddress();
            return graphqlVerifyZkLoginSignature({
              address,
              bytes: (0, import_bcs.toB64)(message),
              signature: parsedSignature.serializedSignature,
              intentScope: "PERSONAL_MESSAGE",
              client: __privateGet(this, _client)
            });
          }
          /**
           * Verifies that the signature is valid for for the provided Transaction
           */
          verifyTransaction(transaction, signature) {
            const parsedSignature = parseSerializedZkLoginSignature(signature);
            const address = new _ZkLoginPublicIdentifier(parsedSignature.publicKey).toSuiAddress();
            return graphqlVerifyZkLoginSignature({
              address,
              bytes: (0, import_bcs.toB64)(transaction),
              signature: parsedSignature.serializedSignature,
              intentScope: "TRANSACTION_DATA",
              client: __privateGet(this, _client)
            });
          }
        };
        let ZkLoginPublicIdentifier = _ZkLoginPublicIdentifier;
        _data = new WeakMap();
        _client = new WeakMap();
        function toZkLoginPublicIdentifier(addressSeed, iss, options) {
          const addressSeedBytesBigEndian = (0, import_utils.toPaddedBigEndianBytes)(addressSeed, 32);
          const issBytes = new TextEncoder().encode(iss);
          const tmp = new Uint8Array(1 + issBytes.length + addressSeedBytesBigEndian.length);
          tmp.set([issBytes.length], 0);
          tmp.set(issBytes, 1);
          tmp.set(addressSeedBytesBigEndian, 1 + issBytes.length);
          return new ZkLoginPublicIdentifier(tmp, options);
        }
        const VerifyZkLoginSignatureQuery = (0, import__.graphql)(`
	query Zklogin(
		$bytes: Base64!
		$signature: Base64!
		$intentScope: ZkLoginIntentScope!
		$author: SuiAddress!
	) {
		verifyZkloginSignature(
			bytes: $bytes
			signature: $signature
			intentScope: $intentScope
			author: $author
		) {
			success
			errors
		}
	}
`);
        async function graphqlVerifyZkLoginSignature({
          address,
          bytes,
          signature,
          intentScope,
          client = new import_client.SuiGraphQLClient({
            url: "https://sui-mainnet.mystenlabs.com/graphql"
          })
        }) {
          const resp = await client.query({
            query: VerifyZkLoginSignatureQuery,
            variables: {
              bytes,
              signature,
              intentScope,
              author: address
            }
          });
          return resp.data?.verifyZkloginSignature.success === true && resp.data?.verifyZkloginSignature.errors.length === 0;
        }
        function parseSerializedZkLoginSignature(signature) {
          const bytes = typeof signature === "string" ? (0, import_bcs.fromB64)(signature) : signature;
          if (bytes[0] !== import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG.ZkLogin) {
            throw new Error("Invalid signature scheme");
          }
          const signatureBytes = bytes.slice(1);
          const {
            inputs,
            maxEpoch,
            userSignature
          } = (0, import_signature.parseZkLoginSignature)(signatureBytes);
          const {
            issBase64Details,
            addressSeed
          } = inputs;
          const iss = (0, import_jwt_utils.extractClaimValue)(issBase64Details, "iss");
          const publicIdentifer = toZkLoginPublicIdentifier(BigInt(addressSeed), iss);
          return {
            serializedSignature: (0, import_bcs.toB64)(bytes),
            signatureScheme: "ZkLogin",
            zkLogin: {
              inputs,
              maxEpoch,
              userSignature,
              iss,
              addressSeed: BigInt(addressSeed)
            },
            signature: bytes,
            publicKey: publicIdentifer.toRawBytes()
          };
        }
      }, {
        "../cryptography/publickey.js": 39,
        "../cryptography/signature-scheme.js": 40,
        "../graphql/client.js": 44,
        "../graphql/schemas/2024.4/index.js": 45,
        "./jwt-utils.js": 88,
        "./signature.js": 90,
        "./utils.js": 91,
        "@mysten/bcs": 13
      }],
      90: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var signature_exports = {};
        __export(signature_exports, {
          getZkLoginSignature: () => getZkLoginSignature,
          parseZkLoginSignature: () => parseZkLoginSignature
        });
        module.exports = __toCommonJS(signature_exports);
        var import_bcs = require("@mysten/bcs");
        var import_signature_scheme = require("../cryptography/signature-scheme.js");
        var import_bcs2 = require("./bcs.js");
        function getZkLoginSignatureBytes({
          inputs,
          maxEpoch,
          userSignature
        }) {
          return import_bcs2.zkLoginSignature.serialize({
            inputs,
            maxEpoch,
            userSignature: typeof userSignature === "string" ? (0, import_bcs.fromB64)(userSignature) : userSignature
          }, {
            maxSize: 2048
          }).toBytes();
        }
        function getZkLoginSignature({
          inputs,
          maxEpoch,
          userSignature
        }) {
          const bytes = getZkLoginSignatureBytes({
            inputs,
            maxEpoch,
            userSignature
          });
          const signatureBytes = new Uint8Array(bytes.length + 1);
          signatureBytes.set([import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG.ZkLogin]);
          signatureBytes.set(bytes, 1);
          return (0, import_bcs.toB64)(signatureBytes);
        }
        function parseZkLoginSignature(signature) {
          return import_bcs2.zkLoginSignature.parse(typeof signature === "string" ? (0, import_bcs.fromB64)(signature) : signature);
        }
      }, {
        "../cryptography/signature-scheme.js": 40,
        "./bcs.js": 87,
        "@mysten/bcs": 13
      }],
      91: [function (require, module, exports) {
        "use strict";

        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = (target, all) => {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = (to, from, except, desc) => {
          if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          }
          return to;
        };
        var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
          value: true
        }), mod);
        var utils_exports = {};
        __export(utils_exports, {
          toBigEndianBytes: () => toBigEndianBytes,
          toPaddedBigEndianBytes: () => toPaddedBigEndianBytes
        });
        module.exports = __toCommonJS(utils_exports);
        var import_utils = require("@noble/hashes/utils");
        function findFirstNonZeroIndex(bytes) {
          for (let i = 0; i < bytes.length; i++) {
            if (bytes[i] !== 0) {
              return i;
            }
          }
          return -1;
        }
        function toPaddedBigEndianBytes(num, width) {
          const hex = num.toString(16);
          return (0, import_utils.hexToBytes)(hex.padStart(width * 2, "0").slice(-width * 2));
        }
        function toBigEndianBytes(num, width) {
          const bytes = toPaddedBigEndianBytes(num, width);
          const firstNonZeroIndex = findFirstNonZeroIndex(bytes);
          if (firstNonZeroIndex === -1) {
            return new Uint8Array([0]);
          }
          return bytes.slice(firstNonZeroIndex);
        }
      }, {
        "@noble/hashes/utils": 116
      }],
      92: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createCurve = exports.getHash = void 0;
        /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
        const hmac_1 = require("@noble/hashes/hmac");
        const utils_1 = require("@noble/hashes/utils");
        const weierstrass_js_1 = require("./abstract/weierstrass.js");
        // connects noble-curves to noble-hashes
        function getHash(hash) {
          return {
            hash,
            hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),
            randomBytes: utils_1.randomBytes
          };
        }
        exports.getHash = getHash;
        function createCurve(curveDef, defHash) {
          const create = hash => (0, weierstrass_js_1.weierstrass)({
            ...curveDef,
            ...getHash(hash)
          });
          return Object.freeze({
            ...create(defHash),
            create
          });
        }
        exports.createCurve = createCurve;
      }, {
        "./abstract/weierstrass.js": 97,
        "@noble/hashes/hmac": 101,
        "@noble/hashes/utils": 103
      }],
      93: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.validateBasic = exports.wNAF = void 0;
        /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
        // Abelian group utilities
        const modular_js_1 = require("./modular.js");
        const utils_js_1 = require("./utils.js");
        const _0n = BigInt(0);
        const _1n = BigInt(1);
        // Elliptic curve multiplication of Point by scalar. Fragile.
        // Scalars should always be less than curve order: this should be checked inside of a curve itself.
        // Creates precomputation tables for fast multiplication:
        // - private scalar is split by fixed size windows of W bits
        // - every window point is collected from window's table & added to accumulator
        // - since windows are different, same point inside tables won't be accessed more than once per calc
        // - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
        // - +1 window is neccessary for wNAF
        // - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
        // TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
        // windows to be in different memory locations
        function wNAF(c, bits) {
          const constTimeNegate = (condition, item) => {
            const neg = item.negate();
            return condition ? neg : item;
          };
          const opts = W => {
            const windows = Math.ceil(bits / W) + 1; // +1, because
            const windowSize = 2 ** (W - 1); // -1 because we skip zero
            return {
              windows,
              windowSize
            };
          };
          return {
            constTimeNegate,
            // non-const time multiplication ladder
            unsafeLadder(elm, n) {
              let p = c.ZERO;
              let d = elm;
              while (n > _0n) {
                if (n & _1n) p = p.add(d);
                d = d.double();
                n >>= _1n;
              }
              return p;
            },
            /**
             * Creates a wNAF precomputation window. Used for caching.
             * Default window size is set by `utils.precompute()` and is equal to 8.
             * Number of precomputed points depends on the curve size:
             * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
             * - 𝑊 is the window size
             * - 𝑛 is the bitlength of the curve order.
             * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
             * @returns precomputed point tables flattened to a single array
             */
            precomputeWindow(elm, W) {
              const {
                windows,
                windowSize
              } = opts(W);
              const points = [];
              let p = elm;
              let base = p;
              for (let window = 0; window < windows; window++) {
                base = p;
                points.push(base);
                // =1, because we skip zero
                for (let i = 1; i < windowSize; i++) {
                  base = base.add(p);
                  points.push(base);
                }
                p = base.double();
              }
              return points;
            },
            /**
             * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
             * @param W window size
             * @param precomputes precomputed tables
             * @param n scalar (we don't check here, but should be less than curve order)
             * @returns real and fake (for const-time) points
             */
            wNAF(W, precomputes, n) {
              // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
              // But need to carefully remove other checks before wNAF. ORDER == bits here
              const {
                windows,
                windowSize
              } = opts(W);
              let p = c.ZERO;
              let f = c.BASE;
              const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
              const maxNumber = 2 ** W;
              const shiftBy = BigInt(W);
              for (let window = 0; window < windows; window++) {
                const offset = window * windowSize;
                // Extract W bits.
                let wbits = Number(n & mask);
                // Shift number by W bits.
                n >>= shiftBy;
                // If the bits are bigger than max size, we'll split those.
                // +224 => 256 - 32
                if (wbits > windowSize) {
                  wbits -= maxNumber;
                  n += _1n;
                }
                // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                // there is negate now: it is possible that negated element from low value
                // would be the same as high element, which will create carry into next window.
                // It's not obvious how this can fail, but still worth investigating later.
                // Check if we're onto Zero point.
                // Add random point inside current window to f.
                const offset1 = offset;
                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                const cond1 = window % 2 !== 0;
                const cond2 = wbits < 0;
                if (wbits === 0) {
                  // The most important part for const-time getPublicKey
                  f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                } else {
                  p = p.add(constTimeNegate(cond2, precomputes[offset2]));
                }
              }
              // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
              // Even if the variable is still unused, there are some checks which will
              // throw an exception, so compiler needs to prove they won't happen, which is hard.
              // At this point there is a way to F be infinity-point even if p is not,
              // which makes it less const-time: around 1 bigint multiply.
              return {
                p,
                f
              };
            },
            wNAFCached(P, precomputesMap, n, transform) {
              // @ts-ignore
              const W = P._WINDOW_SIZE || 1;
              // Calculate precomputes on a first run, reuse them after
              let comp = precomputesMap.get(P);
              if (!comp) {
                comp = this.precomputeWindow(P, W);
                if (W !== 1) {
                  precomputesMap.set(P, transform(comp));
                }
              }
              return this.wNAF(W, comp, n);
            }
          };
        }
        exports.wNAF = wNAF;
        function validateBasic(curve) {
          (0, modular_js_1.validateField)(curve.Fp);
          (0, utils_js_1.validateObject)(curve, {
            n: 'bigint',
            h: 'bigint',
            Gx: 'field',
            Gy: 'field'
          }, {
            nBitLength: 'isSafeInteger',
            nByteLength: 'isSafeInteger'
          });
          // Set defaults
          return Object.freeze({
            ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
            ...curve,
            ...{
              p: curve.Fp.ORDER
            }
          });
        }
        exports.validateBasic = validateBasic;
      }, {
        "./modular.js": 95,
        "./utils.js": 96
      }],
      94: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createHasher = exports.isogenyMap = exports.hash_to_field = exports.expand_message_xof = exports.expand_message_xmd = void 0;
        const modular_js_1 = require("./modular.js");
        const utils_js_1 = require("./utils.js");
        // Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.
        const os2ip = utils_js_1.bytesToNumberBE;
        // Integer to Octet Stream (numberToBytesBE)
        function i2osp(value, length) {
          if (value < 0 || value >= 1 << 8 * length) {
            throw new Error(`bad I2OSP call: value=${value} length=${length}`);
          }
          const res = Array.from({
            length
          }).fill(0);
          for (let i = length - 1; i >= 0; i--) {
            res[i] = value & 0xff;
            value >>>= 8;
          }
          return new Uint8Array(res);
        }
        function strxor(a, b) {
          const arr = new Uint8Array(a.length);
          for (let i = 0; i < a.length; i++) {
            arr[i] = a[i] ^ b[i];
          }
          return arr;
        }
        function anum(item) {
          if (!Number.isSafeInteger(item)) throw new Error('number expected');
        }
        // Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits
        // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1
        function expand_message_xmd(msg, DST, lenInBytes, H) {
          (0, utils_js_1.abytes)(msg);
          (0, utils_js_1.abytes)(DST);
          anum(lenInBytes);
          // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
          if (DST.length > 255) DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));
          const {
            outputLen: b_in_bytes,
            blockLen: r_in_bytes
          } = H;
          const ell = Math.ceil(lenInBytes / b_in_bytes);
          if (ell > 255) throw new Error('Invalid xmd length');
          const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
          const Z_pad = i2osp(0, r_in_bytes);
          const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str
          const b = new Array(ell);
          const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
          b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
          for (let i = 1; i <= ell; i++) {
            const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
            b[i] = H((0, utils_js_1.concatBytes)(...args));
          }
          const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
          return pseudo_random_bytes.slice(0, lenInBytes);
        }
        exports.expand_message_xmd = expand_message_xmd;
        // Produces a uniformly random byte string using an extendable-output function (XOF) H.
        // 1. The collision resistance of H MUST be at least k bits.
        // 2. H MUST be an XOF that has been proved indifferentiable from
        //    a random oracle under a reasonable cryptographic assumption.
        // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2
        function expand_message_xof(msg, DST, lenInBytes, k, H) {
          (0, utils_js_1.abytes)(msg);
          (0, utils_js_1.abytes)(DST);
          anum(lenInBytes);
          // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
          // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));
          if (DST.length > 255) {
            const dkLen = Math.ceil(2 * k / 8);
            DST = H.create({
              dkLen
            }).update((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();
          }
          if (lenInBytes > 65535 || DST.length > 255) throw new Error('expand_message_xof: invalid lenInBytes');
          return H.create({
            dkLen: lenInBytes
          }).update(msg).update(i2osp(lenInBytes, 2))
          // 2. DST_prime = DST || I2OSP(len(DST), 1)
          .update(DST).update(i2osp(DST.length, 1)).digest();
        }
        exports.expand_message_xof = expand_message_xof;
        /**
         * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F
         * https://www.rfc-editor.org/rfc/rfc9380#section-5.2
         * @param msg a byte string containing the message to hash
         * @param count the number of elements of F to output
         * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
         * @returns [u_0, ..., u_(count - 1)], a list of field elements.
         */
        function hash_to_field(msg, count, options) {
          (0, utils_js_1.validateObject)(options, {
            DST: 'stringOrUint8Array',
            p: 'bigint',
            m: 'isSafeInteger',
            k: 'isSafeInteger',
            hash: 'hash'
          });
          const {
            p,
            k,
            m,
            hash,
            expand,
            DST: _DST
          } = options;
          (0, utils_js_1.abytes)(msg);
          anum(count);
          const DST = typeof _DST === 'string' ? (0, utils_js_1.utf8ToBytes)(_DST) : _DST;
          const log2p = p.toString(2).length;
          const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above
          const len_in_bytes = count * m * L;
          let prb; // pseudo_random_bytes
          if (expand === 'xmd') {
            prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
          } else if (expand === 'xof') {
            prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
          } else if (expand === '_internal_pass') {
            // for internal tests only
            prb = msg;
          } else {
            throw new Error('expand must be "xmd" or "xof"');
          }
          const u = new Array(count);
          for (let i = 0; i < count; i++) {
            const e = new Array(m);
            for (let j = 0; j < m; j++) {
              const elm_offset = L * (j + i * m);
              const tv = prb.subarray(elm_offset, elm_offset + L);
              e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
            }
            u[i] = e;
          }
          return u;
        }
        exports.hash_to_field = hash_to_field;
        function isogenyMap(field, map) {
          // Make same order as in spec
          const COEFF = map.map(i => Array.from(i).reverse());
          return (x, y) => {
            const [xNum, xDen, yNum, yDen] = COEFF.map(val => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
            x = field.div(xNum, xDen); // xNum / xDen
            y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)
            return {
              x,
              y
            };
          };
        }
        exports.isogenyMap = isogenyMap;
        function createHasher(Point, mapToCurve, def) {
          if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');
          return {
            // Encodes byte string to elliptic curve.
            // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
            hashToCurve(msg, options) {
              const u = hash_to_field(msg, 2, {
                ...def,
                DST: def.DST,
                ...options
              });
              const u0 = Point.fromAffine(mapToCurve(u[0]));
              const u1 = Point.fromAffine(mapToCurve(u[1]));
              const P = u0.add(u1).clearCofactor();
              P.assertValidity();
              return P;
            },
            // Encodes byte string to elliptic curve.
            // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
            encodeToCurve(msg, options) {
              const u = hash_to_field(msg, 1, {
                ...def,
                DST: def.encodeDST,
                ...options
              });
              const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
              P.assertValidity();
              return P;
            }
          };
        }
        exports.createHasher = createHasher;
      }, {
        "./modular.js": 95,
        "./utils.js": 96
      }],
      95: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.mapHashToField = exports.getMinHashLength = exports.getFieldBytesLength = exports.hashToPrivateScalar = exports.FpSqrtEven = exports.FpSqrtOdd = exports.Field = exports.nLength = exports.FpIsSquare = exports.FpDiv = exports.FpInvertBatch = exports.FpPow = exports.validateField = exports.isNegativeLE = exports.FpSqrt = exports.tonelliShanks = exports.invert = exports.pow2 = exports.pow = exports.mod = void 0;
        /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
        // Utilities for modular arithmetics and finite fields
        const utils_js_1 = require("./utils.js");
        // prettier-ignore
        const _0n = BigInt(0),
          _1n = BigInt(1),
          _2n = BigInt(2),
          _3n = BigInt(3);
        // prettier-ignore
        const _4n = BigInt(4),
          _5n = BigInt(5),
          _8n = BigInt(8);
        // prettier-ignore
        const _9n = BigInt(9),
          _16n = BigInt(16);
        // Calculates a modulo b
        function mod(a, b) {
          const result = a % b;
          return result >= _0n ? result : b + result;
        }
        exports.mod = mod;
        /**
         * Efficiently raise num to power and do modular division.
         * Unsafe in some contexts: uses ladder, so can expose bigint bits.
         * @example
         * pow(2n, 6n, 11n) // 64n % 11n == 9n
         */
        // TODO: use field version && remove
        function pow(num, power, modulo) {
          if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');
          if (modulo === _1n) return _0n;
          let res = _1n;
          while (power > _0n) {
            if (power & _1n) res = res * num % modulo;
            num = num * num % modulo;
            power >>= _1n;
          }
          return res;
        }
        exports.pow = pow;
        // Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
        function pow2(x, power, modulo) {
          let res = x;
          while (power-- > _0n) {
            res *= res;
            res %= modulo;
          }
          return res;
        }
        exports.pow2 = pow2;
        // Inverses number over modulo
        function invert(number, modulo) {
          if (number === _0n || modulo <= _0n) {
            throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
          }
          // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
          // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
          let a = mod(number, modulo);
          let b = modulo;
          // prettier-ignore
          let x = _0n,
            y = _1n,
            u = _1n,
            v = _0n;
          while (a !== _0n) {
            // JIT applies optimization if those two lines follow each other
            const q = b / a;
            const r = b % a;
            const m = x - u * q;
            const n = y - v * q;
            // prettier-ignore
            b = a, a = r, x = u, y = v, u = m, v = n;
          }
          const gcd = b;
          if (gcd !== _1n) throw new Error('invert: does not exist');
          return mod(x, modulo);
        }
        exports.invert = invert;
        /**
         * Tonelli-Shanks square root search algorithm.
         * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
         * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
         * Will start an infinite loop if field order P is not prime.
         * @param P field order
         * @returns function that takes field Fp (created from P) and number n
         */
        function tonelliShanks(P) {
          // Legendre constant: used to calculate Legendre symbol (a | p),
          // which denotes the value of a^((p-1)/2) (mod p).
          // (a | p) ≡ 1    if a is a square (mod p)
          // (a | p) ≡ -1   if a is not a square (mod p)
          // (a | p) ≡ 0    if a ≡ 0 (mod p)
          const legendreC = (P - _1n) / _2n;
          let Q, S, Z;
          // Step 1: By factoring out powers of 2 from p - 1,
          // find q and s such that p - 1 = q*(2^s) with q odd
          for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);
          // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
          for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);
          // Fast-path
          if (S === 1) {
            const p1div4 = (P + _1n) / _4n;
            return function tonelliFast(Fp, n) {
              const root = Fp.pow(n, p1div4);
              if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');
              return root;
            };
          }
          // Slow-path
          const Q1div2 = (Q + _1n) / _2n;
          return function tonelliSlow(Fp, n) {
            // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
            if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');
            let r = S;
            // TODO: will fail at Fp2/etc
            let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
            let x = Fp.pow(n, Q1div2); // first guess at the square root
            let b = Fp.pow(n, Q); // first guess at the fudge factor
            while (!Fp.eql(b, Fp.ONE)) {
              if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
              // Find m such b^(2^m)==1
              let m = 1;
              for (let t2 = Fp.sqr(b); m < r; m++) {
                if (Fp.eql(t2, Fp.ONE)) break;
                t2 = Fp.sqr(t2); // t2 *= t2
              }
              // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
              const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)
              g = Fp.sqr(ge); // g = ge * ge
              x = Fp.mul(x, ge); // x *= ge
              b = Fp.mul(b, g); // b *= g
              r = m;
            }
            return x;
          };
        }
        exports.tonelliShanks = tonelliShanks;
        function FpSqrt(P) {
          // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
          // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
          // P ≡ 3 (mod 4)
          // √n = n^((P+1)/4)
          if (P % _4n === _3n) {
            // Not all roots possible!
            // const ORDER =
            //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
            // const NUM = 72057594037927816n;
            const p1div4 = (P + _1n) / _4n;
            return function sqrt3mod4(Fp, n) {
              const root = Fp.pow(n, p1div4);
              // Throw if root**2 != n
              if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');
              return root;
            };
          }
          // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
          if (P % _8n === _5n) {
            const c1 = (P - _5n) / _8n;
            return function sqrt5mod8(Fp, n) {
              const n2 = Fp.mul(n, _2n);
              const v = Fp.pow(n2, c1);
              const nv = Fp.mul(n, v);
              const i = Fp.mul(Fp.mul(nv, _2n), v);
              const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
              if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');
              return root;
            };
          }
          // P ≡ 9 (mod 16)
          if (P % _16n === _9n) {
            // NOTE: tonelli is too slow for bls-Fp2 calculations even on start
            // Means we cannot use sqrt for constants at all!
            //
            // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F
            // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F
            // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F
            // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic
            // sqrt = (x) => {
            //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4
            //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1
            //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1
            //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1
            //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x
            //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x
            //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x
            //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x
            //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x
            //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2
            // }
          }
          // Other cases: Tonelli-Shanks algorithm
          return tonelliShanks(P);
        }
        exports.FpSqrt = FpSqrt;
        // Little-endian check for first LE bit (last BE bit);
        const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;
        exports.isNegativeLE = isNegativeLE;
        // prettier-ignore
        const FIELD_FIELDS = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];
        function validateField(field) {
          const initial = {
            ORDER: 'bigint',
            MASK: 'bigint',
            BYTES: 'isSafeInteger',
            BITS: 'isSafeInteger'
          };
          const opts = FIELD_FIELDS.reduce((map, val) => {
            map[val] = 'function';
            return map;
          }, initial);
          return (0, utils_js_1.validateObject)(field, opts);
        }
        exports.validateField = validateField;
        // Generic field functions
        /**
         * Same as `pow` but for Fp: non-constant-time.
         * Unsafe in some contexts: uses ladder, so can expose bigint bits.
         */
        function FpPow(f, num, power) {
          // Should have same speed as pow for bigints
          // TODO: benchmark!
          if (power < _0n) throw new Error('Expected power > 0');
          if (power === _0n) return f.ONE;
          if (power === _1n) return num;
          let p = f.ONE;
          let d = num;
          while (power > _0n) {
            if (power & _1n) p = f.mul(p, d);
            d = f.sqr(d);
            power >>= _1n;
          }
          return p;
        }
        exports.FpPow = FpPow;
        /**
         * Efficiently invert an array of Field elements.
         * `inv(0)` will return `undefined` here: make sure to throw an error.
         */
        function FpInvertBatch(f, nums) {
          const tmp = new Array(nums.length);
          // Walk from first to last, multiply them by each other MOD p
          const lastMultiplied = nums.reduce((acc, num, i) => {
            if (f.is0(num)) return acc;
            tmp[i] = acc;
            return f.mul(acc, num);
          }, f.ONE);
          // Invert last element
          const inverted = f.inv(lastMultiplied);
          // Walk from last to first, multiply them by inverted each other MOD p
          nums.reduceRight((acc, num, i) => {
            if (f.is0(num)) return acc;
            tmp[i] = f.mul(acc, tmp[i]);
            return f.mul(acc, num);
          }, inverted);
          return tmp;
        }
        exports.FpInvertBatch = FpInvertBatch;
        function FpDiv(f, lhs, rhs) {
          return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));
        }
        exports.FpDiv = FpDiv;
        // This function returns True whenever the value x is a square in the field F.
        function FpIsSquare(f) {
          const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic
          return x => {
            const p = f.pow(x, legendreConst);
            return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
          };
        }
        exports.FpIsSquare = FpIsSquare;
        // CURVE.n lengths
        function nLength(n, nBitLength) {
          // Bit size, byte size of CURVE.n
          const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
          const nByteLength = Math.ceil(_nBitLength / 8);
          return {
            nBitLength: _nBitLength,
            nByteLength
          };
        }
        exports.nLength = nLength;
        /**
         * Initializes a finite field over prime. **Non-primes are not supported.**
         * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
         * Major performance optimizations:
         * * a) denormalized operations like mulN instead of mul
         * * b) same object shape: never add or remove keys
         * * c) Object.freeze
         * @param ORDER prime positive bigint
         * @param bitLen how many bits the field consumes
         * @param isLE (def: false) if encoding / decoding should be in little-endian
         * @param redef optional faster redefinitions of sqrt and other methods
         */
        function Field(ORDER, bitLen, isLE = false, redef = {}) {
          if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
          const {
            nBitLength: BITS,
            nByteLength: BYTES
          } = nLength(ORDER, bitLen);
          if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');
          const sqrtP = FpSqrt(ORDER);
          const f = Object.freeze({
            ORDER,
            BITS,
            BYTES,
            MASK: (0, utils_js_1.bitMask)(BITS),
            ZERO: _0n,
            ONE: _1n,
            create: num => mod(num, ORDER),
            isValid: num => {
              if (typeof num !== 'bigint') throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
              return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible
            },

            is0: num => num === _0n,
            isOdd: num => (num & _1n) === _1n,
            neg: num => mod(-num, ORDER),
            eql: (lhs, rhs) => lhs === rhs,
            sqr: num => mod(num * num, ORDER),
            add: (lhs, rhs) => mod(lhs + rhs, ORDER),
            sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
            mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
            pow: (num, power) => FpPow(f, num, power),
            div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
            // Same as above, but doesn't normalize
            sqrN: num => num * num,
            addN: (lhs, rhs) => lhs + rhs,
            subN: (lhs, rhs) => lhs - rhs,
            mulN: (lhs, rhs) => lhs * rhs,
            inv: num => invert(num, ORDER),
            sqrt: redef.sqrt || (n => sqrtP(f, n)),
            invertBatch: lst => FpInvertBatch(f, lst),
            // TODO: do we really need constant cmov?
            // We don't have const-time bigints anyway, so probably will be not very useful
            cmov: (a, b, c) => c ? b : a,
            toBytes: num => isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
            fromBytes: bytes => {
              if (bytes.length !== BYTES) throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
              return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);
            }
          });
          return Object.freeze(f);
        }
        exports.Field = Field;
        function FpSqrtOdd(Fp, elm) {
          if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);
          const root = Fp.sqrt(elm);
          return Fp.isOdd(root) ? root : Fp.neg(root);
        }
        exports.FpSqrtOdd = FpSqrtOdd;
        function FpSqrtEven(Fp, elm) {
          if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);
          const root = Fp.sqrt(elm);
          return Fp.isOdd(root) ? Fp.neg(root) : root;
        }
        exports.FpSqrtEven = FpSqrtEven;
        /**
         * "Constant-time" private key generation utility.
         * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
         * Which makes it slightly more biased, less secure.
         * @deprecated use mapKeyToField instead
         */
        function hashToPrivateScalar(hash, groupOrder, isLE = false) {
          hash = (0, utils_js_1.ensureBytes)('privateHash', hash);
          const hashLen = hash.length;
          const minLen = nLength(groupOrder).nByteLength + 8;
          if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
          const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);
          return mod(num, groupOrder - _1n) + _1n;
        }
        exports.hashToPrivateScalar = hashToPrivateScalar;
        /**
         * Returns total number of bytes consumed by the field element.
         * For example, 32 bytes for usual 256-bit weierstrass curve.
         * @param fieldOrder number of field elements, usually CURVE.n
         * @returns byte length of field
         */
        function getFieldBytesLength(fieldOrder) {
          if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');
          const bitLength = fieldOrder.toString(2).length;
          return Math.ceil(bitLength / 8);
        }
        exports.getFieldBytesLength = getFieldBytesLength;
        /**
         * Returns minimal amount of bytes that can be safely reduced
         * by field order.
         * Should be 2^-128 for 128-bit curve such as P256.
         * @param fieldOrder number of field elements, usually CURVE.n
         * @returns byte length of target hash
         */
        function getMinHashLength(fieldOrder) {
          const length = getFieldBytesLength(fieldOrder);
          return length + Math.ceil(length / 2);
        }
        exports.getMinHashLength = getMinHashLength;
        /**
         * "Constant-time" private key generation utility.
         * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
         * and convert them into private scalar, with the modulo bias being negligible.
         * Needs at least 48 bytes of input for 32-byte private key.
         * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
         * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
         * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
         * @param hash hash output from SHA3 or a similar function
         * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
         * @param isLE interpret hash bytes as LE num
         * @returns valid private scalar
         */
        function mapHashToField(key, fieldOrder, isLE = false) {
          const len = key.length;
          const fieldLen = getFieldBytesLength(fieldOrder);
          const minLen = getMinHashLength(fieldOrder);
          // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
          if (len < 16 || len < minLen || len > 1024) throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
          const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
          // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
          const reduced = mod(num, fieldOrder - _1n) + _1n;
          return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
        }
        exports.mapHashToField = mapHashToField;
      }, {
        "./utils.js": 96
      }],
      96: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.validateObject = exports.createHmacDrbg = exports.bitMask = exports.bitSet = exports.bitGet = exports.bitLen = exports.utf8ToBytes = exports.equalBytes = exports.concatBytes = exports.ensureBytes = exports.numberToVarBytesBE = exports.numberToBytesLE = exports.numberToBytesBE = exports.bytesToNumberLE = exports.bytesToNumberBE = exports.hexToBytes = exports.hexToNumber = exports.numberToHexUnpadded = exports.bytesToHex = exports.abytes = exports.isBytes = void 0;
        /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
        // 100 lines of code in the file are duplicated from noble-hashes (utils).
        // This is OK: `abstract` directory does not use noble-hashes.
        // User may opt-in into using different hashing library. This way, noble-hashes
        // won't be included into their bundle.
        const _0n = BigInt(0);
        const _1n = BigInt(1);
        const _2n = BigInt(2);
        function isBytes(a) {
          return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';
        }
        exports.isBytes = isBytes;
        function abytes(item) {
          if (!isBytes(item)) throw new Error('Uint8Array expected');
        }
        exports.abytes = abytes;
        // Array where index 0xf0 (240) is mapped to string 'f0'
        const hexes = /* @__PURE__ */Array.from({
          length: 256
        }, (_, i) => i.toString(16).padStart(2, '0'));
        /**
         * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
         */
        function bytesToHex(bytes) {
          abytes(bytes);
          // pre-caching improves the speed 6x
          let hex = '';
          for (let i = 0; i < bytes.length; i++) {
            hex += hexes[bytes[i]];
          }
          return hex;
        }
        exports.bytesToHex = bytesToHex;
        function numberToHexUnpadded(num) {
          const hex = num.toString(16);
          return hex.length & 1 ? `0${hex}` : hex;
        }
        exports.numberToHexUnpadded = numberToHexUnpadded;
        function hexToNumber(hex) {
          if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);
          // Big Endian
          return BigInt(hex === '' ? '0' : `0x${hex}`);
        }
        exports.hexToNumber = hexToNumber;
        // We use optimized technique to convert hex string to byte array
        const asciis = {
          _0: 48,
          _9: 57,
          _A: 65,
          _F: 70,
          _a: 97,
          _f: 102
        };
        function asciiToBase16(char) {
          if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;
          if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);
          if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);
          return;
        }
        /**
         * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
         */
        function hexToBytes(hex) {
          if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);
          const hl = hex.length;
          const al = hl / 2;
          if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
          const array = new Uint8Array(al);
          for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
            const n1 = asciiToBase16(hex.charCodeAt(hi));
            const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
            if (n1 === undefined || n2 === undefined) {
              const char = hex[hi] + hex[hi + 1];
              throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
            }
            array[ai] = n1 * 16 + n2;
          }
          return array;
        }
        exports.hexToBytes = hexToBytes;
        // BE: Big Endian, LE: Little Endian
        function bytesToNumberBE(bytes) {
          return hexToNumber(bytesToHex(bytes));
        }
        exports.bytesToNumberBE = bytesToNumberBE;
        function bytesToNumberLE(bytes) {
          abytes(bytes);
          return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
        }
        exports.bytesToNumberLE = bytesToNumberLE;
        function numberToBytesBE(n, len) {
          return hexToBytes(n.toString(16).padStart(len * 2, '0'));
        }
        exports.numberToBytesBE = numberToBytesBE;
        function numberToBytesLE(n, len) {
          return numberToBytesBE(n, len).reverse();
        }
        exports.numberToBytesLE = numberToBytesLE;
        // Unpadded, rarely used
        function numberToVarBytesBE(n) {
          return hexToBytes(numberToHexUnpadded(n));
        }
        exports.numberToVarBytesBE = numberToVarBytesBE;
        /**
         * Takes hex string or Uint8Array, converts to Uint8Array.
         * Validates output length.
         * Will throw error for other types.
         * @param title descriptive title for an error e.g. 'private key'
         * @param hex hex string or Uint8Array
         * @param expectedLength optional, will compare to result array's length
         * @returns
         */
        function ensureBytes(title, hex, expectedLength) {
          let res;
          if (typeof hex === 'string') {
            try {
              res = hexToBytes(hex);
            } catch (e) {
              throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
            }
          } else if (isBytes(hex)) {
            // Uint8Array.from() instead of hash.slice() because node.js Buffer
            // is instance of Uint8Array, and its slice() creates **mutable** copy
            res = Uint8Array.from(hex);
          } else {
            throw new Error(`${title} must be hex string or Uint8Array`);
          }
          const len = res.length;
          if (typeof expectedLength === 'number' && len !== expectedLength) throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
          return res;
        }
        exports.ensureBytes = ensureBytes;
        /**
         * Copies several Uint8Arrays into one.
         */
        function concatBytes(...arrays) {
          let sum = 0;
          for (let i = 0; i < arrays.length; i++) {
            const a = arrays[i];
            abytes(a);
            sum += a.length;
          }
          const res = new Uint8Array(sum);
          for (let i = 0, pad = 0; i < arrays.length; i++) {
            const a = arrays[i];
            res.set(a, pad);
            pad += a.length;
          }
          return res;
        }
        exports.concatBytes = concatBytes;
        // Compares 2 u8a-s in kinda constant time
        function equalBytes(a, b) {
          if (a.length !== b.length) return false;
          let diff = 0;
          for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];
          return diff === 0;
        }
        exports.equalBytes = equalBytes;
        /**
         * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
         */
        function utf8ToBytes(str) {
          if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
          return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
        }

        exports.utf8ToBytes = utf8ToBytes;
        // Bit operations
        /**
         * Calculates amount of bits in a bigint.
         * Same as `n.toString(2).length`
         */
        function bitLen(n) {
          let len;
          for (len = 0; n > _0n; n >>= _1n, len += 1);
          return len;
        }
        exports.bitLen = bitLen;
        /**
         * Gets single bit at position.
         * NOTE: first bit position is 0 (same as arrays)
         * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
         */
        function bitGet(n, pos) {
          return n >> BigInt(pos) & _1n;
        }
        exports.bitGet = bitGet;
        /**
         * Sets single bit at position.
         */
        function bitSet(n, pos, value) {
          return n | (value ? _1n : _0n) << BigInt(pos);
        }
        exports.bitSet = bitSet;
        /**
         * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
         * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
         */
        const bitMask = n => (_2n << BigInt(n - 1)) - _1n;
        exports.bitMask = bitMask;
        // DRBG
        const u8n = data => new Uint8Array(data); // creates Uint8Array
        const u8fr = arr => Uint8Array.from(arr); // another shortcut
        /**
         * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
         * @returns function that will call DRBG until 2nd arg returns something meaningful
         * @example
         *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
         *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
         */
        function createHmacDrbg(hashLen, qByteLen, hmacFn) {
          if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');
          if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');
          if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');
          // Step B, Step C: set hashLen to 8*ceil(hlen/8)
          let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
          let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
          let i = 0; // Iterations counter, will throw when over 1000
          const reset = () => {
            v.fill(1);
            k.fill(0);
            i = 0;
          };
          const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)
          const reseed = (seed = u8n()) => {
            // HMAC-DRBG reseed() function. Steps D-G
            k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)
            v = h(); // v = hmac(k || v)
            if (seed.length === 0) return;
            k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)
            v = h(); // v = hmac(k || v)
          };

          const gen = () => {
            // HMAC-DRBG generate() function
            if (i++ >= 1000) throw new Error('drbg: tried 1000 values');
            let len = 0;
            const out = [];
            while (len < qByteLen) {
              v = h();
              const sl = v.slice();
              out.push(sl);
              len += v.length;
            }
            return concatBytes(...out);
          };
          const genUntil = (seed, pred) => {
            reset();
            reseed(seed); // Steps D-G
            let res = undefined; // Step H: grind until k is in [1..n-1]
            while (!(res = pred(gen()))) reseed();
            reset();
            return res;
          };
          return genUntil;
        }
        exports.createHmacDrbg = createHmacDrbg;
        // Validating curves and fields
        const validatorFns = {
          bigint: val => typeof val === 'bigint',
          function: val => typeof val === 'function',
          boolean: val => typeof val === 'boolean',
          string: val => typeof val === 'string',
          stringOrUint8Array: val => typeof val === 'string' || isBytes(val),
          isSafeInteger: val => Number.isSafeInteger(val),
          array: val => Array.isArray(val),
          field: (val, object) => object.Fp.isValid(val),
          hash: val => typeof val === 'function' && Number.isSafeInteger(val.outputLen)
        };
        // type Record<K extends string | number | symbol, T> = { [P in K]: T; }
        function validateObject(object, validators, optValidators = {}) {
          const checkField = (fieldName, type, isOptional) => {
            const checkVal = validatorFns[type];
            if (typeof checkVal !== 'function') throw new Error(`Invalid validator "${type}", expected function`);
            const val = object[fieldName];
            if (isOptional && val === undefined) return;
            if (!checkVal(val, object)) {
              throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
            }
          };
          for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type, false);
          for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type, true);
          return object;
        }
        exports.validateObject = validateObject;
        // validate type tests
        // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
        // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
        // // Should fail type-check
        // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
        // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
        // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
        // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });
      }, {}],
      97: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;
        /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
        // Short Weierstrass curve. The formula is: y² = x³ + ax + b
        const mod = require("./modular.js");
        const ut = require("./utils.js");
        const utils_js_1 = require("./utils.js");
        const curve_js_1 = require("./curve.js");
        function validatePointOpts(curve) {
          const opts = (0, curve_js_1.validateBasic)(curve);
          ut.validateObject(opts, {
            a: 'field',
            b: 'field'
          }, {
            allowedPrivateKeyLengths: 'array',
            wrapPrivateKey: 'boolean',
            isTorsionFree: 'function',
            clearCofactor: 'function',
            allowInfinityPoint: 'boolean',
            fromBytes: 'function',
            toBytes: 'function'
          });
          const {
            endo,
            Fp,
            a
          } = opts;
          if (endo) {
            if (!Fp.eql(a, Fp.ZERO)) {
              throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');
            }
            if (typeof endo !== 'object' || typeof endo.beta !== 'bigint' || typeof endo.splitScalar !== 'function') {
              throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');
            }
          }
          return Object.freeze({
            ...opts
          });
        }
        // ASN.1 DER encoding utilities
        const {
          bytesToNumberBE: b2n,
          hexToBytes: h2b
        } = ut;
        exports.DER = {
          // asn.1 DER encoding utils
          Err: class DERErr extends Error {
            constructor(m = '') {
              super(m);
            }
          },
          _parseInt(data) {
            const {
              Err: E
            } = exports.DER;
            if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');
            const len = data[1];
            const res = data.subarray(2, len + 2);
            if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');
            // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
            // since we always use positive integers here. It must always be empty:
            // - add zero byte if exists
            // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
            if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');
            if (res[0] === 0x00 && !(res[1] & 0b10000000)) throw new E('Invalid signature integer: unnecessary leading zero');
            return {
              d: b2n(res),
              l: data.subarray(len + 2)
            }; // d is data, l is left
          },

          toSig(hex) {
            // parse DER signature
            const {
              Err: E
            } = exports.DER;
            const data = typeof hex === 'string' ? h2b(hex) : hex;
            ut.abytes(data);
            let l = data.length;
            if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');
            if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');
            const {
              d: r,
              l: sBytes
            } = exports.DER._parseInt(data.subarray(2));
            const {
              d: s,
              l: rBytesLeft
            } = exports.DER._parseInt(sBytes);
            if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');
            return {
              r,
              s
            };
          },
          hexFromSig(sig) {
            // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
            const slice = s => Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s;
            const h = num => {
              const hex = num.toString(16);
              return hex.length & 1 ? `0${hex}` : hex;
            };
            const s = slice(h(sig.s));
            const r = slice(h(sig.r));
            const shl = s.length / 2;
            const rhl = r.length / 2;
            const sl = h(shl);
            const rl = h(rhl);
            return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
          }
        };
        // Be friendly to bad ECMAScript parsers by not using bigint literals
        // prettier-ignore
        const _0n = BigInt(0),
          _1n = BigInt(1),
          _2n = BigInt(2),
          _3n = BigInt(3),
          _4n = BigInt(4);
        function weierstrassPoints(opts) {
          const CURVE = validatePointOpts(opts);
          const {
            Fp
          } = CURVE; // All curves has same field / group length as for now, but they can differ
          const toBytes = CURVE.toBytes || ((_c, point, _isCompressed) => {
            const a = point.toAffine();
            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
          });
          const fromBytes = CURVE.fromBytes || (bytes => {
            // const head = bytes[0];
            const tail = bytes.subarray(1);
            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return {
              x,
              y
            };
          });
          /**
           * y² = x³ + ax + b: Short weierstrass curve formula
           * @returns y²
           */
          function weierstrassEquation(x) {
            const {
              a,
              b
            } = CURVE;
            const x2 = Fp.sqr(x); // x * x
            const x3 = Fp.mul(x2, x); // x2 * x
            return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
          }
          // Validate whether the passed curve params are valid.
          // We check if curve equation works for generator point.
          // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
          // ProjectivePoint class has not been initialized yet.
          if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error('bad generator point: equation left != right');
          // Valid group elements reside in range 1..n-1
          function isWithinCurveOrder(num) {
            return typeof num === 'bigint' && _0n < num && num < CURVE.n;
          }
          function assertGE(num) {
            if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');
          }
          // Validates if priv key is valid and converts it to bigint.
          // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
          function normPrivateKeyToScalar(key) {
            const {
              allowedPrivateKeyLengths: lengths,
              nByteLength,
              wrapPrivateKey,
              n
            } = CURVE;
            if (lengths && typeof key !== 'bigint') {
              if (ut.isBytes(key)) key = ut.bytesToHex(key);
              // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
              if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');
              key = key.padStart(nByteLength * 2, '0');
            }
            let num;
            try {
              num = typeof key === 'bigint' ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)('private key', key, nByteLength));
            } catch (error) {
              throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
            }
            if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS
            assertGE(num); // num in range [1..N-1]
            return num;
          }
          const pointPrecomputes = new Map();
          function assertPrjPoint(other) {
            if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');
          }
          /**
           * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
           * Default Point works in 2d / affine coordinates: (x, y)
           * We're doing calculations in projective, because its operations don't require costly inversion.
           */
          class Point {
            constructor(px, py, pz) {
              this.px = px;
              this.py = py;
              this.pz = pz;
              if (px == null || !Fp.isValid(px)) throw new Error('x required');
              if (py == null || !Fp.isValid(py)) throw new Error('y required');
              if (pz == null || !Fp.isValid(pz)) throw new Error('z required');
            }
            // Does not validate if the point is on-curve.
            // Use fromHex instead, or call assertValidity() later.
            static fromAffine(p) {
              const {
                x,
                y
              } = p || {};
              if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');
              if (p instanceof Point) throw new Error('projective point not allowed');
              const is0 = i => Fp.eql(i, Fp.ZERO);
              // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
              if (is0(x) && is0(y)) return Point.ZERO;
              return new Point(x, y, Fp.ONE);
            }
            get x() {
              return this.toAffine().x;
            }
            get y() {
              return this.toAffine().y;
            }
            /**
             * Takes a bunch of Projective Points but executes only one
             * inversion on all of them. Inversion is very slow operation,
             * so this improves performance massively.
             * Optimization: converts a list of projective points to a list of identical points with Z=1.
             */
            static normalizeZ(points) {
              const toInv = Fp.invertBatch(points.map(p => p.pz));
              return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
            }
            /**
             * Converts hash string or Uint8Array to Point.
             * @param hex short/long ECDSA hex
             */
            static fromHex(hex) {
              const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)('pointHex', hex)));
              P.assertValidity();
              return P;
            }
            // Multiplies generator point by privateKey.
            static fromPrivateKey(privateKey) {
              return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
            }
            // "Private method", don't use it directly
            _setWindowSize(windowSize) {
              this._WINDOW_SIZE = windowSize;
              pointPrecomputes.delete(this);
            }
            // A point on curve is valid if it conforms to equation.
            assertValidity() {
              if (this.is0()) {
                // (0, 1, 0) aka ZERO is invalid in most contexts.
                // In BLS, ZERO can be serialized, so we allow it.
                // (0, 0, 0) is wrong representation of ZERO and is always invalid.
                if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;
                throw new Error('bad point: ZERO');
              }
              // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
              const {
                x,
                y
              } = this.toAffine();
              // Check if x, y are valid field elements
              if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');
              const left = Fp.sqr(y); // y²
              const right = weierstrassEquation(x); // x³ + ax + b
              if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');
              if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');
            }
            hasEvenY() {
              const {
                y
              } = this.toAffine();
              if (Fp.isOdd) return !Fp.isOdd(y);
              throw new Error("Field doesn't support isOdd");
            }
            /**
             * Compare one point to another.
             */
            equals(other) {
              assertPrjPoint(other);
              const {
                px: X1,
                py: Y1,
                pz: Z1
              } = this;
              const {
                px: X2,
                py: Y2,
                pz: Z2
              } = other;
              const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
              const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
              return U1 && U2;
            }
            /**
             * Flips point to one corresponding to (x, -y) in Affine coordinates.
             */
            negate() {
              return new Point(this.px, Fp.neg(this.py), this.pz);
            }
            // Renes-Costello-Batina exception-free doubling formula.
            // There is 30% faster Jacobian formula, but it is not complete.
            // https://eprint.iacr.org/2015/1060, algorithm 3
            // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
            double() {
              const {
                a,
                b
              } = CURVE;
              const b3 = Fp.mul(b, _3n);
              const {
                px: X1,
                py: Y1,
                pz: Z1
              } = this;
              let X3 = Fp.ZERO,
                Y3 = Fp.ZERO,
                Z3 = Fp.ZERO; // prettier-ignore
              let t0 = Fp.mul(X1, X1); // step 1
              let t1 = Fp.mul(Y1, Y1);
              let t2 = Fp.mul(Z1, Z1);
              let t3 = Fp.mul(X1, Y1);
              t3 = Fp.add(t3, t3); // step 5
              Z3 = Fp.mul(X1, Z1);
              Z3 = Fp.add(Z3, Z3);
              X3 = Fp.mul(a, Z3);
              Y3 = Fp.mul(b3, t2);
              Y3 = Fp.add(X3, Y3); // step 10
              X3 = Fp.sub(t1, Y3);
              Y3 = Fp.add(t1, Y3);
              Y3 = Fp.mul(X3, Y3);
              X3 = Fp.mul(t3, X3);
              Z3 = Fp.mul(b3, Z3); // step 15
              t2 = Fp.mul(a, t2);
              t3 = Fp.sub(t0, t2);
              t3 = Fp.mul(a, t3);
              t3 = Fp.add(t3, Z3);
              Z3 = Fp.add(t0, t0); // step 20
              t0 = Fp.add(Z3, t0);
              t0 = Fp.add(t0, t2);
              t0 = Fp.mul(t0, t3);
              Y3 = Fp.add(Y3, t0);
              t2 = Fp.mul(Y1, Z1); // step 25
              t2 = Fp.add(t2, t2);
              t0 = Fp.mul(t2, t3);
              X3 = Fp.sub(X3, t0);
              Z3 = Fp.mul(t2, t1);
              Z3 = Fp.add(Z3, Z3); // step 30
              Z3 = Fp.add(Z3, Z3);
              return new Point(X3, Y3, Z3);
            }
            // Renes-Costello-Batina exception-free addition formula.
            // There is 30% faster Jacobian formula, but it is not complete.
            // https://eprint.iacr.org/2015/1060, algorithm 1
            // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
            add(other) {
              assertPrjPoint(other);
              const {
                px: X1,
                py: Y1,
                pz: Z1
              } = this;
              const {
                px: X2,
                py: Y2,
                pz: Z2
              } = other;
              let X3 = Fp.ZERO,
                Y3 = Fp.ZERO,
                Z3 = Fp.ZERO; // prettier-ignore
              const a = CURVE.a;
              const b3 = Fp.mul(CURVE.b, _3n);
              let t0 = Fp.mul(X1, X2); // step 1
              let t1 = Fp.mul(Y1, Y2);
              let t2 = Fp.mul(Z1, Z2);
              let t3 = Fp.add(X1, Y1);
              let t4 = Fp.add(X2, Y2); // step 5
              t3 = Fp.mul(t3, t4);
              t4 = Fp.add(t0, t1);
              t3 = Fp.sub(t3, t4);
              t4 = Fp.add(X1, Z1);
              let t5 = Fp.add(X2, Z2); // step 10
              t4 = Fp.mul(t4, t5);
              t5 = Fp.add(t0, t2);
              t4 = Fp.sub(t4, t5);
              t5 = Fp.add(Y1, Z1);
              X3 = Fp.add(Y2, Z2); // step 15
              t5 = Fp.mul(t5, X3);
              X3 = Fp.add(t1, t2);
              t5 = Fp.sub(t5, X3);
              Z3 = Fp.mul(a, t4);
              X3 = Fp.mul(b3, t2); // step 20
              Z3 = Fp.add(X3, Z3);
              X3 = Fp.sub(t1, Z3);
              Z3 = Fp.add(t1, Z3);
              Y3 = Fp.mul(X3, Z3);
              t1 = Fp.add(t0, t0); // step 25
              t1 = Fp.add(t1, t0);
              t2 = Fp.mul(a, t2);
              t4 = Fp.mul(b3, t4);
              t1 = Fp.add(t1, t2);
              t2 = Fp.sub(t0, t2); // step 30
              t2 = Fp.mul(a, t2);
              t4 = Fp.add(t4, t2);
              t0 = Fp.mul(t1, t4);
              Y3 = Fp.add(Y3, t0);
              t0 = Fp.mul(t5, t4); // step 35
              X3 = Fp.mul(t3, X3);
              X3 = Fp.sub(X3, t0);
              t0 = Fp.mul(t3, t1);
              Z3 = Fp.mul(t5, Z3);
              Z3 = Fp.add(Z3, t0); // step 40
              return new Point(X3, Y3, Z3);
            }
            subtract(other) {
              return this.add(other.negate());
            }
            is0() {
              return this.equals(Point.ZERO);
            }
            wNAF(n) {
              return wnaf.wNAFCached(this, pointPrecomputes, n, comp => {
                const toInv = Fp.invertBatch(comp.map(p => p.pz));
                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
              });
            }
            /**
             * Non-constant-time multiplication. Uses double-and-add algorithm.
             * It's faster, but should only be used when you don't care about
             * an exposed private key e.g. sig verification, which works over *public* keys.
             */
            multiplyUnsafe(n) {
              const I = Point.ZERO;
              if (n === _0n) return I;
              assertGE(n); // Will throw on 0
              if (n === _1n) return this;
              const {
                endo
              } = CURVE;
              if (!endo) return wnaf.unsafeLadder(this, n);
              // Apply endomorphism
              let {
                k1neg,
                k1,
                k2neg,
                k2
              } = endo.splitScalar(n);
              let k1p = I;
              let k2p = I;
              let d = this;
              while (k1 > _0n || k2 > _0n) {
                if (k1 & _1n) k1p = k1p.add(d);
                if (k2 & _1n) k2p = k2p.add(d);
                d = d.double();
                k1 >>= _1n;
                k2 >>= _1n;
              }
              if (k1neg) k1p = k1p.negate();
              if (k2neg) k2p = k2p.negate();
              k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
              return k1p.add(k2p);
            }
            /**
             * Constant time multiplication.
             * Uses wNAF method. Windowed method may be 10% faster,
             * but takes 2x longer to generate and consumes 2x memory.
             * Uses precomputes when available.
             * Uses endomorphism for Koblitz curves.
             * @param scalar by which the point would be multiplied
             * @returns New point
             */
            multiply(scalar) {
              assertGE(scalar);
              let n = scalar;
              let point, fake; // Fake point is used to const-time mult
              const {
                endo
              } = CURVE;
              if (endo) {
                const {
                  k1neg,
                  k1,
                  k2neg,
                  k2
                } = endo.splitScalar(n);
                let {
                  p: k1p,
                  f: f1p
                } = this.wNAF(k1);
                let {
                  p: k2p,
                  f: f2p
                } = this.wNAF(k2);
                k1p = wnaf.constTimeNegate(k1neg, k1p);
                k2p = wnaf.constTimeNegate(k2neg, k2p);
                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                point = k1p.add(k2p);
                fake = f1p.add(f2p);
              } else {
                const {
                  p,
                  f
                } = this.wNAF(n);
                point = p;
                fake = f;
              }
              // Normalize `z` for both points, but return only real one
              return Point.normalizeZ([point, fake])[0];
            }
            /**
             * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
             * Not using Strauss-Shamir trick: precomputation tables are faster.
             * The trick could be useful if both P and Q are not G (not in our case).
             * @returns non-zero affine point
             */
            multiplyAndAddUnsafe(Q, a, b) {
              const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
              const mul = (P, a // Select faster multiply() method
              ) => a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);
              const sum = mul(this, a).add(mul(Q, b));
              return sum.is0() ? undefined : sum;
            }
            // Converts Projective point to affine (x, y) coordinates.
            // Can accept precomputed Z^-1 - for example, from invertBatch.
            // (x, y, z) ∋ (x=x/z, y=y/z)
            toAffine(iz) {
              const {
                px: x,
                py: y,
                pz: z
              } = this;
              const is0 = this.is0();
              // If invZ was 0, we return zero point. However we still want to execute
              // all operations, so we replace invZ with a random number, 1.
              if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);
              const ax = Fp.mul(x, iz);
              const ay = Fp.mul(y, iz);
              const zz = Fp.mul(z, iz);
              if (is0) return {
                x: Fp.ZERO,
                y: Fp.ZERO
              };
              if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');
              return {
                x: ax,
                y: ay
              };
            }
            isTorsionFree() {
              const {
                h: cofactor,
                isTorsionFree
              } = CURVE;
              if (cofactor === _1n) return true; // No subgroups, always torsion-free
              if (isTorsionFree) return isTorsionFree(Point, this);
              throw new Error('isTorsionFree() has not been declared for the elliptic curve');
            }
            clearCofactor() {
              const {
                h: cofactor,
                clearCofactor
              } = CURVE;
              if (cofactor === _1n) return this; // Fast-path
              if (clearCofactor) return clearCofactor(Point, this);
              return this.multiplyUnsafe(CURVE.h);
            }
            toRawBytes(isCompressed = true) {
              this.assertValidity();
              return toBytes(Point, this, isCompressed);
            }
            toHex(isCompressed = true) {
              return ut.bytesToHex(this.toRawBytes(isCompressed));
            }
          }
          Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
          Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
          const _bits = CURVE.nBitLength;
          const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
          // Validate if generator point is on curve
          return {
            CURVE,
            ProjectivePoint: Point,
            normPrivateKeyToScalar,
            weierstrassEquation,
            isWithinCurveOrder
          };
        }
        exports.weierstrassPoints = weierstrassPoints;
        function validateOpts(curve) {
          const opts = (0, curve_js_1.validateBasic)(curve);
          ut.validateObject(opts, {
            hash: 'hash',
            hmac: 'function',
            randomBytes: 'function'
          }, {
            bits2int: 'function',
            bits2int_modN: 'function',
            lowS: 'boolean'
          });
          return Object.freeze({
            lowS: true,
            ...opts
          });
        }
        function weierstrass(curveDef) {
          const CURVE = validateOpts(curveDef);
          const {
            Fp,
            n: CURVE_ORDER
          } = CURVE;
          const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
          const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
          function isValidFieldElement(num) {
            return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
          }

          function modN(a) {
            return mod.mod(a, CURVE_ORDER);
          }
          function invN(a) {
            return mod.invert(a, CURVE_ORDER);
          }
          const {
            ProjectivePoint: Point,
            normPrivateKeyToScalar,
            weierstrassEquation,
            isWithinCurveOrder
          } = weierstrassPoints({
            ...CURVE,
            toBytes(_c, point, isCompressed) {
              const a = point.toAffine();
              const x = Fp.toBytes(a.x);
              const cat = ut.concatBytes;
              if (isCompressed) {
                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
              } else {
                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
              }
            },
            fromBytes(bytes) {
              const len = bytes.length;
              const head = bytes[0];
              const tail = bytes.subarray(1);
              // this.assertValidity() is done inside of fromHex
              if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                const x = ut.bytesToNumberBE(tail);
                if (!isValidFieldElement(x)) throw new Error('Point is not on curve');
                const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                let y;
                try {
                  y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                } catch (sqrtError) {
                  const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';
                  throw new Error('Point is not on curve' + suffix);
                }
                const isYOdd = (y & _1n) === _1n;
                // ECDSA
                const isHeadOdd = (head & 1) === 1;
                if (isHeadOdd !== isYOdd) y = Fp.neg(y);
                return {
                  x,
                  y
                };
              } else if (len === uncompressedLen && head === 0x04) {
                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                return {
                  x,
                  y
                };
              } else {
                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
              }
            }
          });
          const numToNByteStr = num => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
          function isBiggerThanHalfOrder(number) {
            const HALF = CURVE_ORDER >> _1n;
            return number > HALF;
          }
          function normalizeS(s) {
            return isBiggerThanHalfOrder(s) ? modN(-s) : s;
          }
          // slice bytes num
          const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
          /**
           * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
           */
          class Signature {
            constructor(r, s, recovery) {
              this.r = r;
              this.s = s;
              this.recovery = recovery;
              this.assertValidity();
            }
            // pair (bytes of r, bytes of s)
            static fromCompact(hex) {
              const l = CURVE.nByteLength;
              hex = (0, utils_js_1.ensureBytes)('compactSignature', hex, l * 2);
              return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
            }
            // DER encoded ECDSA signature
            // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
            static fromDER(hex) {
              const {
                r,
                s
              } = exports.DER.toSig((0, utils_js_1.ensureBytes)('DER', hex));
              return new Signature(r, s);
            }
            assertValidity() {
              // can use assertGE here
              if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');
              if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');
            }
            addRecoveryBit(recovery) {
              return new Signature(this.r, this.s, recovery);
            }
            recoverPublicKey(msgHash) {
              const {
                r,
                s,
                recovery: rec
              } = this;
              const h = bits2int_modN((0, utils_js_1.ensureBytes)('msgHash', msgHash)); // Truncate hash
              if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');
              const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
              if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');
              const prefix = (rec & 1) === 0 ? '02' : '03';
              const R = Point.fromHex(prefix + numToNByteStr(radj));
              const ir = invN(radj); // r^-1
              const u1 = modN(-h * ir); // -hr^-1
              const u2 = modN(s * ir); // sr^-1
              const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
              if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked
              Q.assertValidity();
              return Q;
            }
            // Signatures should be low-s, to prevent malleability.
            hasHighS() {
              return isBiggerThanHalfOrder(this.s);
            }
            normalizeS() {
              return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
            }
            // DER-encoded
            toDERRawBytes() {
              return ut.hexToBytes(this.toDERHex());
            }
            toDERHex() {
              return exports.DER.hexFromSig({
                r: this.r,
                s: this.s
              });
            }
            // padded bytes of r, then padded bytes of s
            toCompactRawBytes() {
              return ut.hexToBytes(this.toCompactHex());
            }
            toCompactHex() {
              return numToNByteStr(this.r) + numToNByteStr(this.s);
            }
          }
          const utils = {
            isValidPrivateKey(privateKey) {
              try {
                normPrivateKeyToScalar(privateKey);
                return true;
              } catch (error) {
                return false;
              }
            },
            normPrivateKeyToScalar: normPrivateKeyToScalar,
            /**
             * Produces cryptographically secure private key from random of size
             * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
             */
            randomPrivateKey: () => {
              const length = mod.getMinHashLength(CURVE.n);
              return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);
            },
            /**
             * Creates precompute table for an arbitrary EC point. Makes point "cached".
             * Allows to massively speed-up `point.multiply(scalar)`.
             * @returns cached point
             * @example
             * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
             * fast.multiply(privKey); // much faster ECDH now
             */
            precompute(windowSize = 8, point = Point.BASE) {
              point._setWindowSize(windowSize);
              point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
              return point;
            }
          };
          /**
           * Computes public key for a private key. Checks for validity of the private key.
           * @param privateKey private key
           * @param isCompressed whether to return compact (default), or full key
           * @returns Public key, full when isCompressed=false; short when isCompressed=true
           */
          function getPublicKey(privateKey, isCompressed = true) {
            return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
          }
          /**
           * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
           */
          function isProbPub(item) {
            const arr = ut.isBytes(item);
            const str = typeof item === 'string';
            const len = (arr || str) && item.length;
            if (arr) return len === compressedLen || len === uncompressedLen;
            if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;
            if (item instanceof Point) return true;
            return false;
          }
          /**
           * ECDH (Elliptic Curve Diffie Hellman).
           * Computes shared public key from private key and public key.
           * Checks: 1) private key validity 2) shared key is on-curve.
           * Does NOT hash the result.
           * @param privateA private key
           * @param publicB different public key
           * @param isCompressed whether to return compact (default), or full key
           * @returns shared public key
           */
          function getSharedSecret(privateA, publicB, isCompressed = true) {
            if (isProbPub(privateA)) throw new Error('first arg must be private key');
            if (!isProbPub(publicB)) throw new Error('second arg must be public key');
            const b = Point.fromHex(publicB); // check for being on-curve
            return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
          }
          // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
          // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
          // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
          // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
          const bits2int = CURVE.bits2int || function (bytes) {
            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
            // for some cases, since bytes.length * 8 is not actual bitLength.
            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here
            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
            return delta > 0 ? num >> BigInt(delta) : num;
          };
          const bits2int_modN = CURVE.bits2int_modN || function (bytes) {
            return modN(bits2int(bytes)); // can't use bytesToNumberBE here
          };
          // NOTE: pads output with zero as per spec
          const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
          /**
           * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
           */
          function int2octets(num) {
            if (typeof num !== 'bigint') throw new Error('bigint expected');
            if (!(_0n <= num && num < ORDER_MASK)) throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
            // works with order, can have different size than numToField!
            return ut.numberToBytesBE(num, CURVE.nByteLength);
          }
          // Steps A, D of RFC6979 3.2
          // Creates RFC6979 seed; converts msg/privKey to numbers.
          // Used only in sign, not in verify.
          // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
          // Also it can be bigger for P224 + SHA256
          function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
            if (['recovered', 'canonical'].some(k => k in opts)) throw new Error('sign() legacy options not supported');
            const {
              hash,
              randomBytes
            } = CURVE;
            let {
              lowS,
              prehash,
              extraEntropy: ent
            } = opts; // generates low-s sigs by default
            if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
            msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);
            if (prehash) msgHash = (0, utils_js_1.ensureBytes)('prehashed msgHash', hash(msgHash));
            // We can't later call bits2octets, since nested bits2int is broken for curves
            // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
            // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
            const h1int = bits2int_modN(msgHash);
            const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
            const seedArgs = [int2octets(d), int2octets(h1int)];
            // extraEntropy. RFC6979 3.6: additional k' (optional).
            if (ent != null && ent !== false) {
              // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
              const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
              seedArgs.push((0, utils_js_1.ensureBytes)('extraEntropy', e)); // check for being bytes
            }

            const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2
            const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
            // Converts signature params into point w r/s, checks result for validity.
            function k2sig(kBytes) {
              // RFC 6979 Section 3.2, step 3: k = bits2int(T)
              const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
              if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N
              const ik = invN(k); // k^-1 mod n
              const q = Point.BASE.multiply(k).toAffine(); // q = Gk
              const r = modN(q.x); // r = q.x mod n
              if (r === _0n) return;
              // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
              // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
              // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
              const s = modN(ik * modN(m + r * d)); // Not using blinding here
              if (s === _0n) return;
              let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)
              let normS = s;
              if (lowS && isBiggerThanHalfOrder(s)) {
                normS = normalizeS(s); // if lowS was passed, ensure s is always
                recovery ^= 1; // // in the bottom half of N
              }

              return new Signature(r, normS, recovery); // use normS, not s
            }

            return {
              seed,
              k2sig
            };
          }
          const defaultSigOpts = {
            lowS: CURVE.lowS,
            prehash: false
          };
          const defaultVerOpts = {
            lowS: CURVE.lowS,
            prehash: false
          };
          /**
           * Signs message hash with a private key.
           * ```
           * sign(m, d, k) where
           *   (x, y) = G × k
           *   r = x mod n
           *   s = (m + dr)/k mod n
           * ```
           * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
           * @param privKey private key
           * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
           * @returns signature with recovery param
           */
          function sign(msgHash, privKey, opts = defaultSigOpts) {
            const {
              seed,
              k2sig
            } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
            const C = CURVE;
            const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
            return drbg(seed, k2sig); // Steps B, C, D, E, F, G
          }
          // Enable precomputes. Slows down first publicKey computation by 20ms.
          Point.BASE._setWindowSize(8);
          // utils.precompute(8, ProjectivePoint.BASE)
          /**
           * Verifies a signature against message hash and public key.
           * Rejects lowS signatures by default: to override,
           * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
           *
           * ```
           * verify(r, s, h, P) where
           *   U1 = hs^-1 mod n
           *   U2 = rs^-1 mod n
           *   R = U1⋅G - U2⋅P
           *   mod(R.x, n) == r
           * ```
           */
          function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
            const sg = signature;
            msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);
            publicKey = (0, utils_js_1.ensureBytes)('publicKey', publicKey);
            if ('strict' in opts) throw new Error('options.strict was renamed to lowS');
            const {
              lowS,
              prehash
            } = opts;
            let _sig = undefined;
            let P;
            try {
              if (typeof sg === 'string' || ut.isBytes(sg)) {
                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
                // Since DER can also be 2*nByteLength bytes, we check for it first.
                try {
                  _sig = Signature.fromDER(sg);
                } catch (derError) {
                  if (!(derError instanceof exports.DER.Err)) throw derError;
                  _sig = Signature.fromCompact(sg);
                }
              } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {
                const {
                  r,
                  s
                } = sg;
                _sig = new Signature(r, s);
              } else {
                throw new Error('PARSE');
              }
              P = Point.fromHex(publicKey);
            } catch (error) {
              if (error.message === 'PARSE') throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
              return false;
            }
            if (lowS && _sig.hasHighS()) return false;
            if (prehash) msgHash = CURVE.hash(msgHash);
            const {
              r,
              s
            } = _sig;
            const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
            const is = invN(s); // s^-1
            const u1 = modN(h * is); // u1 = hs^-1 mod n
            const u2 = modN(r * is); // u2 = rs^-1 mod n
            const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
            if (!R) return false;
            const v = modN(R.x);
            return v === r;
          }
          return {
            CURVE,
            getPublicKey,
            getSharedSecret,
            sign,
            verify,
            ProjectivePoint: Point,
            Signature,
            utils
          };
        }
        exports.weierstrass = weierstrass;
        /**
         * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
         * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
         * b = True and y = sqrt(u / v) if (u / v) is square in F, and
         * b = False and y = sqrt(Z * (u / v)) otherwise.
         * @param Fp
         * @param Z
         * @returns
         */
        function SWUFpSqrtRatio(Fp, Z) {
          // Generic implementation
          const q = Fp.ORDER;
          let l = _0n;
          for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;
          const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.
          // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.
          // 2n ** c1 == 2n << (c1-1)
          const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;
          const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
          const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic
          const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic
          const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic
          const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic
          const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2
          const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)
          let sqrtRatio = (u, v) => {
            let tv1 = c6; // 1. tv1 = c6
            let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4
            let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2
            tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v
            let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3
            tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3
            tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2
            tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v
            tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u
            let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2
            tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5
            let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1
            tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7
            tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1
            tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)
            tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)
            // 17. for i in (c1, c1 - 1, ..., 2):
            for (let i = c1; i > _1n; i--) {
              let tv5 = i - _2n; // 18.    tv5 = i - 2
              tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5
              let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5
              const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1
              tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1
              tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1
              tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1
              tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)
              tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)
            }

            return {
              isValid: isQR,
              value: tv3
            };
          };
          if (Fp.ORDER % _4n === _3n) {
            // sqrt_ratio_3mod4(u, v)
            const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic
            const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)
            sqrtRatio = (u, v) => {
              let tv1 = Fp.sqr(v); // 1. tv1 = v^2
              const tv2 = Fp.mul(u, v); // 2. tv2 = u * v
              tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2
              let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1
              y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2
              const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2
              const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v
              const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u
              let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)
              return {
                isValid: isQR,
                value: y
              }; // 11. return (isQR, y) isQR ? y : y*c2
            };
          }
          // No curves uses that
          // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
          return sqrtRatio;
        }
        exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
        /**
         * Simplified Shallue-van de Woestijne-Ulas Method
         * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
         */
        function mapToCurveSimpleSWU(Fp, opts) {
          mod.validateField(Fp);
          if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');
          const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
          if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');
          // Input: u, an element of F.
          // Output: (x, y), a point on E.
          return u => {
            // prettier-ignore
            let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
            tv1 = Fp.sqr(u); // 1.  tv1 = u^2
            tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1
            tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2
            tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1
            tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1
            tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3
            tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)
            tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4
            tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2
            tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2
            tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6
            tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5
            tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3
            tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4
            tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6
            tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5
            x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3
            const {
              isValid,
              value
            } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
            y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1
            y = Fp.mul(y, value); // 20.   y = y * y1
            x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)
            y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)
            const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)
            y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)
            x = Fp.div(x, tv4); // 25.   x = x / tv4
            return {
              x,
              y
            };
          };
        }
        exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
      }, {
        "./curve.js": 93,
        "./modular.js": 95,
        "./utils.js": 96
      }],
      98: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = exports.isBytes = void 0;
        function number(n) {
          if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);
        }
        exports.number = number;
        function bool(b) {
          if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);
        }
        exports.bool = bool;
        // copied from utils
        function isBytes(a) {
          return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';
        }
        exports.isBytes = isBytes;
        function bytes(b, ...lengths) {
          if (!isBytes(b)) throw new Error('Uint8Array expected');
          if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
        }
        exports.bytes = bytes;
        function hash(h) {
          if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');
          number(h.outputLen);
          number(h.blockLen);
        }
        exports.hash = hash;
        function exists(instance, checkFinished = true) {
          if (instance.destroyed) throw new Error('Hash instance has been destroyed');
          if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');
        }
        exports.exists = exists;
        function output(out, instance) {
          bytes(out);
          const min = instance.outputLen;
          if (out.length < min) {
            throw new Error(`digestInto() expects output buffer of length at least ${min}`);
          }
        }
        exports.output = output;
        const assert = {
          number,
          bool,
          bytes,
          hash,
          exists,
          output
        };
        exports.default = assert;
      }, {}],
      99: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.HashMD = exports.Maj = exports.Chi = void 0;
        const _assert_js_1 = require("./_assert.js");
        const utils_js_1 = require("./utils.js");
        // Polyfill for Safari 14
        function setBigUint64(view, byteOffset, value, isLE) {
          if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);
          const _32n = BigInt(32);
          const _u32_max = BigInt(0xffffffff);
          const wh = Number(value >> _32n & _u32_max);
          const wl = Number(value & _u32_max);
          const h = isLE ? 4 : 0;
          const l = isLE ? 0 : 4;
          view.setUint32(byteOffset + h, wh, isLE);
          view.setUint32(byteOffset + l, wl, isLE);
        }
        // Choice: a ? b : c
        const Chi = (a, b, c) => a & b ^ ~a & c;
        exports.Chi = Chi;
        // Majority function, true if any two inpust is true
        const Maj = (a, b, c) => a & b ^ a & c ^ b & c;
        exports.Maj = Maj;
        /**
         * Merkle-Damgard hash construction base class.
         * Could be used to create MD5, RIPEMD, SHA1, SHA2.
         */
        class HashMD extends utils_js_1.Hash {
          constructor(blockLen, outputLen, padOffset, isLE) {
            super();
            this.blockLen = blockLen;
            this.outputLen = outputLen;
            this.padOffset = padOffset;
            this.isLE = isLE;
            this.finished = false;
            this.length = 0;
            this.pos = 0;
            this.destroyed = false;
            this.buffer = new Uint8Array(blockLen);
            this.view = (0, utils_js_1.createView)(this.buffer);
          }
          update(data) {
            (0, _assert_js_1.exists)(this);
            const {
              view,
              buffer,
              blockLen
            } = this;
            data = (0, utils_js_1.toBytes)(data);
            const len = data.length;
            for (let pos = 0; pos < len;) {
              const take = Math.min(blockLen - this.pos, len - pos);
              // Fast path: we have at least one block in input, cast it to view and process
              if (take === blockLen) {
                const dataView = (0, utils_js_1.createView)(data);
                for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);
                continue;
              }
              buffer.set(data.subarray(pos, pos + take), this.pos);
              this.pos += take;
              pos += take;
              if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
              }
            }
            this.length += data.length;
            this.roundClean();
            return this;
          }
          digestInto(out) {
            (0, _assert_js_1.exists)(this);
            (0, _assert_js_1.output)(out, this);
            this.finished = true;
            // Padding
            // We can avoid allocation of buffer for padding completely if it
            // was previously not allocated here. But it won't change performance.
            const {
              buffer,
              view,
              blockLen,
              isLE
            } = this;
            let {
              pos
            } = this;
            // append the bit '1' to the message
            buffer[pos++] = 0b10000000;
            this.buffer.subarray(pos).fill(0);
            // we have less than padOffset left in buffer, so we cannot put length in
            // current block, need process it and pad again
            if (this.padOffset > blockLen - pos) {
              this.process(view, 0);
              pos = 0;
            }
            // Pad until full block byte with zeros
            for (let i = pos; i < blockLen; i++) buffer[i] = 0;
            // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
            // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
            // So we just write lowest 64 bits of that value.
            setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
            this.process(view, 0);
            const oview = (0, utils_js_1.createView)(out);
            const len = this.outputLen;
            // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
            if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');
            const outLen = len / 4;
            const state = this.get();
            if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');
            for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);
          }
          digest() {
            const {
              buffer,
              outputLen
            } = this;
            this.digestInto(buffer);
            const res = buffer.slice(0, outputLen);
            this.destroy();
            return res;
          }
          _cloneInto(to) {
            to || (to = new this.constructor());
            to.set(...this.get());
            const {
              blockLen,
              buffer,
              length,
              finished,
              destroyed,
              pos
            } = this;
            to.length = length;
            to.pos = pos;
            to.finished = finished;
            to.destroyed = destroyed;
            if (length % blockLen) to.buffer.set(buffer);
            return to;
          }
        }
        exports.HashMD = HashMD;
      }, {
        "./_assert.js": 98,
        "./utils.js": 103
      }],
      100: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.crypto = void 0;
        exports.crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;
      }, {}],
      101: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.hmac = exports.HMAC = void 0;
        const _assert_js_1 = require("./_assert.js");
        const utils_js_1 = require("./utils.js");
        // HMAC (RFC 2104)
        class HMAC extends utils_js_1.Hash {
          constructor(hash, _key) {
            super();
            this.finished = false;
            this.destroyed = false;
            (0, _assert_js_1.hash)(hash);
            const key = (0, utils_js_1.toBytes)(_key);
            this.iHash = hash.create();
            if (typeof this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');
            this.blockLen = this.iHash.blockLen;
            this.outputLen = this.iHash.outputLen;
            const blockLen = this.blockLen;
            const pad = new Uint8Array(blockLen);
            // blockLen can be bigger than outputLen
            pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
            for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;
            this.iHash.update(pad);
            // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
            this.oHash = hash.create();
            // Undo internal XOR && apply outer XOR
            for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;
            this.oHash.update(pad);
            pad.fill(0);
          }
          update(buf) {
            (0, _assert_js_1.exists)(this);
            this.iHash.update(buf);
            return this;
          }
          digestInto(out) {
            (0, _assert_js_1.exists)(this);
            (0, _assert_js_1.bytes)(out, this.outputLen);
            this.finished = true;
            this.iHash.digestInto(out);
            this.oHash.update(out);
            this.oHash.digestInto(out);
            this.destroy();
          }
          digest() {
            const out = new Uint8Array(this.oHash.outputLen);
            this.digestInto(out);
            return out;
          }
          _cloneInto(to) {
            // Create new instance without calling constructor since key already in state and we don't know it.
            to || (to = Object.create(Object.getPrototypeOf(this), {}));
            const {
              oHash,
              iHash,
              finished,
              destroyed,
              blockLen,
              outputLen
            } = this;
            to = to;
            to.finished = finished;
            to.destroyed = destroyed;
            to.blockLen = blockLen;
            to.outputLen = outputLen;
            to.oHash = oHash._cloneInto(to.oHash);
            to.iHash = iHash._cloneInto(to.iHash);
            return to;
          }
          destroy() {
            this.destroyed = true;
            this.oHash.destroy();
            this.iHash.destroy();
          }
        }
        exports.HMAC = HMAC;
        /**
         * HMAC: RFC2104 message authentication code.
         * @param hash - function that would be used e.g. sha256
         * @param key - message key
         * @param message - message data
         */
        const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
        exports.hmac = hmac;
        exports.hmac.create = (hash, key) => new HMAC(hash, key);
      }, {
        "./_assert.js": 98,
        "./utils.js": 103
      }],
      102: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.sha224 = exports.sha256 = void 0;
        const _md_js_1 = require("./_md.js");
        const utils_js_1 = require("./utils.js");
        // SHA2-256 need to try 2^128 hashes to execute birthday attack.
        // BTC network is doing 2^67 hashes/sec as per early 2023.
        // Round constants:
        // first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
        // prettier-ignore
        const SHA256_K = /* @__PURE__ */new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);
        // Initial state:
        // first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19
        // prettier-ignore
        const SHA256_IV = /* @__PURE__ */new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);
        // Temporary buffer, not used to store anything between runs
        // Named this way because it matches specification.
        const SHA256_W = /* @__PURE__ */new Uint32Array(64);
        class SHA256 extends _md_js_1.HashMD {
          constructor() {
            super(64, 32, 8, false);
            // We cannot use array here since array allows indexing by variable
            // which means optimizer/compiler cannot use registers.
            this.A = SHA256_IV[0] | 0;
            this.B = SHA256_IV[1] | 0;
            this.C = SHA256_IV[2] | 0;
            this.D = SHA256_IV[3] | 0;
            this.E = SHA256_IV[4] | 0;
            this.F = SHA256_IV[5] | 0;
            this.G = SHA256_IV[6] | 0;
            this.H = SHA256_IV[7] | 0;
          }
          get() {
            const {
              A,
              B,
              C,
              D,
              E,
              F,
              G,
              H
            } = this;
            return [A, B, C, D, E, F, G, H];
          }
          // prettier-ignore
          set(A, B, C, D, E, F, G, H) {
            this.A = A | 0;
            this.B = B | 0;
            this.C = C | 0;
            this.D = D | 0;
            this.E = E | 0;
            this.F = F | 0;
            this.G = G | 0;
            this.H = H | 0;
          }
          process(view, offset) {
            // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
            for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);
            for (let i = 16; i < 64; i++) {
              const W15 = SHA256_W[i - 15];
              const W2 = SHA256_W[i - 2];
              const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
              const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
              SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
            }
            // Compression function main loop, 64 rounds
            let {
              A,
              B,
              C,
              D,
              E,
              F,
              G,
              H
            } = this;
            for (let i = 0; i < 64; i++) {
              const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
              const T1 = H + sigma1 + (0, _md_js_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
              const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
              const T2 = sigma0 + (0, _md_js_1.Maj)(A, B, C) | 0;
              H = G;
              G = F;
              F = E;
              E = D + T1 | 0;
              D = C;
              C = B;
              B = A;
              A = T1 + T2 | 0;
            }
            // Add the compressed chunk to the current hash value
            A = A + this.A | 0;
            B = B + this.B | 0;
            C = C + this.C | 0;
            D = D + this.D | 0;
            E = E + this.E | 0;
            F = F + this.F | 0;
            G = G + this.G | 0;
            H = H + this.H | 0;
            this.set(A, B, C, D, E, F, G, H);
          }
          roundClean() {
            SHA256_W.fill(0);
          }
          destroy() {
            this.set(0, 0, 0, 0, 0, 0, 0, 0);
            this.buffer.fill(0);
          }
        }
        // Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
        class SHA224 extends SHA256 {
          constructor() {
            super();
            this.A = 0xc1059ed8 | 0;
            this.B = 0x367cd507 | 0;
            this.C = 0x3070dd17 | 0;
            this.D = 0xf70e5939 | 0;
            this.E = 0xffc00b31 | 0;
            this.F = 0x68581511 | 0;
            this.G = 0x64f98fa7 | 0;
            this.H = 0xbefa4fa4 | 0;
            this.outputLen = 28;
          }
        }
        /**
         * SHA2-256 hash function
         * @param message - data that would be hashed
         */
        exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
        exports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
      }, {
        "./_md.js": 99,
        "./utils.js": 103
      }],
      103: [function (require, module, exports) {
        "use strict";

        /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.byteSwap32 = exports.byteSwapIfBE = exports.byteSwap = exports.isLE = exports.rotl = exports.rotr = exports.createView = exports.u32 = exports.u8 = exports.isBytes = void 0;
        // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
        // node.js versions earlier than v19 don't declare it in global scope.
        // For node.js, package.json#exports field mapping rewrites import
        // from `crypto` to `cryptoNode`, which imports native module.
        // Makes the utils un-importable in browsers without a bundler.
        // Once node.js 18 is deprecated (2025-04-30), we can just drop the import.
        const crypto_1 = require("@noble/hashes/crypto");
        const _assert_js_1 = require("./_assert.js");
        // export { isBytes } from './_assert.js';
        // We can't reuse isBytes from _assert, because somehow this causes huge perf issues
        function isBytes(a) {
          return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';
        }
        exports.isBytes = isBytes;
        // Cast array to different type
        const u8 = arr => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
        exports.u8 = u8;
        const u32 = arr => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
        exports.u32 = u32;
        // Cast array to view
        const createView = arr => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
        exports.createView = createView;
        // The rotate right (circular right shift) operation for uint32
        const rotr = (word, shift) => word << 32 - shift | word >>> shift;
        exports.rotr = rotr;
        // The rotate left (circular left shift) operation for uint32
        const rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
        exports.rotl = rotl;
        exports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
        // The byte swap operation for uint32
        const byteSwap = word => word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;
        exports.byteSwap = byteSwap;
        // Conditionally byte swap if on a big-endian platform
        exports.byteSwapIfBE = exports.isLE ? n => n : n => (0, exports.byteSwap)(n);
        // In place byte swap for Uint32Array
        function byteSwap32(arr) {
          for (let i = 0; i < arr.length; i++) {
            arr[i] = (0, exports.byteSwap)(arr[i]);
          }
        }
        exports.byteSwap32 = byteSwap32;
        // Array where index 0xf0 (240) is mapped to string 'f0'
        const hexes = /* @__PURE__ */Array.from({
          length: 256
        }, (_, i) => i.toString(16).padStart(2, '0'));
        /**
         * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
         */
        function bytesToHex(bytes) {
          (0, _assert_js_1.bytes)(bytes);
          // pre-caching improves the speed 6x
          let hex = '';
          for (let i = 0; i < bytes.length; i++) {
            hex += hexes[bytes[i]];
          }
          return hex;
        }
        exports.bytesToHex = bytesToHex;
        // We use optimized technique to convert hex string to byte array
        const asciis = {
          _0: 48,
          _9: 57,
          _A: 65,
          _F: 70,
          _a: 97,
          _f: 102
        };
        function asciiToBase16(char) {
          if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;
          if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);
          if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);
          return;
        }
        /**
         * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
         */
        function hexToBytes(hex) {
          if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);
          const hl = hex.length;
          const al = hl / 2;
          if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
          const array = new Uint8Array(al);
          for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
            const n1 = asciiToBase16(hex.charCodeAt(hi));
            const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
            if (n1 === undefined || n2 === undefined) {
              const char = hex[hi] + hex[hi + 1];
              throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
            }
            array[ai] = n1 * 16 + n2;
          }
          return array;
        }
        exports.hexToBytes = hexToBytes;
        // There is no setImmediate in browser and setTimeout is slow.
        // call of async fn will return Promise, which will be fullfiled only on
        // next scheduler queue processing step and this is exactly what we need.
        const nextTick = async () => {};
        exports.nextTick = nextTick;
        // Returns control to thread each 'tick' ms to avoid blocking
        async function asyncLoop(iters, tick, cb) {
          let ts = Date.now();
          for (let i = 0; i < iters; i++) {
            cb(i);
            // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
            const diff = Date.now() - ts;
            if (diff >= 0 && diff < tick) continue;
            await (0, exports.nextTick)();
            ts += diff;
          }
        }
        exports.asyncLoop = asyncLoop;
        /**
         * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
         */
        function utf8ToBytes(str) {
          if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
          return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
        }

        exports.utf8ToBytes = utf8ToBytes;
        /**
         * Normalizes (non-hex) string or Uint8Array to Uint8Array.
         * Warning: when Uint8Array is passed, it would NOT get copied.
         * Keep in mind for future mutable operations.
         */
        function toBytes(data) {
          if (typeof data === 'string') data = utf8ToBytes(data);
          (0, _assert_js_1.bytes)(data);
          return data;
        }
        exports.toBytes = toBytes;
        /**
         * Copies several Uint8Arrays into one.
         */
        function concatBytes(...arrays) {
          let sum = 0;
          for (let i = 0; i < arrays.length; i++) {
            const a = arrays[i];
            (0, _assert_js_1.bytes)(a);
            sum += a.length;
          }
          const res = new Uint8Array(sum);
          for (let i = 0, pad = 0; i < arrays.length; i++) {
            const a = arrays[i];
            res.set(a, pad);
            pad += a.length;
          }
          return res;
        }
        exports.concatBytes = concatBytes;
        // For runtime check if class implements interface
        class Hash {
          // Safe version that clones internal state
          clone() {
            return this._cloneInto();
          }
        }
        exports.Hash = Hash;
        const toStr = {}.toString;
        function checkOpts(defaults, opts) {
          if (opts !== undefined && toStr.call(opts) !== '[object Object]') throw new Error('Options should be object or undefined');
          const merged = Object.assign(defaults, opts);
          return merged;
        }
        exports.checkOpts = checkOpts;
        function wrapConstructor(hashCons) {
          const hashC = msg => hashCons().update(toBytes(msg)).digest();
          const tmp = hashCons();
          hashC.outputLen = tmp.outputLen;
          hashC.blockLen = tmp.blockLen;
          hashC.create = () => hashCons();
          return hashC;
        }
        exports.wrapConstructor = wrapConstructor;
        function wrapConstructorWithOpts(hashCons) {
          const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
          const tmp = hashCons({});
          hashC.outputLen = tmp.outputLen;
          hashC.blockLen = tmp.blockLen;
          hashC.create = opts => hashCons(opts);
          return hashC;
        }
        exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
        function wrapXOFConstructorWithOpts(hashCons) {
          const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
          const tmp = hashCons({});
          hashC.outputLen = tmp.outputLen;
          hashC.blockLen = tmp.blockLen;
          hashC.create = opts => hashCons(opts);
          return hashC;
        }
        exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
        /**
         * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
         */
        function randomBytes(bytesLength = 32) {
          if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {
            return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
          }
          throw new Error('crypto.getRandomValues must be defined');
        }
        exports.randomBytes = randomBytes;
      }, {
        "./_assert.js": 98,
        "@noble/hashes/crypto": 100
      }],
      104: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.encodeToCurve = exports.hashToCurve = exports.secp256r1 = exports.p256 = void 0;
        /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
        const _shortw_utils_js_1 = require("./_shortw_utils.js");
        const sha256_1 = require("@noble/hashes/sha256");
        const modular_js_1 = require("./abstract/modular.js");
        const weierstrass_js_1 = require("./abstract/weierstrass.js");
        const hash_to_curve_js_1 = require("./abstract/hash-to-curve.js");
        // NIST secp256r1 aka p256
        // https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256
        const Fp = (0, modular_js_1.Field)(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));
        const CURVE_A = Fp.create(BigInt('-3'));
        const CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');
        // prettier-ignore
        exports.p256 = (0, _shortw_utils_js_1.createCurve)({
          a: CURVE_A,
          // Equation params: a, b
          b: CURVE_B,
          Fp,
          // Field: 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n
          // Curve order, total count of valid points in the field
          n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),
          // Base (generator) point (x, y)
          Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),
          Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),
          h: BigInt(1),
          lowS: false
        }, sha256_1.sha256);
        exports.secp256r1 = exports.p256;
        const mapSWU = /* @__PURE__ */(() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
          A: CURVE_A,
          B: CURVE_B,
          Z: Fp.create(BigInt('-10'))
        }))();
        const htf = /* @__PURE__ */(() => (0, hash_to_curve_js_1.createHasher)(exports.secp256r1.ProjectivePoint, scalars => mapSWU(scalars[0]), {
          DST: 'P256_XMD:SHA-256_SSWU_RO_',
          encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',
          p: Fp.ORDER,
          m: 1,
          k: 128,
          expand: 'xmd',
          hash: sha256_1.sha256
        }))();
        exports.hashToCurve = (() => htf.hashToCurve)();
        exports.encodeToCurve = (() => htf.encodeToCurve)();
      }, {
        "./_shortw_utils.js": 92,
        "./abstract/hash-to-curve.js": 94,
        "./abstract/modular.js": 95,
        "./abstract/weierstrass.js": 97,
        "@noble/hashes/sha256": 102
      }],
      105: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
        /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
        const sha256_1 = require("@noble/hashes/sha256");
        const utils_1 = require("@noble/hashes/utils");
        const modular_js_1 = require("./abstract/modular.js");
        const weierstrass_js_1 = require("./abstract/weierstrass.js");
        const utils_js_1 = require("./abstract/utils.js");
        const hash_to_curve_js_1 = require("./abstract/hash-to-curve.js");
        const _shortw_utils_js_1 = require("./_shortw_utils.js");
        const secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');
        const secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');
        const _1n = BigInt(1);
        const _2n = BigInt(2);
        const divNearest = (a, b) => (a + b / _2n) / b;
        /**
         * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
         * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
         */
        function sqrtMod(y) {
          const P = secp256k1P;
          // prettier-ignore
          const _3n = BigInt(3),
            _6n = BigInt(6),
            _11n = BigInt(11),
            _22n = BigInt(22);
          // prettier-ignore
          const _23n = BigInt(23),
            _44n = BigInt(44),
            _88n = BigInt(88);
          const b2 = y * y * y % P; // x^3, 11
          const b3 = b2 * b2 * y % P; // x^7
          const b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;
          const b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;
          const b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;
          const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;
          const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;
          const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;
          const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;
          const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;
          const b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;
          const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;
          const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;
          const root = (0, modular_js_1.pow2)(t2, _2n, P);
          if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');
          return root;
        }
        const Fp = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, {
          sqrt: sqrtMod
        });
        exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
          a: BigInt(0),
          // equation params: a, b
          b: BigInt(7),
          // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
          Fp,
          // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
          n: secp256k1N,
          // Curve order, total count of valid points in the field
          // Base point (x, y) aka generator point
          Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
          Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
          h: BigInt(1),
          // Cofactor
          lowS: true,
          // Allow only low-S signatures by default in sign() and verify()
          /**
           * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
           * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
           * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
           * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
           */
          endo: {
            beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
            splitScalar: k => {
              const n = secp256k1N;
              const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
              const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
              const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
              const b2 = a1;
              const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)
              const c1 = divNearest(b2 * k, n);
              const c2 = divNearest(-b1 * k, n);
              let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
              let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
              const k1neg = k1 > POW_2_128;
              const k2neg = k2 > POW_2_128;
              if (k1neg) k1 = n - k1;
              if (k2neg) k2 = n - k2;
              if (k1 > POW_2_128 || k2 > POW_2_128) {
                throw new Error('splitScalar: Endomorphism failed, k=' + k);
              }
              return {
                k1neg,
                k1,
                k2neg,
                k2
              };
            }
          }
        }, sha256_1.sha256);
        // Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
        // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
        const _0n = BigInt(0);
        const fe = x => typeof x === 'bigint' && _0n < x && x < secp256k1P;
        const ge = x => typeof x === 'bigint' && _0n < x && x < secp256k1N;
        /** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */
        const TAGGED_HASH_PREFIXES = {};
        function taggedHash(tag, ...messages) {
          let tagP = TAGGED_HASH_PREFIXES[tag];
          if (tagP === undefined) {
            const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, c => c.charCodeAt(0)));
            tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
            TAGGED_HASH_PREFIXES[tag] = tagP;
          }
          return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
        }
        // ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03
        const pointToBytes = point => point.toRawBytes(true).slice(1);
        const numTo32b = n => (0, utils_js_1.numberToBytesBE)(n, 32);
        const modP = x => (0, modular_js_1.mod)(x, secp256k1P);
        const modN = x => (0, modular_js_1.mod)(x, secp256k1N);
        const Point = exports.secp256k1.ProjectivePoint;
        const GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
        // Calculate point, scalar and bytes
        function schnorrGetExtPubKey(priv) {
          let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey
          let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside
          const scalar = p.hasEvenY() ? d_ : modN(-d_);
          return {
            scalar: scalar,
            bytes: pointToBytes(p)
          };
        }
        /**
         * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.
         * @returns valid point checked for being on-curve
         */
        function lift_x(x) {
          if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.
          const xx = modP(x * x);
          const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.
          let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.
          if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and
          const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.
          p.assertValidity();
          return p;
        }
        /**
         * Create tagged hash, convert it to bigint, reduce modulo-n.
         */
        function challenge(...args) {
          return modN((0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));
        }
        /**
         * Schnorr public key is just `x` coordinate of Point as per BIP340.
         */
        function schnorrGetPublicKey(privateKey) {
          return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)
        }
        /**
         * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.
         * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.
         */
        function schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
          const m = (0, utils_js_1.ensureBytes)('message', message);
          const {
            bytes: px,
            scalar: d
          } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder
          const a = (0, utils_js_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array
          const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)
          const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)
          const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n
          if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.
          const {
            bytes: rx,
            scalar: k
          } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.
          const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.
          const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).
          sig.set(rx, 0);
          sig.set(numTo32b(modN(k + e * d)), 32);
          // If Verify(bytes(P), m, sig) (see below) returns failure, abort
          if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');
          return sig;
        }
        /**
         * Verifies Schnorr signature.
         * Will swallow errors & return false except for initial type validation of arguments.
         */
        function schnorrVerify(signature, message, publicKey) {
          const sig = (0, utils_js_1.ensureBytes)('signature', signature, 64);
          const m = (0, utils_js_1.ensureBytes)('message', message);
          const pub = (0, utils_js_1.ensureBytes)('publicKey', publicKey, 32);
          try {
            const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails
            const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.
            if (!fe(r)) return false;
            const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.
            if (!ge(s)) return false;
            const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n
            const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P
            if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P
            return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.
          } catch (error) {
            return false;
          }
        }
        exports.schnorr = (() => ({
          getPublicKey: schnorrGetPublicKey,
          sign: schnorrSign,
          verify: schnorrVerify,
          utils: {
            randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
            lift_x,
            pointToBytes,
            numberToBytesBE: utils_js_1.numberToBytesBE,
            bytesToNumberBE: utils_js_1.bytesToNumberBE,
            taggedHash,
            mod: modular_js_1.mod
          }
        }))();
        const isoMap = /* @__PURE__ */(() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
        // xNum
        ['0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7', '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581', '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262', '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c'],
        // xDen
        ['0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b', '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1
        ],
        // yNum
        ['0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c', '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3', '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931', '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84'],
        // yDen
        ['0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b', '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573', '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1
        ]].map(i => i.map(j => BigInt(j)))))();
        const mapSWU = /* @__PURE__ */(() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
          A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),
          B: BigInt('1771'),
          Z: Fp.create(BigInt('-11'))
        }))();
        const htf = /* @__PURE__ */(() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, scalars => {
          const {
            x,
            y
          } = mapSWU(Fp.create(scalars[0]));
          return isoMap(x, y);
        }, {
          DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',
          encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',
          p: Fp.ORDER,
          m: 1,
          k: 128,
          expand: 'xmd',
          hash: sha256_1.sha256
        }))();
        exports.hashToCurve = (() => htf.hashToCurve)();
        exports.encodeToCurve = (() => htf.encodeToCurve)();
      }, {
        "./_shortw_utils.js": 92,
        "./abstract/hash-to-curve.js": 94,
        "./abstract/modular.js": 95,
        "./abstract/utils.js": 96,
        "./abstract/weierstrass.js": 97,
        "@noble/hashes/sha256": 102,
        "@noble/hashes/utils": 103
      }],
      106: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
        function number(n) {
          if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);
        }
        exports.number = number;
        function bool(b) {
          if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);
        }
        exports.bool = bool;
        // copied from utils
        function isBytes(a) {
          return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';
        }
        function bytes(b, ...lengths) {
          if (!isBytes(b)) throw new Error('Expected Uint8Array');
          if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
        }
        exports.bytes = bytes;
        function hash(hash) {
          if (typeof hash !== 'function' || typeof hash.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');
          number(hash.outputLen);
          number(hash.blockLen);
        }
        exports.hash = hash;
        function exists(instance, checkFinished = true) {
          if (instance.destroyed) throw new Error('Hash instance has been destroyed');
          if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');
        }
        exports.exists = exists;
        function output(out, instance) {
          bytes(out);
          const min = instance.outputLen;
          if (out.length < min) {
            throw new Error(`digestInto() expects output buffer of length at least ${min}`);
          }
        }
        exports.output = output;
        const assert = {
          number,
          bool,
          bytes,
          hash,
          exists,
          output
        };
        exports.default = assert;
      }, {}],
      107: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BLAKE2 = exports.SIGMA = void 0;
        const _assert_js_1 = require("./_assert.js");
        const utils_js_1 = require("./utils.js");
        // Blake is based on ChaCha permutation.
        // For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
        // prettier-ignore
        exports.SIGMA = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3]);
        class BLAKE2 extends utils_js_1.Hash {
          constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
            super();
            this.blockLen = blockLen;
            this.outputLen = outputLen;
            this.length = 0;
            this.pos = 0;
            this.finished = false;
            this.destroyed = false;
            (0, _assert_js_1.number)(blockLen);
            (0, _assert_js_1.number)(outputLen);
            (0, _assert_js_1.number)(keyLen);
            if (outputLen < 0 || outputLen > keyLen) throw new Error('outputLen bigger than keyLen');
            if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen)) throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
            if (opts.salt !== undefined && opts.salt.length !== saltLen) throw new Error(`salt must be ${saltLen} byte long or undefined`);
            if (opts.personalization !== undefined && opts.personalization.length !== persLen) throw new Error(`personalization must be ${persLen} byte long or undefined`);
            this.buffer32 = (0, utils_js_1.u32)(this.buffer = new Uint8Array(blockLen));
          }
          update(data) {
            (0, _assert_js_1.exists)(this);
            // Main difference with other hashes: there is flag for last block,
            // so we cannot process current block before we know that there
            // is the next one. This significantly complicates logic and reduces ability
            // to do zero-copy processing
            const {
              blockLen,
              buffer,
              buffer32
            } = this;
            data = (0, utils_js_1.toBytes)(data);
            const len = data.length;
            const offset = data.byteOffset;
            const buf = data.buffer;
            for (let pos = 0; pos < len;) {
              // If buffer is full and we still have input (don't process last block, same as blake2s)
              if (this.pos === blockLen) {
                this.compress(buffer32, 0, false);
                this.pos = 0;
              }
              const take = Math.min(blockLen - this.pos, len - pos);
              const dataOffset = offset + pos;
              // full block && aligned to 4 bytes && not last in input
              if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
                for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
                  this.length += blockLen;
                  this.compress(data32, pos32, false);
                }
                continue;
              }
              buffer.set(data.subarray(pos, pos + take), this.pos);
              this.pos += take;
              this.length += take;
              pos += take;
            }
            return this;
          }
          digestInto(out) {
            (0, _assert_js_1.exists)(this);
            (0, _assert_js_1.output)(out, this);
            const {
              pos,
              buffer32
            } = this;
            this.finished = true;
            // Padding
            this.buffer.subarray(pos).fill(0);
            this.compress(buffer32, 0, true);
            const out32 = (0, utils_js_1.u32)(out);
            this.get().forEach((v, i) => out32[i] = v);
          }
          digest() {
            const {
              buffer,
              outputLen
            } = this;
            this.digestInto(buffer);
            const res = buffer.slice(0, outputLen);
            this.destroy();
            return res;
          }
          _cloneInto(to) {
            const {
              buffer,
              length,
              finished,
              destroyed,
              outputLen,
              pos
            } = this;
            to || (to = new this.constructor({
              dkLen: outputLen
            }));
            to.set(...this.get());
            to.length = length;
            to.finished = finished;
            to.destroyed = destroyed;
            to.outputLen = outputLen;
            to.buffer.set(buffer);
            to.pos = pos;
            return to;
          }
        }
        exports.BLAKE2 = BLAKE2;
      }, {
        "./_assert.js": 106,
        "./utils.js": 116
      }],
      108: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SHA2 = void 0;
        const _assert_js_1 = require("./_assert.js");
        const utils_js_1 = require("./utils.js");
        // Polyfill for Safari 14
        function setBigUint64(view, byteOffset, value, isLE) {
          if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);
          const _32n = BigInt(32);
          const _u32_max = BigInt(0xffffffff);
          const wh = Number(value >> _32n & _u32_max);
          const wl = Number(value & _u32_max);
          const h = isLE ? 4 : 0;
          const l = isLE ? 0 : 4;
          view.setUint32(byteOffset + h, wh, isLE);
          view.setUint32(byteOffset + l, wl, isLE);
        }
        // Base SHA2 class (RFC 6234)
        class SHA2 extends utils_js_1.Hash {
          constructor(blockLen, outputLen, padOffset, isLE) {
            super();
            this.blockLen = blockLen;
            this.outputLen = outputLen;
            this.padOffset = padOffset;
            this.isLE = isLE;
            this.finished = false;
            this.length = 0;
            this.pos = 0;
            this.destroyed = false;
            this.buffer = new Uint8Array(blockLen);
            this.view = (0, utils_js_1.createView)(this.buffer);
          }
          update(data) {
            (0, _assert_js_1.exists)(this);
            const {
              view,
              buffer,
              blockLen
            } = this;
            data = (0, utils_js_1.toBytes)(data);
            const len = data.length;
            for (let pos = 0; pos < len;) {
              const take = Math.min(blockLen - this.pos, len - pos);
              // Fast path: we have at least one block in input, cast it to view and process
              if (take === blockLen) {
                const dataView = (0, utils_js_1.createView)(data);
                for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);
                continue;
              }
              buffer.set(data.subarray(pos, pos + take), this.pos);
              this.pos += take;
              pos += take;
              if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
              }
            }
            this.length += data.length;
            this.roundClean();
            return this;
          }
          digestInto(out) {
            (0, _assert_js_1.exists)(this);
            (0, _assert_js_1.output)(out, this);
            this.finished = true;
            // Padding
            // We can avoid allocation of buffer for padding completely if it
            // was previously not allocated here. But it won't change performance.
            const {
              buffer,
              view,
              blockLen,
              isLE
            } = this;
            let {
              pos
            } = this;
            // append the bit '1' to the message
            buffer[pos++] = 0b10000000;
            this.buffer.subarray(pos).fill(0);
            // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
            if (this.padOffset > blockLen - pos) {
              this.process(view, 0);
              pos = 0;
            }
            // Pad until full block byte with zeros
            for (let i = pos; i < blockLen; i++) buffer[i] = 0;
            // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
            // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
            // So we just write lowest 64 bits of that value.
            setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
            this.process(view, 0);
            const oview = (0, utils_js_1.createView)(out);
            const len = this.outputLen;
            // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
            if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');
            const outLen = len / 4;
            const state = this.get();
            if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');
            for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);
          }
          digest() {
            const {
              buffer,
              outputLen
            } = this;
            this.digestInto(buffer);
            const res = buffer.slice(0, outputLen);
            this.destroy();
            return res;
          }
          _cloneInto(to) {
            to || (to = new this.constructor());
            to.set(...this.get());
            const {
              blockLen,
              buffer,
              length,
              finished,
              destroyed,
              pos
            } = this;
            to.length = length;
            to.pos = pos;
            to.finished = finished;
            to.destroyed = destroyed;
            if (length % blockLen) to.buffer.set(buffer);
            return to;
          }
        }
        exports.SHA2 = SHA2;
      }, {
        "./_assert.js": 106,
        "./utils.js": 116
      }],
      109: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
        const U32_MASK64 = /* @__PURE__ */BigInt(2 ** 32 - 1);
        const _32n = /* @__PURE__ */BigInt(32);
        // We are not using BigUint64Array, because they are extremely slow as per 2022
        function fromBig(n, le = false) {
          if (le) return {
            h: Number(n & U32_MASK64),
            l: Number(n >> _32n & U32_MASK64)
          };
          return {
            h: Number(n >> _32n & U32_MASK64) | 0,
            l: Number(n & U32_MASK64) | 0
          };
        }
        exports.fromBig = fromBig;
        function split(lst, le = false) {
          let Ah = new Uint32Array(lst.length);
          let Al = new Uint32Array(lst.length);
          for (let i = 0; i < lst.length; i++) {
            const {
              h,
              l
            } = fromBig(lst[i], le);
            [Ah[i], Al[i]] = [h, l];
          }
          return [Ah, Al];
        }
        exports.split = split;
        const toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
        exports.toBig = toBig;
        // for Shift in [0, 32)
        const shrSH = (h, _l, s) => h >>> s;
        exports.shrSH = shrSH;
        const shrSL = (h, l, s) => h << 32 - s | l >>> s;
        exports.shrSL = shrSL;
        // Right rotate for Shift in [1, 32)
        const rotrSH = (h, l, s) => h >>> s | l << 32 - s;
        exports.rotrSH = rotrSH;
        const rotrSL = (h, l, s) => h << 32 - s | l >>> s;
        exports.rotrSL = rotrSL;
        // Right rotate for Shift in (32, 64), NOTE: 32 is special case.
        const rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
        exports.rotrBH = rotrBH;
        const rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
        exports.rotrBL = rotrBL;
        // Right rotate for shift===32 (just swaps l&h)
        const rotr32H = (_h, l) => l;
        exports.rotr32H = rotr32H;
        const rotr32L = (h, _l) => h;
        exports.rotr32L = rotr32L;
        // Left rotate for Shift in [1, 32)
        const rotlSH = (h, l, s) => h << s | l >>> 32 - s;
        exports.rotlSH = rotlSH;
        const rotlSL = (h, l, s) => l << s | h >>> 32 - s;
        exports.rotlSL = rotlSL;
        // Left rotate for Shift in (32, 64), NOTE: 32 is special case.
        const rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
        exports.rotlBH = rotlBH;
        const rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
        exports.rotlBL = rotlBL;
        // JS uses 32-bit signed integers for bitwise operations which means we cannot
        // simple take carry out of low bit sum by shift, we need to use division.
        function add(Ah, Al, Bh, Bl) {
          const l = (Al >>> 0) + (Bl >>> 0);
          return {
            h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
            l: l | 0
          };
        }
        exports.add = add;
        // Addition with more than 2 elements
        const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
        exports.add3L = add3L;
        const add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
        exports.add3H = add3H;
        const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
        exports.add4L = add4L;
        const add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
        exports.add4H = add4H;
        const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
        exports.add5L = add5L;
        const add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
        exports.add5H = add5H;
        // prettier-ignore
        const u64 = {
          fromBig,
          split,
          toBig,
          shrSH,
          shrSL,
          rotrSH,
          rotrSL,
          rotrBH,
          rotrBL,
          rotr32H,
          rotr32L,
          rotlSH,
          rotlSL,
          rotlBH,
          rotlBL,
          add,
          add3L,
          add3H,
          add4L,
          add4H,
          add5H,
          add5L
        };
        exports.default = u64;
      }, {}],
      110: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.blake2b = void 0;
        const _blake2_js_1 = require("./_blake2.js");
        const _u64_js_1 = require("./_u64.js");
        const utils_js_1 = require("./utils.js");
        // Same as SHA-512 but LE
        // prettier-ignore
        const IV = /* @__PURE__ */new Uint32Array([0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19]);
        // Temporary buffer
        const BUF = /* @__PURE__ */new Uint32Array(32);
        // Mixing function G splitted in two halfs
        function G1(a, b, c, d, msg, x) {
          // NOTE: V is LE here
          const Xl = msg[x],
            Xh = msg[x + 1]; // prettier-ignore
          let Al = BUF[2 * a],
            Ah = BUF[2 * a + 1]; // prettier-ignore
          let Bl = BUF[2 * b],
            Bh = BUF[2 * b + 1]; // prettier-ignore
          let Cl = BUF[2 * c],
            Ch = BUF[2 * c + 1]; // prettier-ignore
          let Dl = BUF[2 * d],
            Dh = BUF[2 * d + 1]; // prettier-ignore
          // v[a] = (v[a] + v[b] + x) | 0;
          let ll = _u64_js_1.default.add3L(Al, Bl, Xl);
          Ah = _u64_js_1.default.add3H(ll, Ah, Bh, Xh);
          Al = ll | 0;
          // v[d] = rotr(v[d] ^ v[a], 32)
          ({
            Dh,
            Dl
          } = {
            Dh: Dh ^ Ah,
            Dl: Dl ^ Al
          });
          ({
            Dh,
            Dl
          } = {
            Dh: _u64_js_1.default.rotr32H(Dh, Dl),
            Dl: _u64_js_1.default.rotr32L(Dh, Dl)
          });
          // v[c] = (v[c] + v[d]) | 0;
          ({
            h: Ch,
            l: Cl
          } = _u64_js_1.default.add(Ch, Cl, Dh, Dl));
          // v[b] = rotr(v[b] ^ v[c], 24)
          ({
            Bh,
            Bl
          } = {
            Bh: Bh ^ Ch,
            Bl: Bl ^ Cl
          });
          ({
            Bh,
            Bl
          } = {
            Bh: _u64_js_1.default.rotrSH(Bh, Bl, 24),
            Bl: _u64_js_1.default.rotrSL(Bh, Bl, 24)
          });
          BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
          BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
          BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
          BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
        }
        function G2(a, b, c, d, msg, x) {
          // NOTE: V is LE here
          const Xl = msg[x],
            Xh = msg[x + 1]; // prettier-ignore
          let Al = BUF[2 * a],
            Ah = BUF[2 * a + 1]; // prettier-ignore
          let Bl = BUF[2 * b],
            Bh = BUF[2 * b + 1]; // prettier-ignore
          let Cl = BUF[2 * c],
            Ch = BUF[2 * c + 1]; // prettier-ignore
          let Dl = BUF[2 * d],
            Dh = BUF[2 * d + 1]; // prettier-ignore
          // v[a] = (v[a] + v[b] + x) | 0;
          let ll = _u64_js_1.default.add3L(Al, Bl, Xl);
          Ah = _u64_js_1.default.add3H(ll, Ah, Bh, Xh);
          Al = ll | 0;
          // v[d] = rotr(v[d] ^ v[a], 16)
          ({
            Dh,
            Dl
          } = {
            Dh: Dh ^ Ah,
            Dl: Dl ^ Al
          });
          ({
            Dh,
            Dl
          } = {
            Dh: _u64_js_1.default.rotrSH(Dh, Dl, 16),
            Dl: _u64_js_1.default.rotrSL(Dh, Dl, 16)
          });
          // v[c] = (v[c] + v[d]) | 0;
          ({
            h: Ch,
            l: Cl
          } = _u64_js_1.default.add(Ch, Cl, Dh, Dl));
          // v[b] = rotr(v[b] ^ v[c], 63)
          ({
            Bh,
            Bl
          } = {
            Bh: Bh ^ Ch,
            Bl: Bl ^ Cl
          });
          ({
            Bh,
            Bl
          } = {
            Bh: _u64_js_1.default.rotrBH(Bh, Bl, 63),
            Bl: _u64_js_1.default.rotrBL(Bh, Bl, 63)
          });
          BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
          BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
          BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
          BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
        }
        class BLAKE2b extends _blake2_js_1.BLAKE2 {
          constructor(opts = {}) {
            super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);
            // Same as SHA-512, but LE
            this.v0l = IV[0] | 0;
            this.v0h = IV[1] | 0;
            this.v1l = IV[2] | 0;
            this.v1h = IV[3] | 0;
            this.v2l = IV[4] | 0;
            this.v2h = IV[5] | 0;
            this.v3l = IV[6] | 0;
            this.v3h = IV[7] | 0;
            this.v4l = IV[8] | 0;
            this.v4h = IV[9] | 0;
            this.v5l = IV[10] | 0;
            this.v5h = IV[11] | 0;
            this.v6l = IV[12] | 0;
            this.v6h = IV[13] | 0;
            this.v7l = IV[14] | 0;
            this.v7h = IV[15] | 0;
            const keyLength = opts.key ? opts.key.length : 0;
            this.v0l ^= this.outputLen | keyLength << 8 | 0x01 << 16 | 0x01 << 24;
            if (opts.salt) {
              const salt = (0, utils_js_1.u32)((0, utils_js_1.toBytes)(opts.salt));
              this.v4l ^= salt[0];
              this.v4h ^= salt[1];
              this.v5l ^= salt[2];
              this.v5h ^= salt[3];
            }
            if (opts.personalization) {
              const pers = (0, utils_js_1.u32)((0, utils_js_1.toBytes)(opts.personalization));
              this.v6l ^= pers[0];
              this.v6h ^= pers[1];
              this.v7l ^= pers[2];
              this.v7h ^= pers[3];
            }
            if (opts.key) {
              // Pad to blockLen and update
              const tmp = new Uint8Array(this.blockLen);
              tmp.set((0, utils_js_1.toBytes)(opts.key));
              this.update(tmp);
            }
          }
          // prettier-ignore
          get() {
            let {
              v0l,
              v0h,
              v1l,
              v1h,
              v2l,
              v2h,
              v3l,
              v3h,
              v4l,
              v4h,
              v5l,
              v5h,
              v6l,
              v6h,
              v7l,
              v7h
            } = this;
            return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
          }
          // prettier-ignore
          set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
            this.v0l = v0l | 0;
            this.v0h = v0h | 0;
            this.v1l = v1l | 0;
            this.v1h = v1h | 0;
            this.v2l = v2l | 0;
            this.v2h = v2h | 0;
            this.v3l = v3l | 0;
            this.v3h = v3h | 0;
            this.v4l = v4l | 0;
            this.v4h = v4h | 0;
            this.v5l = v5l | 0;
            this.v5h = v5h | 0;
            this.v6l = v6l | 0;
            this.v6h = v6h | 0;
            this.v7l = v7l | 0;
            this.v7h = v7h | 0;
          }
          compress(msg, offset, isLast) {
            this.get().forEach((v, i) => BUF[i] = v); // First half from state.
            BUF.set(IV, 16); // Second half from IV.
            let {
              h,
              l
            } = _u64_js_1.default.fromBig(BigInt(this.length));
            BUF[24] = IV[8] ^ l; // Low word of the offset.
            BUF[25] = IV[9] ^ h; // High word.
            // Invert all bits for last block
            if (isLast) {
              BUF[28] = ~BUF[28];
              BUF[29] = ~BUF[29];
            }
            let j = 0;
            const s = _blake2_js_1.SIGMA;
            for (let i = 0; i < 12; i++) {
              G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
              G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
              G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
              G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
              G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
              G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
              G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
              G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
              G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
              G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
              G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
              G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
              G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
              G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
              G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
              G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
            }
            this.v0l ^= BUF[0] ^ BUF[16];
            this.v0h ^= BUF[1] ^ BUF[17];
            this.v1l ^= BUF[2] ^ BUF[18];
            this.v1h ^= BUF[3] ^ BUF[19];
            this.v2l ^= BUF[4] ^ BUF[20];
            this.v2h ^= BUF[5] ^ BUF[21];
            this.v3l ^= BUF[6] ^ BUF[22];
            this.v3h ^= BUF[7] ^ BUF[23];
            this.v4l ^= BUF[8] ^ BUF[24];
            this.v4h ^= BUF[9] ^ BUF[25];
            this.v5l ^= BUF[10] ^ BUF[26];
            this.v5h ^= BUF[11] ^ BUF[27];
            this.v6l ^= BUF[12] ^ BUF[28];
            this.v6h ^= BUF[13] ^ BUF[29];
            this.v7l ^= BUF[14] ^ BUF[30];
            this.v7h ^= BUF[15] ^ BUF[31];
            BUF.fill(0);
          }
          destroy() {
            this.destroyed = true;
            this.buffer32.fill(0);
            this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          }
        }
        /**
         * BLAKE2b - optimized for 64-bit platforms. JS doesn't have uint64, so it's slower than BLAKE2s.
         * @param msg - message that would be hashed
         * @param opts - dkLen, key, salt, personalization
         */
        exports.blake2b = (0, utils_js_1.wrapConstructorWithOpts)(opts => new BLAKE2b(opts));
      }, {
        "./_blake2.js": 107,
        "./_u64.js": 109,
        "./utils.js": 116
      }],
      111: [function (require, module, exports) {
        arguments[4][100][0].apply(exports, arguments);
      }, {
        "dup": 100
      }],
      112: [function (require, module, exports) {
        arguments[4][101][0].apply(exports, arguments);
      }, {
        "./_assert.js": 106,
        "./utils.js": 116,
        "dup": 101
      }],
      113: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.pbkdf2Async = exports.pbkdf2 = void 0;
        const _assert_js_1 = require("./_assert.js");
        const hmac_js_1 = require("./hmac.js");
        const utils_js_1 = require("./utils.js");
        // Common prologue and epilogue for sync/async functions
        function pbkdf2Init(hash, _password, _salt, _opts) {
          (0, _assert_js_1.hash)(hash);
          const opts = (0, utils_js_1.checkOpts)({
            dkLen: 32,
            asyncTick: 10
          }, _opts);
          const {
            c,
            dkLen,
            asyncTick
          } = opts;
          (0, _assert_js_1.number)(c);
          (0, _assert_js_1.number)(dkLen);
          (0, _assert_js_1.number)(asyncTick);
          if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');
          const password = (0, utils_js_1.toBytes)(_password);
          const salt = (0, utils_js_1.toBytes)(_salt);
          // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
          const DK = new Uint8Array(dkLen);
          // U1 = PRF(Password, Salt + INT_32_BE(i))
          const PRF = hmac_js_1.hmac.create(hash, password);
          const PRFSalt = PRF._cloneInto().update(salt);
          return {
            c,
            dkLen,
            asyncTick,
            DK,
            PRF,
            PRFSalt
          };
        }
        function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
          PRF.destroy();
          PRFSalt.destroy();
          if (prfW) prfW.destroy();
          u.fill(0);
          return DK;
        }
        /**
         * PBKDF2-HMAC: RFC 2898 key derivation function
         * @param hash - hash function that would be used e.g. sha256
         * @param password - password from which a derived key is generated
         * @param salt - cryptographic salt
         * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
         */
        function pbkdf2(hash, password, salt, opts) {
          const {
            c,
            dkLen,
            DK,
            PRF,
            PRFSalt
          } = pbkdf2Init(hash, password, salt, opts);
          let prfW; // Working copy
          const arr = new Uint8Array(4);
          const view = (0, utils_js_1.createView)(arr);
          const u = new Uint8Array(PRF.outputLen);
          // DK = T1 + T2 + ⋯ + Tdklen/hlen
          for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
            // Ti = F(Password, Salt, c, i)
            const Ti = DK.subarray(pos, pos + PRF.outputLen);
            view.setInt32(0, ti, false);
            // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
            // U1 = PRF(Password, Salt + INT_32_BE(i))
            (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
            Ti.set(u.subarray(0, Ti.length));
            for (let ui = 1; ui < c; ui++) {
              // Uc = PRF(Password, Uc−1)
              PRF._cloneInto(prfW).update(u).digestInto(u);
              for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];
            }
          }
          return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
        }
        exports.pbkdf2 = pbkdf2;
        async function pbkdf2Async(hash, password, salt, opts) {
          const {
            c,
            dkLen,
            asyncTick,
            DK,
            PRF,
            PRFSalt
          } = pbkdf2Init(hash, password, salt, opts);
          let prfW; // Working copy
          const arr = new Uint8Array(4);
          const view = (0, utils_js_1.createView)(arr);
          const u = new Uint8Array(PRF.outputLen);
          // DK = T1 + T2 + ⋯ + Tdklen/hlen
          for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
            // Ti = F(Password, Salt, c, i)
            const Ti = DK.subarray(pos, pos + PRF.outputLen);
            view.setInt32(0, ti, false);
            // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
            // U1 = PRF(Password, Salt + INT_32_BE(i))
            (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
            Ti.set(u.subarray(0, Ti.length));
            await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
              // Uc = PRF(Password, Uc−1)
              PRF._cloneInto(prfW).update(u).digestInto(u);
              for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];
            });
          }
          return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
        }
        exports.pbkdf2Async = pbkdf2Async;
      }, {
        "./_assert.js": 106,
        "./hmac.js": 112,
        "./utils.js": 116
      }],
      114: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.sha224 = exports.sha256 = void 0;
        const _sha2_js_1 = require("./_sha2.js");
        const utils_js_1 = require("./utils.js");
        // SHA2-256 need to try 2^128 hashes to execute birthday attack.
        // BTC network is doing 2^67 hashes/sec as per early 2023.
        // Choice: a ? b : c
        const Chi = (a, b, c) => a & b ^ ~a & c;
        // Majority function, true if any two inpust is true
        const Maj = (a, b, c) => a & b ^ a & c ^ b & c;
        // Round constants:
        // first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
        // prettier-ignore
        const SHA256_K = /* @__PURE__ */new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);
        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
        // prettier-ignore
        const IV = /* @__PURE__ */new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);
        // Temporary buffer, not used to store anything between runs
        // Named this way because it matches specification.
        const SHA256_W = /* @__PURE__ */new Uint32Array(64);
        class SHA256 extends _sha2_js_1.SHA2 {
          constructor() {
            super(64, 32, 8, false);
            // We cannot use array here since array allows indexing by variable
            // which means optimizer/compiler cannot use registers.
            this.A = IV[0] | 0;
            this.B = IV[1] | 0;
            this.C = IV[2] | 0;
            this.D = IV[3] | 0;
            this.E = IV[4] | 0;
            this.F = IV[5] | 0;
            this.G = IV[6] | 0;
            this.H = IV[7] | 0;
          }
          get() {
            const {
              A,
              B,
              C,
              D,
              E,
              F,
              G,
              H
            } = this;
            return [A, B, C, D, E, F, G, H];
          }
          // prettier-ignore
          set(A, B, C, D, E, F, G, H) {
            this.A = A | 0;
            this.B = B | 0;
            this.C = C | 0;
            this.D = D | 0;
            this.E = E | 0;
            this.F = F | 0;
            this.G = G | 0;
            this.H = H | 0;
          }
          process(view, offset) {
            // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
            for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);
            for (let i = 16; i < 64; i++) {
              const W15 = SHA256_W[i - 15];
              const W2 = SHA256_W[i - 2];
              const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
              const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
              SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
            }
            // Compression function main loop, 64 rounds
            let {
              A,
              B,
              C,
              D,
              E,
              F,
              G,
              H
            } = this;
            for (let i = 0; i < 64; i++) {
              const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
              const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
              const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
              const T2 = sigma0 + Maj(A, B, C) | 0;
              H = G;
              G = F;
              F = E;
              E = D + T1 | 0;
              D = C;
              C = B;
              B = A;
              A = T1 + T2 | 0;
            }
            // Add the compressed chunk to the current hash value
            A = A + this.A | 0;
            B = B + this.B | 0;
            C = C + this.C | 0;
            D = D + this.D | 0;
            E = E + this.E | 0;
            F = F + this.F | 0;
            G = G + this.G | 0;
            H = H + this.H | 0;
            this.set(A, B, C, D, E, F, G, H);
          }
          roundClean() {
            SHA256_W.fill(0);
          }
          destroy() {
            this.set(0, 0, 0, 0, 0, 0, 0, 0);
            this.buffer.fill(0);
          }
        }
        // Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
        class SHA224 extends SHA256 {
          constructor() {
            super();
            this.A = 0xc1059ed8 | 0;
            this.B = 0x367cd507 | 0;
            this.C = 0x3070dd17 | 0;
            this.D = 0xf70e5939 | 0;
            this.E = 0xffc00b31 | 0;
            this.F = 0x68581511 | 0;
            this.G = 0x64f98fa7 | 0;
            this.H = 0xbefa4fa4 | 0;
            this.outputLen = 28;
          }
        }
        /**
         * SHA2-256 hash function
         * @param message - data that would be hashed
         */
        exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
        exports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
      }, {
        "./_sha2.js": 108,
        "./utils.js": 116
      }],
      115: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;
        const _sha2_js_1 = require("./_sha2.js");
        const _u64_js_1 = require("./_u64.js");
        const utils_js_1 = require("./utils.js");
        // Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
        // prettier-ignore
        const [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */(() => _u64_js_1.default.split(['0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc', '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118', '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2', '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694', '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65', '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5', '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4', '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70', '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df', '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b', '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30', '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8', '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8', '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3', '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec', '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b', '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178', '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b', '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c', '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'].map(n => BigInt(n))))();
        // Temporary buffer, not used to store anything between runs
        const SHA512_W_H = /* @__PURE__ */new Uint32Array(80);
        const SHA512_W_L = /* @__PURE__ */new Uint32Array(80);
        class SHA512 extends _sha2_js_1.SHA2 {
          constructor() {
            super(128, 64, 16, false);
            // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
            // Also looks cleaner and easier to verify with spec.
            // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
            // h -- high 32 bits, l -- low 32 bits
            this.Ah = 0x6a09e667 | 0;
            this.Al = 0xf3bcc908 | 0;
            this.Bh = 0xbb67ae85 | 0;
            this.Bl = 0x84caa73b | 0;
            this.Ch = 0x3c6ef372 | 0;
            this.Cl = 0xfe94f82b | 0;
            this.Dh = 0xa54ff53a | 0;
            this.Dl = 0x5f1d36f1 | 0;
            this.Eh = 0x510e527f | 0;
            this.El = 0xade682d1 | 0;
            this.Fh = 0x9b05688c | 0;
            this.Fl = 0x2b3e6c1f | 0;
            this.Gh = 0x1f83d9ab | 0;
            this.Gl = 0xfb41bd6b | 0;
            this.Hh = 0x5be0cd19 | 0;
            this.Hl = 0x137e2179 | 0;
          }
          // prettier-ignore
          get() {
            const {
              Ah,
              Al,
              Bh,
              Bl,
              Ch,
              Cl,
              Dh,
              Dl,
              Eh,
              El,
              Fh,
              Fl,
              Gh,
              Gl,
              Hh,
              Hl
            } = this;
            return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
          }
          // prettier-ignore
          set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
            this.Ah = Ah | 0;
            this.Al = Al | 0;
            this.Bh = Bh | 0;
            this.Bl = Bl | 0;
            this.Ch = Ch | 0;
            this.Cl = Cl | 0;
            this.Dh = Dh | 0;
            this.Dl = Dl | 0;
            this.Eh = Eh | 0;
            this.El = El | 0;
            this.Fh = Fh | 0;
            this.Fl = Fl | 0;
            this.Gh = Gh | 0;
            this.Gl = Gl | 0;
            this.Hh = Hh | 0;
            this.Hl = Hl | 0;
          }
          process(view, offset) {
            // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
            for (let i = 0; i < 16; i++, offset += 4) {
              SHA512_W_H[i] = view.getUint32(offset);
              SHA512_W_L[i] = view.getUint32(offset += 4);
            }
            for (let i = 16; i < 80; i++) {
              // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
              const W15h = SHA512_W_H[i - 15] | 0;
              const W15l = SHA512_W_L[i - 15] | 0;
              const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
              const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
              // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
              const W2h = SHA512_W_H[i - 2] | 0;
              const W2l = SHA512_W_L[i - 2] | 0;
              const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
              const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
              // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
              const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
              const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
              SHA512_W_H[i] = SUMh | 0;
              SHA512_W_L[i] = SUMl | 0;
            }
            let {
              Ah,
              Al,
              Bh,
              Bl,
              Ch,
              Cl,
              Dh,
              Dl,
              Eh,
              El,
              Fh,
              Fl,
              Gh,
              Gl,
              Hh,
              Hl
            } = this;
            // Compression function main loop, 80 rounds
            for (let i = 0; i < 80; i++) {
              // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
              const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
              const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
              //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
              const CHIh = Eh & Fh ^ ~Eh & Gh;
              const CHIl = El & Fl ^ ~El & Gl;
              // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
              // prettier-ignore
              const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
              const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
              const T1l = T1ll | 0;
              // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
              const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
              const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
              const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
              const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
              Hh = Gh | 0;
              Hl = Gl | 0;
              Gh = Fh | 0;
              Gl = Fl | 0;
              Fh = Eh | 0;
              Fl = El | 0;
              ({
                h: Eh,
                l: El
              } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
              Dh = Ch | 0;
              Dl = Cl | 0;
              Ch = Bh | 0;
              Cl = Bl | 0;
              Bh = Ah | 0;
              Bl = Al | 0;
              const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
              Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
              Al = All | 0;
            }
            // Add the compressed chunk to the current hash value
            ({
              h: Ah,
              l: Al
            } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
            ({
              h: Bh,
              l: Bl
            } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
            ({
              h: Ch,
              l: Cl
            } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
            ({
              h: Dh,
              l: Dl
            } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
            ({
              h: Eh,
              l: El
            } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
            ({
              h: Fh,
              l: Fl
            } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
            ({
              h: Gh,
              l: Gl
            } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
            ({
              h: Hh,
              l: Hl
            } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
            this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
          }
          roundClean() {
            SHA512_W_H.fill(0);
            SHA512_W_L.fill(0);
          }
          destroy() {
            this.buffer.fill(0);
            this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          }
        }
        exports.SHA512 = SHA512;
        class SHA512_224 extends SHA512 {
          constructor() {
            super();
            // h -- high 32 bits, l -- low 32 bits
            this.Ah = 0x8c3d37c8 | 0;
            this.Al = 0x19544da2 | 0;
            this.Bh = 0x73e19966 | 0;
            this.Bl = 0x89dcd4d6 | 0;
            this.Ch = 0x1dfab7ae | 0;
            this.Cl = 0x32ff9c82 | 0;
            this.Dh = 0x679dd514 | 0;
            this.Dl = 0x582f9fcf | 0;
            this.Eh = 0x0f6d2b69 | 0;
            this.El = 0x7bd44da8 | 0;
            this.Fh = 0x77e36f73 | 0;
            this.Fl = 0x04c48942 | 0;
            this.Gh = 0x3f9d85a8 | 0;
            this.Gl = 0x6a1d36c8 | 0;
            this.Hh = 0x1112e6ad | 0;
            this.Hl = 0x91d692a1 | 0;
            this.outputLen = 28;
          }
        }
        class SHA512_256 extends SHA512 {
          constructor() {
            super();
            // h -- high 32 bits, l -- low 32 bits
            this.Ah = 0x22312194 | 0;
            this.Al = 0xfc2bf72c | 0;
            this.Bh = 0x9f555fa3 | 0;
            this.Bl = 0xc84c64c2 | 0;
            this.Ch = 0x2393b86b | 0;
            this.Cl = 0x6f53b151 | 0;
            this.Dh = 0x96387719 | 0;
            this.Dl = 0x5940eabd | 0;
            this.Eh = 0x96283ee2 | 0;
            this.El = 0xa88effe3 | 0;
            this.Fh = 0xbe5e1e25 | 0;
            this.Fl = 0x53863992 | 0;
            this.Gh = 0x2b0199fc | 0;
            this.Gl = 0x2c85b8aa | 0;
            this.Hh = 0x0eb72ddc | 0;
            this.Hl = 0x81c52ca2 | 0;
            this.outputLen = 32;
          }
        }
        class SHA384 extends SHA512 {
          constructor() {
            super();
            // h -- high 32 bits, l -- low 32 bits
            this.Ah = 0xcbbb9d5d | 0;
            this.Al = 0xc1059ed8 | 0;
            this.Bh = 0x629a292a | 0;
            this.Bl = 0x367cd507 | 0;
            this.Ch = 0x9159015a | 0;
            this.Cl = 0x3070dd17 | 0;
            this.Dh = 0x152fecd8 | 0;
            this.Dl = 0xf70e5939 | 0;
            this.Eh = 0x67332667 | 0;
            this.El = 0xffc00b31 | 0;
            this.Fh = 0x8eb44a87 | 0;
            this.Fl = 0x68581511 | 0;
            this.Gh = 0xdb0c2e0d | 0;
            this.Gl = 0x64f98fa7 | 0;
            this.Hh = 0x47b5481d | 0;
            this.Hl = 0xbefa4fa4 | 0;
            this.outputLen = 48;
          }
        }
        exports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());
        exports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());
        exports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());
        exports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());
      }, {
        "./_sha2.js": 108,
        "./_u64.js": 109,
        "./utils.js": 116
      }],
      116: [function (require, module, exports) {
        "use strict";

        /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
        // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
        // node.js versions earlier than v19 don't declare it in global scope.
        // For node.js, package.json#exports field mapping rewrites import
        // from `crypto` to `cryptoNode`, which imports native module.
        // Makes the utils un-importable in browsers without a bundler.
        // Once node.js 18 is deprecated (2025-04-30), we can just drop the import.
        const crypto_1 = require("@noble/hashes/crypto");
        // Cast array to different type
        const u8 = arr => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
        exports.u8 = u8;
        const u32 = arr => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
        exports.u32 = u32;
        function isBytes(a) {
          return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';
        }
        // Cast array to view
        const createView = arr => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
        exports.createView = createView;
        // The rotate right (circular right shift) operation for uint32
        const rotr = (word, shift) => word << 32 - shift | word >>> shift;
        exports.rotr = rotr;
        // big-endian hardware is rare. Just in case someone still decides to run hashes:
        // early-throw an error because we don't support BE yet.
        // Other libraries would silently corrupt the data instead of throwing an error,
        // when they don't support it.
        exports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
        if (!exports.isLE) throw new Error('Non little-endian hardware is not supported');
        // Array where index 0xf0 (240) is mapped to string 'f0'
        const hexes = /* @__PURE__ */Array.from({
          length: 256
        }, (_, i) => i.toString(16).padStart(2, '0'));
        /**
         * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
         */
        function bytesToHex(bytes) {
          if (!isBytes(bytes)) throw new Error('Uint8Array expected');
          // pre-caching improves the speed 6x
          let hex = '';
          for (let i = 0; i < bytes.length; i++) {
            hex += hexes[bytes[i]];
          }
          return hex;
        }
        exports.bytesToHex = bytesToHex;
        // We use optimized technique to convert hex string to byte array
        const asciis = {
          _0: 48,
          _9: 57,
          _A: 65,
          _F: 70,
          _a: 97,
          _f: 102
        };
        function asciiToBase16(char) {
          if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;
          if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);
          if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);
          return;
        }
        /**
         * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
         */
        function hexToBytes(hex) {
          if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);
          const hl = hex.length;
          const al = hl / 2;
          if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
          const array = new Uint8Array(al);
          for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
            const n1 = asciiToBase16(hex.charCodeAt(hi));
            const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
            if (n1 === undefined || n2 === undefined) {
              const char = hex[hi] + hex[hi + 1];
              throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
            }
            array[ai] = n1 * 16 + n2;
          }
          return array;
        }
        exports.hexToBytes = hexToBytes;
        // There is no setImmediate in browser and setTimeout is slow.
        // call of async fn will return Promise, which will be fullfiled only on
        // next scheduler queue processing step and this is exactly what we need.
        const nextTick = async () => {};
        exports.nextTick = nextTick;
        // Returns control to thread each 'tick' ms to avoid blocking
        async function asyncLoop(iters, tick, cb) {
          let ts = Date.now();
          for (let i = 0; i < iters; i++) {
            cb(i);
            // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
            const diff = Date.now() - ts;
            if (diff >= 0 && diff < tick) continue;
            await (0, exports.nextTick)();
            ts += diff;
          }
        }
        exports.asyncLoop = asyncLoop;
        /**
         * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
         */
        function utf8ToBytes(str) {
          if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
          return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
        }

        exports.utf8ToBytes = utf8ToBytes;
        /**
         * Normalizes (non-hex) string or Uint8Array to Uint8Array.
         * Warning: when Uint8Array is passed, it would NOT get copied.
         * Keep in mind for future mutable operations.
         */
        function toBytes(data) {
          if (typeof data === 'string') data = utf8ToBytes(data);
          if (!isBytes(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);
          return data;
        }
        exports.toBytes = toBytes;
        /**
         * Copies several Uint8Arrays into one.
         */
        function concatBytes(...arrays) {
          let sum = 0;
          for (let i = 0; i < arrays.length; i++) {
            const a = arrays[i];
            if (!isBytes(a)) throw new Error('Uint8Array expected');
            sum += a.length;
          }
          const res = new Uint8Array(sum);
          for (let i = 0, pad = 0; i < arrays.length; i++) {
            const a = arrays[i];
            res.set(a, pad);
            pad += a.length;
          }
          return res;
        }
        exports.concatBytes = concatBytes;
        // For runtime check if class implements interface
        class Hash {
          // Safe version that clones internal state
          clone() {
            return this._cloneInto();
          }
        }
        exports.Hash = Hash;
        const toStr = {}.toString;
        function checkOpts(defaults, opts) {
          if (opts !== undefined && toStr.call(opts) !== '[object Object]') throw new Error('Options should be object or undefined');
          const merged = Object.assign(defaults, opts);
          return merged;
        }
        exports.checkOpts = checkOpts;
        function wrapConstructor(hashCons) {
          const hashC = msg => hashCons().update(toBytes(msg)).digest();
          const tmp = hashCons();
          hashC.outputLen = tmp.outputLen;
          hashC.blockLen = tmp.blockLen;
          hashC.create = () => hashCons();
          return hashC;
        }
        exports.wrapConstructor = wrapConstructor;
        function wrapConstructorWithOpts(hashCons) {
          const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
          const tmp = hashCons({});
          hashC.outputLen = tmp.outputLen;
          hashC.blockLen = tmp.blockLen;
          hashC.create = opts => hashCons(opts);
          return hashC;
        }
        exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
        function wrapXOFConstructorWithOpts(hashCons) {
          const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
          const tmp = hashCons({});
          hashC.outputLen = tmp.outputLen;
          hashC.blockLen = tmp.blockLen;
          hashC.create = opts => hashCons(opts);
          return hashC;
        }
        exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
        /**
         * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
         */
        function randomBytes(bytesLength = 32) {
          if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {
            return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
          }
          throw new Error('crypto.getRandomValues must be defined');
        }
        exports.randomBytes = randomBytes;
      }, {
        "@noble/hashes/crypto": 111
      }],
      117: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.assertNumber = assertNumber;
        exports.utils = exports.utf8 = exports.stringToBytes = exports.str = exports.hex = exports.createBase58check = exports.bytesToString = exports.bytes = exports.bech32m = exports.bech32 = exports.base64urlnopad = exports.base64url = exports.base64nopad = exports.base64 = exports.base58xrp = exports.base58xmr = exports.base58flickr = exports.base58check = exports.base58 = exports.base32hex = exports.base32crockford = exports.base32 = exports.base16 = void 0;
        /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
        // Utilities
        /**
         * @__NO_SIDE_EFFECTS__
         */
        function assertNumber(n) {
          if (!Number.isSafeInteger(n)) throw new Error(`Wrong integer: ${n}`);
        }
        function isBytes(a) {
          return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';
        }
        /**
         * @__NO_SIDE_EFFECTS__
         */
        function chain(...args) {
          const id = a => a;
          // Wrap call in closure so JIT can inline calls
          const wrap = (a, b) => c => a(b(c));
          // Construct chain of args[-1].encode(args[-2].encode([...]))
          const encode = args.map(x => x.encode).reduceRight(wrap, id);
          // Construct chain of args[0].decode(args[1].decode(...))
          const decode = args.map(x => x.decode).reduce(wrap, id);
          return {
            encode,
            decode
          };
        }
        /**
         * Encodes integer radix representation to array of strings using alphabet and back
         * @__NO_SIDE_EFFECTS__
         */
        function alphabet(alphabet) {
          return {
            encode: digits => {
              if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('alphabet.encode input should be an array of numbers');
              return digits.map(i => {
                assertNumber(i);
                if (i < 0 || i >= alphabet.length) throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);
                return alphabet[i];
              });
            },
            decode: input => {
              if (!Array.isArray(input) || input.length && typeof input[0] !== 'string') throw new Error('alphabet.decode input should be array of strings');
              return input.map(letter => {
                if (typeof letter !== 'string') throw new Error(`alphabet.decode: not string element=${letter}`);
                const index = alphabet.indexOf(letter);
                if (index === -1) throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet}`);
                return index;
              });
            }
          };
        }
        /**
         * @__NO_SIDE_EFFECTS__
         */
        function join(separator = '') {
          if (typeof separator !== 'string') throw new Error('join separator should be string');
          return {
            encode: from => {
              if (!Array.isArray(from) || from.length && typeof from[0] !== 'string') throw new Error('join.encode input should be array of strings');
              for (let i of from) if (typeof i !== 'string') throw new Error(`join.encode: non-string input=${i}`);
              return from.join(separator);
            },
            decode: to => {
              if (typeof to !== 'string') throw new Error('join.decode input should be string');
              return to.split(separator);
            }
          };
        }
        /**
         * Pad strings array so it has integer number of bits
         * @__NO_SIDE_EFFECTS__
         */
        function padding(bits, chr = '=') {
          assertNumber(bits);
          if (typeof chr !== 'string') throw new Error('padding chr should be string');
          return {
            encode(data) {
              if (!Array.isArray(data) || data.length && typeof data[0] !== 'string') throw new Error('padding.encode input should be array of strings');
              for (let i of data) if (typeof i !== 'string') throw new Error(`padding.encode: non-string input=${i}`);
              while (data.length * bits % 8) data.push(chr);
              return data;
            },
            decode(input) {
              if (!Array.isArray(input) || input.length && typeof input[0] !== 'string') throw new Error('padding.encode input should be array of strings');
              for (let i of input) if (typeof i !== 'string') throw new Error(`padding.decode: non-string input=${i}`);
              let end = input.length;
              if (end * bits % 8) throw new Error('Invalid padding: string should have whole number of bytes');
              for (; end > 0 && input[end - 1] === chr; end--) {
                if (!((end - 1) * bits % 8)) throw new Error('Invalid padding: string has too much padding');
              }
              return input.slice(0, end);
            }
          };
        }
        /**
         * @__NO_SIDE_EFFECTS__
         */
        function normalize(fn) {
          if (typeof fn !== 'function') throw new Error('normalize fn should be function');
          return {
            encode: from => from,
            decode: to => fn(to)
          };
        }
        /**
         * Slow: O(n^2) time complexity
         * @__NO_SIDE_EFFECTS__
         */
        function convertRadix(data, from, to) {
          // base 1 is impossible
          if (from < 2) throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
          if (to < 2) throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
          if (!Array.isArray(data)) throw new Error('convertRadix: data should be array');
          if (!data.length) return [];
          let pos = 0;
          const res = [];
          const digits = Array.from(data);
          digits.forEach(d => {
            assertNumber(d);
            if (d < 0 || d >= from) throw new Error(`Wrong integer: ${d}`);
          });
          while (true) {
            let carry = 0;
            let done = true;
            for (let i = pos; i < digits.length; i++) {
              const digit = digits[i];
              const digitBase = from * carry + digit;
              if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) {
                throw new Error('convertRadix: carry overflow');
              }
              carry = digitBase % to;
              const rounded = Math.floor(digitBase / to);
              digits[i] = rounded;
              if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase) throw new Error('convertRadix: carry overflow');
              if (!done) continue;else if (!rounded) pos = i;else done = false;
            }
            res.push(carry);
            if (done) break;
          }
          for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);
          return res.reverse();
        }
        const gcd = /* @__NO_SIDE_EFFECTS__ */(a, b) => !b ? a : gcd(b, a % b);
        const radix2carry = /*@__NO_SIDE_EFFECTS__ */(from, to) => from + (to - gcd(from, to));
        /**
         * Implemented with numbers, because BigInt is 5x slower
         * @__NO_SIDE_EFFECTS__
         */
        function convertRadix2(data, from, to, padding) {
          if (!Array.isArray(data)) throw new Error('convertRadix2: data should be array');
          if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);
          if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);
          if (radix2carry(from, to) > 32) {
            throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
          }
          let carry = 0;
          let pos = 0; // bitwise position in current element
          const mask = 2 ** to - 1;
          const res = [];
          for (const n of data) {
            assertNumber(n);
            if (n >= 2 ** from) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
            carry = carry << from | n;
            if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
            pos += from;
            for (; pos >= to; pos -= to) res.push((carry >> pos - to & mask) >>> 0);
            carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow
          }

          carry = carry << to - pos & mask;
          if (!padding && pos >= from) throw new Error('Excess padding');
          if (!padding && carry) throw new Error(`Non-zero padding: ${carry}`);
          if (padding && pos > 0) res.push(carry >>> 0);
          return res;
        }
        /**
         * @__NO_SIDE_EFFECTS__
         */
        function radix(num) {
          assertNumber(num);
          return {
            encode: bytes => {
              if (!isBytes(bytes)) throw new Error('radix.encode input should be Uint8Array');
              return convertRadix(Array.from(bytes), 2 ** 8, num);
            },
            decode: digits => {
              if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('radix.decode input should be array of numbers');
              return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
            }
          };
        }
        /**
         * If both bases are power of same number (like `2**8 <-> 2**64`),
         * there is a linear algorithm. For now we have implementation for power-of-two bases only.
         * @__NO_SIDE_EFFECTS__
         */
        function radix2(bits, revPadding = false) {
          assertNumber(bits);
          if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');
          if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32) throw new Error('radix2: carry overflow');
          return {
            encode: bytes => {
              if (!isBytes(bytes)) throw new Error('radix2.encode input should be Uint8Array');
              return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
            },
            decode: digits => {
              if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('radix2.decode input should be array of numbers');
              return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
            }
          };
        }
        /**
         * @__NO_SIDE_EFFECTS__
         */
        function unsafeWrapper(fn) {
          if (typeof fn !== 'function') throw new Error('unsafeWrapper fn should be function');
          return function (...args) {
            try {
              return fn.apply(null, args);
            } catch (e) {}
          };
        }
        /**
         * @__NO_SIDE_EFFECTS__
         */
        function checksum(len, fn) {
          assertNumber(len);
          if (typeof fn !== 'function') throw new Error('checksum fn should be function');
          return {
            encode(data) {
              if (!isBytes(data)) throw new Error('checksum.encode: input should be Uint8Array');
              const checksum = fn(data).slice(0, len);
              const res = new Uint8Array(data.length + len);
              res.set(data);
              res.set(checksum, data.length);
              return res;
            },
            decode(data) {
              if (!isBytes(data)) throw new Error('checksum.decode: input should be Uint8Array');
              const payload = data.slice(0, -len);
              const newChecksum = fn(payload).slice(0, len);
              const oldChecksum = data.slice(-len);
              for (let i = 0; i < len; i++) if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');
              return payload;
            }
          };
        }
        // prettier-ignore
        const utils = exports.utils = {
          alphabet,
          chain,
          checksum,
          convertRadix,
          convertRadix2,
          radix,
          radix2,
          join,
          padding
        };
        // RFC 4648 aka RFC 3548
        // ---------------------
        const base16 = exports.base16 = /* @__PURE__ */chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));
        const base32 = exports.base32 = /* @__PURE__ */chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));
        const base32hex = exports.base32hex = /* @__PURE__ */chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));
        const base32crockford = exports.base32crockford = /* @__PURE__ */chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize(s => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));
        const base64 = exports.base64 = /* @__PURE__ */chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));
        const base64nopad = exports.base64nopad = /* @__PURE__ */chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), join(''));
        const base64url = exports.base64url = /* @__PURE__ */chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));
        const base64urlnopad = exports.base64urlnopad = /* @__PURE__ */chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));
        // base58 code
        // -----------
        const genBase58 = abc => chain(radix(58), alphabet(abc), join(''));
        const base58 = exports.base58 = /* @__PURE__ */genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
        const base58flickr = exports.base58flickr = /* @__PURE__ */genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');
        const base58xrp = exports.base58xrp = /* @__PURE__ */genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');
        // xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.
        // Block encoding significantly reduces quadratic complexity of base58.
        // Data len (index) -> encoded block len
        const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
        const base58xmr = exports.base58xmr = {
          encode(data) {
            let res = '';
            for (let i = 0; i < data.length; i += 8) {
              const block = data.subarray(i, i + 8);
              res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');
            }
            return res;
          },
          decode(str) {
            let res = [];
            for (let i = 0; i < str.length; i += 11) {
              const slice = str.slice(i, i + 11);
              const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
              const block = base58.decode(slice);
              for (let j = 0; j < block.length - blockLen; j++) {
                if (block[j] !== 0) throw new Error('base58xmr: wrong padding');
              }
              res = res.concat(Array.from(block.slice(block.length - blockLen)));
            }
            return Uint8Array.from(res);
          }
        };
        const createBase58check = /* @__PURE__ */sha256 => chain(checksum(4, data => sha256(sha256(data))), base58);
        // legacy export, bad name
        exports.createBase58check = createBase58check;
        const base58check = exports.base58check = createBase58check;
        const BECH_ALPHABET = /* @__PURE__ */chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));
        const POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];
        /**
         * @__NO_SIDE_EFFECTS__
         */
        function bech32Polymod(pre) {
          const b = pre >> 25;
          let chk = (pre & 0x1ffffff) << 5;
          for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
            if ((b >> i & 1) === 1) chk ^= POLYMOD_GENERATORS[i];
          }
          return chk;
        }
        /**
         * @__NO_SIDE_EFFECTS__
         */
        function bechChecksum(prefix, words, encodingConst = 1) {
          const len = prefix.length;
          let chk = 1;
          for (let i = 0; i < len; i++) {
            const c = prefix.charCodeAt(i);
            if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);
            chk = bech32Polymod(chk) ^ c >> 5;
          }
          chk = bech32Polymod(chk);
          for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ prefix.charCodeAt(i) & 0x1f;
          for (let v of words) chk = bech32Polymod(chk) ^ v;
          for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);
          chk ^= encodingConst;
          return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
        }
        /**
         * @__NO_SIDE_EFFECTS__
         */
        function genBech32(encoding) {
          const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;
          const _words = radix2(5);
          const fromWords = _words.decode;
          const toWords = _words.encode;
          const fromWordsUnsafe = unsafeWrapper(fromWords);
          function encode(prefix, words, limit = 90) {
            if (typeof prefix !== 'string') throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
            if (!Array.isArray(words) || words.length && typeof words[0] !== 'number') throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
            if (prefix.length === 0) throw new TypeError(`Invalid prefix length ${prefix.length}`);
            const actualLength = prefix.length + 7 + words.length;
            if (limit !== false && actualLength > limit) throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
            const lowered = prefix.toLowerCase();
            const sum = bechChecksum(lowered, words, ENCODING_CONST);
            return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
          }
          function decode(str, limit = 90) {
            if (typeof str !== 'string') throw new Error(`bech32.decode input should be string, not ${typeof str}`);
            if (str.length < 8 || limit !== false && str.length > limit) throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
            // don't allow mixed case
            const lowered = str.toLowerCase();
            if (str !== lowered && str !== str.toUpperCase()) throw new Error(`String must be lowercase or uppercase`);
            const sepIndex = lowered.lastIndexOf('1');
            if (sepIndex === 0 || sepIndex === -1) throw new Error(`Letter "1" must be present between prefix and data only`);
            const prefix = lowered.slice(0, sepIndex);
            const data = lowered.slice(sepIndex + 1);
            if (data.length < 6) throw new Error('Data must be at least 6 characters long');
            const words = BECH_ALPHABET.decode(data).slice(0, -6);
            const sum = bechChecksum(prefix, words, ENCODING_CONST);
            if (!data.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
            return {
              prefix,
              words
            };
          }
          const decodeUnsafe = unsafeWrapper(decode);
          function decodeToBytes(str) {
            const {
              prefix,
              words
            } = decode(str, false);
            return {
              prefix,
              words,
              bytes: fromWords(words)
            };
          }
          return {
            encode,
            decode,
            decodeToBytes,
            decodeUnsafe,
            fromWords,
            fromWordsUnsafe,
            toWords
          };
        }
        const bech32 = exports.bech32 = /* @__PURE__ */genBech32('bech32');
        const bech32m = exports.bech32m = /* @__PURE__ */genBech32('bech32m');
        const utf8 = exports.utf8 = {
          encode: data => new TextDecoder().decode(data),
          decode: str => new TextEncoder().encode(str)
        };
        const hex = exports.hex = /* @__PURE__ */chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize(s => {
          if (typeof s !== 'string' || s.length % 2) throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
          return s.toLowerCase();
        }));
        // prettier-ignore
        const CODERS = {
          utf8,
          hex,
          base16,
          base32,
          base64,
          base64url,
          base58,
          base58xmr
        };
        const coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';
        const bytesToString = (type, bytes) => {
          if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);
          if (!isBytes(bytes)) throw new TypeError('bytesToString() expects Uint8Array');
          return CODERS[type].encode(bytes);
        };
        exports.bytesToString = bytesToString;
        const str = exports.str = bytesToString; // as in python, but for bytes only
        const stringToBytes = (type, str) => {
          if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);
          if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');
          return CODERS[type].decode(str);
        };
        exports.stringToBytes = stringToBytes;
        const bytes = exports.bytes = stringToBytes;
      }, {}],
      118: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.HDKey = exports.HARDENED_OFFSET = void 0;
        var _hmac = require("@noble/hashes/hmac");
        var _ripemd = require("@noble/hashes/ripemd160");
        var _sha = require("@noble/hashes/sha256");
        var _sha2 = require("@noble/hashes/sha512");
        var _assert = require("@noble/hashes/_assert");
        var _utils = require("@noble/hashes/utils");
        var _secp256k = require("@noble/curves/secp256k1");
        var _modular = require("@noble/curves/abstract/modular");
        var _base = require("@scure/base");
        /*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */

        const Point = _secp256k.secp256k1.ProjectivePoint;
        const base58check = (0, _base.createBase58check)(_sha.sha256);
        function bytesToNumber(bytes) {
          return BigInt(`0x${(0, _utils.bytesToHex)(bytes)}`);
        }
        function numberToBytes(num) {
          return (0, _utils.hexToBytes)(num.toString(16).padStart(64, '0'));
        }
        const MASTER_SECRET = (0, _utils.utf8ToBytes)('Bitcoin seed');
        // Bitcoin hardcoded by default
        const BITCOIN_VERSIONS = {
          private: 0x0488ade4,
          public: 0x0488b21e
        };
        const HARDENED_OFFSET = exports.HARDENED_OFFSET = 0x80000000;
        const hash160 = data => (0, _ripemd.ripemd160)((0, _sha.sha256)(data));
        const fromU32 = data => (0, _utils.createView)(data).getUint32(0, false);
        const toU32 = n => {
          if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {
            throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);
          }
          const buf = new Uint8Array(4);
          (0, _utils.createView)(buf).setUint32(0, n, false);
          return buf;
        };
        class HDKey {
          get fingerprint() {
            if (!this.pubHash) {
              throw new Error('No publicKey set!');
            }
            return fromU32(this.pubHash);
          }
          get identifier() {
            return this.pubHash;
          }
          get pubKeyHash() {
            return this.pubHash;
          }
          get privateKey() {
            return this.privKeyBytes || null;
          }
          get publicKey() {
            return this.pubKey || null;
          }
          get privateExtendedKey() {
            const priv = this.privateKey;
            if (!priv) {
              throw new Error('No private key');
            }
            return base58check.encode(this.serialize(this.versions.private, (0, _utils.concatBytes)(new Uint8Array([0]), priv)));
          }
          get publicExtendedKey() {
            if (!this.pubKey) {
              throw new Error('No public key');
            }
            return base58check.encode(this.serialize(this.versions.public, this.pubKey));
          }
          static fromMasterSeed(seed, versions = BITCOIN_VERSIONS) {
            (0, _assert.bytes)(seed);
            if (8 * seed.length < 128 || 8 * seed.length > 512) {
              throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);
            }
            const I = (0, _hmac.hmac)(_sha2.sha512, MASTER_SECRET, seed);
            return new HDKey({
              versions,
              chainCode: I.slice(32),
              privateKey: I.slice(0, 32)
            });
          }
          static fromExtendedKey(base58key, versions = BITCOIN_VERSIONS) {
            // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
            const keyBuffer = base58check.decode(base58key);
            const keyView = (0, _utils.createView)(keyBuffer);
            const version = keyView.getUint32(0, false);
            const opt = {
              versions,
              depth: keyBuffer[4],
              parentFingerprint: keyView.getUint32(5, false),
              index: keyView.getUint32(9, false),
              chainCode: keyBuffer.slice(13, 45)
            };
            const key = keyBuffer.slice(45);
            const isPriv = key[0] === 0;
            if (version !== versions[isPriv ? 'private' : 'public']) {
              throw new Error('Version mismatch');
            }
            if (isPriv) {
              return new HDKey({
                ...opt,
                privateKey: key.slice(1)
              });
            } else {
              return new HDKey({
                ...opt,
                publicKey: key
              });
            }
          }
          static fromJSON(json) {
            return HDKey.fromExtendedKey(json.xpriv);
          }
          constructor(opt) {
            this.depth = 0;
            this.index = 0;
            this.chainCode = null;
            this.parentFingerprint = 0;
            if (!opt || typeof opt !== 'object') {
              throw new Error('HDKey.constructor must not be called directly');
            }
            this.versions = opt.versions || BITCOIN_VERSIONS;
            this.depth = opt.depth || 0;
            this.chainCode = opt.chainCode || null;
            this.index = opt.index || 0;
            this.parentFingerprint = opt.parentFingerprint || 0;
            if (!this.depth) {
              if (this.parentFingerprint || this.index) {
                throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');
              }
            }
            if (opt.publicKey && opt.privateKey) {
              throw new Error('HDKey: publicKey and privateKey at same time.');
            }
            if (opt.privateKey) {
              if (!_secp256k.secp256k1.utils.isValidPrivateKey(opt.privateKey)) {
                throw new Error('Invalid private key');
              }
              this.privKey = typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);
              this.privKeyBytes = numberToBytes(this.privKey);
              this.pubKey = _secp256k.secp256k1.getPublicKey(opt.privateKey, true);
            } else if (opt.publicKey) {
              this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point
            } else {
              throw new Error('HDKey: no public or private key provided');
            }
            this.pubHash = hash160(this.pubKey);
          }
          derive(path) {
            if (!/^[mM]'?/.test(path)) {
              throw new Error('Path must start with "m" or "M"');
            }
            if (/^[mM]'?$/.test(path)) {
              return this;
            }
            const parts = path.replace(/^[mM]'?\//, '').split('/');
            // tslint:disable-next-line
            let child = this;
            for (const c of parts) {
              const m = /^(\d+)('?)$/.exec(c);
              const m1 = m && m[1];
              if (!m || m.length !== 3 || typeof m1 !== 'string') {
                throw new Error(`Invalid child index: ${c}`);
              }
              let idx = +m1;
              if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {
                throw new Error('Invalid index');
              }
              // hardened key
              if (m[2] === "'") {
                idx += HARDENED_OFFSET;
              }
              child = child.deriveChild(idx);
            }
            return child;
          }
          deriveChild(index) {
            if (!this.pubKey || !this.chainCode) {
              throw new Error('No publicKey or chainCode set');
            }
            let data = toU32(index);
            if (index >= HARDENED_OFFSET) {
              // Hardened
              const priv = this.privateKey;
              if (!priv) {
                throw new Error('Could not derive hardened child key');
              }
              // Hardened child: 0x00 || ser256(kpar) || ser32(index)
              data = (0, _utils.concatBytes)(new Uint8Array([0]), priv, data);
            } else {
              // Normal child: serP(point(kpar)) || ser32(index)
              data = (0, _utils.concatBytes)(this.pubKey, data);
            }
            const I = (0, _hmac.hmac)(_sha2.sha512, this.chainCode, data);
            const childTweak = bytesToNumber(I.slice(0, 32));
            const chainCode = I.slice(32);
            if (!_secp256k.secp256k1.utils.isValidPrivateKey(childTweak)) {
              throw new Error('Tweak bigger than curve order');
            }
            const opt = {
              versions: this.versions,
              chainCode,
              depth: this.depth + 1,
              parentFingerprint: this.fingerprint,
              index
            };
            try {
              // Private parent key -> private child key
              if (this.privateKey) {
                const added = (0, _modular.mod)(this.privKey + childTweak, _secp256k.secp256k1.CURVE.n);
                if (!_secp256k.secp256k1.utils.isValidPrivateKey(added)) {
                  throw new Error('The tweak was out of range or the resulted private key is invalid');
                }
                opt.privateKey = added;
              } else {
                const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));
                // Cryptographically impossible: hmac-sha512 preimage would need to be found
                if (added.equals(Point.ZERO)) {
                  throw new Error('The tweak was equal to negative P, which made the result key invalid');
                }
                opt.publicKey = added.toRawBytes(true);
              }
              return new HDKey(opt);
            } catch (err) {
              return this.deriveChild(index + 1);
            }
          }
          sign(hash) {
            if (!this.privateKey) {
              throw new Error('No privateKey set!');
            }
            (0, _assert.bytes)(hash, 32);
            return _secp256k.secp256k1.sign(hash, this.privKey).toCompactRawBytes();
          }
          verify(hash, signature) {
            (0, _assert.bytes)(hash, 32);
            (0, _assert.bytes)(signature, 64);
            if (!this.publicKey) {
              throw new Error('No publicKey set!');
            }
            let sig;
            try {
              sig = _secp256k.secp256k1.Signature.fromCompact(signature);
            } catch (error) {
              return false;
            }
            return _secp256k.secp256k1.verify(sig, hash, this.publicKey);
          }
          wipePrivateData() {
            this.privKey = undefined;
            if (this.privKeyBytes) {
              this.privKeyBytes.fill(0);
              this.privKeyBytes = undefined;
            }
            return this;
          }
          toJSON() {
            return {
              xpriv: this.privateExtendedKey,
              xpub: this.publicExtendedKey
            };
          }
          serialize(version, key) {
            if (!this.chainCode) {
              throw new Error('No chainCode set');
            }
            (0, _assert.bytes)(key, 33);
            // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
            return (0, _utils.concatBytes)(toU32(version), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);
          }
        }
        exports.HDKey = HDKey;
      }, {
        "@noble/curves/abstract/modular": 95,
        "@noble/curves/secp256k1": 105,
        "@noble/hashes/_assert": 119,
        "@noble/hashes/hmac": 123,
        "@noble/hashes/ripemd160": 124,
        "@noble/hashes/sha256": 125,
        "@noble/hashes/sha512": 126,
        "@noble/hashes/utils": 127,
        "@scure/base": 117
      }],
      119: [function (require, module, exports) {
        arguments[4][98][0].apply(exports, arguments);
      }, {
        "dup": 98
      }],
      120: [function (require, module, exports) {
        arguments[4][99][0].apply(exports, arguments);
      }, {
        "./_assert.js": 119,
        "./utils.js": 127,
        "dup": 99
      }],
      121: [function (require, module, exports) {
        arguments[4][109][0].apply(exports, arguments);
      }, {
        "dup": 109
      }],
      122: [function (require, module, exports) {
        arguments[4][100][0].apply(exports, arguments);
      }, {
        "dup": 100
      }],
      123: [function (require, module, exports) {
        arguments[4][101][0].apply(exports, arguments);
      }, {
        "./_assert.js": 119,
        "./utils.js": 127,
        "dup": 101
      }],
      124: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ripemd160 = exports.RIPEMD160 = void 0;
        const _md_js_1 = require("./_md.js");
        const utils_js_1 = require("./utils.js");
        // https://homes.esat.kuleuven.be/~bosselae/ripemd160.html
        // https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf
        const Rho = /* @__PURE__ */new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
        const Id = /* @__PURE__ */new Uint8Array(new Array(16).fill(0).map((_, i) => i));
        const Pi = /* @__PURE__ */Id.map(i => (9 * i + 5) % 16);
        let idxL = [Id];
        let idxR = [Pi];
        for (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map(k => Rho[k]));
        const shifts = /* @__PURE__ */[[11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8], [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7], [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9], [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6], [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]].map(i => new Uint8Array(i));
        const shiftsL = /* @__PURE__ */idxL.map((idx, i) => idx.map(j => shifts[i][j]));
        const shiftsR = /* @__PURE__ */idxR.map((idx, i) => idx.map(j => shifts[i][j]));
        const Kl = /* @__PURE__ */new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);
        const Kr = /* @__PURE__ */new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);
        // It's called f() in spec.
        function f(group, x, y, z) {
          if (group === 0) return x ^ y ^ z;else if (group === 1) return x & y | ~x & z;else if (group === 2) return (x | ~y) ^ z;else if (group === 3) return x & z | y & ~z;else return x ^ (y | ~z);
        }
        // Temporary buffer, not used to store anything between runs
        const R_BUF = /* @__PURE__ */new Uint32Array(16);
        class RIPEMD160 extends _md_js_1.HashMD {
          constructor() {
            super(64, 20, 8, true);
            this.h0 = 0x67452301 | 0;
            this.h1 = 0xefcdab89 | 0;
            this.h2 = 0x98badcfe | 0;
            this.h3 = 0x10325476 | 0;
            this.h4 = 0xc3d2e1f0 | 0;
          }
          get() {
            const {
              h0,
              h1,
              h2,
              h3,
              h4
            } = this;
            return [h0, h1, h2, h3, h4];
          }
          set(h0, h1, h2, h3, h4) {
            this.h0 = h0 | 0;
            this.h1 = h1 | 0;
            this.h2 = h2 | 0;
            this.h3 = h3 | 0;
            this.h4 = h4 | 0;
          }
          process(view, offset) {
            for (let i = 0; i < 16; i++, offset += 4) R_BUF[i] = view.getUint32(offset, true);
            // prettier-ignore
            let al = this.h0 | 0,
              ar = al,
              bl = this.h1 | 0,
              br = bl,
              cl = this.h2 | 0,
              cr = cl,
              dl = this.h3 | 0,
              dr = dl,
              el = this.h4 | 0,
              er = el;
            // Instead of iterating 0 to 80, we split it into 5 groups
            // And use the groups in constants, functions, etc. Much simpler
            for (let group = 0; group < 5; group++) {
              const rGroup = 4 - group;
              const hbl = Kl[group],
                hbr = Kr[group]; // prettier-ignore
              const rl = idxL[group],
                rr = idxR[group]; // prettier-ignore
              const sl = shiftsL[group],
                sr = shiftsR[group]; // prettier-ignore
              for (let i = 0; i < 16; i++) {
                const tl = (0, utils_js_1.rotl)(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el | 0;
                al = el, el = dl, dl = (0, utils_js_1.rotl)(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore
              }
              // 2 loops are 10% faster
              for (let i = 0; i < 16; i++) {
                const tr = (0, utils_js_1.rotl)(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er | 0;
                ar = er, er = dr, dr = (0, utils_js_1.rotl)(cr, 10) | 0, cr = br, br = tr; // prettier-ignore
              }
            }
            // Add the compressed chunk to the current hash value
            this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
          }
          roundClean() {
            R_BUF.fill(0);
          }
          destroy() {
            this.destroyed = true;
            this.buffer.fill(0);
            this.set(0, 0, 0, 0, 0);
          }
        }
        exports.RIPEMD160 = RIPEMD160;
        /**
         * RIPEMD-160 - a hash function from 1990s.
         * @param message - msg that would be hashed
         */
        exports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
      }, {
        "./_md.js": 120,
        "./utils.js": 127
      }],
      125: [function (require, module, exports) {
        arguments[4][102][0].apply(exports, arguments);
      }, {
        "./_md.js": 120,
        "./utils.js": 127,
        "dup": 102
      }],
      126: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;
        const _md_js_1 = require("./_md.js");
        const _u64_js_1 = require("./_u64.js");
        const utils_js_1 = require("./utils.js");
        // Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
        // prettier-ignore
        const [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */(() => _u64_js_1.default.split(['0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc', '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118', '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2', '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694', '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65', '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5', '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4', '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70', '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df', '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b', '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30', '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8', '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8', '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3', '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec', '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b', '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178', '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b', '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c', '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'].map(n => BigInt(n))))();
        // Temporary buffer, not used to store anything between runs
        const SHA512_W_H = /* @__PURE__ */new Uint32Array(80);
        const SHA512_W_L = /* @__PURE__ */new Uint32Array(80);
        class SHA512 extends _md_js_1.HashMD {
          constructor() {
            super(128, 64, 16, false);
            // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
            // Also looks cleaner and easier to verify with spec.
            // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
            // h -- high 32 bits, l -- low 32 bits
            this.Ah = 0x6a09e667 | 0;
            this.Al = 0xf3bcc908 | 0;
            this.Bh = 0xbb67ae85 | 0;
            this.Bl = 0x84caa73b | 0;
            this.Ch = 0x3c6ef372 | 0;
            this.Cl = 0xfe94f82b | 0;
            this.Dh = 0xa54ff53a | 0;
            this.Dl = 0x5f1d36f1 | 0;
            this.Eh = 0x510e527f | 0;
            this.El = 0xade682d1 | 0;
            this.Fh = 0x9b05688c | 0;
            this.Fl = 0x2b3e6c1f | 0;
            this.Gh = 0x1f83d9ab | 0;
            this.Gl = 0xfb41bd6b | 0;
            this.Hh = 0x5be0cd19 | 0;
            this.Hl = 0x137e2179 | 0;
          }
          // prettier-ignore
          get() {
            const {
              Ah,
              Al,
              Bh,
              Bl,
              Ch,
              Cl,
              Dh,
              Dl,
              Eh,
              El,
              Fh,
              Fl,
              Gh,
              Gl,
              Hh,
              Hl
            } = this;
            return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
          }
          // prettier-ignore
          set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
            this.Ah = Ah | 0;
            this.Al = Al | 0;
            this.Bh = Bh | 0;
            this.Bl = Bl | 0;
            this.Ch = Ch | 0;
            this.Cl = Cl | 0;
            this.Dh = Dh | 0;
            this.Dl = Dl | 0;
            this.Eh = Eh | 0;
            this.El = El | 0;
            this.Fh = Fh | 0;
            this.Fl = Fl | 0;
            this.Gh = Gh | 0;
            this.Gl = Gl | 0;
            this.Hh = Hh | 0;
            this.Hl = Hl | 0;
          }
          process(view, offset) {
            // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
            for (let i = 0; i < 16; i++, offset += 4) {
              SHA512_W_H[i] = view.getUint32(offset);
              SHA512_W_L[i] = view.getUint32(offset += 4);
            }
            for (let i = 16; i < 80; i++) {
              // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
              const W15h = SHA512_W_H[i - 15] | 0;
              const W15l = SHA512_W_L[i - 15] | 0;
              const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
              const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
              // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
              const W2h = SHA512_W_H[i - 2] | 0;
              const W2l = SHA512_W_L[i - 2] | 0;
              const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
              const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
              // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
              const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
              const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
              SHA512_W_H[i] = SUMh | 0;
              SHA512_W_L[i] = SUMl | 0;
            }
            let {
              Ah,
              Al,
              Bh,
              Bl,
              Ch,
              Cl,
              Dh,
              Dl,
              Eh,
              El,
              Fh,
              Fl,
              Gh,
              Gl,
              Hh,
              Hl
            } = this;
            // Compression function main loop, 80 rounds
            for (let i = 0; i < 80; i++) {
              // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
              const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
              const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
              //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
              const CHIh = Eh & Fh ^ ~Eh & Gh;
              const CHIl = El & Fl ^ ~El & Gl;
              // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
              // prettier-ignore
              const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
              const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
              const T1l = T1ll | 0;
              // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
              const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
              const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
              const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
              const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
              Hh = Gh | 0;
              Hl = Gl | 0;
              Gh = Fh | 0;
              Gl = Fl | 0;
              Fh = Eh | 0;
              Fl = El | 0;
              ({
                h: Eh,
                l: El
              } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
              Dh = Ch | 0;
              Dl = Cl | 0;
              Ch = Bh | 0;
              Cl = Bl | 0;
              Bh = Ah | 0;
              Bl = Al | 0;
              const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
              Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
              Al = All | 0;
            }
            // Add the compressed chunk to the current hash value
            ({
              h: Ah,
              l: Al
            } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
            ({
              h: Bh,
              l: Bl
            } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
            ({
              h: Ch,
              l: Cl
            } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
            ({
              h: Dh,
              l: Dl
            } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
            ({
              h: Eh,
              l: El
            } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
            ({
              h: Fh,
              l: Fl
            } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
            ({
              h: Gh,
              l: Gl
            } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
            ({
              h: Hh,
              l: Hl
            } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
            this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
          }
          roundClean() {
            SHA512_W_H.fill(0);
            SHA512_W_L.fill(0);
          }
          destroy() {
            this.buffer.fill(0);
            this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          }
        }
        exports.SHA512 = SHA512;
        class SHA512_224 extends SHA512 {
          constructor() {
            super();
            // h -- high 32 bits, l -- low 32 bits
            this.Ah = 0x8c3d37c8 | 0;
            this.Al = 0x19544da2 | 0;
            this.Bh = 0x73e19966 | 0;
            this.Bl = 0x89dcd4d6 | 0;
            this.Ch = 0x1dfab7ae | 0;
            this.Cl = 0x32ff9c82 | 0;
            this.Dh = 0x679dd514 | 0;
            this.Dl = 0x582f9fcf | 0;
            this.Eh = 0x0f6d2b69 | 0;
            this.El = 0x7bd44da8 | 0;
            this.Fh = 0x77e36f73 | 0;
            this.Fl = 0x04c48942 | 0;
            this.Gh = 0x3f9d85a8 | 0;
            this.Gl = 0x6a1d36c8 | 0;
            this.Hh = 0x1112e6ad | 0;
            this.Hl = 0x91d692a1 | 0;
            this.outputLen = 28;
          }
        }
        class SHA512_256 extends SHA512 {
          constructor() {
            super();
            // h -- high 32 bits, l -- low 32 bits
            this.Ah = 0x22312194 | 0;
            this.Al = 0xfc2bf72c | 0;
            this.Bh = 0x9f555fa3 | 0;
            this.Bl = 0xc84c64c2 | 0;
            this.Ch = 0x2393b86b | 0;
            this.Cl = 0x6f53b151 | 0;
            this.Dh = 0x96387719 | 0;
            this.Dl = 0x5940eabd | 0;
            this.Eh = 0x96283ee2 | 0;
            this.El = 0xa88effe3 | 0;
            this.Fh = 0xbe5e1e25 | 0;
            this.Fl = 0x53863992 | 0;
            this.Gh = 0x2b0199fc | 0;
            this.Gl = 0x2c85b8aa | 0;
            this.Hh = 0x0eb72ddc | 0;
            this.Hl = 0x81c52ca2 | 0;
            this.outputLen = 32;
          }
        }
        class SHA384 extends SHA512 {
          constructor() {
            super();
            // h -- high 32 bits, l -- low 32 bits
            this.Ah = 0xcbbb9d5d | 0;
            this.Al = 0xc1059ed8 | 0;
            this.Bh = 0x629a292a | 0;
            this.Bl = 0x367cd507 | 0;
            this.Ch = 0x9159015a | 0;
            this.Cl = 0x3070dd17 | 0;
            this.Dh = 0x152fecd8 | 0;
            this.Dl = 0xf70e5939 | 0;
            this.Eh = 0x67332667 | 0;
            this.El = 0xffc00b31 | 0;
            this.Fh = 0x8eb44a87 | 0;
            this.Fl = 0x68581511 | 0;
            this.Gh = 0xdb0c2e0d | 0;
            this.Gl = 0x64f98fa7 | 0;
            this.Hh = 0x47b5481d | 0;
            this.Hl = 0xbefa4fa4 | 0;
            this.outputLen = 48;
          }
        }
        exports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());
        exports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());
        exports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());
        exports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());
      }, {
        "./_md.js": 120,
        "./_u64.js": 121,
        "./utils.js": 127
      }],
      127: [function (require, module, exports) {
        arguments[4][103][0].apply(exports, arguments);
      }, {
        "./_assert.js": 119,
        "@noble/hashes/crypto": 122,
        "dup": 103
      }],
      128: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.mnemonicToSeedSync = exports.mnemonicToSeed = exports.validateMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.generateMnemonic = void 0;
        /*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */
        const _assert_1 = require("@noble/hashes/_assert");
        const pbkdf2_1 = require("@noble/hashes/pbkdf2");
        const sha256_1 = require("@noble/hashes/sha256");
        const sha512_1 = require("@noble/hashes/sha512");
        const utils_1 = require("@noble/hashes/utils");
        const base_1 = require("@scure/base");
        // Japanese wordlist
        const isJapanese = wordlist => wordlist[0] === '\u3042\u3044\u3053\u304f\u3057\u3093';
        // Normalization replaces equivalent sequences of characters
        // so that any two texts that are equivalent will be reduced
        // to the same sequence of code points, called the normal form of the original text.
        function nfkd(str) {
          if (typeof str !== 'string') throw new TypeError(`Invalid mnemonic type: ${typeof str}`);
          return str.normalize('NFKD');
        }
        function normalize(str) {
          const norm = nfkd(str);
          const words = norm.split(' ');
          if (![12, 15, 18, 21, 24].includes(words.length)) throw new Error('Invalid mnemonic');
          return {
            nfkd: norm,
            words
          };
        }
        function assertEntropy(entropy) {
          _assert_1.default.bytes(entropy, 16, 20, 24, 28, 32);
        }
        /**
         * Generate x random words. Uses Cryptographically-Secure Random Number Generator.
         * @param wordlist imported wordlist for specific language
         * @param strength mnemonic strength 128-256 bits
         * @example
         * generateMnemonic(wordlist, 128)
         * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'
         */
        function generateMnemonic(wordlist, strength = 128) {
          _assert_1.default.number(strength);
          if (strength % 32 !== 0 || strength > 256) throw new TypeError('Invalid entropy');
          return entropyToMnemonic((0, utils_1.randomBytes)(strength / 8), wordlist);
        }
        exports.generateMnemonic = generateMnemonic;
        const calcChecksum = entropy => {
          // Checksum is ent.length/4 bits long
          const bitsLeft = 8 - entropy.length / 4;
          // Zero rightmost "bitsLeft" bits in byte
          // For example: bitsLeft=4 val=10111101 -> 10110000
          return new Uint8Array([(0, sha256_1.sha256)(entropy)[0] >> bitsLeft << bitsLeft]);
        };
        function getCoder(wordlist) {
          if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string') throw new Error('Worlist: expected array of 2048 strings');
          wordlist.forEach(i => {
            if (typeof i !== 'string') throw new Error(`Wordlist: non-string element: ${i}`);
          });
          return base_1.utils.chain(base_1.utils.checksum(1, calcChecksum), base_1.utils.radix2(11, true), base_1.utils.alphabet(wordlist));
        }
        /**
         * Reversible: Converts mnemonic string to raw entropy in form of byte array.
         * @param mnemonic 12-24 words
         * @param wordlist imported wordlist for specific language
         * @example
         * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';
         * mnemonicToEntropy(mnem, wordlist)
         * // Produces
         * new Uint8Array([
         *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
         *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f
         * ])
         */
        function mnemonicToEntropy(mnemonic, wordlist) {
          const {
            words
          } = normalize(mnemonic);
          const entropy = getCoder(wordlist).decode(words);
          assertEntropy(entropy);
          return entropy;
        }
        exports.mnemonicToEntropy = mnemonicToEntropy;
        /**
         * Reversible: Converts raw entropy in form of byte array to mnemonic string.
         * @param entropy byte array
         * @param wordlist imported wordlist for specific language
         * @returns 12-24 words
         * @example
         * const ent = new Uint8Array([
         *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
         *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f
         * ]);
         * entropyToMnemonic(ent, wordlist);
         * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'
         */
        function entropyToMnemonic(entropy, wordlist) {
          assertEntropy(entropy);
          const words = getCoder(wordlist).encode(entropy);
          return words.join(isJapanese(wordlist) ? '\u3000' : ' ');
        }
        exports.entropyToMnemonic = entropyToMnemonic;
        /**
         * Validates mnemonic for being 12-24 words contained in `wordlist`.
         */
        function validateMnemonic(mnemonic, wordlist) {
          try {
            mnemonicToEntropy(mnemonic, wordlist);
          } catch (e) {
            return false;
          }
          return true;
        }
        exports.validateMnemonic = validateMnemonic;
        const salt = passphrase => nfkd(`mnemonic${passphrase}`);
        /**
         * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.
         * @param mnemonic 12-24 words
         * @param passphrase string that will additionally protect the key
         * @returns 64 bytes of key data
         * @example
         * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';
         * await mnemonicToSeed(mnem, 'password');
         * // new Uint8Array([...64 bytes])
         */
        function mnemonicToSeed(mnemonic, passphrase = '') {
          return (0, pbkdf2_1.pbkdf2Async)(sha512_1.sha512, normalize(mnemonic).nfkd, salt(passphrase), {
            c: 2048,
            dkLen: 64
          });
        }
        exports.mnemonicToSeed = mnemonicToSeed;
        /**
         * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.
         * @param mnemonic 12-24 words
         * @param passphrase string that will additionally protect the key
         * @returns 64 bytes of key data
         * @example
         * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';
         * mnemonicToSeedSync(mnem, 'password');
         * // new Uint8Array([...64 bytes])
         */
        function mnemonicToSeedSync(mnemonic, passphrase = '') {
          return (0, pbkdf2_1.pbkdf2)(sha512_1.sha512, normalize(mnemonic).nfkd, salt(passphrase), {
            c: 2048,
            dkLen: 64
          });
        }
        exports.mnemonicToSeedSync = mnemonicToSeedSync;
      }, {
        "@noble/hashes/_assert": 106,
        "@noble/hashes/pbkdf2": 113,
        "@noble/hashes/sha256": 114,
        "@noble/hashes/sha512": 115,
        "@noble/hashes/utils": 116,
        "@scure/base": 117
      }],
      129: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.wordlist = void 0;
        exports.wordlist = `abandon
ability
able
about
above
absent
absorb
abstract
absurd
abuse
access
accident
account
accuse
achieve
acid
acoustic
acquire
across
act
action
actor
actress
actual
adapt
add
addict
address
adjust
admit
adult
advance
advice
aerobic
affair
afford
afraid
again
age
agent
agree
ahead
aim
air
airport
aisle
alarm
album
alcohol
alert
alien
all
alley
allow
almost
alone
alpha
already
also
alter
always
amateur
amazing
among
amount
amused
analyst
anchor
ancient
anger
angle
angry
animal
ankle
announce
annual
another
answer
antenna
antique
anxiety
any
apart
apology
appear
apple
approve
april
arch
arctic
area
arena
argue
arm
armed
armor
army
around
arrange
arrest
arrive
arrow
art
artefact
artist
artwork
ask
aspect
assault
asset
assist
assume
asthma
athlete
atom
attack
attend
attitude
attract
auction
audit
august
aunt
author
auto
autumn
average
avocado
avoid
awake
aware
away
awesome
awful
awkward
axis
baby
bachelor
bacon
badge
bag
balance
balcony
ball
bamboo
banana
banner
bar
barely
bargain
barrel
base
basic
basket
battle
beach
bean
beauty
because
become
beef
before
begin
behave
behind
believe
below
belt
bench
benefit
best
betray
better
between
beyond
bicycle
bid
bike
bind
biology
bird
birth
bitter
black
blade
blame
blanket
blast
bleak
bless
blind
blood
blossom
blouse
blue
blur
blush
board
boat
body
boil
bomb
bone
bonus
book
boost
border
boring
borrow
boss
bottom
bounce
box
boy
bracket
brain
brand
brass
brave
bread
breeze
brick
bridge
brief
bright
bring
brisk
broccoli
broken
bronze
broom
brother
brown
brush
bubble
buddy
budget
buffalo
build
bulb
bulk
bullet
bundle
bunker
burden
burger
burst
bus
business
busy
butter
buyer
buzz
cabbage
cabin
cable
cactus
cage
cake
call
calm
camera
camp
can
canal
cancel
candy
cannon
canoe
canvas
canyon
capable
capital
captain
car
carbon
card
cargo
carpet
carry
cart
case
cash
casino
castle
casual
cat
catalog
catch
category
cattle
caught
cause
caution
cave
ceiling
celery
cement
census
century
cereal
certain
chair
chalk
champion
change
chaos
chapter
charge
chase
chat
cheap
check
cheese
chef
cherry
chest
chicken
chief
child
chimney
choice
choose
chronic
chuckle
chunk
churn
cigar
cinnamon
circle
citizen
city
civil
claim
clap
clarify
claw
clay
clean
clerk
clever
click
client
cliff
climb
clinic
clip
clock
clog
close
cloth
cloud
clown
club
clump
cluster
clutch
coach
coast
coconut
code
coffee
coil
coin
collect
color
column
combine
come
comfort
comic
common
company
concert
conduct
confirm
congress
connect
consider
control
convince
cook
cool
copper
copy
coral
core
corn
correct
cost
cotton
couch
country
couple
course
cousin
cover
coyote
crack
cradle
craft
cram
crane
crash
crater
crawl
crazy
cream
credit
creek
crew
cricket
crime
crisp
critic
crop
cross
crouch
crowd
crucial
cruel
cruise
crumble
crunch
crush
cry
crystal
cube
culture
cup
cupboard
curious
current
curtain
curve
cushion
custom
cute
cycle
dad
damage
damp
dance
danger
daring
dash
daughter
dawn
day
deal
debate
debris
decade
december
decide
decline
decorate
decrease
deer
defense
define
defy
degree
delay
deliver
demand
demise
denial
dentist
deny
depart
depend
deposit
depth
deputy
derive
describe
desert
design
desk
despair
destroy
detail
detect
develop
device
devote
diagram
dial
diamond
diary
dice
diesel
diet
differ
digital
dignity
dilemma
dinner
dinosaur
direct
dirt
disagree
discover
disease
dish
dismiss
disorder
display
distance
divert
divide
divorce
dizzy
doctor
document
dog
doll
dolphin
domain
donate
donkey
donor
door
dose
double
dove
draft
dragon
drama
drastic
draw
dream
dress
drift
drill
drink
drip
drive
drop
drum
dry
duck
dumb
dune
during
dust
dutch
duty
dwarf
dynamic
eager
eagle
early
earn
earth
easily
east
easy
echo
ecology
economy
edge
edit
educate
effort
egg
eight
either
elbow
elder
electric
elegant
element
elephant
elevator
elite
else
embark
embody
embrace
emerge
emotion
employ
empower
empty
enable
enact
end
endless
endorse
enemy
energy
enforce
engage
engine
enhance
enjoy
enlist
enough
enrich
enroll
ensure
enter
entire
entry
envelope
episode
equal
equip
era
erase
erode
erosion
error
erupt
escape
essay
essence
estate
eternal
ethics
evidence
evil
evoke
evolve
exact
example
excess
exchange
excite
exclude
excuse
execute
exercise
exhaust
exhibit
exile
exist
exit
exotic
expand
expect
expire
explain
expose
express
extend
extra
eye
eyebrow
fabric
face
faculty
fade
faint
faith
fall
false
fame
family
famous
fan
fancy
fantasy
farm
fashion
fat
fatal
father
fatigue
fault
favorite
feature
february
federal
fee
feed
feel
female
fence
festival
fetch
fever
few
fiber
fiction
field
figure
file
film
filter
final
find
fine
finger
finish
fire
firm
first
fiscal
fish
fit
fitness
fix
flag
flame
flash
flat
flavor
flee
flight
flip
float
flock
floor
flower
fluid
flush
fly
foam
focus
fog
foil
fold
follow
food
foot
force
forest
forget
fork
fortune
forum
forward
fossil
foster
found
fox
fragile
frame
frequent
fresh
friend
fringe
frog
front
frost
frown
frozen
fruit
fuel
fun
funny
furnace
fury
future
gadget
gain
galaxy
gallery
game
gap
garage
garbage
garden
garlic
garment
gas
gasp
gate
gather
gauge
gaze
general
genius
genre
gentle
genuine
gesture
ghost
giant
gift
giggle
ginger
giraffe
girl
give
glad
glance
glare
glass
glide
glimpse
globe
gloom
glory
glove
glow
glue
goat
goddess
gold
good
goose
gorilla
gospel
gossip
govern
gown
grab
grace
grain
grant
grape
grass
gravity
great
green
grid
grief
grit
grocery
group
grow
grunt
guard
guess
guide
guilt
guitar
gun
gym
habit
hair
half
hammer
hamster
hand
happy
harbor
hard
harsh
harvest
hat
have
hawk
hazard
head
health
heart
heavy
hedgehog
height
hello
helmet
help
hen
hero
hidden
high
hill
hint
hip
hire
history
hobby
hockey
hold
hole
holiday
hollow
home
honey
hood
hope
horn
horror
horse
hospital
host
hotel
hour
hover
hub
huge
human
humble
humor
hundred
hungry
hunt
hurdle
hurry
hurt
husband
hybrid
ice
icon
idea
identify
idle
ignore
ill
illegal
illness
image
imitate
immense
immune
impact
impose
improve
impulse
inch
include
income
increase
index
indicate
indoor
industry
infant
inflict
inform
inhale
inherit
initial
inject
injury
inmate
inner
innocent
input
inquiry
insane
insect
inside
inspire
install
intact
interest
into
invest
invite
involve
iron
island
isolate
issue
item
ivory
jacket
jaguar
jar
jazz
jealous
jeans
jelly
jewel
job
join
joke
journey
joy
judge
juice
jump
jungle
junior
junk
just
kangaroo
keen
keep
ketchup
key
kick
kid
kidney
kind
kingdom
kiss
kit
kitchen
kite
kitten
kiwi
knee
knife
knock
know
lab
label
labor
ladder
lady
lake
lamp
language
laptop
large
later
latin
laugh
laundry
lava
law
lawn
lawsuit
layer
lazy
leader
leaf
learn
leave
lecture
left
leg
legal
legend
leisure
lemon
lend
length
lens
leopard
lesson
letter
level
liar
liberty
library
license
life
lift
light
like
limb
limit
link
lion
liquid
list
little
live
lizard
load
loan
lobster
local
lock
logic
lonely
long
loop
lottery
loud
lounge
love
loyal
lucky
luggage
lumber
lunar
lunch
luxury
lyrics
machine
mad
magic
magnet
maid
mail
main
major
make
mammal
man
manage
mandate
mango
mansion
manual
maple
marble
march
margin
marine
market
marriage
mask
mass
master
match
material
math
matrix
matter
maximum
maze
meadow
mean
measure
meat
mechanic
medal
media
melody
melt
member
memory
mention
menu
mercy
merge
merit
merry
mesh
message
metal
method
middle
midnight
milk
million
mimic
mind
minimum
minor
minute
miracle
mirror
misery
miss
mistake
mix
mixed
mixture
mobile
model
modify
mom
moment
monitor
monkey
monster
month
moon
moral
more
morning
mosquito
mother
motion
motor
mountain
mouse
move
movie
much
muffin
mule
multiply
muscle
museum
mushroom
music
must
mutual
myself
mystery
myth
naive
name
napkin
narrow
nasty
nation
nature
near
neck
need
negative
neglect
neither
nephew
nerve
nest
net
network
neutral
never
news
next
nice
night
noble
noise
nominee
noodle
normal
north
nose
notable
note
nothing
notice
novel
now
nuclear
number
nurse
nut
oak
obey
object
oblige
obscure
observe
obtain
obvious
occur
ocean
october
odor
off
offer
office
often
oil
okay
old
olive
olympic
omit
once
one
onion
online
only
open
opera
opinion
oppose
option
orange
orbit
orchard
order
ordinary
organ
orient
original
orphan
ostrich
other
outdoor
outer
output
outside
oval
oven
over
own
owner
oxygen
oyster
ozone
pact
paddle
page
pair
palace
palm
panda
panel
panic
panther
paper
parade
parent
park
parrot
party
pass
patch
path
patient
patrol
pattern
pause
pave
payment
peace
peanut
pear
peasant
pelican
pen
penalty
pencil
people
pepper
perfect
permit
person
pet
phone
photo
phrase
physical
piano
picnic
picture
piece
pig
pigeon
pill
pilot
pink
pioneer
pipe
pistol
pitch
pizza
place
planet
plastic
plate
play
please
pledge
pluck
plug
plunge
poem
poet
point
polar
pole
police
pond
pony
pool
popular
portion
position
possible
post
potato
pottery
poverty
powder
power
practice
praise
predict
prefer
prepare
present
pretty
prevent
price
pride
primary
print
priority
prison
private
prize
problem
process
produce
profit
program
project
promote
proof
property
prosper
protect
proud
provide
public
pudding
pull
pulp
pulse
pumpkin
punch
pupil
puppy
purchase
purity
purpose
purse
push
put
puzzle
pyramid
quality
quantum
quarter
question
quick
quit
quiz
quote
rabbit
raccoon
race
rack
radar
radio
rail
rain
raise
rally
ramp
ranch
random
range
rapid
rare
rate
rather
raven
raw
razor
ready
real
reason
rebel
rebuild
recall
receive
recipe
record
recycle
reduce
reflect
reform
refuse
region
regret
regular
reject
relax
release
relief
rely
remain
remember
remind
remove
render
renew
rent
reopen
repair
repeat
replace
report
require
rescue
resemble
resist
resource
response
result
retire
retreat
return
reunion
reveal
review
reward
rhythm
rib
ribbon
rice
rich
ride
ridge
rifle
right
rigid
ring
riot
ripple
risk
ritual
rival
river
road
roast
robot
robust
rocket
romance
roof
rookie
room
rose
rotate
rough
round
route
royal
rubber
rude
rug
rule
run
runway
rural
sad
saddle
sadness
safe
sail
salad
salmon
salon
salt
salute
same
sample
sand
satisfy
satoshi
sauce
sausage
save
say
scale
scan
scare
scatter
scene
scheme
school
science
scissors
scorpion
scout
scrap
screen
script
scrub
sea
search
season
seat
second
secret
section
security
seed
seek
segment
select
sell
seminar
senior
sense
sentence
series
service
session
settle
setup
seven
shadow
shaft
shallow
share
shed
shell
sheriff
shield
shift
shine
ship
shiver
shock
shoe
shoot
shop
short
shoulder
shove
shrimp
shrug
shuffle
shy
sibling
sick
side
siege
sight
sign
silent
silk
silly
silver
similar
simple
since
sing
siren
sister
situate
six
size
skate
sketch
ski
skill
skin
skirt
skull
slab
slam
sleep
slender
slice
slide
slight
slim
slogan
slot
slow
slush
small
smart
smile
smoke
smooth
snack
snake
snap
sniff
snow
soap
soccer
social
sock
soda
soft
solar
soldier
solid
solution
solve
someone
song
soon
sorry
sort
soul
sound
soup
source
south
space
spare
spatial
spawn
speak
special
speed
spell
spend
sphere
spice
spider
spike
spin
spirit
split
spoil
sponsor
spoon
sport
spot
spray
spread
spring
spy
square
squeeze
squirrel
stable
stadium
staff
stage
stairs
stamp
stand
start
state
stay
steak
steel
stem
step
stereo
stick
still
sting
stock
stomach
stone
stool
story
stove
strategy
street
strike
strong
struggle
student
stuff
stumble
style
subject
submit
subway
success
such
sudden
suffer
sugar
suggest
suit
summer
sun
sunny
sunset
super
supply
supreme
sure
surface
surge
surprise
surround
survey
suspect
sustain
swallow
swamp
swap
swarm
swear
sweet
swift
swim
swing
switch
sword
symbol
symptom
syrup
system
table
tackle
tag
tail
talent
talk
tank
tape
target
task
taste
tattoo
taxi
teach
team
tell
ten
tenant
tennis
tent
term
test
text
thank
that
theme
then
theory
there
they
thing
this
thought
three
thrive
throw
thumb
thunder
ticket
tide
tiger
tilt
timber
time
tiny
tip
tired
tissue
title
toast
tobacco
today
toddler
toe
together
toilet
token
tomato
tomorrow
tone
tongue
tonight
tool
tooth
top
topic
topple
torch
tornado
tortoise
toss
total
tourist
toward
tower
town
toy
track
trade
traffic
tragic
train
transfer
trap
trash
travel
tray
treat
tree
trend
trial
tribe
trick
trigger
trim
trip
trophy
trouble
truck
true
truly
trumpet
trust
truth
try
tube
tuition
tumble
tuna
tunnel
turkey
turn
turtle
twelve
twenty
twice
twin
twist
two
type
typical
ugly
umbrella
unable
unaware
uncle
uncover
under
undo
unfair
unfold
unhappy
uniform
unique
unit
universe
unknown
unlock
until
unusual
unveil
update
upgrade
uphold
upon
upper
upset
urban
urge
usage
use
used
useful
useless
usual
utility
vacant
vacuum
vague
valid
valley
valve
van
vanish
vapor
various
vast
vault
vehicle
velvet
vendor
venture
venue
verb
verify
version
very
vessel
veteran
viable
vibrant
vicious
victory
video
view
village
vintage
violin
virtual
virus
visa
visit
visual
vital
vivid
vocal
voice
void
volcano
volume
vote
voyage
wage
wagon
wait
walk
wall
walnut
want
warfare
warm
warrior
wash
wasp
waste
water
wave
way
wealth
weapon
wear
weasel
weather
web
wedding
weekend
weird
welcome
west
wet
whale
what
wheat
wheel
when
where
whip
whisper
wide
width
wife
wild
will
win
window
wine
wing
wink
winner
winter
wire
wisdom
wise
wish
witness
wolf
woman
wonder
wood
wool
word
work
world
worry
worth
wrap
wreck
wrestle
wrist
write
wrong
yard
year
yellow
you
young
youth
zebra
zero
zone
zoo`.split('\n');
      }, {}],
      130: [function (require, module, exports) {
        'use strict';

        // base-x encoding / decoding
        // Copyright (c) 2018 base-x contributors
        // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
        // Distributed under the MIT software license, see the accompanying
        // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
        function base(ALPHABET) {
          if (ALPHABET.length >= 255) {
            throw new TypeError('Alphabet too long');
          }
          var BASE_MAP = new Uint8Array(256);
          for (var j = 0; j < BASE_MAP.length; j++) {
            BASE_MAP[j] = 255;
          }
          for (var i = 0; i < ALPHABET.length; i++) {
            var x = ALPHABET.charAt(i);
            var xc = x.charCodeAt(0);
            if (BASE_MAP[xc] !== 255) {
              throw new TypeError(x + ' is ambiguous');
            }
            BASE_MAP[xc] = i;
          }
          var BASE = ALPHABET.length;
          var LEADER = ALPHABET.charAt(0);
          var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
          var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
          function encode(source) {
            if (source instanceof Uint8Array) {} else if (ArrayBuffer.isView(source)) {
              source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
            } else if (Array.isArray(source)) {
              source = Uint8Array.from(source);
            }
            if (!(source instanceof Uint8Array)) {
              throw new TypeError('Expected Uint8Array');
            }
            if (source.length === 0) {
              return '';
            }
            // Skip & count leading zeroes.
            var zeroes = 0;
            var length = 0;
            var pbegin = 0;
            var pend = source.length;
            while (pbegin !== pend && source[pbegin] === 0) {
              pbegin++;
              zeroes++;
            }
            // Allocate enough space in big-endian base58 representation.
            var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
            var b58 = new Uint8Array(size);
            // Process the bytes.
            while (pbegin !== pend) {
              var carry = source[pbegin];
              // Apply "b58 = b58 * 256 + ch".
              var i = 0;
              for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
              }
              if (carry !== 0) {
                throw new Error('Non-zero carry');
              }
              length = i;
              pbegin++;
            }
            // Skip leading zeroes in base58 result.
            var it2 = size - length;
            while (it2 !== size && b58[it2] === 0) {
              it2++;
            }
            // Translate the result into a string.
            var str = LEADER.repeat(zeroes);
            for (; it2 < size; ++it2) {
              str += ALPHABET.charAt(b58[it2]);
            }
            return str;
          }
          function decodeUnsafe(source) {
            if (typeof source !== 'string') {
              throw new TypeError('Expected String');
            }
            if (source.length === 0) {
              return new Uint8Array();
            }
            var psz = 0;
            // Skip and count leading '1's.
            var zeroes = 0;
            var length = 0;
            while (source[psz] === LEADER) {
              zeroes++;
              psz++;
            }
            // Allocate enough space in big-endian base256 representation.
            var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.
            var b256 = new Uint8Array(size);
            // Process the characters.
            while (source[psz]) {
              // Decode character
              var carry = BASE_MAP[source.charCodeAt(psz)];
              // Invalid character
              if (carry === 255) {
                return;
              }
              var i = 0;
              for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
              }
              if (carry !== 0) {
                throw new Error('Non-zero carry');
              }
              length = i;
              psz++;
            }
            // Skip leading zeroes in b256.
            var it4 = size - length;
            while (it4 !== size && b256[it4] === 0) {
              it4++;
            }
            var vch = new Uint8Array(zeroes + (size - it4));
            var j = zeroes;
            while (it4 !== size) {
              vch[j++] = b256[it4++];
            }
            return vch;
          }
          function decode(string) {
            var buffer = decodeUnsafe(string);
            if (buffer) {
              return buffer;
            }
            throw new Error('Non-base' + BASE + ' character');
          }
          return {
            encode: encode,
            decodeUnsafe: decodeUnsafe,
            decode: decode
          };
        }
        module.exports = base;
      }, {}],
      131: [function (require, module, exports) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.bech32m = exports.bech32 = void 0;
        const ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
        const ALPHABET_MAP = {};
        for (let z = 0; z < ALPHABET.length; z++) {
          const x = ALPHABET.charAt(z);
          ALPHABET_MAP[x] = z;
        }
        function polymodStep(pre) {
          const b = pre >> 25;
          return (pre & 0x1ffffff) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;
        }
        function prefixChk(prefix) {
          let chk = 1;
          for (let i = 0; i < prefix.length; ++i) {
            const c = prefix.charCodeAt(i);
            if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')';
            chk = polymodStep(chk) ^ c >> 5;
          }
          chk = polymodStep(chk);
          for (let i = 0; i < prefix.length; ++i) {
            const v = prefix.charCodeAt(i);
            chk = polymodStep(chk) ^ v & 0x1f;
          }
          return chk;
        }
        function convert(data, inBits, outBits, pad) {
          let value = 0;
          let bits = 0;
          const maxV = (1 << outBits) - 1;
          const result = [];
          for (let i = 0; i < data.length; ++i) {
            value = value << inBits | data[i];
            bits += inBits;
            while (bits >= outBits) {
              bits -= outBits;
              result.push(value >> bits & maxV);
            }
          }
          if (pad) {
            if (bits > 0) {
              result.push(value << outBits - bits & maxV);
            }
          } else {
            if (bits >= inBits) return 'Excess padding';
            if (value << outBits - bits & maxV) return 'Non-zero padding';
          }
          return result;
        }
        function toWords(bytes) {
          return convert(bytes, 8, 5, true);
        }
        function fromWordsUnsafe(words) {
          const res = convert(words, 5, 8, false);
          if (Array.isArray(res)) return res;
        }
        function fromWords(words) {
          const res = convert(words, 5, 8, false);
          if (Array.isArray(res)) return res;
          throw new Error(res);
        }
        function getLibraryFromEncoding(encoding) {
          let ENCODING_CONST;
          if (encoding === 'bech32') {
            ENCODING_CONST = 1;
          } else {
            ENCODING_CONST = 0x2bc830a3;
          }
          function encode(prefix, words, LIMIT) {
            LIMIT = LIMIT || 90;
            if (prefix.length + 7 + words.length > LIMIT) throw new TypeError('Exceeds length limit');
            prefix = prefix.toLowerCase();
            // determine chk mod
            let chk = prefixChk(prefix);
            if (typeof chk === 'string') throw new Error(chk);
            let result = prefix + '1';
            for (let i = 0; i < words.length; ++i) {
              const x = words[i];
              if (x >> 5 !== 0) throw new Error('Non 5-bit word');
              chk = polymodStep(chk) ^ x;
              result += ALPHABET.charAt(x);
            }
            for (let i = 0; i < 6; ++i) {
              chk = polymodStep(chk);
            }
            chk ^= ENCODING_CONST;
            for (let i = 0; i < 6; ++i) {
              const v = chk >> (5 - i) * 5 & 0x1f;
              result += ALPHABET.charAt(v);
            }
            return result;
          }
          function __decode(str, LIMIT) {
            LIMIT = LIMIT || 90;
            if (str.length < 8) return str + ' too short';
            if (str.length > LIMIT) return 'Exceeds length limit';
            // don't allow mixed case
            const lowered = str.toLowerCase();
            const uppered = str.toUpperCase();
            if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str;
            str = lowered;
            const split = str.lastIndexOf('1');
            if (split === -1) return 'No separator character for ' + str;
            if (split === 0) return 'Missing prefix for ' + str;
            const prefix = str.slice(0, split);
            const wordChars = str.slice(split + 1);
            if (wordChars.length < 6) return 'Data too short';
            let chk = prefixChk(prefix);
            if (typeof chk === 'string') return chk;
            const words = [];
            for (let i = 0; i < wordChars.length; ++i) {
              const c = wordChars.charAt(i);
              const v = ALPHABET_MAP[c];
              if (v === undefined) return 'Unknown character ' + c;
              chk = polymodStep(chk) ^ v;
              // not in the checksum?
              if (i + 6 >= wordChars.length) continue;
              words.push(v);
            }
            if (chk !== ENCODING_CONST) return 'Invalid checksum for ' + str;
            return {
              prefix,
              words
            };
          }
          function decodeUnsafe(str, LIMIT) {
            const res = __decode(str, LIMIT);
            if (typeof res === 'object') return res;
          }
          function decode(str, LIMIT) {
            const res = __decode(str, LIMIT);
            if (typeof res === 'object') return res;
            throw new Error(res);
          }
          return {
            decodeUnsafe,
            decode,
            encode,
            toWords,
            fromWordsUnsafe,
            fromWords
          };
        }
        exports.bech32 = getLibraryFromEncoding('bech32');
        exports.bech32m = getLibraryFromEncoding('bech32m');
      }, {}],
      132: [function (require, module, exports) {
        (function (module, exports) {
          'use strict';

          // Utils
          function assert(val, msg) {
            if (!val) throw new Error(msg || 'Assertion failed');
          }

          // Could use `inherits` module, but don't want to move from single file
          // architecture yet.
          function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }

          // BN

          function BN(number, base, endian) {
            if (BN.isBN(number)) {
              return number;
            }
            this.negative = 0;
            this.words = null;
            this.length = 0;

            // Reduction context
            this.red = null;
            if (number !== null) {
              if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
              }
              this._init(number || 0, base || 10, endian || 'be');
            }
          }
          if (typeof module === 'object') {
            module.exports = BN;
          } else {
            exports.BN = BN;
          }
          BN.BN = BN;
          BN.wordSize = 26;
          var Buffer;
          try {
            if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
              Buffer = window.Buffer;
            } else {
              Buffer = require('buffer').Buffer;
            }
          } catch (e) {}
          BN.isBN = function isBN(num) {
            if (num instanceof BN) {
              return true;
            }
            return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
          };
          BN.max = function max(left, right) {
            if (left.cmp(right) > 0) return left;
            return right;
          };
          BN.min = function min(left, right) {
            if (left.cmp(right) < 0) return left;
            return right;
          };
          BN.prototype._init = function init(number, base, endian) {
            if (typeof number === 'number') {
              return this._initNumber(number, base, endian);
            }
            if (typeof number === 'object') {
              return this._initArray(number, base, endian);
            }
            if (base === 'hex') {
              base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);
            number = number.toString().replace(/\s+/g, '');
            var start = 0;
            if (number[0] === '-') {
              start++;
              this.negative = 1;
            }
            if (start < number.length) {
              if (base === 16) {
                this._parseHex(number, start, endian);
              } else {
                this._parseBase(number, base, start);
                if (endian === 'le') {
                  this._initArray(this.toArray(), base, endian);
                }
              }
            }
          };
          BN.prototype._initNumber = function _initNumber(number, base, endian) {
            if (number < 0) {
              this.negative = 1;
              number = -number;
            }
            if (number < 0x4000000) {
              this.words = [number & 0x3ffffff];
              this.length = 1;
            } else if (number < 0x10000000000000) {
              this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
              this.length = 2;
            } else {
              assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
              this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
              this.length = 3;
            }
            if (endian !== 'le') return;

            // Reverse the bytes
            this._initArray(this.toArray(), base, endian);
          };
          BN.prototype._initArray = function _initArray(number, base, endian) {
            // Perhaps a Uint8Array
            assert(typeof number.length === 'number');
            if (number.length <= 0) {
              this.words = [0];
              this.length = 1;
              return this;
            }
            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }
            var j, w;
            var off = 0;
            if (endian === 'be') {
              for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                this.words[j] |= w << off & 0x3ffffff;
                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            } else if (endian === 'le') {
              for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                this.words[j] |= w << off & 0x3ffffff;
                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            }
            return this._strip();
          };
          function parseHex4Bits(string, index) {
            var c = string.charCodeAt(index);
            // '0' - '9'
            if (c >= 48 && c <= 57) {
              return c - 48;
              // 'A' - 'F'
            } else if (c >= 65 && c <= 70) {
              return c - 55;
              // 'a' - 'f'
            } else if (c >= 97 && c <= 102) {
              return c - 87;
            } else {
              assert(false, 'Invalid character in ' + string);
            }
          }
          function parseHexByte(string, lowerBound, index) {
            var r = parseHex4Bits(string, index);
            if (index - 1 >= lowerBound) {
              r |= parseHex4Bits(string, index - 1) << 4;
            }
            return r;
          }
          BN.prototype._parseHex = function _parseHex(number, start, endian) {
            // Create possibly bigger array to ensure that it fits the number
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            // 24-bits chunks
            var off = 0;
            var j = 0;
            var w;
            if (endian === 'be') {
              for (i = number.length - 1; i >= start; i -= 2) {
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                  off -= 18;
                  j += 1;
                  this.words[j] |= w >>> 26;
                } else {
                  off += 8;
                }
              }
            } else {
              var parseLength = number.length - start;
              for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                  off -= 18;
                  j += 1;
                  this.words[j] |= w >>> 26;
                } else {
                  off += 8;
                }
              }
            }
            this._strip();
          };
          function parseBase(str, start, end, mul) {
            var r = 0;
            var b = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;
              r *= mul;

              // 'a'
              if (c >= 49) {
                b = c - 49 + 0xa;

                // 'A'
              } else if (c >= 17) {
                b = c - 17 + 0xa;

                // '0' - '9'
              } else {
                b = c;
              }
              assert(c >= 0 && b < mul, 'Invalid character');
              r += b;
            }
            return r;
          }
          BN.prototype._parseBase = function _parseBase(number, base, start) {
            // Initialize as zero
            this.words = [0];
            this.length = 1;

            // Find length of limb in base
            for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
              limbLen++;
            }
            limbLen--;
            limbPow = limbPow / base | 0;
            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;
            var word = 0;
            for (var i = start; i < end; i += limbLen) {
              word = parseBase(number, i, i + limbLen, base);
              this.imuln(limbPow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
            if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);
              for (i = 0; i < mod; i++) {
                pow *= base;
              }
              this.imuln(pow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
            this._strip();
          };
          BN.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
          };
          function move(dest, src) {
            dest.words = src.words;
            dest.length = src.length;
            dest.negative = src.negative;
            dest.red = src.red;
          }
          BN.prototype._move = function _move(dest) {
            move(dest, this);
          };
          BN.prototype.clone = function clone() {
            var r = new BN(null);
            this.copy(r);
            return r;
          };
          BN.prototype._expand = function _expand(size) {
            while (this.length < size) {
              this.words[this.length++] = 0;
            }
            return this;
          };

          // Remove leading `0` from `this`
          BN.prototype._strip = function strip() {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
              this.length--;
            }
            return this._normSign();
          };
          BN.prototype._normSign = function _normSign() {
            // -0 = 0
            if (this.length === 1 && this.words[0] === 0) {
              this.negative = 0;
            }
            return this;
          };

          // Check Symbol.for because not everywhere where Symbol defined
          // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
          if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
            try {
              BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
            } catch (e) {
              BN.prototype.inspect = inspect;
            }
          } else {
            BN.prototype.inspect = inspect;
          }
          function inspect() {
            return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
          }

          /*
           var zeros = [];
          var groupSizes = [];
          var groupBases = [];
           var s = '';
          var i = -1;
          while (++i < BN.wordSize) {
            zeros[i] = s;
            s += '0';
          }
          groupSizes[0] = 0;
          groupSizes[1] = 0;
          groupBases[0] = 0;
          groupBases[1] = 0;
          var base = 2 - 1;
          while (++base < 36 + 1) {
            var groupSize = 0;
            var groupBase = 1;
            while (groupBase < (1 << BN.wordSize) / base) {
              groupBase *= base;
              groupSize += 1;
            }
            groupSizes[base] = groupSize;
            groupBases[base] = groupBase;
          }
           */

          var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
          var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
          var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
          BN.prototype.toString = function toString(base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;
            var out;
            if (base === 16 || base === 'hex') {
              out = '';
              var off = 0;
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                  off -= 26;
                  i--;
                }
                if (carry !== 0 || i !== this.length - 1) {
                  out = zeros[6 - word.length] + word + out;
                } else {
                  out = word + out;
                }
              }
              if (carry !== 0) {
                out = carry.toString(16) + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }
            if (base === (base | 0) && base >= 2 && base <= 36) {
              // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
              var groupSize = groupSizes[base];
              // var groupBase = Math.pow(base, groupSize);
              var groupBase = groupBases[base];
              out = '';
              var c = this.clone();
              c.negative = 0;
              while (!c.isZero()) {
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) {
                  out = zeros[groupSize - r.length] + r + out;
                } else {
                  out = r + out;
                }
              }
              if (this.isZero()) {
                out = '0' + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }
            assert(false, 'Base should be between 2 and 36');
          };
          BN.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
              ret += this.words[1] * 0x4000000;
            } else if (this.length === 3 && this.words[2] === 0x01) {
              // NOTE: at this stage it is known that the top bit is set
              ret += 0x10000000000000 + this.words[1] * 0x4000000;
            } else if (this.length > 2) {
              assert(false, 'Number can only safely store up to 53 bits');
            }
            return this.negative !== 0 ? -ret : ret;
          };
          BN.prototype.toJSON = function toJSON() {
            return this.toString(16, 2);
          };
          if (Buffer) {
            BN.prototype.toBuffer = function toBuffer(endian, length) {
              return this.toArrayLike(Buffer, endian, length);
            };
          }
          BN.prototype.toArray = function toArray(endian, length) {
            return this.toArrayLike(Array, endian, length);
          };
          var allocate = function allocate(ArrayType, size) {
            if (ArrayType.allocUnsafe) {
              return ArrayType.allocUnsafe(size);
            }
            return new ArrayType(size);
          };
          BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            this._strip();
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, 'byte array longer than desired length');
            assert(reqLength > 0, 'Requested array length <= 0');
            var res = allocate(ArrayType, reqLength);
            var postfix = endian === 'le' ? 'LE' : 'BE';
            this['_toArrayLike' + postfix](res, byteLength);
            return res;
          };
          BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
            var position = 0;
            var carry = 0;
            for (var i = 0, shift = 0; i < this.length; i++) {
              var word = this.words[i] << shift | carry;
              res[position++] = word & 0xff;
              if (position < res.length) {
                res[position++] = word >> 8 & 0xff;
              }
              if (position < res.length) {
                res[position++] = word >> 16 & 0xff;
              }
              if (shift === 6) {
                if (position < res.length) {
                  res[position++] = word >> 24 & 0xff;
                }
                carry = 0;
                shift = 0;
              } else {
                carry = word >>> 24;
                shift += 2;
              }
            }
            if (position < res.length) {
              res[position++] = carry;
              while (position < res.length) {
                res[position++] = 0;
              }
            }
          };
          BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
            var position = res.length - 1;
            var carry = 0;
            for (var i = 0, shift = 0; i < this.length; i++) {
              var word = this.words[i] << shift | carry;
              res[position--] = word & 0xff;
              if (position >= 0) {
                res[position--] = word >> 8 & 0xff;
              }
              if (position >= 0) {
                res[position--] = word >> 16 & 0xff;
              }
              if (shift === 6) {
                if (position >= 0) {
                  res[position--] = word >> 24 & 0xff;
                }
                carry = 0;
                shift = 0;
              } else {
                carry = word >>> 24;
                shift += 2;
              }
            }
            if (position >= 0) {
              res[position--] = carry;
              while (position >= 0) {
                res[position--] = 0;
              }
            }
          };
          if (Math.clz32) {
            BN.prototype._countBits = function _countBits(w) {
              return 32 - Math.clz32(w);
            };
          } else {
            BN.prototype._countBits = function _countBits(w) {
              var t = w;
              var r = 0;
              if (t >= 0x1000) {
                r += 13;
                t >>>= 13;
              }
              if (t >= 0x40) {
                r += 7;
                t >>>= 7;
              }
              if (t >= 0x8) {
                r += 4;
                t >>>= 4;
              }
              if (t >= 0x02) {
                r += 2;
                t >>>= 2;
              }
              return r + t;
            };
          }
          BN.prototype._zeroBits = function _zeroBits(w) {
            // Short-cut
            if (w === 0) return 26;
            var t = w;
            var r = 0;
            if ((t & 0x1fff) === 0) {
              r += 13;
              t >>>= 13;
            }
            if ((t & 0x7f) === 0) {
              r += 7;
              t >>>= 7;
            }
            if ((t & 0xf) === 0) {
              r += 4;
              t >>>= 4;
            }
            if ((t & 0x3) === 0) {
              r += 2;
              t >>>= 2;
            }
            if ((t & 0x1) === 0) {
              r++;
            }
            return r;
          };

          // Return number of used bits in a BN
          BN.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
          };
          function toBitArray(num) {
            var w = new Array(num.bitLength());
            for (var bit = 0; bit < w.length; bit++) {
              var off = bit / 26 | 0;
              var wbit = bit % 26;
              w[bit] = num.words[off] >>> wbit & 0x01;
            }
            return w;
          }

          // Number of trailing zero bits
          BN.prototype.zeroBits = function zeroBits() {
            if (this.isZero()) return 0;
            var r = 0;
            for (var i = 0; i < this.length; i++) {
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26) break;
            }
            return r;
          };
          BN.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
          };
          BN.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
              return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
          };
          BN.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
              return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
          };
          BN.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
          };

          // Return negative clone of `this`
          BN.prototype.neg = function neg() {
            return this.clone().ineg();
          };
          BN.prototype.ineg = function ineg() {
            if (!this.isZero()) {
              this.negative ^= 1;
            }
            return this;
          };

          // Or `num` with `this` in-place
          BN.prototype.iuor = function iuor(num) {
            while (this.length < num.length) {
              this.words[this.length++] = 0;
            }
            for (var i = 0; i < num.length; i++) {
              this.words[i] = this.words[i] | num.words[i];
            }
            return this._strip();
          };
          BN.prototype.ior = function ior(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
          };

          // Or `num` with `this`
          BN.prototype.or = function or(num) {
            if (this.length > num.length) return this.clone().ior(num);
            return num.clone().ior(this);
          };
          BN.prototype.uor = function uor(num) {
            if (this.length > num.length) return this.clone().iuor(num);
            return num.clone().iuor(this);
          };

          // And `num` with `this` in-place
          BN.prototype.iuand = function iuand(num) {
            // b = min-length(num, this)
            var b;
            if (this.length > num.length) {
              b = num;
            } else {
              b = this;
            }
            for (var i = 0; i < b.length; i++) {
              this.words[i] = this.words[i] & num.words[i];
            }
            this.length = b.length;
            return this._strip();
          };
          BN.prototype.iand = function iand(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
          };

          // And `num` with `this`
          BN.prototype.and = function and(num) {
            if (this.length > num.length) return this.clone().iand(num);
            return num.clone().iand(this);
          };
          BN.prototype.uand = function uand(num) {
            if (this.length > num.length) return this.clone().iuand(num);
            return num.clone().iuand(this);
          };

          // Xor `num` with `this` in-place
          BN.prototype.iuxor = function iuxor(num) {
            // a.length > b.length
            var a;
            var b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            for (var i = 0; i < b.length; i++) {
              this.words[i] = a.words[i] ^ b.words[i];
            }
            if (this !== a) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }
            this.length = a.length;
            return this._strip();
          };
          BN.prototype.ixor = function ixor(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
          };

          // Xor `num` with `this`
          BN.prototype.xor = function xor(num) {
            if (this.length > num.length) return this.clone().ixor(num);
            return num.clone().ixor(this);
          };
          BN.prototype.uxor = function uxor(num) {
            if (this.length > num.length) return this.clone().iuxor(num);
            return num.clone().iuxor(this);
          };

          // Not ``this`` with ``width`` bitwidth
          BN.prototype.inotn = function inotn(width) {
            assert(typeof width === 'number' && width >= 0);
            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;

            // Extend the buffer with leading zeroes
            this._expand(bytesNeeded);
            if (bitsLeft > 0) {
              bytesNeeded--;
            }

            // Handle complete words
            for (var i = 0; i < bytesNeeded; i++) {
              this.words[i] = ~this.words[i] & 0x3ffffff;
            }

            // Handle the residue
            if (bitsLeft > 0) {
              this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
            }

            // And remove leading zeroes
            return this._strip();
          };
          BN.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
          };

          // Set `bit` of `this`
          BN.prototype.setn = function setn(bit, val) {
            assert(typeof bit === 'number' && bit >= 0);
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            this._expand(off + 1);
            if (val) {
              this.words[off] = this.words[off] | 1 << wbit;
            } else {
              this.words[off] = this.words[off] & ~(1 << wbit);
            }
            return this._strip();
          };

          // Add `num` to `this` in-place
          BN.prototype.iadd = function iadd(num) {
            var r;

            // negative + positive
            if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();

              // positive + negative
            } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
            }

            // a.length > b.length
            var a, b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }
            this.length = a.length;
            if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
              // Copy the rest of the words
            } else if (a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }
            return this;
          };

          // Add `num` to `this`
          BN.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
            } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
            }
            if (this.length > num.length) return this.clone().iadd(num);
            return num.clone().iadd(this);
          };

          // Subtract `num` from `this` in-place
          BN.prototype.isub = function isub(num) {
            // this - (-num) = this + num
            if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();

              // -this - num = -(this + num)
            } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
            }

            // At this point both numbers are positive
            var cmp = this.cmp(num);

            // Optimization - zeroify
            if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
            }

            // a > b
            var a, b;
            if (cmp > 0) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }

            // Copy rest of the words
            if (carry === 0 && i < a.length && a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }
            this.length = Math.max(this.length, i);
            if (a !== this) {
              this.negative = 1;
            }
            return this._strip();
          };

          // Subtract `num` from `this`
          BN.prototype.sub = function sub(num) {
            return this.clone().isub(num);
          };
          function smallMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            var len = self.length + num.length | 0;
            out.length = len;
            len = len - 1 | 0;

            // Peel one iteration (compiler can't do it, because of code complexity)
            var a = self.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;
            var lo = r & 0x3ffffff;
            var carry = r / 0x4000000 | 0;
            out.words[0] = lo;
            for (var k = 1; k < len; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = carry >>> 26;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
            }
            if (carry !== 0) {
              out.words[k] = carry | 0;
            } else {
              out.length--;
            }
            return out._strip();
          }

          // TODO(indutny): it may be reasonable to omit it for users who don't need
          // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
          // multiplication (like elliptic secp256k1).
          var comb10MulTo = function comb10MulTo(self, num, out) {
            var a = self.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 0x1fff;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 0x1fff;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 0x1fff;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 0x1fff;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 0x1fff;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 0x1fff;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 0x1fff;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 0x1fff;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 0x1fff;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 0x1fff;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 0x1fff;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 0x1fff;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 0x1fff;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 0x1fff;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 0x1fff;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 0x1fff;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 0x1fff;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 0x1fff;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 0x1fff;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 0x1fff;
            var bh9 = b9 >>> 13;
            out.negative = self.negative ^ num.negative;
            out.length = 19;
            /* k = 0 */
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = mid + Math.imul(ah0, bl0) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
            w0 &= 0x3ffffff;
            /* k = 1 */
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = mid + Math.imul(ah1, bl0) | 0;
            hi = Math.imul(ah1, bh0);
            lo = lo + Math.imul(al0, bl1) | 0;
            mid = mid + Math.imul(al0, bh1) | 0;
            mid = mid + Math.imul(ah0, bl1) | 0;
            hi = hi + Math.imul(ah0, bh1) | 0;
            var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
            w1 &= 0x3ffffff;
            /* k = 2 */
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = mid + Math.imul(ah2, bl0) | 0;
            hi = Math.imul(ah2, bh0);
            lo = lo + Math.imul(al1, bl1) | 0;
            mid = mid + Math.imul(al1, bh1) | 0;
            mid = mid + Math.imul(ah1, bl1) | 0;
            hi = hi + Math.imul(ah1, bh1) | 0;
            lo = lo + Math.imul(al0, bl2) | 0;
            mid = mid + Math.imul(al0, bh2) | 0;
            mid = mid + Math.imul(ah0, bl2) | 0;
            hi = hi + Math.imul(ah0, bh2) | 0;
            var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
            w2 &= 0x3ffffff;
            /* k = 3 */
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = mid + Math.imul(ah3, bl0) | 0;
            hi = Math.imul(ah3, bh0);
            lo = lo + Math.imul(al2, bl1) | 0;
            mid = mid + Math.imul(al2, bh1) | 0;
            mid = mid + Math.imul(ah2, bl1) | 0;
            hi = hi + Math.imul(ah2, bh1) | 0;
            lo = lo + Math.imul(al1, bl2) | 0;
            mid = mid + Math.imul(al1, bh2) | 0;
            mid = mid + Math.imul(ah1, bl2) | 0;
            hi = hi + Math.imul(ah1, bh2) | 0;
            lo = lo + Math.imul(al0, bl3) | 0;
            mid = mid + Math.imul(al0, bh3) | 0;
            mid = mid + Math.imul(ah0, bl3) | 0;
            hi = hi + Math.imul(ah0, bh3) | 0;
            var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
            w3 &= 0x3ffffff;
            /* k = 4 */
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = mid + Math.imul(ah4, bl0) | 0;
            hi = Math.imul(ah4, bh0);
            lo = lo + Math.imul(al3, bl1) | 0;
            mid = mid + Math.imul(al3, bh1) | 0;
            mid = mid + Math.imul(ah3, bl1) | 0;
            hi = hi + Math.imul(ah3, bh1) | 0;
            lo = lo + Math.imul(al2, bl2) | 0;
            mid = mid + Math.imul(al2, bh2) | 0;
            mid = mid + Math.imul(ah2, bl2) | 0;
            hi = hi + Math.imul(ah2, bh2) | 0;
            lo = lo + Math.imul(al1, bl3) | 0;
            mid = mid + Math.imul(al1, bh3) | 0;
            mid = mid + Math.imul(ah1, bl3) | 0;
            hi = hi + Math.imul(ah1, bh3) | 0;
            lo = lo + Math.imul(al0, bl4) | 0;
            mid = mid + Math.imul(al0, bh4) | 0;
            mid = mid + Math.imul(ah0, bl4) | 0;
            hi = hi + Math.imul(ah0, bh4) | 0;
            var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
            w4 &= 0x3ffffff;
            /* k = 5 */
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = mid + Math.imul(ah5, bl0) | 0;
            hi = Math.imul(ah5, bh0);
            lo = lo + Math.imul(al4, bl1) | 0;
            mid = mid + Math.imul(al4, bh1) | 0;
            mid = mid + Math.imul(ah4, bl1) | 0;
            hi = hi + Math.imul(ah4, bh1) | 0;
            lo = lo + Math.imul(al3, bl2) | 0;
            mid = mid + Math.imul(al3, bh2) | 0;
            mid = mid + Math.imul(ah3, bl2) | 0;
            hi = hi + Math.imul(ah3, bh2) | 0;
            lo = lo + Math.imul(al2, bl3) | 0;
            mid = mid + Math.imul(al2, bh3) | 0;
            mid = mid + Math.imul(ah2, bl3) | 0;
            hi = hi + Math.imul(ah2, bh3) | 0;
            lo = lo + Math.imul(al1, bl4) | 0;
            mid = mid + Math.imul(al1, bh4) | 0;
            mid = mid + Math.imul(ah1, bl4) | 0;
            hi = hi + Math.imul(ah1, bh4) | 0;
            lo = lo + Math.imul(al0, bl5) | 0;
            mid = mid + Math.imul(al0, bh5) | 0;
            mid = mid + Math.imul(ah0, bl5) | 0;
            hi = hi + Math.imul(ah0, bh5) | 0;
            var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
            w5 &= 0x3ffffff;
            /* k = 6 */
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = mid + Math.imul(ah6, bl0) | 0;
            hi = Math.imul(ah6, bh0);
            lo = lo + Math.imul(al5, bl1) | 0;
            mid = mid + Math.imul(al5, bh1) | 0;
            mid = mid + Math.imul(ah5, bl1) | 0;
            hi = hi + Math.imul(ah5, bh1) | 0;
            lo = lo + Math.imul(al4, bl2) | 0;
            mid = mid + Math.imul(al4, bh2) | 0;
            mid = mid + Math.imul(ah4, bl2) | 0;
            hi = hi + Math.imul(ah4, bh2) | 0;
            lo = lo + Math.imul(al3, bl3) | 0;
            mid = mid + Math.imul(al3, bh3) | 0;
            mid = mid + Math.imul(ah3, bl3) | 0;
            hi = hi + Math.imul(ah3, bh3) | 0;
            lo = lo + Math.imul(al2, bl4) | 0;
            mid = mid + Math.imul(al2, bh4) | 0;
            mid = mid + Math.imul(ah2, bl4) | 0;
            hi = hi + Math.imul(ah2, bh4) | 0;
            lo = lo + Math.imul(al1, bl5) | 0;
            mid = mid + Math.imul(al1, bh5) | 0;
            mid = mid + Math.imul(ah1, bl5) | 0;
            hi = hi + Math.imul(ah1, bh5) | 0;
            lo = lo + Math.imul(al0, bl6) | 0;
            mid = mid + Math.imul(al0, bh6) | 0;
            mid = mid + Math.imul(ah0, bl6) | 0;
            hi = hi + Math.imul(ah0, bh6) | 0;
            var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
            w6 &= 0x3ffffff;
            /* k = 7 */
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = mid + Math.imul(ah7, bl0) | 0;
            hi = Math.imul(ah7, bh0);
            lo = lo + Math.imul(al6, bl1) | 0;
            mid = mid + Math.imul(al6, bh1) | 0;
            mid = mid + Math.imul(ah6, bl1) | 0;
            hi = hi + Math.imul(ah6, bh1) | 0;
            lo = lo + Math.imul(al5, bl2) | 0;
            mid = mid + Math.imul(al5, bh2) | 0;
            mid = mid + Math.imul(ah5, bl2) | 0;
            hi = hi + Math.imul(ah5, bh2) | 0;
            lo = lo + Math.imul(al4, bl3) | 0;
            mid = mid + Math.imul(al4, bh3) | 0;
            mid = mid + Math.imul(ah4, bl3) | 0;
            hi = hi + Math.imul(ah4, bh3) | 0;
            lo = lo + Math.imul(al3, bl4) | 0;
            mid = mid + Math.imul(al3, bh4) | 0;
            mid = mid + Math.imul(ah3, bl4) | 0;
            hi = hi + Math.imul(ah3, bh4) | 0;
            lo = lo + Math.imul(al2, bl5) | 0;
            mid = mid + Math.imul(al2, bh5) | 0;
            mid = mid + Math.imul(ah2, bl5) | 0;
            hi = hi + Math.imul(ah2, bh5) | 0;
            lo = lo + Math.imul(al1, bl6) | 0;
            mid = mid + Math.imul(al1, bh6) | 0;
            mid = mid + Math.imul(ah1, bl6) | 0;
            hi = hi + Math.imul(ah1, bh6) | 0;
            lo = lo + Math.imul(al0, bl7) | 0;
            mid = mid + Math.imul(al0, bh7) | 0;
            mid = mid + Math.imul(ah0, bl7) | 0;
            hi = hi + Math.imul(ah0, bh7) | 0;
            var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
            w7 &= 0x3ffffff;
            /* k = 8 */
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = mid + Math.imul(ah8, bl0) | 0;
            hi = Math.imul(ah8, bh0);
            lo = lo + Math.imul(al7, bl1) | 0;
            mid = mid + Math.imul(al7, bh1) | 0;
            mid = mid + Math.imul(ah7, bl1) | 0;
            hi = hi + Math.imul(ah7, bh1) | 0;
            lo = lo + Math.imul(al6, bl2) | 0;
            mid = mid + Math.imul(al6, bh2) | 0;
            mid = mid + Math.imul(ah6, bl2) | 0;
            hi = hi + Math.imul(ah6, bh2) | 0;
            lo = lo + Math.imul(al5, bl3) | 0;
            mid = mid + Math.imul(al5, bh3) | 0;
            mid = mid + Math.imul(ah5, bl3) | 0;
            hi = hi + Math.imul(ah5, bh3) | 0;
            lo = lo + Math.imul(al4, bl4) | 0;
            mid = mid + Math.imul(al4, bh4) | 0;
            mid = mid + Math.imul(ah4, bl4) | 0;
            hi = hi + Math.imul(ah4, bh4) | 0;
            lo = lo + Math.imul(al3, bl5) | 0;
            mid = mid + Math.imul(al3, bh5) | 0;
            mid = mid + Math.imul(ah3, bl5) | 0;
            hi = hi + Math.imul(ah3, bh5) | 0;
            lo = lo + Math.imul(al2, bl6) | 0;
            mid = mid + Math.imul(al2, bh6) | 0;
            mid = mid + Math.imul(ah2, bl6) | 0;
            hi = hi + Math.imul(ah2, bh6) | 0;
            lo = lo + Math.imul(al1, bl7) | 0;
            mid = mid + Math.imul(al1, bh7) | 0;
            mid = mid + Math.imul(ah1, bl7) | 0;
            hi = hi + Math.imul(ah1, bh7) | 0;
            lo = lo + Math.imul(al0, bl8) | 0;
            mid = mid + Math.imul(al0, bh8) | 0;
            mid = mid + Math.imul(ah0, bl8) | 0;
            hi = hi + Math.imul(ah0, bh8) | 0;
            var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
            w8 &= 0x3ffffff;
            /* k = 9 */
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = mid + Math.imul(ah9, bl0) | 0;
            hi = Math.imul(ah9, bh0);
            lo = lo + Math.imul(al8, bl1) | 0;
            mid = mid + Math.imul(al8, bh1) | 0;
            mid = mid + Math.imul(ah8, bl1) | 0;
            hi = hi + Math.imul(ah8, bh1) | 0;
            lo = lo + Math.imul(al7, bl2) | 0;
            mid = mid + Math.imul(al7, bh2) | 0;
            mid = mid + Math.imul(ah7, bl2) | 0;
            hi = hi + Math.imul(ah7, bh2) | 0;
            lo = lo + Math.imul(al6, bl3) | 0;
            mid = mid + Math.imul(al6, bh3) | 0;
            mid = mid + Math.imul(ah6, bl3) | 0;
            hi = hi + Math.imul(ah6, bh3) | 0;
            lo = lo + Math.imul(al5, bl4) | 0;
            mid = mid + Math.imul(al5, bh4) | 0;
            mid = mid + Math.imul(ah5, bl4) | 0;
            hi = hi + Math.imul(ah5, bh4) | 0;
            lo = lo + Math.imul(al4, bl5) | 0;
            mid = mid + Math.imul(al4, bh5) | 0;
            mid = mid + Math.imul(ah4, bl5) | 0;
            hi = hi + Math.imul(ah4, bh5) | 0;
            lo = lo + Math.imul(al3, bl6) | 0;
            mid = mid + Math.imul(al3, bh6) | 0;
            mid = mid + Math.imul(ah3, bl6) | 0;
            hi = hi + Math.imul(ah3, bh6) | 0;
            lo = lo + Math.imul(al2, bl7) | 0;
            mid = mid + Math.imul(al2, bh7) | 0;
            mid = mid + Math.imul(ah2, bl7) | 0;
            hi = hi + Math.imul(ah2, bh7) | 0;
            lo = lo + Math.imul(al1, bl8) | 0;
            mid = mid + Math.imul(al1, bh8) | 0;
            mid = mid + Math.imul(ah1, bl8) | 0;
            hi = hi + Math.imul(ah1, bh8) | 0;
            lo = lo + Math.imul(al0, bl9) | 0;
            mid = mid + Math.imul(al0, bh9) | 0;
            mid = mid + Math.imul(ah0, bl9) | 0;
            hi = hi + Math.imul(ah0, bh9) | 0;
            var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
            w9 &= 0x3ffffff;
            /* k = 10 */
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = mid + Math.imul(ah9, bl1) | 0;
            hi = Math.imul(ah9, bh1);
            lo = lo + Math.imul(al8, bl2) | 0;
            mid = mid + Math.imul(al8, bh2) | 0;
            mid = mid + Math.imul(ah8, bl2) | 0;
            hi = hi + Math.imul(ah8, bh2) | 0;
            lo = lo + Math.imul(al7, bl3) | 0;
            mid = mid + Math.imul(al7, bh3) | 0;
            mid = mid + Math.imul(ah7, bl3) | 0;
            hi = hi + Math.imul(ah7, bh3) | 0;
            lo = lo + Math.imul(al6, bl4) | 0;
            mid = mid + Math.imul(al6, bh4) | 0;
            mid = mid + Math.imul(ah6, bl4) | 0;
            hi = hi + Math.imul(ah6, bh4) | 0;
            lo = lo + Math.imul(al5, bl5) | 0;
            mid = mid + Math.imul(al5, bh5) | 0;
            mid = mid + Math.imul(ah5, bl5) | 0;
            hi = hi + Math.imul(ah5, bh5) | 0;
            lo = lo + Math.imul(al4, bl6) | 0;
            mid = mid + Math.imul(al4, bh6) | 0;
            mid = mid + Math.imul(ah4, bl6) | 0;
            hi = hi + Math.imul(ah4, bh6) | 0;
            lo = lo + Math.imul(al3, bl7) | 0;
            mid = mid + Math.imul(al3, bh7) | 0;
            mid = mid + Math.imul(ah3, bl7) | 0;
            hi = hi + Math.imul(ah3, bh7) | 0;
            lo = lo + Math.imul(al2, bl8) | 0;
            mid = mid + Math.imul(al2, bh8) | 0;
            mid = mid + Math.imul(ah2, bl8) | 0;
            hi = hi + Math.imul(ah2, bh8) | 0;
            lo = lo + Math.imul(al1, bl9) | 0;
            mid = mid + Math.imul(al1, bh9) | 0;
            mid = mid + Math.imul(ah1, bl9) | 0;
            hi = hi + Math.imul(ah1, bh9) | 0;
            var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
            w10 &= 0x3ffffff;
            /* k = 11 */
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = mid + Math.imul(ah9, bl2) | 0;
            hi = Math.imul(ah9, bh2);
            lo = lo + Math.imul(al8, bl3) | 0;
            mid = mid + Math.imul(al8, bh3) | 0;
            mid = mid + Math.imul(ah8, bl3) | 0;
            hi = hi + Math.imul(ah8, bh3) | 0;
            lo = lo + Math.imul(al7, bl4) | 0;
            mid = mid + Math.imul(al7, bh4) | 0;
            mid = mid + Math.imul(ah7, bl4) | 0;
            hi = hi + Math.imul(ah7, bh4) | 0;
            lo = lo + Math.imul(al6, bl5) | 0;
            mid = mid + Math.imul(al6, bh5) | 0;
            mid = mid + Math.imul(ah6, bl5) | 0;
            hi = hi + Math.imul(ah6, bh5) | 0;
            lo = lo + Math.imul(al5, bl6) | 0;
            mid = mid + Math.imul(al5, bh6) | 0;
            mid = mid + Math.imul(ah5, bl6) | 0;
            hi = hi + Math.imul(ah5, bh6) | 0;
            lo = lo + Math.imul(al4, bl7) | 0;
            mid = mid + Math.imul(al4, bh7) | 0;
            mid = mid + Math.imul(ah4, bl7) | 0;
            hi = hi + Math.imul(ah4, bh7) | 0;
            lo = lo + Math.imul(al3, bl8) | 0;
            mid = mid + Math.imul(al3, bh8) | 0;
            mid = mid + Math.imul(ah3, bl8) | 0;
            hi = hi + Math.imul(ah3, bh8) | 0;
            lo = lo + Math.imul(al2, bl9) | 0;
            mid = mid + Math.imul(al2, bh9) | 0;
            mid = mid + Math.imul(ah2, bl9) | 0;
            hi = hi + Math.imul(ah2, bh9) | 0;
            var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
            w11 &= 0x3ffffff;
            /* k = 12 */
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = mid + Math.imul(ah9, bl3) | 0;
            hi = Math.imul(ah9, bh3);
            lo = lo + Math.imul(al8, bl4) | 0;
            mid = mid + Math.imul(al8, bh4) | 0;
            mid = mid + Math.imul(ah8, bl4) | 0;
            hi = hi + Math.imul(ah8, bh4) | 0;
            lo = lo + Math.imul(al7, bl5) | 0;
            mid = mid + Math.imul(al7, bh5) | 0;
            mid = mid + Math.imul(ah7, bl5) | 0;
            hi = hi + Math.imul(ah7, bh5) | 0;
            lo = lo + Math.imul(al6, bl6) | 0;
            mid = mid + Math.imul(al6, bh6) | 0;
            mid = mid + Math.imul(ah6, bl6) | 0;
            hi = hi + Math.imul(ah6, bh6) | 0;
            lo = lo + Math.imul(al5, bl7) | 0;
            mid = mid + Math.imul(al5, bh7) | 0;
            mid = mid + Math.imul(ah5, bl7) | 0;
            hi = hi + Math.imul(ah5, bh7) | 0;
            lo = lo + Math.imul(al4, bl8) | 0;
            mid = mid + Math.imul(al4, bh8) | 0;
            mid = mid + Math.imul(ah4, bl8) | 0;
            hi = hi + Math.imul(ah4, bh8) | 0;
            lo = lo + Math.imul(al3, bl9) | 0;
            mid = mid + Math.imul(al3, bh9) | 0;
            mid = mid + Math.imul(ah3, bl9) | 0;
            hi = hi + Math.imul(ah3, bh9) | 0;
            var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
            w12 &= 0x3ffffff;
            /* k = 13 */
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = mid + Math.imul(ah9, bl4) | 0;
            hi = Math.imul(ah9, bh4);
            lo = lo + Math.imul(al8, bl5) | 0;
            mid = mid + Math.imul(al8, bh5) | 0;
            mid = mid + Math.imul(ah8, bl5) | 0;
            hi = hi + Math.imul(ah8, bh5) | 0;
            lo = lo + Math.imul(al7, bl6) | 0;
            mid = mid + Math.imul(al7, bh6) | 0;
            mid = mid + Math.imul(ah7, bl6) | 0;
            hi = hi + Math.imul(ah7, bh6) | 0;
            lo = lo + Math.imul(al6, bl7) | 0;
            mid = mid + Math.imul(al6, bh7) | 0;
            mid = mid + Math.imul(ah6, bl7) | 0;
            hi = hi + Math.imul(ah6, bh7) | 0;
            lo = lo + Math.imul(al5, bl8) | 0;
            mid = mid + Math.imul(al5, bh8) | 0;
            mid = mid + Math.imul(ah5, bl8) | 0;
            hi = hi + Math.imul(ah5, bh8) | 0;
            lo = lo + Math.imul(al4, bl9) | 0;
            mid = mid + Math.imul(al4, bh9) | 0;
            mid = mid + Math.imul(ah4, bl9) | 0;
            hi = hi + Math.imul(ah4, bh9) | 0;
            var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
            w13 &= 0x3ffffff;
            /* k = 14 */
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = mid + Math.imul(ah9, bl5) | 0;
            hi = Math.imul(ah9, bh5);
            lo = lo + Math.imul(al8, bl6) | 0;
            mid = mid + Math.imul(al8, bh6) | 0;
            mid = mid + Math.imul(ah8, bl6) | 0;
            hi = hi + Math.imul(ah8, bh6) | 0;
            lo = lo + Math.imul(al7, bl7) | 0;
            mid = mid + Math.imul(al7, bh7) | 0;
            mid = mid + Math.imul(ah7, bl7) | 0;
            hi = hi + Math.imul(ah7, bh7) | 0;
            lo = lo + Math.imul(al6, bl8) | 0;
            mid = mid + Math.imul(al6, bh8) | 0;
            mid = mid + Math.imul(ah6, bl8) | 0;
            hi = hi + Math.imul(ah6, bh8) | 0;
            lo = lo + Math.imul(al5, bl9) | 0;
            mid = mid + Math.imul(al5, bh9) | 0;
            mid = mid + Math.imul(ah5, bl9) | 0;
            hi = hi + Math.imul(ah5, bh9) | 0;
            var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
            w14 &= 0x3ffffff;
            /* k = 15 */
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = mid + Math.imul(ah9, bl6) | 0;
            hi = Math.imul(ah9, bh6);
            lo = lo + Math.imul(al8, bl7) | 0;
            mid = mid + Math.imul(al8, bh7) | 0;
            mid = mid + Math.imul(ah8, bl7) | 0;
            hi = hi + Math.imul(ah8, bh7) | 0;
            lo = lo + Math.imul(al7, bl8) | 0;
            mid = mid + Math.imul(al7, bh8) | 0;
            mid = mid + Math.imul(ah7, bl8) | 0;
            hi = hi + Math.imul(ah7, bh8) | 0;
            lo = lo + Math.imul(al6, bl9) | 0;
            mid = mid + Math.imul(al6, bh9) | 0;
            mid = mid + Math.imul(ah6, bl9) | 0;
            hi = hi + Math.imul(ah6, bh9) | 0;
            var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
            w15 &= 0x3ffffff;
            /* k = 16 */
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = mid + Math.imul(ah9, bl7) | 0;
            hi = Math.imul(ah9, bh7);
            lo = lo + Math.imul(al8, bl8) | 0;
            mid = mid + Math.imul(al8, bh8) | 0;
            mid = mid + Math.imul(ah8, bl8) | 0;
            hi = hi + Math.imul(ah8, bh8) | 0;
            lo = lo + Math.imul(al7, bl9) | 0;
            mid = mid + Math.imul(al7, bh9) | 0;
            mid = mid + Math.imul(ah7, bl9) | 0;
            hi = hi + Math.imul(ah7, bh9) | 0;
            var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
            w16 &= 0x3ffffff;
            /* k = 17 */
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = mid + Math.imul(ah9, bl8) | 0;
            hi = Math.imul(ah9, bh8);
            lo = lo + Math.imul(al8, bl9) | 0;
            mid = mid + Math.imul(al8, bh9) | 0;
            mid = mid + Math.imul(ah8, bl9) | 0;
            hi = hi + Math.imul(ah8, bh9) | 0;
            var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
            w17 &= 0x3ffffff;
            /* k = 18 */
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = mid + Math.imul(ah9, bl9) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
            w18 &= 0x3ffffff;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
              o[19] = c;
              out.length++;
            }
            return out;
          };

          // Polyfill comb
          if (!Math.imul) {
            comb10MulTo = smallMulTo;
          }
          function bigMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            out.length = self.length + num.length;
            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
            }
            if (carry !== 0) {
              out.words[k] = carry;
            } else {
              out.length--;
            }
            return out._strip();
          }
          function jumboMulTo(self, num, out) {
            // Temporary disable, see https://github.com/indutny/bn.js/issues/211
            // var fftm = new FFTM();
            // return fftm.mulp(self, num, out);
            return bigMulTo(self, num, out);
          }
          BN.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
              res = comb10MulTo(this, num, out);
            } else if (len < 63) {
              res = smallMulTo(this, num, out);
            } else if (len < 1024) {
              res = bigMulTo(this, num, out);
            } else {
              res = jumboMulTo(this, num, out);
            }
            return res;
          };

          // Cooley-Tukey algorithm for FFT
          // slightly revisited to rely on looping instead of recursion

          function FFTM(x, y) {
            this.x = x;
            this.y = y;
          }
          FFTM.prototype.makeRBT = function makeRBT(N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i = 0; i < N; i++) {
              t[i] = this.revBin(i, l, N);
            }
            return t;
          };

          // Returns binary-reversed representation of `x`
          FFTM.prototype.revBin = function revBin(x, l, N) {
            if (x === 0 || x === N - 1) return x;
            var rb = 0;
            for (var i = 0; i < l; i++) {
              rb |= (x & 1) << l - i - 1;
              x >>= 1;
            }
            return rb;
          };

          // Performs "tweedling" phase, therefore 'emulating'
          // behaviour of the recursive algorithm
          FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
            for (var i = 0; i < N; i++) {
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
            }
          };
          FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);
            for (var s = 1; s < N; s <<= 1) {
              var l = s << 1;
              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);
              for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for (var j = 0; j < s; j++) {
                  var re = rtws[p + j];
                  var ie = itws[p + j];
                  var ro = rtws[p + j + s];
                  var io = itws[p + j + s];
                  var rx = rtwdf_ * ro - itwdf_ * io;
                  io = rtwdf_ * io + itwdf_ * ro;
                  ro = rx;
                  rtws[p + j] = re + ro;
                  itws[p + j] = ie + io;
                  rtws[p + j + s] = re - ro;
                  itws[p + j + s] = ie - io;

                  /* jshint maxdepth : false */
                  if (j !== l) {
                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                    rtwdf_ = rx;
                  }
                }
              }
            }
          };
          FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i = 0;
            for (N = N / 2 | 0; N; N = N >>> 1) {
              i++;
            }
            return 1 << i + 1 + odd;
          };
          FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
            if (N <= 1) return;
            for (var i = 0; i < N / 2; i++) {
              var t = rws[i];
              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;
              t = iws[i];
              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
            }
          };
          FFTM.prototype.normalize13b = function normalize13b(ws, N) {
            var carry = 0;
            for (var i = 0; i < N / 2; i++) {
              var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
              ws[i] = w & 0x3ffffff;
              if (w < 0x4000000) {
                carry = 0;
              } else {
                carry = w / 0x4000000 | 0;
              }
            }
            return ws;
          };
          FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
            var carry = 0;
            for (var i = 0; i < len; i++) {
              carry = carry + (ws[i] | 0);
              rws[2 * i] = carry & 0x1fff;
              carry = carry >>> 13;
              rws[2 * i + 1] = carry & 0x1fff;
              carry = carry >>> 13;
            }

            // Pad with zeroes
            for (i = 2 * len; i < N; ++i) {
              rws[i] = 0;
            }
            assert(carry === 0);
            assert((carry & ~0x1fff) === 0);
          };
          FFTM.prototype.stub = function stub(N) {
            var ph = new Array(N);
            for (var i = 0; i < N; i++) {
              ph[i] = 0;
            }
            return ph;
          };
          FFTM.prototype.mulp = function mulp(x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);
            var rbt = this.makeRBT(N);
            var _ = this.stub(N);
            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);
            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);
            var rmws = out.words;
            rmws.length = N;
            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);
            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);
            for (var i = 0; i < N; i++) {
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
            }
            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);
            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out._strip();
          };

          // Multiply `this` by `num`
          BN.prototype.mul = function mul(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
          };

          // Multiply employing FFT
          BN.prototype.mulf = function mulf(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
          };

          // In-place Multiplication
          BN.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
          };
          BN.prototype.imuln = function imuln(num) {
            var isNegNum = num < 0;
            if (isNegNum) num = -num;
            assert(typeof num === 'number');
            assert(num < 0x4000000);

            // Carry
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = (this.words[i] | 0) * num;
              var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
              carry >>= 26;
              carry += w / 0x4000000 | 0;
              // NOTE: lo is 27bit maximum
              carry += lo >>> 26;
              this.words[i] = lo & 0x3ffffff;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return isNegNum ? this.ineg() : this;
          };
          BN.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
          };

          // `this` * `this`
          BN.prototype.sqr = function sqr() {
            return this.mul(this);
          };

          // `this` * `this` in-place
          BN.prototype.isqr = function isqr() {
            return this.imul(this.clone());
          };

          // Math.pow(`this`, `num`)
          BN.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0) return new BN(1);

            // Skip leading zeroes
            var res = this;
            for (var i = 0; i < w.length; i++, res = res.sqr()) {
              if (w[i] !== 0) break;
            }
            if (++i < w.length) {
              for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                if (w[i] === 0) continue;
                res = res.mul(q);
              }
            }
            return res;
          };

          // Shift-left in-place
          BN.prototype.iushln = function iushln(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
            var i;
            if (r !== 0) {
              var carry = 0;
              for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
              }
              if (carry) {
                this.words[i] = carry;
                this.length++;
              }
            }
            if (s !== 0) {
              for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
              }
              for (i = 0; i < s; i++) {
                this.words[i] = 0;
              }
              this.length += s;
            }
            return this._strip();
          };
          BN.prototype.ishln = function ishln(bits) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushln(bits);
          };

          // Shift-right in-place
          // NOTE: `hint` is a lowest bit before trailing zeroes
          // NOTE: if `extended` is present - it will be filled with destroyed bits
          BN.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert(typeof bits === 'number' && bits >= 0);
            var h;
            if (hint) {
              h = (hint - hint % 26) / 26;
            } else {
              h = 0;
            }
            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            var maskedWords = extended;
            h -= s;
            h = Math.max(0, h);

            // Extended mode, copy masked part
            if (maskedWords) {
              for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
              }
              maskedWords.length = s;
            }
            if (s === 0) {
              // No-op, we should not move anything at all
            } else if (this.length > s) {
              this.length -= s;
              for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
              }
            } else {
              this.words[0] = 0;
              this.length = 1;
            }
            var carry = 0;
            for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
              var word = this.words[i] | 0;
              this.words[i] = carry << 26 - r | word >>> r;
              carry = word & mask;
            }

            // Push carried bits as a mask
            if (maskedWords && carry !== 0) {
              maskedWords.words[maskedWords.length++] = carry;
            }
            if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
            }
            return this._strip();
          };
          BN.prototype.ishrn = function ishrn(bits, hint, extended) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
          };

          // Shift-left
          BN.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
          };
          BN.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
          };

          // Shift-right
          BN.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
          };
          BN.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
          };

          // Test if n bit is set
          BN.prototype.testn = function testn(bit) {
            assert(typeof bit === 'number' && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) return false;

            // Check bit and return
            var w = this.words[s];
            return !!(w & q);
          };

          // Return only lowers bits of number (in-place)
          BN.prototype.imaskn = function imaskn(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            assert(this.negative === 0, 'imaskn works only with positive numbers');
            if (this.length <= s) {
              return this;
            }
            if (r !== 0) {
              s++;
            }
            this.length = Math.min(s, this.length);
            if (r !== 0) {
              var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
              this.words[this.length - 1] &= mask;
            }
            return this._strip();
          };

          // Return only lowers bits of number
          BN.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
          };

          // Add plain number `num` to `this`
          BN.prototype.iaddn = function iaddn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.isubn(-num);

            // Possible sign change
            if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
              }
              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
            }

            // Add without checks
            return this._iaddn(num);
          };
          BN.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;

            // Carry
            for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
              this.words[i] -= 0x4000000;
              if (i === this.length - 1) {
                this.words[i + 1] = 1;
              } else {
                this.words[i + 1]++;
              }
            }
            this.length = Math.max(this.length, i + 1);
            return this;
          };

          // Subtract plain number `num` from `this`
          BN.prototype.isubn = function isubn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.iaddn(-num);
            if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
            }
            this.words[0] -= num;
            if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
            } else {
              // Carry
              for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 0x4000000;
                this.words[i + 1] -= 1;
              }
            }
            return this._strip();
          };
          BN.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
          };
          BN.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
          };
          BN.prototype.iabs = function iabs() {
            this.negative = 0;
            return this;
          };
          BN.prototype.abs = function abs() {
            return this.clone().iabs();
          };
          BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i;
            this._expand(len);
            var w;
            var carry = 0;
            for (i = 0; i < num.length; i++) {
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 0x3ffffff;
              carry = (w >> 26) - (right / 0x4000000 | 0);
              this.words[i + shift] = w & 0x3ffffff;
            }
            for (; i < this.length - shift; i++) {
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 0x3ffffff;
            }
            if (carry === 0) return this._strip();

            // Subtraction overflow
            assert(carry === -1);
            carry = 0;
            for (i = 0; i < this.length; i++) {
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 0x3ffffff;
            }
            this.negative = 1;
            return this._strip();
          };
          BN.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;
            var a = this.clone();
            var b = num;

            // Normalize
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
            }

            // Initialize quotient
            var m = a.length - b.length;
            var q;
            if (mode !== 'mod') {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
              }
            }
            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
              a = diff;
              if (q) {
                q.words[m] = 1;
              }
            }
            for (var j = m - 1; j >= 0; j--) {
              var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

              // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
              // (0x7ffffff)
              qj = Math.min(qj / bhi | 0, 0x3ffffff);
              a._ishlnsubmul(b, qj, j);
              while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                  a.negative ^= 1;
                }
              }
              if (q) {
                q.words[j] = qj;
              }
            }
            if (q) {
              q._strip();
            }
            a._strip();

            // Denormalize
            if (mode !== 'div' && shift !== 0) {
              a.iushrn(shift);
            }
            return {
              div: q || null,
              mod: a
            };
          };

          // NOTE: 1) `mode` can be set to `mod` to request mod only,
          //       to `div` to request div only, or be absent to
          //       request both div & mod
          //       2) `positive` is true if unsigned mod is requested
          BN.prototype.divmod = function divmod(num, mode, positive) {
            assert(!num.isZero());
            if (this.isZero()) {
              return {
                div: new BN(0),
                mod: new BN(0)
              };
            }
            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);
              if (mode !== 'mod') {
                div = res.div.neg();
              }
              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.iadd(num);
                }
              }
              return {
                div: div,
                mod: mod
              };
            }
            if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);
              if (mode !== 'mod') {
                div = res.div.neg();
              }
              return {
                div: div,
                mod: res.mod
              };
            }
            if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);
              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.isub(num);
                }
              }
              return {
                div: res.div,
                mod: mod
              };
            }

            // Both numbers are positive at this point

            // Strip both numbers to approximate shift value
            if (num.length > this.length || this.cmp(num) < 0) {
              return {
                div: new BN(0),
                mod: this
              };
            }

            // Very short reduction
            if (num.length === 1) {
              if (mode === 'div') {
                return {
                  div: this.divn(num.words[0]),
                  mod: null
                };
              }
              if (mode === 'mod') {
                return {
                  div: null,
                  mod: new BN(this.modrn(num.words[0]))
                };
              }
              return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
              };
            }
            return this._wordDiv(num, mode);
          };

          // Find `this` / `num`
          BN.prototype.div = function div(num) {
            return this.divmod(num, 'div', false).div;
          };

          // Find `this` % `num`
          BN.prototype.mod = function mod(num) {
            return this.divmod(num, 'mod', false).mod;
          };
          BN.prototype.umod = function umod(num) {
            return this.divmod(num, 'mod', true).mod;
          };

          // Find Round(`this` / `num`)
          BN.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);

            // Fast case - exact division
            if (dm.mod.isZero()) return dm.div;
            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);

            // Round down
            if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

            // Round up
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
          };
          BN.prototype.modrn = function modrn(num) {
            var isNegNum = num < 0;
            if (isNegNum) num = -num;
            assert(num <= 0x3ffffff);
            var p = (1 << 26) % num;
            var acc = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              acc = (p * acc + (this.words[i] | 0)) % num;
            }
            return isNegNum ? -acc : acc;
          };

          // WARNING: DEPRECATED
          BN.prototype.modn = function modn(num) {
            return this.modrn(num);
          };

          // In-place division by number
          BN.prototype.idivn = function idivn(num) {
            var isNegNum = num < 0;
            if (isNegNum) num = -num;
            assert(num <= 0x3ffffff);
            var carry = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var w = (this.words[i] | 0) + carry * 0x4000000;
              this.words[i] = w / num | 0;
              carry = w % num;
            }
            this._strip();
            return isNegNum ? this.ineg() : this;
          };
          BN.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
          };
          BN.prototype.egcd = function egcd(p) {
            assert(p.negative === 0);
            assert(!p.isZero());
            var x = this;
            var y = p.clone();
            if (x.negative !== 0) {
              x = x.umod(p);
            } else {
              x = x.clone();
            }

            // A * x + B * y = x
            var A = new BN(1);
            var B = new BN(0);

            // C * x + D * y = y
            var C = new BN(0);
            var D = new BN(1);
            var g = 0;
            while (x.isEven() && y.isEven()) {
              x.iushrn(1);
              y.iushrn(1);
              ++g;
            }
            var yp = y.clone();
            var xp = x.clone();
            while (!x.isZero()) {
              for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                  if (A.isOdd() || B.isOdd()) {
                    A.iadd(yp);
                    B.isub(xp);
                  }
                  A.iushrn(1);
                  B.iushrn(1);
                }
              }
              for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                  if (C.isOdd() || D.isOdd()) {
                    C.iadd(yp);
                    D.isub(xp);
                  }
                  C.iushrn(1);
                  D.iushrn(1);
                }
              }
              if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
              } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
              }
            }
            return {
              a: C,
              b: D,
              gcd: y.iushln(g)
            };
          };

          // This is reduced incarnation of the binary EEA
          // above, designated to invert members of the
          // _prime_ fields F(p) at a maximal speed
          BN.prototype._invmp = function _invmp(p) {
            assert(p.negative === 0);
            assert(!p.isZero());
            var a = this;
            var b = p.clone();
            if (a.negative !== 0) {
              a = a.umod(p);
            } else {
              a = a.clone();
            }
            var x1 = new BN(1);
            var x2 = new BN(0);
            var delta = b.clone();
            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
              for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                  if (x1.isOdd()) {
                    x1.iadd(delta);
                  }
                  x1.iushrn(1);
                }
              }
              for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                  if (x2.isOdd()) {
                    x2.iadd(delta);
                  }
                  x2.iushrn(1);
                }
              }
              if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
              } else {
                b.isub(a);
                x2.isub(x1);
              }
            }
            var res;
            if (a.cmpn(1) === 0) {
              res = x1;
            } else {
              res = x2;
            }
            if (res.cmpn(0) < 0) {
              res.iadd(p);
            }
            return res;
          };
          BN.prototype.gcd = function gcd(num) {
            if (this.isZero()) return num.abs();
            if (num.isZero()) return this.abs();
            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;

            // Remove common factor of two
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
              a.iushrn(1);
              b.iushrn(1);
            }
            do {
              while (a.isEven()) {
                a.iushrn(1);
              }
              while (b.isEven()) {
                b.iushrn(1);
              }
              var r = a.cmp(b);
              if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
              } else if (r === 0 || b.cmpn(1) === 0) {
                break;
              }
              a.isub(b);
            } while (true);
            return b.iushln(shift);
          };

          // Invert number in the field F(num)
          BN.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
          };
          BN.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
          };
          BN.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
          };

          // And first word and num
          BN.prototype.andln = function andln(num) {
            return this.words[0] & num;
          };

          // Increment at the bit position in-line
          BN.prototype.bincn = function bincn(bit) {
            assert(typeof bit === 'number');
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
            }

            // Add bit and propagate, if needed
            var carry = q;
            for (var i = s; carry !== 0 && i < this.length; i++) {
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 0x3ffffff;
              this.words[i] = w;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return this;
          };
          BN.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
          };
          BN.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;
            if (this.negative !== 0 && !negative) return -1;
            if (this.negative === 0 && negative) return 1;
            this._strip();
            var res;
            if (this.length > 1) {
              res = 1;
            } else {
              if (negative) {
                num = -num;
              }
              assert(num <= 0x3ffffff, 'Number is too big');
              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Compare two numbers and return:
          // 1 - if `this` > `num`
          // 0 - if `this` == `num`
          // -1 - if `this` < `num`
          BN.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0) return -1;
            if (this.negative === 0 && num.negative !== 0) return 1;
            var res = this.ucmp(num);
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Unsigned comparison
          BN.prototype.ucmp = function ucmp(num) {
            // At this point both numbers have the same sign
            if (this.length > num.length) return 1;
            if (this.length < num.length) return -1;
            var res = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;
              if (a === b) continue;
              if (a < b) {
                res = -1;
              } else if (a > b) {
                res = 1;
              }
              break;
            }
            return res;
          };
          BN.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
          };
          BN.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
          };
          BN.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
          };
          BN.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
          };
          BN.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
          };
          BN.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
          };
          BN.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
          };
          BN.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
          };
          BN.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
          };
          BN.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
          };

          //
          // A reduce context, could be using montgomery or something better, depending
          // on the `m` itself.
          //
          BN.red = function red(num) {
            return new Red(num);
          };
          BN.prototype.toRed = function toRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            assert(this.negative === 0, 'red works only with positives');
            return ctx.convertTo(this)._forceRed(ctx);
          };
          BN.prototype.fromRed = function fromRed() {
            assert(this.red, 'fromRed works only with numbers in reduction context');
            return this.red.convertFrom(this);
          };
          BN.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
          };
          BN.prototype.forceRed = function forceRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            return this._forceRed(ctx);
          };
          BN.prototype.redAdd = function redAdd(num) {
            assert(this.red, 'redAdd works only with red numbers');
            return this.red.add(this, num);
          };
          BN.prototype.redIAdd = function redIAdd(num) {
            assert(this.red, 'redIAdd works only with red numbers');
            return this.red.iadd(this, num);
          };
          BN.prototype.redSub = function redSub(num) {
            assert(this.red, 'redSub works only with red numbers');
            return this.red.sub(this, num);
          };
          BN.prototype.redISub = function redISub(num) {
            assert(this.red, 'redISub works only with red numbers');
            return this.red.isub(this, num);
          };
          BN.prototype.redShl = function redShl(num) {
            assert(this.red, 'redShl works only with red numbers');
            return this.red.shl(this, num);
          };
          BN.prototype.redMul = function redMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.mul(this, num);
          };
          BN.prototype.redIMul = function redIMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.imul(this, num);
          };
          BN.prototype.redSqr = function redSqr() {
            assert(this.red, 'redSqr works only with red numbers');
            this.red._verify1(this);
            return this.red.sqr(this);
          };
          BN.prototype.redISqr = function redISqr() {
            assert(this.red, 'redISqr works only with red numbers');
            this.red._verify1(this);
            return this.red.isqr(this);
          };

          // Square root over p
          BN.prototype.redSqrt = function redSqrt() {
            assert(this.red, 'redSqrt works only with red numbers');
            this.red._verify1(this);
            return this.red.sqrt(this);
          };
          BN.prototype.redInvm = function redInvm() {
            assert(this.red, 'redInvm works only with red numbers');
            this.red._verify1(this);
            return this.red.invm(this);
          };

          // Return negative clone of `this` % `red modulo`
          BN.prototype.redNeg = function redNeg() {
            assert(this.red, 'redNeg works only with red numbers');
            this.red._verify1(this);
            return this.red.neg(this);
          };
          BN.prototype.redPow = function redPow(num) {
            assert(this.red && !num.red, 'redPow(normalNum)');
            this.red._verify1(this);
            return this.red.pow(this, num);
          };

          // Prime numbers with efficient reduction
          var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
          };

          // Pseudo-Mersenne prime
          function MPrime(name, p) {
            // P = 2 ^ N - K
            this.name = name;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);
            this.tmp = this._tmp();
          }
          MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
          };
          MPrime.prototype.ireduce = function ireduce(num) {
            // Assumes that `num` is less than `P^2`
            // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
            var r = num;
            var rlen;
            do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
            } while (rlen > this.n);
            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
            } else if (cmp > 0) {
              r.isub(this.p);
            } else {
              if (r.strip !== undefined) {
                // r is a BN v4 instance
                r.strip();
              } else {
                // r is a BN v5 instance
                r._strip();
              }
            }
            return r;
          };
          MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
          };
          MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
          };
          function K256() {
            MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
          }
          inherits(K256, MPrime);
          K256.prototype.split = function split(input, output) {
            // 256 = 9 * 26 + 22
            var mask = 0x3fffff;
            var outLen = Math.min(input.length, 9);
            for (var i = 0; i < outLen; i++) {
              output.words[i] = input.words[i];
            }
            output.length = outLen;
            if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
            }

            // Shift by 9 limbs
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;
            for (i = 10; i < input.length; i++) {
              var next = input.words[i] | 0;
              input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
              prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
              input.length -= 10;
            } else {
              input.length -= 9;
            }
          };
          K256.prototype.imulK = function imulK(num) {
            // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;

            // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
            var lo = 0;
            for (var i = 0; i < num.length; i++) {
              var w = num.words[i] | 0;
              lo += w * 0x3d1;
              num.words[i] = lo & 0x3ffffff;
              lo = w * 0x40 + (lo / 0x4000000 | 0);
            }

            // Fast length reduction
            if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) {
                num.length--;
              }
            }
            return num;
          };
          function P224() {
            MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
          }
          inherits(P224, MPrime);
          function P192() {
            MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
          }
          inherits(P192, MPrime);
          function P25519() {
            // 2 ^ 255 - 19
            MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
          }
          inherits(P25519, MPrime);
          P25519.prototype.imulK = function imulK(num) {
            // K = 0x13
            var carry = 0;
            for (var i = 0; i < num.length; i++) {
              var hi = (num.words[i] | 0) * 0x13 + carry;
              var lo = hi & 0x3ffffff;
              hi >>>= 26;
              num.words[i] = lo;
              carry = hi;
            }
            if (carry !== 0) {
              num.words[num.length++] = carry;
            }
            return num;
          };

          // Exported mostly for testing purposes, use plain name instead
          BN._prime = function prime(name) {
            // Cached version of prime
            if (primes[name]) return primes[name];
            var prime;
            if (name === 'k256') {
              prime = new K256();
            } else if (name === 'p224') {
              prime = new P224();
            } else if (name === 'p192') {
              prime = new P192();
            } else if (name === 'p25519') {
              prime = new P25519();
            } else {
              throw new Error('Unknown prime ' + name);
            }
            primes[name] = prime;
            return prime;
          };

          //
          // Base reduction engine
          //
          function Red(m) {
            if (typeof m === 'string') {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
            } else {
              assert(m.gtn(1), 'modulus must be greater than 1');
              this.m = m;
              this.prime = null;
            }
          }
          Red.prototype._verify1 = function _verify1(a) {
            assert(a.negative === 0, 'red works only with positives');
            assert(a.red, 'red works only with red numbers');
          };
          Red.prototype._verify2 = function _verify2(a, b) {
            assert((a.negative | b.negative) === 0, 'red works only with positives');
            assert(a.red && a.red === b.red, 'red works only with red numbers');
          };
          Red.prototype.imod = function imod(a) {
            if (this.prime) return this.prime.ireduce(a)._forceRed(this);
            move(a, a.umod(this.m)._forceRed(this));
            return a;
          };
          Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
              return a.clone();
            }
            return this.m.sub(a)._forceRed(this);
          };
          Red.prototype.add = function add(a, b) {
            this._verify2(a, b);
            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res._forceRed(this);
          };
          Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);
            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res;
          };
          Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);
            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);
            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res;
          };
          Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
          };
          Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
          };
          Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
          };
          Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
          };
          Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
          };
          Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero()) return a.clone();
            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);

            // Fast case
            if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
            }

            // Tonelli-Shanks algorithm (Totally unoptimized and slow)
            //
            // Find Q and S, that Q * 2 ^ S = (P - 1)
            var q = this.m.subn(1);
            var s = 0;
            while (!q.isZero() && q.andln(1) === 0) {
              s++;
              q.iushrn(1);
            }
            assert(!q.isZero());
            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();

            // Find quadratic non-residue
            // NOTE: Max is such because of generalized Riemann hypothesis.
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);
            while (this.pow(z, lpow).cmp(nOne) !== 0) {
              z.redIAdd(nOne);
            }
            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while (t.cmp(one) !== 0) {
              var tmp = t;
              for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
              }
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));
              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
            }
            return r;
          };
          Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
            } else {
              return this.imod(inv);
            }
          };
          Red.prototype.pow = function pow(a, num) {
            if (num.isZero()) return new BN(1).toRed(this);
            if (num.cmpn(1) === 0) return a.clone();
            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i = 2; i < wnd.length; i++) {
              wnd[i] = this.mul(wnd[i - 1], a);
            }
            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
              start = 26;
            }
            for (i = num.length - 1; i >= 0; i--) {
              var word = num.words[i];
              for (var j = start - 1; j >= 0; j--) {
                var bit = word >> j & 1;
                if (res !== wnd[0]) {
                  res = this.sqr(res);
                }
                if (bit === 0 && current === 0) {
                  currentLen = 0;
                  continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
              }
              start = 26;
            }
            return res;
          };
          Red.prototype.convertTo = function convertTo(num) {
            var r = num.umod(this.m);
            return r === num ? r.clone() : r;
          };
          Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
          };

          //
          // Montgomery method engine
          //

          BN.mont = function mont(num) {
            return new Mont(num);
          };
          function Mont(m) {
            Red.call(this, m);
            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
              this.shift += 26 - this.shift % 26;
            }
            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);
            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
          }
          inherits(Mont, Red);
          Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
          };
          Mont.prototype.convertFrom = function convertFrom(num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
          };
          Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
            }
            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Mont.prototype.invm = function invm(a) {
            // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
          };
        })(typeof module === 'undefined' || module, this);
      }, {
        "buffer": 133
      }],
      133: [function (require, module, exports) {}, {}],
      134: [function (require, module, exports) {
        const basex = require('base-x');
        const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
        module.exports = basex(ALPHABET);
      }, {
        "base-x": 130
      }],
      135: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.graphql = void 0;
        exports.initGraphQLTada = initGraphQLTada;
        exports.maskFragments = maskFragments;
        exports.parse = parse;
        exports.readFragment = readFragment;
        exports.unsafe_readResult = unsafe_readResult;
        var _graphql = require("@0no-co/graphql.web");
        function initGraphQLTada() {
          function graphql(e, i) {
            var a = (0, _graphql.parse)(e).definitions;
            var t = new Set();
            for (var s of i || []) {
              for (var d of s.definitions) {
                if (d.kind === _graphql.Kind.FRAGMENT_DEFINITION && !t.has(d)) {
                  a.push(d);
                  t.add(d);
                }
              }
            }
            if (a[0].kind === _graphql.Kind.FRAGMENT_DEFINITION && a[0].directives) {
              a[0].directives = a[0].directives.filter(n => "_unmask" !== n.name.value);
            }
            return {
              kind: _graphql.Kind.DOCUMENT,
              definitions: a
            };
          }
          graphql.scalar = function scalar(n, r) {
            return r;
          };
          graphql.persisted = function persisted(r, e) {
            return {
              kind: _graphql.Kind.DOCUMENT,
              definitions: e ? e.definitions : [],
              documentId: r
            };
          };
          return graphql;
        }
        function parse(n) {
          return (0, _graphql.parse)(n);
        }
        function readFragment(...n) {
          return 2 === n.length ? n[1] : n[0];
        }
        function maskFragments(n, r) {
          return r;
        }
        function unsafe_readResult(n, r) {
          return r;
        }
        var e = exports.graphql = initGraphQLTada();
      }, {
        "@0no-co/graphql.web": 6
      }],
      136: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GraphQLError = void 0;
        exports.formatError = formatError;
        exports.printError = printError;
        var _isObjectLike = require("../jsutils/isObjectLike.mjs");
        var _location = require("../language/location.mjs");
        var _printLocation = require("../language/printLocation.mjs");
        function toNormalizedOptions(args) {
          const firstArg = args[0];
          if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {
            return {
              nodes: firstArg,
              source: args[1],
              positions: args[2],
              path: args[3],
              originalError: args[4],
              extensions: args[5]
            };
          }
          return firstArg;
        }
        /**
         * A GraphQLError describes an Error found during the parse, validate, or
         * execute phases of performing a GraphQL operation. In addition to a message
         * and stack trace, it also includes information about the locations in a
         * GraphQL document and/or execution result that correspond to the Error.
         */

        class GraphQLError extends Error {
          /**
           * An array of `{ line, column }` locations within the source GraphQL document
           * which correspond to this error.
           *
           * Errors during validation often contain multiple locations, for example to
           * point out two things with the same name. Errors during execution include a
           * single location, the field which produced the error.
           *
           * Enumerable, and appears in the result of JSON.stringify().
           */

          /**
           * An array describing the JSON-path into the execution response which
           * corresponds to this error. Only included for errors during execution.
           *
           * Enumerable, and appears in the result of JSON.stringify().
           */

          /**
           * An array of GraphQL AST Nodes corresponding to this error.
           */

          /**
           * The source GraphQL document for the first location of this error.
           *
           * Note that if this Error represents more than one node, the source may not
           * represent nodes after the first node.
           */

          /**
           * An array of character offsets within the source GraphQL document
           * which correspond to this error.
           */

          /**
           * The original error thrown from a field resolver during execution.
           */

          /**
           * Extension fields to add to the formatted error.
           */

          /**
           * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
           */
          constructor(message, ...rawArgs) {
            var _this$nodes, _nodeLocations$, _ref;
            const {
              nodes,
              source,
              positions,
              path,
              originalError,
              extensions
            } = toNormalizedOptions(rawArgs);
            super(message);
            this.name = 'GraphQLError';
            this.path = path !== null && path !== void 0 ? path : undefined;
            this.originalError = originalError !== null && originalError !== void 0 ? originalError : undefined; // Compute list of blame nodes.

            this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined);
            const nodeLocations = undefinedIfEmpty((_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map(node => node.loc).filter(loc => loc != null)); // Compute locations in the source for the given nodes/positions.

            this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;
            this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(loc => loc.start);
            this.locations = positions && source ? positions.map(pos => (0, _location.getLocation)(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(loc => (0, _location.getLocation)(loc.source, loc.start));
            const originalExtensions = (0, _isObjectLike.isObjectLike)(originalError === null || originalError === void 0 ? void 0 : originalError.extensions) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : undefined;
            this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : Object.create(null); // Only properties prescribed by the spec should be enumerable.
            // Keep the rest as non-enumerable.

            Object.defineProperties(this, {
              message: {
                writable: true,
                enumerable: true
              },
              name: {
                enumerable: false
              },
              nodes: {
                enumerable: false
              },
              source: {
                enumerable: false
              },
              positions: {
                enumerable: false
              },
              originalError: {
                enumerable: false
              }
            }); // Include (non-enumerable) stack trace.

            /* c8 ignore start */
            // FIXME: https://github.com/graphql/graphql-js/issues/2317

            if (originalError !== null && originalError !== void 0 && originalError.stack) {
              Object.defineProperty(this, 'stack', {
                value: originalError.stack,
                writable: true,
                configurable: true
              });
            } else if (Error.captureStackTrace) {
              Error.captureStackTrace(this, GraphQLError);
            } else {
              Object.defineProperty(this, 'stack', {
                value: Error().stack,
                writable: true,
                configurable: true
              });
            }
            /* c8 ignore stop */
          }

          get [Symbol.toStringTag]() {
            return 'GraphQLError';
          }
          toString() {
            let output = this.message;
            if (this.nodes) {
              for (const node of this.nodes) {
                if (node.loc) {
                  output += '\n\n' + (0, _printLocation.printLocation)(node.loc);
                }
              }
            } else if (this.source && this.locations) {
              for (const location of this.locations) {
                output += '\n\n' + (0, _printLocation.printSourceLocation)(this.source, location);
              }
            }
            return output;
          }
          toJSON() {
            const formattedError = {
              message: this.message
            };
            if (this.locations != null) {
              formattedError.locations = this.locations;
            }
            if (this.path != null) {
              formattedError.path = this.path;
            }
            if (this.extensions != null && Object.keys(this.extensions).length > 0) {
              formattedError.extensions = this.extensions;
            }
            return formattedError;
          }
        }
        exports.GraphQLError = GraphQLError;
        function undefinedIfEmpty(array) {
          return array === undefined || array.length === 0 ? undefined : array;
        }
        /**
         * See: https://spec.graphql.org/draft/#sec-Errors
         */

        /**
         * Prints a GraphQLError to a string, representing useful location information
         * about the error's position in the source.
         *
         * @deprecated Please use `error.toString` instead. Will be removed in v17
         */
        function printError(error) {
          return error.toString();
        }
        /**
         * Given a GraphQLError, format it according to the rules described by the
         * Response Format, Errors section of the GraphQL Specification.
         *
         * @deprecated Please use `error.toJSON` instead. Will be removed in v17
         */

        function formatError(error) {
          return error.toJSON();
        }
      }, {
        "../jsutils/isObjectLike.mjs": 158,
        "../language/location.mjs": 178,
        "../language/printLocation.mjs": 181
      }],
      137: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "GraphQLError", {
          enumerable: true,
          get: function () {
            return _GraphQLError.GraphQLError;
          }
        });
        Object.defineProperty(exports, "formatError", {
          enumerable: true,
          get: function () {
            return _GraphQLError.formatError;
          }
        });
        Object.defineProperty(exports, "locatedError", {
          enumerable: true,
          get: function () {
            return _locatedError.locatedError;
          }
        });
        Object.defineProperty(exports, "printError", {
          enumerable: true,
          get: function () {
            return _GraphQLError.printError;
          }
        });
        Object.defineProperty(exports, "syntaxError", {
          enumerable: true,
          get: function () {
            return _syntaxError.syntaxError;
          }
        });
        var _GraphQLError = require("./GraphQLError.mjs");
        var _syntaxError = require("./syntaxError.mjs");
        var _locatedError = require("./locatedError.mjs");
      }, {
        "./GraphQLError.mjs": 136,
        "./locatedError.mjs": 138,
        "./syntaxError.mjs": 139
      }],
      138: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.locatedError = locatedError;
        var _toError = require("../jsutils/toError.mjs");
        var _GraphQLError = require("./GraphQLError.mjs");
        /**
         * Given an arbitrary value, presumably thrown while attempting to execute a
         * GraphQL operation, produce a new GraphQLError aware of the location in the
         * document responsible for the original Error.
         */

        function locatedError(rawOriginalError, nodes, path) {
          var _nodes;
          const originalError = (0, _toError.toError)(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.

          if (isLocatedGraphQLError(originalError)) {
            return originalError;
          }
          return new _GraphQLError.GraphQLError(originalError.message, {
            nodes: (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes,
            source: originalError.source,
            positions: originalError.positions,
            path,
            originalError
          });
        }
        function isLocatedGraphQLError(error) {
          return Array.isArray(error.path);
        }
      }, {
        "../jsutils/toError.mjs": 169,
        "./GraphQLError.mjs": 136
      }],
      139: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.syntaxError = syntaxError;
        var _GraphQLError = require("./GraphQLError.mjs");
        /**
         * Produces a GraphQLError representing a syntax error, containing useful
         * descriptive information about the syntax error's position in the source.
         */

        function syntaxError(source, position, description) {
          return new _GraphQLError.GraphQLError(`Syntax Error: ${description}`, {
            source,
            positions: [position]
          });
        }
      }, {
        "./GraphQLError.mjs": 136
      }],
      140: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.collectFields = collectFields;
        exports.collectSubfields = collectSubfields;
        var _kinds = require("../language/kinds.mjs");
        var _definition = require("../type/definition.mjs");
        var _directives = require("../type/directives.mjs");
        var _typeFromAST = require("../utilities/typeFromAST.mjs");
        var _values = require("./values.mjs");
        /**
         * Given a selectionSet, collects all of the fields and returns them.
         *
         * CollectFields requires the "runtime type" of an object. For a field that
         * returns an Interface or Union type, the "runtime type" will be the actual
         * object type returned by that field.
         *
         * @internal
         */

        function collectFields(schema, fragments, variableValues, runtimeType, selectionSet) {
          const fields = new Map();
          collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, new Set());
          return fields;
        }
        /**
         * Given an array of field nodes, collects all of the subfields of the passed
         * in fields, and returns them at the end.
         *
         * CollectSubFields requires the "return type" of an object. For a field that
         * returns an Interface or Union type, the "return type" will be the actual
         * object type returned by that field.
         *
         * @internal
         */

        function collectSubfields(schema, fragments, variableValues, returnType, fieldNodes) {
          const subFieldNodes = new Map();
          const visitedFragmentNames = new Set();
          for (const node of fieldNodes) {
            if (node.selectionSet) {
              collectFieldsImpl(schema, fragments, variableValues, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);
            }
          }
          return subFieldNodes;
        }
        function collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {
          for (const selection of selectionSet.selections) {
            switch (selection.kind) {
              case _kinds.Kind.FIELD:
                {
                  if (!shouldIncludeNode(variableValues, selection)) {
                    continue;
                  }
                  const name = getFieldEntryKey(selection);
                  const fieldList = fields.get(name);
                  if (fieldList !== undefined) {
                    fieldList.push(selection);
                  } else {
                    fields.set(name, [selection]);
                  }
                  break;
                }
              case _kinds.Kind.INLINE_FRAGMENT:
                {
                  if (!shouldIncludeNode(variableValues, selection) || !doesFragmentConditionMatch(schema, selection, runtimeType)) {
                    continue;
                  }
                  collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
                  break;
                }
              case _kinds.Kind.FRAGMENT_SPREAD:
                {
                  const fragName = selection.name.value;
                  if (visitedFragmentNames.has(fragName) || !shouldIncludeNode(variableValues, selection)) {
                    continue;
                  }
                  visitedFragmentNames.add(fragName);
                  const fragment = fragments[fragName];
                  if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {
                    continue;
                  }
                  collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
                  break;
                }
            }
          }
        }
        /**
         * Determines if a field should be included based on the `@include` and `@skip`
         * directives, where `@skip` has higher precedence than `@include`.
         */

        function shouldIncludeNode(variableValues, node) {
          const skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, variableValues);
          if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
            return false;
          }
          const include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, variableValues);
          if ((include === null || include === void 0 ? void 0 : include.if) === false) {
            return false;
          }
          return true;
        }
        /**
         * Determines if a fragment is applicable to the given type.
         */

        function doesFragmentConditionMatch(schema, fragment, type) {
          const typeConditionNode = fragment.typeCondition;
          if (!typeConditionNode) {
            return true;
          }
          const conditionalType = (0, _typeFromAST.typeFromAST)(schema, typeConditionNode);
          if (conditionalType === type) {
            return true;
          }
          if ((0, _definition.isAbstractType)(conditionalType)) {
            return schema.isSubType(conditionalType, type);
          }
          return false;
        }
        /**
         * Implements the logic to compute the key of a given field's entry
         */

        function getFieldEntryKey(node) {
          return node.alias ? node.alias.value : node.name.value;
        }
      }, {
        "../language/kinds.mjs": 176,
        "../type/definition.mjs": 188,
        "../type/directives.mjs": 189,
        "../utilities/typeFromAST.mjs": 215,
        "./values.mjs": 145
      }],
      141: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.assertValidExecutionArguments = assertValidExecutionArguments;
        exports.buildExecutionContext = buildExecutionContext;
        exports.buildResolveInfo = buildResolveInfo;
        exports.defaultTypeResolver = exports.defaultFieldResolver = void 0;
        exports.execute = execute;
        exports.executeSync = executeSync;
        exports.getFieldDef = getFieldDef;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _inspect = require("../jsutils/inspect.mjs");
        var _invariant = require("../jsutils/invariant.mjs");
        var _isIterableObject = require("../jsutils/isIterableObject.mjs");
        var _isObjectLike = require("../jsutils/isObjectLike.mjs");
        var _isPromise = require("../jsutils/isPromise.mjs");
        var _memoize = require("../jsutils/memoize3.mjs");
        var _Path = require("../jsutils/Path.mjs");
        var _promiseForObject = require("../jsutils/promiseForObject.mjs");
        var _promiseReduce = require("../jsutils/promiseReduce.mjs");
        var _GraphQLError = require("../error/GraphQLError.mjs");
        var _locatedError = require("../error/locatedError.mjs");
        var _ast = require("../language/ast.mjs");
        var _kinds = require("../language/kinds.mjs");
        var _definition = require("../type/definition.mjs");
        var _introspection = require("../type/introspection.mjs");
        var _validate = require("../type/validate.mjs");
        var _collectFields = require("./collectFields.mjs");
        var _values = require("./values.mjs");
        /**
         * A memoized collection of relevant subfields with regard to the return
         * type. Memoizing ensures the subfields are not repeatedly calculated, which
         * saves overhead when resolving lists of values.
         */

        const collectSubfields = (0, _memoize.memoize3)((exeContext, returnType, fieldNodes) => (0, _collectFields.collectSubfields)(exeContext.schema, exeContext.fragments, exeContext.variableValues, returnType, fieldNodes));
        /**
         * Terminology
         *
         * "Definitions" are the generic name for top-level statements in the document.
         * Examples of this include:
         * 1) Operations (such as a query)
         * 2) Fragments
         *
         * "Operations" are a generic name for requests in the document.
         * Examples of this include:
         * 1) query,
         * 2) mutation
         *
         * "Selections" are the definitions that can appear legally and at
         * single level of the query. These include:
         * 1) field references e.g `a`
         * 2) fragment "spreads" e.g. `...c`
         * 3) inline fragment "spreads" e.g. `...on Type { a }`
         */

        /**
         * Data that must be available at all points during query execution.
         *
         * Namely, schema of the type system that is currently executing,
         * and the fragments defined in the query document
         */

        /**
         * Implements the "Executing requests" section of the GraphQL specification.
         *
         * Returns either a synchronous ExecutionResult (if all encountered resolvers
         * are synchronous), or a Promise of an ExecutionResult that will eventually be
         * resolved and never rejected.
         *
         * If the arguments to this function do not result in a legal execution context,
         * a GraphQLError will be thrown immediately explaining the invalid input.
         */
        function execute(args) {
          // Temporary for v15 to v16 migration. Remove in v17
          arguments.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');
          const {
            schema,
            document,
            variableValues,
            rootValue
          } = args; // If arguments are missing or incorrect, throw an error.

          assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
          // a "Response" with only errors is returned.

          const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.

          if (!('schema' in exeContext)) {
            return {
              errors: exeContext
            };
          } // Return a Promise that will eventually resolve to the data described by
          // The "Response" section of the GraphQL specification.
          //
          // If errors are encountered while executing a GraphQL field, only that
          // field and its descendants will be omitted, and sibling fields will still
          // be executed. An execution which encounters errors will still result in a
          // resolved Promise.
          //
          // Errors from sub-fields of a NonNull type may propagate to the top level,
          // at which point we still log the error and null the parent field, which
          // in this case is the entire response.

          try {
            const {
              operation
            } = exeContext;
            const result = executeOperation(exeContext, operation, rootValue);
            if ((0, _isPromise.isPromise)(result)) {
              return result.then(data => buildResponse(data, exeContext.errors), error => {
                exeContext.errors.push(error);
                return buildResponse(null, exeContext.errors);
              });
            }
            return buildResponse(result, exeContext.errors);
          } catch (error) {
            exeContext.errors.push(error);
            return buildResponse(null, exeContext.errors);
          }
        }
        /**
         * Also implements the "Executing requests" section of the GraphQL specification.
         * However, it guarantees to complete synchronously (or throw an error) assuming
         * that all field resolvers are also synchronous.
         */

        function executeSync(args) {
          const result = execute(args); // Assert that the execution was synchronous.

          if ((0, _isPromise.isPromise)(result)) {
            throw new Error('GraphQL execution failed to complete synchronously.');
          }
          return result;
        }
        /**
         * Given a completed execution context and data, build the `{ errors, data }`
         * response defined by the "Response" section of the GraphQL specification.
         */

        function buildResponse(data, errors) {
          return errors.length === 0 ? {
            data
          } : {
            errors,
            data
          };
        }
        /**
         * Essential assertions before executing to provide developer feedback for
         * improper use of the GraphQL library.
         *
         * @internal
         */

        function assertValidExecutionArguments(schema, document, rawVariableValues) {
          document || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.

          (0, _validate.assertValidSchema)(schema); // Variables, if provided, must be an object.

          rawVariableValues == null || (0, _isObjectLike.isObjectLike)(rawVariableValues) || (0, _devAssert.devAssert)(false, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');
        }
        /**
         * Constructs a ExecutionContext object from the arguments passed to
         * execute, which we will pass throughout the other execution methods.
         *
         * Throws a GraphQLError if a valid execution context cannot be created.
         *
         * @internal
         */

        function buildExecutionContext(args) {
          var _definition$name, _operation$variableDe;
          const {
            schema,
            document,
            rootValue,
            contextValue,
            variableValues: rawVariableValues,
            operationName,
            fieldResolver,
            typeResolver,
            subscribeFieldResolver
          } = args;
          let operation;
          const fragments = Object.create(null);
          for (const definition of document.definitions) {
            switch (definition.kind) {
              case _kinds.Kind.OPERATION_DEFINITION:
                if (operationName == null) {
                  if (operation !== undefined) {
                    return [new _GraphQLError.GraphQLError('Must provide operation name if query contains multiple operations.')];
                  }
                  operation = definition;
                } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
                  operation = definition;
                }
                break;
              case _kinds.Kind.FRAGMENT_DEFINITION:
                fragments[definition.name.value] = definition;
                break;
              default: // ignore non-executable definitions
            }
          }

          if (!operation) {
            if (operationName != null) {
              return [new _GraphQLError.GraphQLError(`Unknown operation named "${operationName}".`)];
            }
            return [new _GraphQLError.GraphQLError('Must provide an operation.')];
          } // FIXME: https://github.com/graphql/graphql-js/issues/2203

          /* c8 ignore next */

          const variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];
          const coercedVariableValues = (0, _values.getVariableValues)(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {
            maxErrors: 50
          });
          if (coercedVariableValues.errors) {
            return coercedVariableValues.errors;
          }
          return {
            schema,
            fragments,
            rootValue,
            contextValue,
            operation,
            variableValues: coercedVariableValues.coerced,
            fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,
            typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,
            subscribeFieldResolver: subscribeFieldResolver !== null && subscribeFieldResolver !== void 0 ? subscribeFieldResolver : defaultFieldResolver,
            errors: []
          };
        }
        /**
         * Implements the "Executing operations" section of the spec.
         */

        function executeOperation(exeContext, operation, rootValue) {
          const rootType = exeContext.schema.getRootType(operation.operation);
          if (rootType == null) {
            throw new _GraphQLError.GraphQLError(`Schema is not configured to execute ${operation.operation} operation.`, {
              nodes: operation
            });
          }
          const rootFields = (0, _collectFields.collectFields)(exeContext.schema, exeContext.fragments, exeContext.variableValues, rootType, operation.selectionSet);
          const path = undefined;
          switch (operation.operation) {
            case _ast.OperationTypeNode.QUERY:
              return executeFields(exeContext, rootType, rootValue, path, rootFields);
            case _ast.OperationTypeNode.MUTATION:
              return executeFieldsSerially(exeContext, rootType, rootValue, path, rootFields);
            case _ast.OperationTypeNode.SUBSCRIPTION:
              // TODO: deprecate `subscribe` and move all logic here
              // Temporary solution until we finish merging execute and subscribe together
              return executeFields(exeContext, rootType, rootValue, path, rootFields);
          }
        }
        /**
         * Implements the "Executing selection sets" section of the spec
         * for fields that must be executed serially.
         */

        function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
          return (0, _promiseReduce.promiseReduce)(fields.entries(), (results, [responseName, fieldNodes]) => {
            const fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);
            const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
            if (result === undefined) {
              return results;
            }
            if ((0, _isPromise.isPromise)(result)) {
              return result.then(resolvedResult => {
                results[responseName] = resolvedResult;
                return results;
              });
            }
            results[responseName] = result;
            return results;
          }, Object.create(null));
        }
        /**
         * Implements the "Executing selection sets" section of the spec
         * for fields that may be executed in parallel.
         */

        function executeFields(exeContext, parentType, sourceValue, path, fields) {
          const results = Object.create(null);
          let containsPromise = false;
          try {
            for (const [responseName, fieldNodes] of fields.entries()) {
              const fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);
              const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
              if (result !== undefined) {
                results[responseName] = result;
                if ((0, _isPromise.isPromise)(result)) {
                  containsPromise = true;
                }
              }
            }
          } catch (error) {
            if (containsPromise) {
              // Ensure that any promises returned by other fields are handled, as they may also reject.
              return (0, _promiseForObject.promiseForObject)(results).finally(() => {
                throw error;
              });
            }
            throw error;
          } // If there are no promises, we can just return the object

          if (!containsPromise) {
            return results;
          } // Otherwise, results is a map from field name to the result of resolving that
          // field, which is possibly a promise. Return a promise that will return this
          // same map, but with any promises replaced with the values they resolved to.

          return (0, _promiseForObject.promiseForObject)(results);
        }
        /**
         * Implements the "Executing fields" section of the spec
         * In particular, this function figures out the value that the field returns by
         * calling its resolve function, then calls completeValue to complete promises,
         * serialize scalars, or execute the sub-selection-set for objects.
         */

        function executeField(exeContext, parentType, source, fieldNodes, path) {
          var _fieldDef$resolve;
          const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);
          if (!fieldDef) {
            return;
          }
          const returnType = fieldDef.type;
          const resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;
          const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).

          try {
            // Build a JS object of arguments from the field.arguments AST, using the
            // variables scope to fulfill any variable references.
            // TODO: find a way to memoize, in case this field is within a List type.
            const args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that
            // is provided to every resolve function within an execution. It is commonly
            // used to represent an authenticated user, or request-specific caches.

            const contextValue = exeContext.contextValue;
            const result = resolveFn(source, args, contextValue, info);
            let completed;
            if ((0, _isPromise.isPromise)(result)) {
              completed = result.then(resolved => completeValue(exeContext, returnType, fieldNodes, info, path, resolved));
            } else {
              completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);
            }
            if ((0, _isPromise.isPromise)(completed)) {
              // Note: we don't rely on a `catch` method, but we do expect "thenable"
              // to take a second callback for the error case.
              return completed.then(undefined, rawError => {
                const error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));
                return handleFieldError(error, returnType, exeContext);
              });
            }
            return completed;
          } catch (rawError) {
            const error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));
            return handleFieldError(error, returnType, exeContext);
          }
        }
        /**
         * @internal
         */

        function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
          // The resolve function's optional fourth argument is a collection of
          // information about the current execution state.
          return {
            fieldName: fieldDef.name,
            fieldNodes,
            returnType: fieldDef.type,
            parentType,
            path,
            schema: exeContext.schema,
            fragments: exeContext.fragments,
            rootValue: exeContext.rootValue,
            operation: exeContext.operation,
            variableValues: exeContext.variableValues
          };
        }
        function handleFieldError(error, returnType, exeContext) {
          // If the field type is non-nullable, then it is resolved without any
          // protection from errors, however it still properly locates the error.
          if ((0, _definition.isNonNullType)(returnType)) {
            throw error;
          } // Otherwise, error protection is applied, logging the error and resolving
          // a null value for this field if one is encountered.

          exeContext.errors.push(error);
          return null;
        }
        /**
         * Implements the instructions for completeValue as defined in the
         * "Value Completion" section of the spec.
         *
         * If the field type is Non-Null, then this recursively completes the value
         * for the inner type. It throws a field error if that completion returns null,
         * as per the "Nullability" section of the spec.
         *
         * If the field type is a List, then this recursively completes the value
         * for the inner type on each item in the list.
         *
         * If the field type is a Scalar or Enum, ensures the completed value is a legal
         * value of the type by calling the `serialize` method of GraphQL type
         * definition.
         *
         * If the field is an abstract type, determine the runtime type of the value
         * and then complete based on that type
         *
         * Otherwise, the field type expects a sub-selection set, and will complete the
         * value by executing all sub-selections.
         */

        function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
          // If result is an Error, throw a located error.
          if (result instanceof Error) {
            throw result;
          } // If field type is NonNull, complete for inner type, and throw field error
          // if result is null.

          if ((0, _definition.isNonNullType)(returnType)) {
            const completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);
            if (completed === null) {
              throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);
            }
            return completed;
          } // If result value is null or undefined then return null.

          if (result == null) {
            return null;
          } // If field type is List, complete each item in the list with the inner type

          if ((0, _definition.isListType)(returnType)) {
            return completeListValue(exeContext, returnType, fieldNodes, info, path, result);
          } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
          // returning null if serialization is not possible.

          if ((0, _definition.isLeafType)(returnType)) {
            return completeLeafValue(returnType, result);
          } // If field type is an abstract type, Interface or Union, determine the
          // runtime Object type and complete for that type.

          if ((0, _definition.isAbstractType)(returnType)) {
            return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);
          } // If field type is Object, execute and complete all sub-selections.

          if ((0, _definition.isObjectType)(returnType)) {
            return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);
          }
          /* c8 ignore next 6 */
          // Not reachable, all possible output types have been considered.

          false || (0, _invariant.invariant)(false, 'Cannot complete value of unexpected output type: ' + (0, _inspect.inspect)(returnType));
        }
        /**
         * Complete a list value by completing each item in the list with the
         * inner type
         */

        function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
          if (!(0, _isIterableObject.isIterableObject)(result)) {
            throw new _GraphQLError.GraphQLError(`Expected Iterable, but did not find one for field "${info.parentType.name}.${info.fieldName}".`);
          } // This is specified as a simple map, however we're optimizing the path
          // where the list contains no Promises by avoiding creating another Promise.

          const itemType = returnType.ofType;
          let containsPromise = false;
          const completedResults = Array.from(result, (item, index) => {
            // No need to modify the info object containing the path,
            // since from here on it is not ever accessed by resolver functions.
            const itemPath = (0, _Path.addPath)(path, index, undefined);
            try {
              let completedItem;
              if ((0, _isPromise.isPromise)(item)) {
                completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved));
              } else {
                completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);
              }
              if ((0, _isPromise.isPromise)(completedItem)) {
                containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect "thenable"
                // to take a second callback for the error case.

                return completedItem.then(undefined, rawError => {
                  const error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));
                  return handleFieldError(error, itemType, exeContext);
                });
              }
              return completedItem;
            } catch (rawError) {
              const error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));
              return handleFieldError(error, itemType, exeContext);
            }
          });
          return containsPromise ? Promise.all(completedResults) : completedResults;
        }
        /**
         * Complete a Scalar or Enum by serializing to a valid value, returning
         * null if serialization is not possible.
         */

        function completeLeafValue(returnType, result) {
          const serializedResult = returnType.serialize(result);
          if (serializedResult == null) {
            throw new Error(`Expected \`${(0, _inspect.inspect)(returnType)}.serialize(${(0, _inspect.inspect)(result)})\` to ` + `return non-nullable value, returned: ${(0, _inspect.inspect)(serializedResult)}`);
          }
          return serializedResult;
        }
        /**
         * Complete a value of an abstract type by determining the runtime object type
         * of that value, then complete the value for that type.
         */

        function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
          var _returnType$resolveTy;
          const resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;
          const contextValue = exeContext.contextValue;
          const runtimeType = resolveTypeFn(result, contextValue, info, returnType);
          if ((0, _isPromise.isPromise)(runtimeType)) {
            return runtimeType.then(resolvedRuntimeType => completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result));
          }
          return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
        }
        function ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {
          if (runtimeTypeName == null) {
            throw new _GraphQLError.GraphQLError(`Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}". Either the "${returnType.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`, fieldNodes);
          } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`
          // TODO: remove in 17.0.0 release

          if ((0, _definition.isObjectType)(runtimeTypeName)) {
            throw new _GraphQLError.GraphQLError('Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.');
          }
          if (typeof runtimeTypeName !== 'string') {
            throw new _GraphQLError.GraphQLError(`Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}" with ` + `value ${(0, _inspect.inspect)(result)}, received "${(0, _inspect.inspect)(runtimeTypeName)}".`);
          }
          const runtimeType = exeContext.schema.getType(runtimeTypeName);
          if (runtimeType == null) {
            throw new _GraphQLError.GraphQLError(`Abstract type "${returnType.name}" was resolved to a type "${runtimeTypeName}" that does not exist inside the schema.`, {
              nodes: fieldNodes
            });
          }
          if (!(0, _definition.isObjectType)(runtimeType)) {
            throw new _GraphQLError.GraphQLError(`Abstract type "${returnType.name}" was resolved to a non-object type "${runtimeTypeName}".`, {
              nodes: fieldNodes
            });
          }
          if (!exeContext.schema.isSubType(returnType, runtimeType)) {
            throw new _GraphQLError.GraphQLError(`Runtime Object type "${runtimeType.name}" is not a possible type for "${returnType.name}".`, {
              nodes: fieldNodes
            });
          }
          return runtimeType;
        }
        /**
         * Complete an Object value by executing all sub-selections.
         */

        function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
          // Collect sub-fields to execute to complete this value.
          const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the
          // current result. If isTypeOf returns false, then raise an error rather
          // than continuing execution.

          if (returnType.isTypeOf) {
            const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);
            if ((0, _isPromise.isPromise)(isTypeOf)) {
              return isTypeOf.then(resolvedIsTypeOf => {
                if (!resolvedIsTypeOf) {
                  throw invalidReturnTypeError(returnType, result, fieldNodes);
                }
                return executeFields(exeContext, returnType, result, path, subFieldNodes);
              });
            }
            if (!isTypeOf) {
              throw invalidReturnTypeError(returnType, result, fieldNodes);
            }
          }
          return executeFields(exeContext, returnType, result, path, subFieldNodes);
        }
        function invalidReturnTypeError(returnType, result, fieldNodes) {
          return new _GraphQLError.GraphQLError(`Expected value of type "${returnType.name}" but got: ${(0, _inspect.inspect)(result)}.`, {
            nodes: fieldNodes
          });
        }
        /**
         * If a resolveType function is not given, then a default resolve behavior is
         * used which attempts two strategies:
         *
         * First, See if the provided value has a `__typename` field defined, if so, use
         * that value as name of the resolved type.
         *
         * Otherwise, test each possible type for the abstract type by calling
         * isTypeOf for the object being coerced, returning the first type that matches.
         */

        const defaultTypeResolver = function (value, contextValue, info, abstractType) {
          // First, look for `__typename`.
          if ((0, _isObjectLike.isObjectLike)(value) && typeof value.__typename === 'string') {
            return value.__typename;
          } // Otherwise, test each possible type.

          const possibleTypes = info.schema.getPossibleTypes(abstractType);
          const promisedIsTypeOfResults = [];
          for (let i = 0; i < possibleTypes.length; i++) {
            const type = possibleTypes[i];
            if (type.isTypeOf) {
              const isTypeOfResult = type.isTypeOf(value, contextValue, info);
              if ((0, _isPromise.isPromise)(isTypeOfResult)) {
                promisedIsTypeOfResults[i] = isTypeOfResult;
              } else if (isTypeOfResult) {
                return type.name;
              }
            }
          }
          if (promisedIsTypeOfResults.length) {
            return Promise.all(promisedIsTypeOfResults).then(isTypeOfResults => {
              for (let i = 0; i < isTypeOfResults.length; i++) {
                if (isTypeOfResults[i]) {
                  return possibleTypes[i].name;
                }
              }
            });
          }
        };
        /**
         * If a resolve function is not given, then a default resolve behavior is used
         * which takes the property of the source object of the same name as the field
         * and returns it as the result, or if it's a function, returns the result
         * of calling that function while passing along args and context value.
         */
        exports.defaultTypeResolver = defaultTypeResolver;
        const defaultFieldResolver = function (source, args, contextValue, info) {
          // ensure source is a value for which property access is acceptable.
          if ((0, _isObjectLike.isObjectLike)(source) || typeof source === 'function') {
            const property = source[info.fieldName];
            if (typeof property === 'function') {
              return source[info.fieldName](args, contextValue, info);
            }
            return property;
          }
        };
        /**
         * This method looks up the field on the given type definition.
         * It has special casing for the three introspection fields,
         * __schema, __type and __typename. __typename is special because
         * it can always be queried as a field, even in situations where no
         * other fields are allowed, like on a Union. __schema and __type
         * could get automatically added to the query type, but that would
         * require mutating type definitions, which would cause issues.
         *
         * @internal
         */
        exports.defaultFieldResolver = defaultFieldResolver;
        function getFieldDef(schema, parentType, fieldNode) {
          const fieldName = fieldNode.name.value;
          if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
            return _introspection.SchemaMetaFieldDef;
          } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
            return _introspection.TypeMetaFieldDef;
          } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {
            return _introspection.TypeNameMetaFieldDef;
          }
          return parentType.getFields()[fieldName];
        }
      }, {
        "../error/GraphQLError.mjs": 136,
        "../error/locatedError.mjs": 138,
        "../jsutils/Path.mjs": 148,
        "../jsutils/devAssert.mjs": 149,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/invariant.mjs": 155,
        "../jsutils/isIterableObject.mjs": 157,
        "../jsutils/isObjectLike.mjs": 158,
        "../jsutils/isPromise.mjs": 159,
        "../jsutils/memoize3.mjs": 163,
        "../jsutils/promiseForObject.mjs": 166,
        "../jsutils/promiseReduce.mjs": 167,
        "../language/ast.mjs": 171,
        "../language/kinds.mjs": 176,
        "../type/definition.mjs": 188,
        "../type/introspection.mjs": 191,
        "../type/validate.mjs": 194,
        "./collectFields.mjs": 140,
        "./values.mjs": 145
      }],
      142: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "createSourceEventStream", {
          enumerable: true,
          get: function () {
            return _subscribe.createSourceEventStream;
          }
        });
        Object.defineProperty(exports, "defaultFieldResolver", {
          enumerable: true,
          get: function () {
            return _execute.defaultFieldResolver;
          }
        });
        Object.defineProperty(exports, "defaultTypeResolver", {
          enumerable: true,
          get: function () {
            return _execute.defaultTypeResolver;
          }
        });
        Object.defineProperty(exports, "execute", {
          enumerable: true,
          get: function () {
            return _execute.execute;
          }
        });
        Object.defineProperty(exports, "executeSync", {
          enumerable: true,
          get: function () {
            return _execute.executeSync;
          }
        });
        Object.defineProperty(exports, "getArgumentValues", {
          enumerable: true,
          get: function () {
            return _values.getArgumentValues;
          }
        });
        Object.defineProperty(exports, "getDirectiveValues", {
          enumerable: true,
          get: function () {
            return _values.getDirectiveValues;
          }
        });
        Object.defineProperty(exports, "getVariableValues", {
          enumerable: true,
          get: function () {
            return _values.getVariableValues;
          }
        });
        Object.defineProperty(exports, "responsePathAsArray", {
          enumerable: true,
          get: function () {
            return _Path.pathToArray;
          }
        });
        Object.defineProperty(exports, "subscribe", {
          enumerable: true,
          get: function () {
            return _subscribe.subscribe;
          }
        });
        var _Path = require("../jsutils/Path.mjs");
        var _execute = require("./execute.mjs");
        var _subscribe = require("./subscribe.mjs");
        var _values = require("./values.mjs");
      }, {
        "../jsutils/Path.mjs": 148,
        "./execute.mjs": 141,
        "./subscribe.mjs": 144,
        "./values.mjs": 145
      }],
      143: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.mapAsyncIterator = mapAsyncIterator;
        /**
         * Given an AsyncIterable and a callback function, return an AsyncIterator
         * which produces values mapped via calling the callback function.
         */
        function mapAsyncIterator(iterable, callback) {
          const iterator = iterable[Symbol.asyncIterator]();
          async function mapResult(result) {
            if (result.done) {
              return result;
            }
            try {
              return {
                value: await callback(result.value),
                done: false
              };
            } catch (error) {
              /* c8 ignore start */
              // FIXME: add test case
              if (typeof iterator.return === 'function') {
                try {
                  await iterator.return();
                } catch (_e) {
                  /* ignore error */
                }
              }
              throw error;
              /* c8 ignore stop */
            }
          }

          return {
            async next() {
              return mapResult(await iterator.next());
            },
            async return() {
              // If iterator.return() does not exist, then type R must be undefined.
              return typeof iterator.return === 'function' ? mapResult(await iterator.return()) : {
                value: undefined,
                done: true
              };
            },
            async throw(error) {
              if (typeof iterator.throw === 'function') {
                return mapResult(await iterator.throw(error));
              }
              throw error;
            },
            [Symbol.asyncIterator]() {
              return this;
            }
          };
        }
      }, {}],
      144: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createSourceEventStream = createSourceEventStream;
        exports.subscribe = subscribe;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _inspect = require("../jsutils/inspect.mjs");
        var _isAsyncIterable = require("../jsutils/isAsyncIterable.mjs");
        var _Path = require("../jsutils/Path.mjs");
        var _GraphQLError = require("../error/GraphQLError.mjs");
        var _locatedError = require("../error/locatedError.mjs");
        var _collectFields = require("./collectFields.mjs");
        var _execute = require("./execute.mjs");
        var _mapAsyncIterator = require("./mapAsyncIterator.mjs");
        var _values = require("./values.mjs");
        /**
         * Implements the "Subscribe" algorithm described in the GraphQL specification.
         *
         * Returns a Promise which resolves to either an AsyncIterator (if successful)
         * or an ExecutionResult (error). The promise will be rejected if the schema or
         * other arguments to this function are invalid, or if the resolved event stream
         * is not an async iterable.
         *
         * If the client-provided arguments to this function do not result in a
         * compliant subscription, a GraphQL Response (ExecutionResult) with
         * descriptive errors and no data will be returned.
         *
         * If the source stream could not be created due to faulty subscription
         * resolver logic or underlying systems, the promise will resolve to a single
         * ExecutionResult containing `errors` and no `data`.
         *
         * If the operation succeeded, the promise resolves to an AsyncIterator, which
         * yields a stream of ExecutionResults representing the response stream.
         *
         * Accepts either an object with named arguments, or individual arguments.
         */

        async function subscribe(args) {
          // Temporary for v15 to v16 migration. Remove in v17
          arguments.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');
          const resultOrStream = await createSourceEventStream(args);
          if (!(0, _isAsyncIterable.isAsyncIterable)(resultOrStream)) {
            return resultOrStream;
          } // For each payload yielded from a subscription, map it over the normal
          // GraphQL `execute` function, with `payload` as the rootValue.
          // This implements the "MapSourceToResponseEvent" algorithm described in
          // the GraphQL specification. The `execute` function provides the
          // "ExecuteSubscriptionEvent" algorithm, as it is nearly identical to the
          // "ExecuteQuery" algorithm, for which `execute` is also used.

          const mapSourceToResponse = payload => (0, _execute.execute)({
            ...args,
            rootValue: payload
          }); // Map every source value to a ExecutionResult value as described above.

          return (0, _mapAsyncIterator.mapAsyncIterator)(resultOrStream, mapSourceToResponse);
        }
        function toNormalizedArgs(args) {
          const firstArg = args[0];
          if (firstArg && 'document' in firstArg) {
            return firstArg;
          }
          return {
            schema: firstArg,
            // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613
            document: args[1],
            rootValue: args[2],
            contextValue: args[3],
            variableValues: args[4],
            operationName: args[5],
            subscribeFieldResolver: args[6]
          };
        }
        /**
         * Implements the "CreateSourceEventStream" algorithm described in the
         * GraphQL specification, resolving the subscription source event stream.
         *
         * Returns a Promise which resolves to either an AsyncIterable (if successful)
         * or an ExecutionResult (error). The promise will be rejected if the schema or
         * other arguments to this function are invalid, or if the resolved event stream
         * is not an async iterable.
         *
         * If the client-provided arguments to this function do not result in a
         * compliant subscription, a GraphQL Response (ExecutionResult) with
         * descriptive errors and no data will be returned.
         *
         * If the the source stream could not be created due to faulty subscription
         * resolver logic or underlying systems, the promise will resolve to a single
         * ExecutionResult containing `errors` and no `data`.
         *
         * If the operation succeeded, the promise resolves to the AsyncIterable for the
         * event stream returned by the resolver.
         *
         * A Source Event Stream represents a sequence of events, each of which triggers
         * a GraphQL execution for that event.
         *
         * This may be useful when hosting the stateful subscription service in a
         * different process or machine than the stateless GraphQL execution engine,
         * or otherwise separating these two steps. For more on this, see the
         * "Supporting Subscriptions at Scale" information in the GraphQL specification.
         */

        async function createSourceEventStream(...rawArgs) {
          const args = toNormalizedArgs(rawArgs);
          const {
            schema,
            document,
            variableValues
          } = args; // If arguments are missing or incorrectly typed, this is an internal
          // developer mistake which should throw an early error.

          (0, _execute.assertValidExecutionArguments)(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
          // a "Response" with only errors is returned.

          const exeContext = (0, _execute.buildExecutionContext)(args); // Return early errors if execution context failed.

          if (!('schema' in exeContext)) {
            return {
              errors: exeContext
            };
          }
          try {
            const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.

            if (!(0, _isAsyncIterable.isAsyncIterable)(eventStream)) {
              throw new Error('Subscription field must return Async Iterable. ' + `Received: ${(0, _inspect.inspect)(eventStream)}.`);
            }
            return eventStream;
          } catch (error) {
            // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.
            // Otherwise treat the error as a system-class error and re-throw it.
            if (error instanceof _GraphQLError.GraphQLError) {
              return {
                errors: [error]
              };
            }
            throw error;
          }
        }
        async function executeSubscription(exeContext) {
          const {
            schema,
            fragments,
            operation,
            variableValues,
            rootValue
          } = exeContext;
          const rootType = schema.getSubscriptionType();
          if (rootType == null) {
            throw new _GraphQLError.GraphQLError('Schema is not configured to execute subscription operation.', {
              nodes: operation
            });
          }
          const rootFields = (0, _collectFields.collectFields)(schema, fragments, variableValues, rootType, operation.selectionSet);
          const [responseName, fieldNodes] = [...rootFields.entries()][0];
          const fieldDef = (0, _execute.getFieldDef)(schema, rootType, fieldNodes[0]);
          if (!fieldDef) {
            const fieldName = fieldNodes[0].name.value;
            throw new _GraphQLError.GraphQLError(`The subscription field "${fieldName}" is not defined.`, {
              nodes: fieldNodes
            });
          }
          const path = (0, _Path.addPath)(undefined, responseName, rootType.name);
          const info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, rootType, path);
          try {
            var _fieldDef$subscribe;

            // Implements the "ResolveFieldEventStream" algorithm from GraphQL specification.
            // It differs from "ResolveFieldValue" due to providing a different `resolveFn`.
            // Build a JS object of arguments from the field.arguments AST, using the
            // variables scope to fulfill any variable references.
            const args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that
            // is provided to every resolve function within an execution. It is commonly
            // used to represent an authenticated user, or request-specific caches.

            const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an
            // AsyncIterable yielding raw payloads.

            const resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;
            const eventStream = await resolveFn(rootValue, args, contextValue, info);
            if (eventStream instanceof Error) {
              throw eventStream;
            }
            return eventStream;
          } catch (error) {
            throw (0, _locatedError.locatedError)(error, fieldNodes, (0, _Path.pathToArray)(path));
          }
        }
      }, {
        "../error/GraphQLError.mjs": 136,
        "../error/locatedError.mjs": 138,
        "../jsutils/Path.mjs": 148,
        "../jsutils/devAssert.mjs": 149,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/isAsyncIterable.mjs": 156,
        "./collectFields.mjs": 140,
        "./execute.mjs": 141,
        "./mapAsyncIterator.mjs": 143,
        "./values.mjs": 145
      }],
      145: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getArgumentValues = getArgumentValues;
        exports.getDirectiveValues = getDirectiveValues;
        exports.getVariableValues = getVariableValues;
        var _inspect = require("../jsutils/inspect.mjs");
        var _keyMap = require("../jsutils/keyMap.mjs");
        var _printPathArray = require("../jsutils/printPathArray.mjs");
        var _GraphQLError = require("../error/GraphQLError.mjs");
        var _kinds = require("../language/kinds.mjs");
        var _printer = require("../language/printer.mjs");
        var _definition = require("../type/definition.mjs");
        var _coerceInputValue = require("../utilities/coerceInputValue.mjs");
        var _typeFromAST = require("../utilities/typeFromAST.mjs");
        var _valueFromAST = require("../utilities/valueFromAST.mjs");
        /**
         * Prepares an object map of variableValues of the correct type based on the
         * provided variable definitions and arbitrary input. If the input cannot be
         * parsed to match the variable definitions, a GraphQLError will be thrown.
         *
         * Note: The returned value is a plain Object with a prototype, since it is
         * exposed to user code. Care should be taken to not pull values from the
         * Object prototype.
         */
        function getVariableValues(schema, varDefNodes, inputs, options) {
          const errors = [];
          const maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;
          try {
            const coerced = coerceVariableValues(schema, varDefNodes, inputs, error => {
              if (maxErrors != null && errors.length >= maxErrors) {
                throw new _GraphQLError.GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');
              }
              errors.push(error);
            });
            if (errors.length === 0) {
              return {
                coerced
              };
            }
          } catch (error) {
            errors.push(error);
          }
          return {
            errors
          };
        }
        function coerceVariableValues(schema, varDefNodes, inputs, onError) {
          const coercedValues = {};
          for (const varDefNode of varDefNodes) {
            const varName = varDefNode.variable.name.value;
            const varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);
            if (!(0, _definition.isInputType)(varType)) {
              // Must use input types for variables. This should be caught during
              // validation, however is checked again here for safety.
              const varTypeStr = (0, _printer.print)(varDefNode.type);
              onError(new _GraphQLError.GraphQLError(`Variable "$${varName}" expected value of type "${varTypeStr}" which cannot be used as an input type.`, {
                nodes: varDefNode.type
              }));
              continue;
            }
            if (!hasOwnProperty(inputs, varName)) {
              if (varDefNode.defaultValue) {
                coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);
              } else if ((0, _definition.isNonNullType)(varType)) {
                const varTypeStr = (0, _inspect.inspect)(varType);
                onError(new _GraphQLError.GraphQLError(`Variable "$${varName}" of required type "${varTypeStr}" was not provided.`, {
                  nodes: varDefNode
                }));
              }
              continue;
            }
            const value = inputs[varName];
            if (value === null && (0, _definition.isNonNullType)(varType)) {
              const varTypeStr = (0, _inspect.inspect)(varType);
              onError(new _GraphQLError.GraphQLError(`Variable "$${varName}" of non-null type "${varTypeStr}" must not be null.`, {
                nodes: varDefNode
              }));
              continue;
            }
            coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(value, varType, (path, invalidValue, error) => {
              let prefix = `Variable "$${varName}" got invalid value ` + (0, _inspect.inspect)(invalidValue);
              if (path.length > 0) {
                prefix += ` at "${varName}${(0, _printPathArray.printPathArray)(path)}"`;
              }
              onError(new _GraphQLError.GraphQLError(prefix + '; ' + error.message, {
                nodes: varDefNode,
                originalError: error
              }));
            });
          }
          return coercedValues;
        }
        /**
         * Prepares an object map of argument values given a list of argument
         * definitions and list of argument AST nodes.
         *
         * Note: The returned value is a plain Object with a prototype, since it is
         * exposed to user code. Care should be taken to not pull values from the
         * Object prototype.
         */

        function getArgumentValues(def, node, variableValues) {
          var _node$arguments;
          const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203

          /* c8 ignore next */

          const argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
          const argNodeMap = (0, _keyMap.keyMap)(argumentNodes, arg => arg.name.value);
          for (const argDef of def.args) {
            const name = argDef.name;
            const argType = argDef.type;
            const argumentNode = argNodeMap[name];
            if (!argumentNode) {
              if (argDef.defaultValue !== undefined) {
                coercedValues[name] = argDef.defaultValue;
              } else if ((0, _definition.isNonNullType)(argType)) {
                throw new _GraphQLError.GraphQLError(`Argument "${name}" of required type "${(0, _inspect.inspect)(argType)}" ` + 'was not provided.', {
                  nodes: node
                });
              }
              continue;
            }
            const valueNode = argumentNode.value;
            let isNull = valueNode.kind === _kinds.Kind.NULL;
            if (valueNode.kind === _kinds.Kind.VARIABLE) {
              const variableName = valueNode.name.value;
              if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
                if (argDef.defaultValue !== undefined) {
                  coercedValues[name] = argDef.defaultValue;
                } else if ((0, _definition.isNonNullType)(argType)) {
                  throw new _GraphQLError.GraphQLError(`Argument "${name}" of required type "${(0, _inspect.inspect)(argType)}" ` + `was provided the variable "$${variableName}" which was not provided a runtime value.`, {
                    nodes: valueNode
                  });
                }
                continue;
              }
              isNull = variableValues[variableName] == null;
            }
            if (isNull && (0, _definition.isNonNullType)(argType)) {
              throw new _GraphQLError.GraphQLError(`Argument "${name}" of non-null type "${(0, _inspect.inspect)(argType)}" ` + 'must not be null.', {
                nodes: valueNode
              });
            }
            const coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);
            if (coercedValue === undefined) {
              // Note: ValuesOfCorrectTypeRule validation should catch this before
              // execution. This is a runtime check to ensure execution does not
              // continue with an invalid argument value.
              throw new _GraphQLError.GraphQLError(`Argument "${name}" has invalid value ${(0, _printer.print)(valueNode)}.`, {
                nodes: valueNode
              });
            }
            coercedValues[name] = coercedValue;
          }
          return coercedValues;
        }
        /**
         * Prepares an object map of argument values given a directive definition
         * and a AST node which may contain directives. Optionally also accepts a map
         * of variable values.
         *
         * If the directive does not exist on the node, returns undefined.
         *
         * Note: The returned value is a plain Object with a prototype, since it is
         * exposed to user code. Care should be taken to not pull values from the
         * Object prototype.
         */

        function getDirectiveValues(directiveDef, node, variableValues) {
          var _node$directives;
          const directiveNode = (_node$directives = node.directives) === null || _node$directives === void 0 ? void 0 : _node$directives.find(directive => directive.name.value === directiveDef.name);
          if (directiveNode) {
            return getArgumentValues(directiveDef, directiveNode, variableValues);
          }
        }
        function hasOwnProperty(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }
      }, {
        "../error/GraphQLError.mjs": 136,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/keyMap.mjs": 160,
        "../jsutils/printPathArray.mjs": 165,
        "../language/kinds.mjs": 176,
        "../language/printer.mjs": 183,
        "../type/definition.mjs": 188,
        "../utilities/coerceInputValue.mjs": 200,
        "../utilities/typeFromAST.mjs": 215,
        "../utilities/valueFromAST.mjs": 216
      }],
      146: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.graphql = graphql;
        exports.graphqlSync = graphqlSync;
        var _devAssert = require("./jsutils/devAssert.mjs");
        var _isPromise = require("./jsutils/isPromise.mjs");
        var _parser = require("./language/parser.mjs");
        var _validate = require("./type/validate.mjs");
        var _validate2 = require("./validation/validate.mjs");
        var _execute = require("./execution/execute.mjs");
        /**
         * This is the primary entry point function for fulfilling GraphQL operations
         * by parsing, validating, and executing a GraphQL document along side a
         * GraphQL schema.
         *
         * More sophisticated GraphQL servers, such as those which persist queries,
         * may wish to separate the validation and execution phases to a static time
         * tooling step, and a server runtime step.
         *
         * Accepts either an object with named arguments, or individual arguments:
         *
         * schema:
         *    The GraphQL type system to use when validating and executing a query.
         * source:
         *    A GraphQL language formatted string representing the requested operation.
         * rootValue:
         *    The value provided as the first argument to resolver functions on the top
         *    level type (e.g. the query object type).
         * contextValue:
         *    The context value is provided as an argument to resolver functions after
         *    field arguments. It is used to pass shared information useful at any point
         *    during executing this query, for example the currently logged in user and
         *    connections to databases or other services.
         * variableValues:
         *    A mapping of variable name to runtime value to use for all variables
         *    defined in the requestString.
         * operationName:
         *    The name of the operation to use if requestString contains multiple
         *    possible operations. Can be omitted if requestString contains only
         *    one operation.
         * fieldResolver:
         *    A resolver function to use when one is not provided by the schema.
         *    If not provided, the default field resolver is used (which looks for a
         *    value or method on the source value with the field's name).
         * typeResolver:
         *    A type resolver function to use when none is provided by the schema.
         *    If not provided, the default type resolver is used (which looks for a
         *    `__typename` field or alternatively calls the `isTypeOf` method).
         */

        function graphql(args) {
          // Always return a Promise for a consistent API.
          return new Promise(resolve => resolve(graphqlImpl(args)));
        }
        /**
         * The graphqlSync function also fulfills GraphQL operations by parsing,
         * validating, and executing a GraphQL document along side a GraphQL schema.
         * However, it guarantees to complete synchronously (or throw an error) assuming
         * that all field resolvers are also synchronous.
         */

        function graphqlSync(args) {
          const result = graphqlImpl(args); // Assert that the execution was synchronous.

          if ((0, _isPromise.isPromise)(result)) {
            throw new Error('GraphQL execution failed to complete synchronously.');
          }
          return result;
        }
        function graphqlImpl(args) {
          // Temporary for v15 to v16 migration. Remove in v17
          arguments.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');
          const {
            schema,
            source,
            rootValue,
            contextValue,
            variableValues,
            operationName,
            fieldResolver,
            typeResolver
          } = args; // Validate Schema

          const schemaValidationErrors = (0, _validate.validateSchema)(schema);
          if (schemaValidationErrors.length > 0) {
            return {
              errors: schemaValidationErrors
            };
          } // Parse

          let document;
          try {
            document = (0, _parser.parse)(source);
          } catch (syntaxError) {
            return {
              errors: [syntaxError]
            };
          } // Validate

          const validationErrors = (0, _validate2.validate)(schema, document);
          if (validationErrors.length > 0) {
            return {
              errors: validationErrors
            };
          } // Execute

          return (0, _execute.execute)({
            schema,
            document,
            rootValue,
            contextValue,
            variableValues,
            operationName,
            fieldResolver,
            typeResolver
          });
        }
      }, {
        "./execution/execute.mjs": 141,
        "./jsutils/devAssert.mjs": 149,
        "./jsutils/isPromise.mjs": 159,
        "./language/parser.mjs": 179,
        "./type/validate.mjs": 194,
        "./validation/validate.mjs": 257
      }],
      147: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "BREAK", {
          enumerable: true,
          get: function () {
            return _index2.BREAK;
          }
        });
        Object.defineProperty(exports, "BreakingChangeType", {
          enumerable: true,
          get: function () {
            return _index6.BreakingChangeType;
          }
        });
        Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
          enumerable: true,
          get: function () {
            return _index.DEFAULT_DEPRECATION_REASON;
          }
        });
        Object.defineProperty(exports, "DangerousChangeType", {
          enumerable: true,
          get: function () {
            return _index6.DangerousChangeType;
          }
        });
        Object.defineProperty(exports, "DirectiveLocation", {
          enumerable: true,
          get: function () {
            return _index2.DirectiveLocation;
          }
        });
        Object.defineProperty(exports, "ExecutableDefinitionsRule", {
          enumerable: true,
          get: function () {
            return _index4.ExecutableDefinitionsRule;
          }
        });
        Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
          enumerable: true,
          get: function () {
            return _index4.FieldsOnCorrectTypeRule;
          }
        });
        Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
          enumerable: true,
          get: function () {
            return _index4.FragmentsOnCompositeTypesRule;
          }
        });
        Object.defineProperty(exports, "GRAPHQL_MAX_INT", {
          enumerable: true,
          get: function () {
            return _index.GRAPHQL_MAX_INT;
          }
        });
        Object.defineProperty(exports, "GRAPHQL_MIN_INT", {
          enumerable: true,
          get: function () {
            return _index.GRAPHQL_MIN_INT;
          }
        });
        Object.defineProperty(exports, "GraphQLBoolean", {
          enumerable: true,
          get: function () {
            return _index.GraphQLBoolean;
          }
        });
        Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
          enumerable: true,
          get: function () {
            return _index.GraphQLDeprecatedDirective;
          }
        });
        Object.defineProperty(exports, "GraphQLDirective", {
          enumerable: true,
          get: function () {
            return _index.GraphQLDirective;
          }
        });
        Object.defineProperty(exports, "GraphQLEnumType", {
          enumerable: true,
          get: function () {
            return _index.GraphQLEnumType;
          }
        });
        Object.defineProperty(exports, "GraphQLError", {
          enumerable: true,
          get: function () {
            return _index5.GraphQLError;
          }
        });
        Object.defineProperty(exports, "GraphQLFloat", {
          enumerable: true,
          get: function () {
            return _index.GraphQLFloat;
          }
        });
        Object.defineProperty(exports, "GraphQLID", {
          enumerable: true,
          get: function () {
            return _index.GraphQLID;
          }
        });
        Object.defineProperty(exports, "GraphQLIncludeDirective", {
          enumerable: true,
          get: function () {
            return _index.GraphQLIncludeDirective;
          }
        });
        Object.defineProperty(exports, "GraphQLInputObjectType", {
          enumerable: true,
          get: function () {
            return _index.GraphQLInputObjectType;
          }
        });
        Object.defineProperty(exports, "GraphQLInt", {
          enumerable: true,
          get: function () {
            return _index.GraphQLInt;
          }
        });
        Object.defineProperty(exports, "GraphQLInterfaceType", {
          enumerable: true,
          get: function () {
            return _index.GraphQLInterfaceType;
          }
        });
        Object.defineProperty(exports, "GraphQLList", {
          enumerable: true,
          get: function () {
            return _index.GraphQLList;
          }
        });
        Object.defineProperty(exports, "GraphQLNonNull", {
          enumerable: true,
          get: function () {
            return _index.GraphQLNonNull;
          }
        });
        Object.defineProperty(exports, "GraphQLObjectType", {
          enumerable: true,
          get: function () {
            return _index.GraphQLObjectType;
          }
        });
        Object.defineProperty(exports, "GraphQLScalarType", {
          enumerable: true,
          get: function () {
            return _index.GraphQLScalarType;
          }
        });
        Object.defineProperty(exports, "GraphQLSchema", {
          enumerable: true,
          get: function () {
            return _index.GraphQLSchema;
          }
        });
        Object.defineProperty(exports, "GraphQLSkipDirective", {
          enumerable: true,
          get: function () {
            return _index.GraphQLSkipDirective;
          }
        });
        Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
          enumerable: true,
          get: function () {
            return _index.GraphQLSpecifiedByDirective;
          }
        });
        Object.defineProperty(exports, "GraphQLString", {
          enumerable: true,
          get: function () {
            return _index.GraphQLString;
          }
        });
        Object.defineProperty(exports, "GraphQLUnionType", {
          enumerable: true,
          get: function () {
            return _index.GraphQLUnionType;
          }
        });
        Object.defineProperty(exports, "Kind", {
          enumerable: true,
          get: function () {
            return _index2.Kind;
          }
        });
        Object.defineProperty(exports, "KnownArgumentNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.KnownArgumentNamesRule;
          }
        });
        Object.defineProperty(exports, "KnownDirectivesRule", {
          enumerable: true,
          get: function () {
            return _index4.KnownDirectivesRule;
          }
        });
        Object.defineProperty(exports, "KnownFragmentNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.KnownFragmentNamesRule;
          }
        });
        Object.defineProperty(exports, "KnownTypeNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.KnownTypeNamesRule;
          }
        });
        Object.defineProperty(exports, "Lexer", {
          enumerable: true,
          get: function () {
            return _index2.Lexer;
          }
        });
        Object.defineProperty(exports, "Location", {
          enumerable: true,
          get: function () {
            return _index2.Location;
          }
        });
        Object.defineProperty(exports, "LoneAnonymousOperationRule", {
          enumerable: true,
          get: function () {
            return _index4.LoneAnonymousOperationRule;
          }
        });
        Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
          enumerable: true,
          get: function () {
            return _index4.LoneSchemaDefinitionRule;
          }
        });
        Object.defineProperty(exports, "NoDeprecatedCustomRule", {
          enumerable: true,
          get: function () {
            return _index4.NoDeprecatedCustomRule;
          }
        });
        Object.defineProperty(exports, "NoFragmentCyclesRule", {
          enumerable: true,
          get: function () {
            return _index4.NoFragmentCyclesRule;
          }
        });
        Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
          enumerable: true,
          get: function () {
            return _index4.NoSchemaIntrospectionCustomRule;
          }
        });
        Object.defineProperty(exports, "NoUndefinedVariablesRule", {
          enumerable: true,
          get: function () {
            return _index4.NoUndefinedVariablesRule;
          }
        });
        Object.defineProperty(exports, "NoUnusedFragmentsRule", {
          enumerable: true,
          get: function () {
            return _index4.NoUnusedFragmentsRule;
          }
        });
        Object.defineProperty(exports, "NoUnusedVariablesRule", {
          enumerable: true,
          get: function () {
            return _index4.NoUnusedVariablesRule;
          }
        });
        Object.defineProperty(exports, "OperationTypeNode", {
          enumerable: true,
          get: function () {
            return _index2.OperationTypeNode;
          }
        });
        Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
          enumerable: true,
          get: function () {
            return _index4.OverlappingFieldsCanBeMergedRule;
          }
        });
        Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
          enumerable: true,
          get: function () {
            return _index4.PossibleFragmentSpreadsRule;
          }
        });
        Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
          enumerable: true,
          get: function () {
            return _index4.PossibleTypeExtensionsRule;
          }
        });
        Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
          enumerable: true,
          get: function () {
            return _index4.ProvidedRequiredArgumentsRule;
          }
        });
        Object.defineProperty(exports, "ScalarLeafsRule", {
          enumerable: true,
          get: function () {
            return _index4.ScalarLeafsRule;
          }
        });
        Object.defineProperty(exports, "SchemaMetaFieldDef", {
          enumerable: true,
          get: function () {
            return _index.SchemaMetaFieldDef;
          }
        });
        Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
          enumerable: true,
          get: function () {
            return _index4.SingleFieldSubscriptionsRule;
          }
        });
        Object.defineProperty(exports, "Source", {
          enumerable: true,
          get: function () {
            return _index2.Source;
          }
        });
        Object.defineProperty(exports, "Token", {
          enumerable: true,
          get: function () {
            return _index2.Token;
          }
        });
        Object.defineProperty(exports, "TokenKind", {
          enumerable: true,
          get: function () {
            return _index2.TokenKind;
          }
        });
        Object.defineProperty(exports, "TypeInfo", {
          enumerable: true,
          get: function () {
            return _index6.TypeInfo;
          }
        });
        Object.defineProperty(exports, "TypeKind", {
          enumerable: true,
          get: function () {
            return _index.TypeKind;
          }
        });
        Object.defineProperty(exports, "TypeMetaFieldDef", {
          enumerable: true,
          get: function () {
            return _index.TypeMetaFieldDef;
          }
        });
        Object.defineProperty(exports, "TypeNameMetaFieldDef", {
          enumerable: true,
          get: function () {
            return _index.TypeNameMetaFieldDef;
          }
        });
        Object.defineProperty(exports, "UniqueArgumentDefinitionNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueArgumentDefinitionNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueArgumentNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueArgumentNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueDirectiveNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueDirectivesPerLocationRule;
          }
        });
        Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueEnumValueNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueFieldDefinitionNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueFragmentNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueFragmentNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueInputFieldNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueOperationNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueOperationNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueOperationTypesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueOperationTypesRule;
          }
        });
        Object.defineProperty(exports, "UniqueTypeNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueTypeNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueVariableNamesRule", {
          enumerable: true,
          get: function () {
            return _index4.UniqueVariableNamesRule;
          }
        });
        Object.defineProperty(exports, "ValidationContext", {
          enumerable: true,
          get: function () {
            return _index4.ValidationContext;
          }
        });
        Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
          enumerable: true,
          get: function () {
            return _index4.ValuesOfCorrectTypeRule;
          }
        });
        Object.defineProperty(exports, "VariablesAreInputTypesRule", {
          enumerable: true,
          get: function () {
            return _index4.VariablesAreInputTypesRule;
          }
        });
        Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
          enumerable: true,
          get: function () {
            return _index4.VariablesInAllowedPositionRule;
          }
        });
        Object.defineProperty(exports, "__Directive", {
          enumerable: true,
          get: function () {
            return _index.__Directive;
          }
        });
        Object.defineProperty(exports, "__DirectiveLocation", {
          enumerable: true,
          get: function () {
            return _index.__DirectiveLocation;
          }
        });
        Object.defineProperty(exports, "__EnumValue", {
          enumerable: true,
          get: function () {
            return _index.__EnumValue;
          }
        });
        Object.defineProperty(exports, "__Field", {
          enumerable: true,
          get: function () {
            return _index.__Field;
          }
        });
        Object.defineProperty(exports, "__InputValue", {
          enumerable: true,
          get: function () {
            return _index.__InputValue;
          }
        });
        Object.defineProperty(exports, "__Schema", {
          enumerable: true,
          get: function () {
            return _index.__Schema;
          }
        });
        Object.defineProperty(exports, "__Type", {
          enumerable: true,
          get: function () {
            return _index.__Type;
          }
        });
        Object.defineProperty(exports, "__TypeKind", {
          enumerable: true,
          get: function () {
            return _index.__TypeKind;
          }
        });
        Object.defineProperty(exports, "assertAbstractType", {
          enumerable: true,
          get: function () {
            return _index.assertAbstractType;
          }
        });
        Object.defineProperty(exports, "assertCompositeType", {
          enumerable: true,
          get: function () {
            return _index.assertCompositeType;
          }
        });
        Object.defineProperty(exports, "assertDirective", {
          enumerable: true,
          get: function () {
            return _index.assertDirective;
          }
        });
        Object.defineProperty(exports, "assertEnumType", {
          enumerable: true,
          get: function () {
            return _index.assertEnumType;
          }
        });
        Object.defineProperty(exports, "assertEnumValueName", {
          enumerable: true,
          get: function () {
            return _index.assertEnumValueName;
          }
        });
        Object.defineProperty(exports, "assertInputObjectType", {
          enumerable: true,
          get: function () {
            return _index.assertInputObjectType;
          }
        });
        Object.defineProperty(exports, "assertInputType", {
          enumerable: true,
          get: function () {
            return _index.assertInputType;
          }
        });
        Object.defineProperty(exports, "assertInterfaceType", {
          enumerable: true,
          get: function () {
            return _index.assertInterfaceType;
          }
        });
        Object.defineProperty(exports, "assertLeafType", {
          enumerable: true,
          get: function () {
            return _index.assertLeafType;
          }
        });
        Object.defineProperty(exports, "assertListType", {
          enumerable: true,
          get: function () {
            return _index.assertListType;
          }
        });
        Object.defineProperty(exports, "assertName", {
          enumerable: true,
          get: function () {
            return _index.assertName;
          }
        });
        Object.defineProperty(exports, "assertNamedType", {
          enumerable: true,
          get: function () {
            return _index.assertNamedType;
          }
        });
        Object.defineProperty(exports, "assertNonNullType", {
          enumerable: true,
          get: function () {
            return _index.assertNonNullType;
          }
        });
        Object.defineProperty(exports, "assertNullableType", {
          enumerable: true,
          get: function () {
            return _index.assertNullableType;
          }
        });
        Object.defineProperty(exports, "assertObjectType", {
          enumerable: true,
          get: function () {
            return _index.assertObjectType;
          }
        });
        Object.defineProperty(exports, "assertOutputType", {
          enumerable: true,
          get: function () {
            return _index.assertOutputType;
          }
        });
        Object.defineProperty(exports, "assertScalarType", {
          enumerable: true,
          get: function () {
            return _index.assertScalarType;
          }
        });
        Object.defineProperty(exports, "assertSchema", {
          enumerable: true,
          get: function () {
            return _index.assertSchema;
          }
        });
        Object.defineProperty(exports, "assertType", {
          enumerable: true,
          get: function () {
            return _index.assertType;
          }
        });
        Object.defineProperty(exports, "assertUnionType", {
          enumerable: true,
          get: function () {
            return _index.assertUnionType;
          }
        });
        Object.defineProperty(exports, "assertValidName", {
          enumerable: true,
          get: function () {
            return _index6.assertValidName;
          }
        });
        Object.defineProperty(exports, "assertValidSchema", {
          enumerable: true,
          get: function () {
            return _index.assertValidSchema;
          }
        });
        Object.defineProperty(exports, "assertWrappingType", {
          enumerable: true,
          get: function () {
            return _index.assertWrappingType;
          }
        });
        Object.defineProperty(exports, "astFromValue", {
          enumerable: true,
          get: function () {
            return _index6.astFromValue;
          }
        });
        Object.defineProperty(exports, "buildASTSchema", {
          enumerable: true,
          get: function () {
            return _index6.buildASTSchema;
          }
        });
        Object.defineProperty(exports, "buildClientSchema", {
          enumerable: true,
          get: function () {
            return _index6.buildClientSchema;
          }
        });
        Object.defineProperty(exports, "buildSchema", {
          enumerable: true,
          get: function () {
            return _index6.buildSchema;
          }
        });
        Object.defineProperty(exports, "coerceInputValue", {
          enumerable: true,
          get: function () {
            return _index6.coerceInputValue;
          }
        });
        Object.defineProperty(exports, "concatAST", {
          enumerable: true,
          get: function () {
            return _index6.concatAST;
          }
        });
        Object.defineProperty(exports, "createSourceEventStream", {
          enumerable: true,
          get: function () {
            return _index3.createSourceEventStream;
          }
        });
        Object.defineProperty(exports, "defaultFieldResolver", {
          enumerable: true,
          get: function () {
            return _index3.defaultFieldResolver;
          }
        });
        Object.defineProperty(exports, "defaultTypeResolver", {
          enumerable: true,
          get: function () {
            return _index3.defaultTypeResolver;
          }
        });
        Object.defineProperty(exports, "doTypesOverlap", {
          enumerable: true,
          get: function () {
            return _index6.doTypesOverlap;
          }
        });
        Object.defineProperty(exports, "execute", {
          enumerable: true,
          get: function () {
            return _index3.execute;
          }
        });
        Object.defineProperty(exports, "executeSync", {
          enumerable: true,
          get: function () {
            return _index3.executeSync;
          }
        });
        Object.defineProperty(exports, "extendSchema", {
          enumerable: true,
          get: function () {
            return _index6.extendSchema;
          }
        });
        Object.defineProperty(exports, "findBreakingChanges", {
          enumerable: true,
          get: function () {
            return _index6.findBreakingChanges;
          }
        });
        Object.defineProperty(exports, "findDangerousChanges", {
          enumerable: true,
          get: function () {
            return _index6.findDangerousChanges;
          }
        });
        Object.defineProperty(exports, "formatError", {
          enumerable: true,
          get: function () {
            return _index5.formatError;
          }
        });
        Object.defineProperty(exports, "getArgumentValues", {
          enumerable: true,
          get: function () {
            return _index3.getArgumentValues;
          }
        });
        Object.defineProperty(exports, "getDirectiveValues", {
          enumerable: true,
          get: function () {
            return _index3.getDirectiveValues;
          }
        });
        Object.defineProperty(exports, "getEnterLeaveForKind", {
          enumerable: true,
          get: function () {
            return _index2.getEnterLeaveForKind;
          }
        });
        Object.defineProperty(exports, "getIntrospectionQuery", {
          enumerable: true,
          get: function () {
            return _index6.getIntrospectionQuery;
          }
        });
        Object.defineProperty(exports, "getLocation", {
          enumerable: true,
          get: function () {
            return _index2.getLocation;
          }
        });
        Object.defineProperty(exports, "getNamedType", {
          enumerable: true,
          get: function () {
            return _index.getNamedType;
          }
        });
        Object.defineProperty(exports, "getNullableType", {
          enumerable: true,
          get: function () {
            return _index.getNullableType;
          }
        });
        Object.defineProperty(exports, "getOperationAST", {
          enumerable: true,
          get: function () {
            return _index6.getOperationAST;
          }
        });
        Object.defineProperty(exports, "getOperationRootType", {
          enumerable: true,
          get: function () {
            return _index6.getOperationRootType;
          }
        });
        Object.defineProperty(exports, "getVariableValues", {
          enumerable: true,
          get: function () {
            return _index3.getVariableValues;
          }
        });
        Object.defineProperty(exports, "getVisitFn", {
          enumerable: true,
          get: function () {
            return _index2.getVisitFn;
          }
        });
        Object.defineProperty(exports, "graphql", {
          enumerable: true,
          get: function () {
            return _graphql.graphql;
          }
        });
        Object.defineProperty(exports, "graphqlSync", {
          enumerable: true,
          get: function () {
            return _graphql.graphqlSync;
          }
        });
        Object.defineProperty(exports, "introspectionFromSchema", {
          enumerable: true,
          get: function () {
            return _index6.introspectionFromSchema;
          }
        });
        Object.defineProperty(exports, "introspectionTypes", {
          enumerable: true,
          get: function () {
            return _index.introspectionTypes;
          }
        });
        Object.defineProperty(exports, "isAbstractType", {
          enumerable: true,
          get: function () {
            return _index.isAbstractType;
          }
        });
        Object.defineProperty(exports, "isCompositeType", {
          enumerable: true,
          get: function () {
            return _index.isCompositeType;
          }
        });
        Object.defineProperty(exports, "isConstValueNode", {
          enumerable: true,
          get: function () {
            return _index2.isConstValueNode;
          }
        });
        Object.defineProperty(exports, "isDefinitionNode", {
          enumerable: true,
          get: function () {
            return _index2.isDefinitionNode;
          }
        });
        Object.defineProperty(exports, "isDirective", {
          enumerable: true,
          get: function () {
            return _index.isDirective;
          }
        });
        Object.defineProperty(exports, "isEnumType", {
          enumerable: true,
          get: function () {
            return _index.isEnumType;
          }
        });
        Object.defineProperty(exports, "isEqualType", {
          enumerable: true,
          get: function () {
            return _index6.isEqualType;
          }
        });
        Object.defineProperty(exports, "isExecutableDefinitionNode", {
          enumerable: true,
          get: function () {
            return _index2.isExecutableDefinitionNode;
          }
        });
        Object.defineProperty(exports, "isInputObjectType", {
          enumerable: true,
          get: function () {
            return _index.isInputObjectType;
          }
        });
        Object.defineProperty(exports, "isInputType", {
          enumerable: true,
          get: function () {
            return _index.isInputType;
          }
        });
        Object.defineProperty(exports, "isInterfaceType", {
          enumerable: true,
          get: function () {
            return _index.isInterfaceType;
          }
        });
        Object.defineProperty(exports, "isIntrospectionType", {
          enumerable: true,
          get: function () {
            return _index.isIntrospectionType;
          }
        });
        Object.defineProperty(exports, "isLeafType", {
          enumerable: true,
          get: function () {
            return _index.isLeafType;
          }
        });
        Object.defineProperty(exports, "isListType", {
          enumerable: true,
          get: function () {
            return _index.isListType;
          }
        });
        Object.defineProperty(exports, "isNamedType", {
          enumerable: true,
          get: function () {
            return _index.isNamedType;
          }
        });
        Object.defineProperty(exports, "isNonNullType", {
          enumerable: true,
          get: function () {
            return _index.isNonNullType;
          }
        });
        Object.defineProperty(exports, "isNullableType", {
          enumerable: true,
          get: function () {
            return _index.isNullableType;
          }
        });
        Object.defineProperty(exports, "isObjectType", {
          enumerable: true,
          get: function () {
            return _index.isObjectType;
          }
        });
        Object.defineProperty(exports, "isOutputType", {
          enumerable: true,
          get: function () {
            return _index.isOutputType;
          }
        });
        Object.defineProperty(exports, "isRequiredArgument", {
          enumerable: true,
          get: function () {
            return _index.isRequiredArgument;
          }
        });
        Object.defineProperty(exports, "isRequiredInputField", {
          enumerable: true,
          get: function () {
            return _index.isRequiredInputField;
          }
        });
        Object.defineProperty(exports, "isScalarType", {
          enumerable: true,
          get: function () {
            return _index.isScalarType;
          }
        });
        Object.defineProperty(exports, "isSchema", {
          enumerable: true,
          get: function () {
            return _index.isSchema;
          }
        });
        Object.defineProperty(exports, "isSelectionNode", {
          enumerable: true,
          get: function () {
            return _index2.isSelectionNode;
          }
        });
        Object.defineProperty(exports, "isSpecifiedDirective", {
          enumerable: true,
          get: function () {
            return _index.isSpecifiedDirective;
          }
        });
        Object.defineProperty(exports, "isSpecifiedScalarType", {
          enumerable: true,
          get: function () {
            return _index.isSpecifiedScalarType;
          }
        });
        Object.defineProperty(exports, "isType", {
          enumerable: true,
          get: function () {
            return _index.isType;
          }
        });
        Object.defineProperty(exports, "isTypeDefinitionNode", {
          enumerable: true,
          get: function () {
            return _index2.isTypeDefinitionNode;
          }
        });
        Object.defineProperty(exports, "isTypeExtensionNode", {
          enumerable: true,
          get: function () {
            return _index2.isTypeExtensionNode;
          }
        });
        Object.defineProperty(exports, "isTypeNode", {
          enumerable: true,
          get: function () {
            return _index2.isTypeNode;
          }
        });
        Object.defineProperty(exports, "isTypeSubTypeOf", {
          enumerable: true,
          get: function () {
            return _index6.isTypeSubTypeOf;
          }
        });
        Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
          enumerable: true,
          get: function () {
            return _index2.isTypeSystemDefinitionNode;
          }
        });
        Object.defineProperty(exports, "isTypeSystemExtensionNode", {
          enumerable: true,
          get: function () {
            return _index2.isTypeSystemExtensionNode;
          }
        });
        Object.defineProperty(exports, "isUnionType", {
          enumerable: true,
          get: function () {
            return _index.isUnionType;
          }
        });
        Object.defineProperty(exports, "isValidNameError", {
          enumerable: true,
          get: function () {
            return _index6.isValidNameError;
          }
        });
        Object.defineProperty(exports, "isValueNode", {
          enumerable: true,
          get: function () {
            return _index2.isValueNode;
          }
        });
        Object.defineProperty(exports, "isWrappingType", {
          enumerable: true,
          get: function () {
            return _index.isWrappingType;
          }
        });
        Object.defineProperty(exports, "lexicographicSortSchema", {
          enumerable: true,
          get: function () {
            return _index6.lexicographicSortSchema;
          }
        });
        Object.defineProperty(exports, "locatedError", {
          enumerable: true,
          get: function () {
            return _index5.locatedError;
          }
        });
        Object.defineProperty(exports, "parse", {
          enumerable: true,
          get: function () {
            return _index2.parse;
          }
        });
        Object.defineProperty(exports, "parseConstValue", {
          enumerable: true,
          get: function () {
            return _index2.parseConstValue;
          }
        });
        Object.defineProperty(exports, "parseType", {
          enumerable: true,
          get: function () {
            return _index2.parseType;
          }
        });
        Object.defineProperty(exports, "parseValue", {
          enumerable: true,
          get: function () {
            return _index2.parseValue;
          }
        });
        Object.defineProperty(exports, "print", {
          enumerable: true,
          get: function () {
            return _index2.print;
          }
        });
        Object.defineProperty(exports, "printError", {
          enumerable: true,
          get: function () {
            return _index5.printError;
          }
        });
        Object.defineProperty(exports, "printIntrospectionSchema", {
          enumerable: true,
          get: function () {
            return _index6.printIntrospectionSchema;
          }
        });
        Object.defineProperty(exports, "printLocation", {
          enumerable: true,
          get: function () {
            return _index2.printLocation;
          }
        });
        Object.defineProperty(exports, "printSchema", {
          enumerable: true,
          get: function () {
            return _index6.printSchema;
          }
        });
        Object.defineProperty(exports, "printSourceLocation", {
          enumerable: true,
          get: function () {
            return _index2.printSourceLocation;
          }
        });
        Object.defineProperty(exports, "printType", {
          enumerable: true,
          get: function () {
            return _index6.printType;
          }
        });
        Object.defineProperty(exports, "resolveObjMapThunk", {
          enumerable: true,
          get: function () {
            return _index.resolveObjMapThunk;
          }
        });
        Object.defineProperty(exports, "resolveReadonlyArrayThunk", {
          enumerable: true,
          get: function () {
            return _index.resolveReadonlyArrayThunk;
          }
        });
        Object.defineProperty(exports, "responsePathAsArray", {
          enumerable: true,
          get: function () {
            return _index3.responsePathAsArray;
          }
        });
        Object.defineProperty(exports, "separateOperations", {
          enumerable: true,
          get: function () {
            return _index6.separateOperations;
          }
        });
        Object.defineProperty(exports, "specifiedDirectives", {
          enumerable: true,
          get: function () {
            return _index.specifiedDirectives;
          }
        });
        Object.defineProperty(exports, "specifiedRules", {
          enumerable: true,
          get: function () {
            return _index4.specifiedRules;
          }
        });
        Object.defineProperty(exports, "specifiedScalarTypes", {
          enumerable: true,
          get: function () {
            return _index.specifiedScalarTypes;
          }
        });
        Object.defineProperty(exports, "stripIgnoredCharacters", {
          enumerable: true,
          get: function () {
            return _index6.stripIgnoredCharacters;
          }
        });
        Object.defineProperty(exports, "subscribe", {
          enumerable: true,
          get: function () {
            return _index3.subscribe;
          }
        });
        Object.defineProperty(exports, "syntaxError", {
          enumerable: true,
          get: function () {
            return _index5.syntaxError;
          }
        });
        Object.defineProperty(exports, "typeFromAST", {
          enumerable: true,
          get: function () {
            return _index6.typeFromAST;
          }
        });
        Object.defineProperty(exports, "validate", {
          enumerable: true,
          get: function () {
            return _index4.validate;
          }
        });
        Object.defineProperty(exports, "validateSchema", {
          enumerable: true,
          get: function () {
            return _index.validateSchema;
          }
        });
        Object.defineProperty(exports, "valueFromAST", {
          enumerable: true,
          get: function () {
            return _index6.valueFromAST;
          }
        });
        Object.defineProperty(exports, "valueFromASTUntyped", {
          enumerable: true,
          get: function () {
            return _index6.valueFromASTUntyped;
          }
        });
        Object.defineProperty(exports, "version", {
          enumerable: true,
          get: function () {
            return _version.version;
          }
        });
        Object.defineProperty(exports, "versionInfo", {
          enumerable: true,
          get: function () {
            return _version.versionInfo;
          }
        });
        Object.defineProperty(exports, "visit", {
          enumerable: true,
          get: function () {
            return _index2.visit;
          }
        });
        Object.defineProperty(exports, "visitInParallel", {
          enumerable: true,
          get: function () {
            return _index2.visitInParallel;
          }
        });
        Object.defineProperty(exports, "visitWithTypeInfo", {
          enumerable: true,
          get: function () {
            return _index6.visitWithTypeInfo;
          }
        });
        var _version = require("./version.mjs");
        var _graphql = require("./graphql.mjs");
        var _index = require("./type/index.mjs");
        var _index2 = require("./language/index.mjs");
        var _index3 = require("./execution/index.mjs");
        var _index4 = require("./validation/index.mjs");
        var _index5 = require("./error/index.mjs");
        var _index6 = require("./utilities/index.mjs");
      }, {
        "./error/index.mjs": 137,
        "./execution/index.mjs": 142,
        "./graphql.mjs": 146,
        "./language/index.mjs": 175,
        "./type/index.mjs": 190,
        "./utilities/index.mjs": 207,
        "./validation/index.mjs": 219,
        "./version.mjs": 258
      }],
      148: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.addPath = addPath;
        exports.pathToArray = pathToArray;
        /**
         * Given a Path and a key, return a new Path containing the new key.
         */
        function addPath(prev, key, typename) {
          return {
            prev,
            key,
            typename
          };
        }
        /**
         * Given a Path, return an Array of the path keys.
         */

        function pathToArray(path) {
          const flattened = [];
          let curr = path;
          while (curr) {
            flattened.push(curr.key);
            curr = curr.prev;
          }
          return flattened.reverse();
        }
      }, {}],
      149: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.devAssert = devAssert;
        function devAssert(condition, message) {
          const booleanCondition = Boolean(condition);
          if (!booleanCondition) {
            throw new Error(message);
          }
        }
      }, {}],
      150: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.didYouMean = didYouMean;
        const MAX_SUGGESTIONS = 5;
        /**
         * Given [ A, B, C ] return ' Did you mean A, B, or C?'.
         */

        function didYouMean(firstArg, secondArg) {
          const [subMessage, suggestionsArg] = secondArg ? [firstArg, secondArg] : [undefined, firstArg];
          let message = ' Did you mean ';
          if (subMessage) {
            message += subMessage + ' ';
          }
          const suggestions = suggestionsArg.map(x => `"${x}"`);
          switch (suggestions.length) {
            case 0:
              return '';
            case 1:
              return message + suggestions[0] + '?';
            case 2:
              return message + suggestions[0] + ' or ' + suggestions[1] + '?';
          }
          const selected = suggestions.slice(0, MAX_SUGGESTIONS);
          const lastItem = selected.pop();
          return message + selected.join(', ') + ', or ' + lastItem + '?';
        }
      }, {}],
      151: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.groupBy = groupBy;
        /**
         * Groups array items into a Map, given a function to produce grouping key.
         */
        function groupBy(list, keyFn) {
          const result = new Map();
          for (const item of list) {
            const key = keyFn(item);
            const group = result.get(key);
            if (group === undefined) {
              result.set(key, [item]);
            } else {
              group.push(item);
            }
          }
          return result;
        }
      }, {}],
      152: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.identityFunc = identityFunc;
        /**
         * Returns the first argument it receives.
         */
        function identityFunc(x) {
          return x;
        }
      }, {}],
      153: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.inspect = inspect;
        const MAX_ARRAY_LENGTH = 10;
        const MAX_RECURSIVE_DEPTH = 2;
        /**
         * Used to print values in error messages.
         */

        function inspect(value) {
          return formatValue(value, []);
        }
        function formatValue(value, seenValues) {
          switch (typeof value) {
            case 'string':
              return JSON.stringify(value);
            case 'function':
              return value.name ? `[function ${value.name}]` : '[function]';
            case 'object':
              return formatObjectValue(value, seenValues);
            default:
              return String(value);
          }
        }
        function formatObjectValue(value, previouslySeenValues) {
          if (value === null) {
            return 'null';
          }
          if (previouslySeenValues.includes(value)) {
            return '[Circular]';
          }
          const seenValues = [...previouslySeenValues, value];
          if (isJSONable(value)) {
            const jsonValue = value.toJSON(); // check for infinite recursion

            if (jsonValue !== value) {
              return typeof jsonValue === 'string' ? jsonValue : formatValue(jsonValue, seenValues);
            }
          } else if (Array.isArray(value)) {
            return formatArray(value, seenValues);
          }
          return formatObject(value, seenValues);
        }
        function isJSONable(value) {
          return typeof value.toJSON === 'function';
        }
        function formatObject(object, seenValues) {
          const entries = Object.entries(object);
          if (entries.length === 0) {
            return '{}';
          }
          if (seenValues.length > MAX_RECURSIVE_DEPTH) {
            return '[' + getObjectTag(object) + ']';
          }
          const properties = entries.map(([key, value]) => key + ': ' + formatValue(value, seenValues));
          return '{ ' + properties.join(', ') + ' }';
        }
        function formatArray(array, seenValues) {
          if (array.length === 0) {
            return '[]';
          }
          if (seenValues.length > MAX_RECURSIVE_DEPTH) {
            return '[Array]';
          }
          const len = Math.min(MAX_ARRAY_LENGTH, array.length);
          const remaining = array.length - len;
          const items = [];
          for (let i = 0; i < len; ++i) {
            items.push(formatValue(array[i], seenValues));
          }
          if (remaining === 1) {
            items.push('... 1 more item');
          } else if (remaining > 1) {
            items.push(`... ${remaining} more items`);
          }
          return '[' + items.join(', ') + ']';
        }
        function getObjectTag(object) {
          const tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');
          if (tag === 'Object' && typeof object.constructor === 'function') {
            const name = object.constructor.name;
            if (typeof name === 'string' && name !== '') {
              return name;
            }
          }
          return tag;
        }
      }, {}],
      154: [function (require, module, exports) {
        (function (process) {
          (function () {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            exports.instanceOf = void 0;
            var _inspect = require("./inspect.mjs");
            /* c8 ignore next 3 */

            const isProduction = globalThis.process &&
            // eslint-disable-next-line no-undef
            process.env.NODE_ENV === 'production';
            /**
             * A replacement for instanceof which includes an error warning when multi-realm
             * constructors are detected.
             * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
             * See: https://webpack.js.org/guides/production/
             */

            const instanceOf = exports.instanceOf = /* c8 ignore next 6 */
            // FIXME: https://github.com/graphql/graphql-js/issues/2317
            isProduction ? function instanceOf(value, constructor) {
              return value instanceof constructor;
            } : function instanceOf(value, constructor) {
              if (value instanceof constructor) {
                return true;
              }
              if (typeof value === 'object' && value !== null) {
                var _value$constructor;

                // Prefer Symbol.toStringTag since it is immune to minification.
                const className = constructor.prototype[Symbol.toStringTag];
                const valueClassName =
                // We still need to support constructor's name to detect conflicts with older versions of this library.
                Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009
                ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;
                if (className === valueClassName) {
                  const stringifiedValue = (0, _inspect.inspect)(value);
                  throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
                }
              }
              return false;
            };
          }).call(this);
        }).call(this, require('_process'));
      }, {
        "./inspect.mjs": 153,
        "_process": 5
      }],
      155: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = invariant;
        function invariant(condition, message) {
          const booleanCondition = Boolean(condition);
          if (!booleanCondition) {
            throw new Error(message != null ? message : 'Unexpected invariant triggered.');
          }
        }
      }, {}],
      156: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isAsyncIterable = isAsyncIterable;
        /**
         * Returns true if the provided object implements the AsyncIterator protocol via
         * implementing a `Symbol.asyncIterator` method.
         */
        function isAsyncIterable(maybeAsyncIterable) {
          return typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0 ? void 0 : maybeAsyncIterable[Symbol.asyncIterator]) === 'function';
        }
      }, {}],
      157: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isIterableObject = isIterableObject;
        /**
         * Returns true if the provided object is an Object (i.e. not a string literal)
         * and implements the Iterator protocol.
         *
         * This may be used in place of [Array.isArray()][isArray] to determine if
         * an object should be iterated-over e.g. Array, Map, Set, Int8Array,
         * TypedArray, etc. but excludes string literals.
         *
         * @example
         * ```ts
         * isIterableObject([ 1, 2, 3 ]) // true
         * isIterableObject(new Map()) // true
         * isIterableObject('ABC') // false
         * isIterableObject({ key: 'value' }) // false
         * isIterableObject({ length: 1, 0: 'Alpha' }) // false
         * ```
         */
        function isIterableObject(maybeIterable) {
          return typeof maybeIterable === 'object' && typeof (maybeIterable === null || maybeIterable === void 0 ? void 0 : maybeIterable[Symbol.iterator]) === 'function';
        }
      }, {}],
      158: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isObjectLike = isObjectLike;
        /**
         * Return true if `value` is object-like. A value is object-like if it's not
         * `null` and has a `typeof` result of "object".
         */
        function isObjectLike(value) {
          return typeof value == 'object' && value !== null;
        }
      }, {}],
      159: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isPromise = isPromise;
        /**
         * Returns true if the value acts like a Promise, i.e. has a "then" function,
         * otherwise returns false.
         */
        function isPromise(value) {
          return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';
        }
      }, {}],
      160: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.keyMap = keyMap;
        /**
         * Creates a keyed JS object from an array, given a function to produce the keys
         * for each value in the array.
         *
         * This provides a convenient lookup for the array items if the key function
         * produces unique results.
         * ```ts
         * const phoneBook = [
         *   { name: 'Jon', num: '555-1234' },
         *   { name: 'Jenny', num: '867-5309' }
         * ]
         *
         * const entriesByName = keyMap(
         *   phoneBook,
         *   entry => entry.name
         * )
         *
         * // {
         * //   Jon: { name: 'Jon', num: '555-1234' },
         * //   Jenny: { name: 'Jenny', num: '867-5309' }
         * // }
         *
         * const jennyEntry = entriesByName['Jenny']
         *
         * // { name: 'Jenny', num: '857-6309' }
         * ```
         */
        function keyMap(list, keyFn) {
          const result = Object.create(null);
          for (const item of list) {
            result[keyFn(item)] = item;
          }
          return result;
        }
      }, {}],
      161: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.keyValMap = keyValMap;
        /**
         * Creates a keyed JS object from an array, given a function to produce the keys
         * and a function to produce the values from each item in the array.
         * ```ts
         * const phoneBook = [
         *   { name: 'Jon', num: '555-1234' },
         *   { name: 'Jenny', num: '867-5309' }
         * ]
         *
         * // { Jon: '555-1234', Jenny: '867-5309' }
         * const phonesByName = keyValMap(
         *   phoneBook,
         *   entry => entry.name,
         *   entry => entry.num
         * )
         * ```
         */
        function keyValMap(list, keyFn, valFn) {
          const result = Object.create(null);
          for (const item of list) {
            result[keyFn(item)] = valFn(item);
          }
          return result;
        }
      }, {}],
      162: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.mapValue = mapValue;
        /**
         * Creates an object map with the same keys as `map` and values generated by
         * running each value of `map` thru `fn`.
         */
        function mapValue(map, fn) {
          const result = Object.create(null);
          for (const key of Object.keys(map)) {
            result[key] = fn(map[key], key);
          }
          return result;
        }
      }, {}],
      163: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.memoize3 = memoize3;
        /**
         * Memoizes the provided three-argument function.
         */
        function memoize3(fn) {
          let cache0;
          return function memoized(a1, a2, a3) {
            if (cache0 === undefined) {
              cache0 = new WeakMap();
            }
            let cache1 = cache0.get(a1);
            if (cache1 === undefined) {
              cache1 = new WeakMap();
              cache0.set(a1, cache1);
            }
            let cache2 = cache1.get(a2);
            if (cache2 === undefined) {
              cache2 = new WeakMap();
              cache1.set(a2, cache2);
            }
            let fnResult = cache2.get(a3);
            if (fnResult === undefined) {
              fnResult = fn(a1, a2, a3);
              cache2.set(a3, fnResult);
            }
            return fnResult;
          };
        }
      }, {}],
      164: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.naturalCompare = naturalCompare;
        /**
         * Returns a number indicating whether a reference string comes before, or after,
         * or is the same as the given string in natural sort order.
         *
         * See: https://en.wikipedia.org/wiki/Natural_sort_order
         *
         */
        function naturalCompare(aStr, bStr) {
          let aIndex = 0;
          let bIndex = 0;
          while (aIndex < aStr.length && bIndex < bStr.length) {
            let aChar = aStr.charCodeAt(aIndex);
            let bChar = bStr.charCodeAt(bIndex);
            if (isDigit(aChar) && isDigit(bChar)) {
              let aNum = 0;
              do {
                ++aIndex;
                aNum = aNum * 10 + aChar - DIGIT_0;
                aChar = aStr.charCodeAt(aIndex);
              } while (isDigit(aChar) && aNum > 0);
              let bNum = 0;
              do {
                ++bIndex;
                bNum = bNum * 10 + bChar - DIGIT_0;
                bChar = bStr.charCodeAt(bIndex);
              } while (isDigit(bChar) && bNum > 0);
              if (aNum < bNum) {
                return -1;
              }
              if (aNum > bNum) {
                return 1;
              }
            } else {
              if (aChar < bChar) {
                return -1;
              }
              if (aChar > bChar) {
                return 1;
              }
              ++aIndex;
              ++bIndex;
            }
          }
          return aStr.length - bStr.length;
        }
        const DIGIT_0 = 48;
        const DIGIT_9 = 57;
        function isDigit(code) {
          return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
        }
      }, {}],
      165: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.printPathArray = printPathArray;
        /**
         * Build a string describing the path.
         */
        function printPathArray(path) {
          return path.map(key => typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key).join('');
        }
      }, {}],
      166: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.promiseForObject = promiseForObject;
        /**
         * This function transforms a JS object `ObjMap<Promise<T>>` into
         * a `Promise<ObjMap<T>>`
         *
         * This is akin to bluebird's `Promise.props`, but implemented only using
         * `Promise.all` so it will work with any implementation of ES6 promises.
         */
        function promiseForObject(object) {
          return Promise.all(Object.values(object)).then(resolvedValues => {
            const resolvedObject = Object.create(null);
            for (const [i, key] of Object.keys(object).entries()) {
              resolvedObject[key] = resolvedValues[i];
            }
            return resolvedObject;
          });
        }
      }, {}],
      167: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.promiseReduce = promiseReduce;
        var _isPromise = require("./isPromise.mjs");
        /**
         * Similar to Array.prototype.reduce(), however the reducing callback may return
         * a Promise, in which case reduction will continue after each promise resolves.
         *
         * If the callback does not return a Promise, then this function will also not
         * return a Promise.
         */
        function promiseReduce(values, callbackFn, initialValue) {
          let accumulator = initialValue;
          for (const value of values) {
            accumulator = (0, _isPromise.isPromise)(accumulator) ? accumulator.then(resolved => callbackFn(resolved, value)) : callbackFn(accumulator, value);
          }
          return accumulator;
        }
      }, {
        "./isPromise.mjs": 159
      }],
      168: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.suggestionList = suggestionList;
        var _naturalCompare = require("./naturalCompare.mjs");
        /**
         * Given an invalid input string and a list of valid options, returns a filtered
         * list of valid options sorted based on their similarity with the input.
         */

        function suggestionList(input, options) {
          const optionsByDistance = Object.create(null);
          const lexicalDistance = new LexicalDistance(input);
          const threshold = Math.floor(input.length * 0.4) + 1;
          for (const option of options) {
            const distance = lexicalDistance.measure(option, threshold);
            if (distance !== undefined) {
              optionsByDistance[option] = distance;
            }
          }
          return Object.keys(optionsByDistance).sort((a, b) => {
            const distanceDiff = optionsByDistance[a] - optionsByDistance[b];
            return distanceDiff !== 0 ? distanceDiff : (0, _naturalCompare.naturalCompare)(a, b);
          });
        }
        /**
         * Computes the lexical distance between strings A and B.
         *
         * The "distance" between two strings is given by counting the minimum number
         * of edits needed to transform string A into string B. An edit can be an
         * insertion, deletion, or substitution of a single character, or a swap of two
         * adjacent characters.
         *
         * Includes a custom alteration from Damerau-Levenshtein to treat case changes
         * as a single edit which helps identify mis-cased values with an edit distance
         * of 1.
         *
         * This distance can be useful for detecting typos in input or sorting
         */

        class LexicalDistance {
          constructor(input) {
            this._input = input;
            this._inputLowerCase = input.toLowerCase();
            this._inputArray = stringToArray(this._inputLowerCase);
            this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];
          }
          measure(option, threshold) {
            if (this._input === option) {
              return 0;
            }
            const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit

            if (this._inputLowerCase === optionLowerCase) {
              return 1;
            }
            let a = stringToArray(optionLowerCase);
            let b = this._inputArray;
            if (a.length < b.length) {
              const tmp = a;
              a = b;
              b = tmp;
            }
            const aLength = a.length;
            const bLength = b.length;
            if (aLength - bLength > threshold) {
              return undefined;
            }
            const rows = this._rows;
            for (let j = 0; j <= bLength; j++) {
              rows[0][j] = j;
            }
            for (let i = 1; i <= aLength; i++) {
              const upRow = rows[(i - 1) % 3];
              const currentRow = rows[i % 3];
              let smallestCell = currentRow[0] = i;
              for (let j = 1; j <= bLength; j++) {
                const cost = a[i - 1] === b[j - 1] ? 0 : 1;
                let currentCell = Math.min(upRow[j] + 1,
                // delete
                currentRow[j - 1] + 1,
                // insert
                upRow[j - 1] + cost // substitute
                );

                if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
                  // transposition
                  const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];
                  currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
                }
                if (currentCell < smallestCell) {
                  smallestCell = currentCell;
                }
                currentRow[j] = currentCell;
              } // Early exit, since distance can't go smaller than smallest element of the previous row.

              if (smallestCell > threshold) {
                return undefined;
              }
            }
            const distance = rows[aLength % 3][bLength];
            return distance <= threshold ? distance : undefined;
          }
        }
        function stringToArray(str) {
          const strLength = str.length;
          const array = new Array(strLength);
          for (let i = 0; i < strLength; ++i) {
            array[i] = str.charCodeAt(i);
          }
          return array;
        }
      }, {
        "./naturalCompare.mjs": 164
      }],
      169: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.toError = toError;
        var _inspect = require("./inspect.mjs");
        /**
         * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.
         */

        function toError(thrownValue) {
          return thrownValue instanceof Error ? thrownValue : new NonErrorThrown(thrownValue);
        }
        class NonErrorThrown extends Error {
          constructor(thrownValue) {
            super('Unexpected error value: ' + (0, _inspect.inspect)(thrownValue));
            this.name = 'NonErrorThrown';
            this.thrownValue = thrownValue;
          }
        }
      }, {
        "./inspect.mjs": 153
      }],
      170: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.toObjMap = toObjMap;
        function toObjMap(obj) {
          if (obj == null) {
            return Object.create(null);
          }
          if (Object.getPrototypeOf(obj) === null) {
            return obj;
          }
          const map = Object.create(null);
          for (const [key, value] of Object.entries(obj)) {
            map[key] = value;
          }
          return map;
        }
      }, {}],
      171: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Token = exports.QueryDocumentKeys = exports.OperationTypeNode = exports.Location = void 0;
        exports.isNode = isNode;
        /**
         * Contains a range of UTF-8 character offsets and token references that
         * identify the region of the source from which the AST derived.
         */
        class Location {
          /**
           * The character offset at which this Node begins.
           */

          /**
           * The character offset at which this Node ends.
           */

          /**
           * The Token at which this Node begins.
           */

          /**
           * The Token at which this Node ends.
           */

          /**
           * The Source document the AST represents.
           */
          constructor(startToken, endToken, source) {
            this.start = startToken.start;
            this.end = endToken.end;
            this.startToken = startToken;
            this.endToken = endToken;
            this.source = source;
          }
          get [Symbol.toStringTag]() {
            return 'Location';
          }
          toJSON() {
            return {
              start: this.start,
              end: this.end
            };
          }
        }
        /**
         * Represents a range of characters represented by a lexical token
         * within a Source.
         */
        exports.Location = Location;
        class Token {
          /**
           * The kind of Token.
           */

          /**
           * The character offset at which this Node begins.
           */

          /**
           * The character offset at which this Node ends.
           */

          /**
           * The 1-indexed line number on which this Token appears.
           */

          /**
           * The 1-indexed column number at which this Token begins.
           */

          /**
           * For non-punctuation tokens, represents the interpreted value of the token.
           *
           * Note: is undefined for punctuation tokens, but typed as string for
           * convenience in the parser.
           */

          /**
           * Tokens exist as nodes in a double-linked-list amongst all tokens
           * including ignored tokens. <SOF> is always the first node and <EOF>
           * the last.
           */
          constructor(kind, start, end, line, column, value) {
            this.kind = kind;
            this.start = start;
            this.end = end;
            this.line = line;
            this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

            this.value = value;
            this.prev = null;
            this.next = null;
          }
          get [Symbol.toStringTag]() {
            return 'Token';
          }
          toJSON() {
            return {
              kind: this.kind,
              value: this.value,
              line: this.line,
              column: this.column
            };
          }
        }
        /**
         * The list of all possible AST node types.
         */

        /**
         * @internal
         */
        exports.Token = Token;
        const QueryDocumentKeys = exports.QueryDocumentKeys = {
          Name: [],
          Document: ['definitions'],
          OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
          VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
          Variable: ['name'],
          SelectionSet: ['selections'],
          Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
          Argument: ['name', 'value'],
          FragmentSpread: ['name', 'directives'],
          InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
          FragmentDefinition: ['name',
          // Note: fragment variable definitions are deprecated and will removed in v17.0.0
          'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
          IntValue: [],
          FloatValue: [],
          StringValue: [],
          BooleanValue: [],
          NullValue: [],
          EnumValue: [],
          ListValue: ['values'],
          ObjectValue: ['fields'],
          ObjectField: ['name', 'value'],
          Directive: ['name', 'arguments'],
          NamedType: ['name'],
          ListType: ['type'],
          NonNullType: ['type'],
          SchemaDefinition: ['description', 'directives', 'operationTypes'],
          OperationTypeDefinition: ['type'],
          ScalarTypeDefinition: ['description', 'name', 'directives'],
          ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
          FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
          InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
          InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
          UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
          EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
          EnumValueDefinition: ['description', 'name', 'directives'],
          InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
          DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
          SchemaExtension: ['directives', 'operationTypes'],
          ScalarTypeExtension: ['name', 'directives'],
          ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
          InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
          UnionTypeExtension: ['name', 'directives', 'types'],
          EnumTypeExtension: ['name', 'directives', 'values'],
          InputObjectTypeExtension: ['name', 'directives', 'fields']
        };
        const kindValues = new Set(Object.keys(QueryDocumentKeys));
        /**
         * @internal
         */

        function isNode(maybeNode) {
          const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
          return typeof maybeKind === 'string' && kindValues.has(maybeKind);
        }
        /** Name */

        var OperationTypeNode;
        (function (OperationTypeNode) {
          OperationTypeNode['QUERY'] = 'query';
          OperationTypeNode['MUTATION'] = 'mutation';
          OperationTypeNode['SUBSCRIPTION'] = 'subscription';
        })(OperationTypeNode || (exports.OperationTypeNode = OperationTypeNode = {}));
      }, {}],
      172: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.dedentBlockStringLines = dedentBlockStringLines;
        exports.isPrintableAsBlockString = isPrintableAsBlockString;
        exports.printBlockString = printBlockString;
        var _characterClasses = require("./characterClasses.mjs");
        /**
         * Produces the value of a block string from its parsed raw value, similar to
         * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
         *
         * This implements the GraphQL spec's BlockStringValue() static algorithm.
         *
         * @internal
         */

        function dedentBlockStringLines(lines) {
          var _firstNonEmptyLine2;
          let commonIndent = Number.MAX_SAFE_INTEGER;
          let firstNonEmptyLine = null;
          let lastNonEmptyLine = -1;
          for (let i = 0; i < lines.length; ++i) {
            var _firstNonEmptyLine;
            const line = lines[i];
            const indent = leadingWhitespace(line);
            if (indent === line.length) {
              continue; // skip empty lines
            }

            firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i;
            lastNonEmptyLine = i;
            if (i !== 0 && indent < commonIndent) {
              commonIndent = indent;
            }
          }
          return lines // Remove common indentation from all lines but first.
          .map((line, i) => i === 0 ? line : line.slice(commonIndent)) // Remove leading and trailing blank lines.
          .slice((_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0, lastNonEmptyLine + 1);
        }
        function leadingWhitespace(str) {
          let i = 0;
          while (i < str.length && (0, _characterClasses.isWhiteSpace)(str.charCodeAt(i))) {
            ++i;
          }
          return i;
        }
        /**
         * @internal
         */

        function isPrintableAsBlockString(value) {
          if (value === '') {
            return true; // empty string is printable
          }

          let isEmptyLine = true;
          let hasIndent = false;
          let hasCommonIndent = true;
          let seenNonEmptyLine = false;
          for (let i = 0; i < value.length; ++i) {
            switch (value.codePointAt(i)) {
              case 0x0000:
              case 0x0001:
              case 0x0002:
              case 0x0003:
              case 0x0004:
              case 0x0005:
              case 0x0006:
              case 0x0007:
              case 0x0008:
              case 0x000b:
              case 0x000c:
              case 0x000e:
              case 0x000f:
                return false;
              // Has non-printable characters

              case 0x000d:
                //  \r
                return false;
              // Has \r or \r\n which will be replaced as \n

              case 10:
                //  \n
                if (isEmptyLine && !seenNonEmptyLine) {
                  return false; // Has leading new line
                }

                seenNonEmptyLine = true;
                isEmptyLine = true;
                hasIndent = false;
                break;
              case 9: //   \t

              case 32:
                //  <space>
                hasIndent || (hasIndent = isEmptyLine);
                break;
              default:
                hasCommonIndent && (hasCommonIndent = hasIndent);
                isEmptyLine = false;
            }
          }
          if (isEmptyLine) {
            return false; // Has trailing empty lines
          }

          if (hasCommonIndent && seenNonEmptyLine) {
            return false; // Has internal indent
          }

          return true;
        }
        /**
         * Print a block string in the indented block form by adding a leading and
         * trailing blank line. However, if a block string starts with whitespace and is
         * a single-line, adding a leading blank line would strip that whitespace.
         *
         * @internal
         */

        function printBlockString(value, options) {
          const escapedValue = value.replace(/"""/g, '\\"""'); // Expand a block string's raw value into independent lines.

          const lines = escapedValue.split(/\r\n|[\n\r]/g);
          const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line

          const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every(line => line.length === 0 || (0, _characterClasses.isWhiteSpace)(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line

          const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""'); // Trailing quote (single or double) or slash forces trailing new line

          const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
          const hasTrailingSlash = value.endsWith('\\');
          const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
          const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && (
          // add leading and trailing new lines only if it improves readability
          !isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
          let result = ''; // Format a multi-line block quote to account for leading space.

          const skipLeadingNewLine = isSingleLine && (0, _characterClasses.isWhiteSpace)(value.charCodeAt(0));
          if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
            result += '\n';
          }
          result += escapedValue;
          if (printAsMultipleLines || forceTrailingNewline) {
            result += '\n';
          }
          return '"""' + result + '"""';
        }
      }, {
        "./characterClasses.mjs": 173
      }],
      173: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isDigit = isDigit;
        exports.isLetter = isLetter;
        exports.isNameContinue = isNameContinue;
        exports.isNameStart = isNameStart;
        exports.isWhiteSpace = isWhiteSpace;
        /**
         * ```
         * WhiteSpace ::
         *   - "Horizontal Tab (U+0009)"
         *   - "Space (U+0020)"
         * ```
         * @internal
         */
        function isWhiteSpace(code) {
          return code === 0x0009 || code === 0x0020;
        }
        /**
         * ```
         * Digit :: one of
         *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`
         * ```
         * @internal
         */

        function isDigit(code) {
          return code >= 0x0030 && code <= 0x0039;
        }
        /**
         * ```
         * Letter :: one of
         *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`
         *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`
         *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`
         *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`
         * ```
         * @internal
         */

        function isLetter(code) {
          return code >= 0x0061 && code <= 0x007a ||
          // A-Z
          code >= 0x0041 && code <= 0x005a // a-z
          ;
        }
        /**
         * ```
         * NameStart ::
         *   - Letter
         *   - `_`
         * ```
         * @internal
         */

        function isNameStart(code) {
          return isLetter(code) || code === 0x005f;
        }
        /**
         * ```
         * NameContinue ::
         *   - Letter
         *   - Digit
         *   - `_`
         * ```
         * @internal
         */

        function isNameContinue(code) {
          return isLetter(code) || isDigit(code) || code === 0x005f;
        }
      }, {}],
      174: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DirectiveLocation = void 0;
        /**
         * The set of allowed directive location values.
         */
        var DirectiveLocation;
        (function (DirectiveLocation) {
          DirectiveLocation['QUERY'] = 'QUERY';
          DirectiveLocation['MUTATION'] = 'MUTATION';
          DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';
          DirectiveLocation['FIELD'] = 'FIELD';
          DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';
          DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';
          DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';
          DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';
          DirectiveLocation['SCHEMA'] = 'SCHEMA';
          DirectiveLocation['SCALAR'] = 'SCALAR';
          DirectiveLocation['OBJECT'] = 'OBJECT';
          DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';
          DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';
          DirectiveLocation['INTERFACE'] = 'INTERFACE';
          DirectiveLocation['UNION'] = 'UNION';
          DirectiveLocation['ENUM'] = 'ENUM';
          DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';
          DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';
          DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';
        })(DirectiveLocation || (exports.DirectiveLocation = DirectiveLocation = {}));

        /**
         * The enum type representing the directive location values.
         *
         * @deprecated Please use `DirectiveLocation`. Will be remove in v17.
         */
      }, {}],
      175: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "BREAK", {
          enumerable: true,
          get: function () {
            return _visitor.BREAK;
          }
        });
        Object.defineProperty(exports, "DirectiveLocation", {
          enumerable: true,
          get: function () {
            return _directiveLocation.DirectiveLocation;
          }
        });
        Object.defineProperty(exports, "Kind", {
          enumerable: true,
          get: function () {
            return _kinds.Kind;
          }
        });
        Object.defineProperty(exports, "Lexer", {
          enumerable: true,
          get: function () {
            return _lexer.Lexer;
          }
        });
        Object.defineProperty(exports, "Location", {
          enumerable: true,
          get: function () {
            return _ast.Location;
          }
        });
        Object.defineProperty(exports, "OperationTypeNode", {
          enumerable: true,
          get: function () {
            return _ast.OperationTypeNode;
          }
        });
        Object.defineProperty(exports, "Source", {
          enumerable: true,
          get: function () {
            return _source.Source;
          }
        });
        Object.defineProperty(exports, "Token", {
          enumerable: true,
          get: function () {
            return _ast.Token;
          }
        });
        Object.defineProperty(exports, "TokenKind", {
          enumerable: true,
          get: function () {
            return _tokenKind.TokenKind;
          }
        });
        Object.defineProperty(exports, "getEnterLeaveForKind", {
          enumerable: true,
          get: function () {
            return _visitor.getEnterLeaveForKind;
          }
        });
        Object.defineProperty(exports, "getLocation", {
          enumerable: true,
          get: function () {
            return _location.getLocation;
          }
        });
        Object.defineProperty(exports, "getVisitFn", {
          enumerable: true,
          get: function () {
            return _visitor.getVisitFn;
          }
        });
        Object.defineProperty(exports, "isConstValueNode", {
          enumerable: true,
          get: function () {
            return _predicates.isConstValueNode;
          }
        });
        Object.defineProperty(exports, "isDefinitionNode", {
          enumerable: true,
          get: function () {
            return _predicates.isDefinitionNode;
          }
        });
        Object.defineProperty(exports, "isExecutableDefinitionNode", {
          enumerable: true,
          get: function () {
            return _predicates.isExecutableDefinitionNode;
          }
        });
        Object.defineProperty(exports, "isSelectionNode", {
          enumerable: true,
          get: function () {
            return _predicates.isSelectionNode;
          }
        });
        Object.defineProperty(exports, "isTypeDefinitionNode", {
          enumerable: true,
          get: function () {
            return _predicates.isTypeDefinitionNode;
          }
        });
        Object.defineProperty(exports, "isTypeExtensionNode", {
          enumerable: true,
          get: function () {
            return _predicates.isTypeExtensionNode;
          }
        });
        Object.defineProperty(exports, "isTypeNode", {
          enumerable: true,
          get: function () {
            return _predicates.isTypeNode;
          }
        });
        Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
          enumerable: true,
          get: function () {
            return _predicates.isTypeSystemDefinitionNode;
          }
        });
        Object.defineProperty(exports, "isTypeSystemExtensionNode", {
          enumerable: true,
          get: function () {
            return _predicates.isTypeSystemExtensionNode;
          }
        });
        Object.defineProperty(exports, "isValueNode", {
          enumerable: true,
          get: function () {
            return _predicates.isValueNode;
          }
        });
        Object.defineProperty(exports, "parse", {
          enumerable: true,
          get: function () {
            return _parser.parse;
          }
        });
        Object.defineProperty(exports, "parseConstValue", {
          enumerable: true,
          get: function () {
            return _parser.parseConstValue;
          }
        });
        Object.defineProperty(exports, "parseType", {
          enumerable: true,
          get: function () {
            return _parser.parseType;
          }
        });
        Object.defineProperty(exports, "parseValue", {
          enumerable: true,
          get: function () {
            return _parser.parseValue;
          }
        });
        Object.defineProperty(exports, "print", {
          enumerable: true,
          get: function () {
            return _printer.print;
          }
        });
        Object.defineProperty(exports, "printLocation", {
          enumerable: true,
          get: function () {
            return _printLocation.printLocation;
          }
        });
        Object.defineProperty(exports, "printSourceLocation", {
          enumerable: true,
          get: function () {
            return _printLocation.printSourceLocation;
          }
        });
        Object.defineProperty(exports, "visit", {
          enumerable: true,
          get: function () {
            return _visitor.visit;
          }
        });
        Object.defineProperty(exports, "visitInParallel", {
          enumerable: true,
          get: function () {
            return _visitor.visitInParallel;
          }
        });
        var _source = require("./source.mjs");
        var _location = require("./location.mjs");
        var _printLocation = require("./printLocation.mjs");
        var _kinds = require("./kinds.mjs");
        var _tokenKind = require("./tokenKind.mjs");
        var _lexer = require("./lexer.mjs");
        var _parser = require("./parser.mjs");
        var _printer = require("./printer.mjs");
        var _visitor = require("./visitor.mjs");
        var _ast = require("./ast.mjs");
        var _predicates = require("./predicates.mjs");
        var _directiveLocation = require("./directiveLocation.mjs");
      }, {
        "./ast.mjs": 171,
        "./directiveLocation.mjs": 174,
        "./kinds.mjs": 176,
        "./lexer.mjs": 177,
        "./location.mjs": 178,
        "./parser.mjs": 179,
        "./predicates.mjs": 180,
        "./printLocation.mjs": 181,
        "./printer.mjs": 183,
        "./source.mjs": 184,
        "./tokenKind.mjs": 185,
        "./visitor.mjs": 186
      }],
      176: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Kind = void 0;
        /**
         * The set of allowed kind values for AST nodes.
         */
        var Kind;
        (function (Kind) {
          Kind['NAME'] = 'Name';
          Kind['DOCUMENT'] = 'Document';
          Kind['OPERATION_DEFINITION'] = 'OperationDefinition';
          Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';
          Kind['SELECTION_SET'] = 'SelectionSet';
          Kind['FIELD'] = 'Field';
          Kind['ARGUMENT'] = 'Argument';
          Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';
          Kind['INLINE_FRAGMENT'] = 'InlineFragment';
          Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';
          Kind['VARIABLE'] = 'Variable';
          Kind['INT'] = 'IntValue';
          Kind['FLOAT'] = 'FloatValue';
          Kind['STRING'] = 'StringValue';
          Kind['BOOLEAN'] = 'BooleanValue';
          Kind['NULL'] = 'NullValue';
          Kind['ENUM'] = 'EnumValue';
          Kind['LIST'] = 'ListValue';
          Kind['OBJECT'] = 'ObjectValue';
          Kind['OBJECT_FIELD'] = 'ObjectField';
          Kind['DIRECTIVE'] = 'Directive';
          Kind['NAMED_TYPE'] = 'NamedType';
          Kind['LIST_TYPE'] = 'ListType';
          Kind['NON_NULL_TYPE'] = 'NonNullType';
          Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';
          Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';
          Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';
          Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';
          Kind['FIELD_DEFINITION'] = 'FieldDefinition';
          Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';
          Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';
          Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';
          Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';
          Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';
          Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';
          Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';
          Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';
          Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';
          Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';
          Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';
          Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';
          Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';
          Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';
        })(Kind || (exports.Kind = Kind = {}));

        /**
         * The enum type representing the possible kind values of AST nodes.
         *
         * @deprecated Please use `Kind`. Will be remove in v17.
         */
      }, {}],
      177: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Lexer = void 0;
        exports.isPunctuatorTokenKind = isPunctuatorTokenKind;
        var _syntaxError = require("../error/syntaxError.mjs");
        var _ast = require("./ast.mjs");
        var _blockString = require("./blockString.mjs");
        var _characterClasses = require("./characterClasses.mjs");
        var _tokenKind = require("./tokenKind.mjs");
        /**
         * Given a Source object, creates a Lexer for that source.
         * A Lexer is a stateful stream generator in that every time
         * it is advanced, it returns the next token in the Source. Assuming the
         * source lexes, the final Token emitted by the lexer will be of kind
         * EOF, after which the lexer will repeatedly return the same EOF token
         * whenever called.
         */

        class Lexer {
          /**
           * The previously focused non-ignored token.
           */

          /**
           * The currently focused non-ignored token.
           */

          /**
           * The (1-indexed) line containing the current token.
           */

          /**
           * The character offset at which the current line begins.
           */
          constructor(source) {
            const startOfFileToken = new _ast.Token(_tokenKind.TokenKind.SOF, 0, 0, 0, 0);
            this.source = source;
            this.lastToken = startOfFileToken;
            this.token = startOfFileToken;
            this.line = 1;
            this.lineStart = 0;
          }
          get [Symbol.toStringTag]() {
            return 'Lexer';
          }
          /**
           * Advances the token stream to the next non-ignored token.
           */

          advance() {
            this.lastToken = this.token;
            const token = this.token = this.lookahead();
            return token;
          }
          /**
           * Looks ahead and returns the next non-ignored token, but does not change
           * the state of Lexer.
           */

          lookahead() {
            let token = this.token;
            if (token.kind !== _tokenKind.TokenKind.EOF) {
              do {
                if (token.next) {
                  token = token.next;
                } else {
                  // Read the next token and form a link in the token linked-list.
                  const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.

                  token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.

                  nextToken.prev = token;
                  token = nextToken;
                }
              } while (token.kind === _tokenKind.TokenKind.COMMENT);
            }
            return token;
          }
        }
        /**
         * @internal
         */
        exports.Lexer = Lexer;
        function isPunctuatorTokenKind(kind) {
          return kind === _tokenKind.TokenKind.BANG || kind === _tokenKind.TokenKind.DOLLAR || kind === _tokenKind.TokenKind.AMP || kind === _tokenKind.TokenKind.PAREN_L || kind === _tokenKind.TokenKind.PAREN_R || kind === _tokenKind.TokenKind.SPREAD || kind === _tokenKind.TokenKind.COLON || kind === _tokenKind.TokenKind.EQUALS || kind === _tokenKind.TokenKind.AT || kind === _tokenKind.TokenKind.BRACKET_L || kind === _tokenKind.TokenKind.BRACKET_R || kind === _tokenKind.TokenKind.BRACE_L || kind === _tokenKind.TokenKind.PIPE || kind === _tokenKind.TokenKind.BRACE_R;
        }
        /**
         * A Unicode scalar value is any Unicode code point except surrogate code
         * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and
         * 0xE000 to 0x10FFFF.
         *
         * SourceCharacter ::
         *   - "Any Unicode scalar value"
         */

        function isUnicodeScalarValue(code) {
          return code >= 0x0000 && code <= 0xd7ff || code >= 0xe000 && code <= 0x10ffff;
        }
        /**
         * The GraphQL specification defines source text as a sequence of unicode scalar
         * values (which Unicode defines to exclude surrogate code points). However
         * JavaScript defines strings as a sequence of UTF-16 code units which may
         * include surrogates. A surrogate pair is a valid source character as it
         * encodes a supplementary code point (above U+FFFF), but unpaired surrogate
         * code points are not valid source characters.
         */

        function isSupplementaryCodePoint(body, location) {
          return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));
        }
        function isLeadingSurrogate(code) {
          return code >= 0xd800 && code <= 0xdbff;
        }
        function isTrailingSurrogate(code) {
          return code >= 0xdc00 && code <= 0xdfff;
        }
        /**
         * Prints the code point (or end of file reference) at a given location in a
         * source for use in error messages.
         *
         * Printable ASCII is printed quoted, while other points are printed in Unicode
         * code point form (ie. U+1234).
         */

        function printCodePointAt(lexer, location) {
          const code = lexer.source.body.codePointAt(location);
          if (code === undefined) {
            return _tokenKind.TokenKind.EOF;
          } else if (code >= 0x0020 && code <= 0x007e) {
            // Printable ASCII
            const char = String.fromCodePoint(code);
            return char === '"' ? "'\"'" : `"${char}"`;
          } // Unicode code point

          return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');
        }
        /**
         * Create a token with line and column location information.
         */

        function createToken(lexer, kind, start, end, value) {
          const line = lexer.line;
          const col = 1 + start - lexer.lineStart;
          return new _ast.Token(kind, start, end, line, col, value);
        }
        /**
         * Gets the next token from the source starting at the given position.
         *
         * This skips over whitespace until it finds the next lexable token, then lexes
         * punctuators immediately or calls the appropriate helper function for more
         * complicated tokens.
         */

        function readNextToken(lexer, start) {
          const body = lexer.source.body;
          const bodyLength = body.length;
          let position = start;
          while (position < bodyLength) {
            const code = body.charCodeAt(position); // SourceCharacter

            switch (code) {
              // Ignored ::
              //   - UnicodeBOM
              //   - WhiteSpace
              //   - LineTerminator
              //   - Comment
              //   - Comma
              //
              // UnicodeBOM :: "Byte Order Mark (U+FEFF)"
              //
              // WhiteSpace ::
              //   - "Horizontal Tab (U+0009)"
              //   - "Space (U+0020)"
              //
              // Comma :: ,
              case 0xfeff: // <BOM>

              case 0x0009: // \t

              case 0x0020: // <space>

              case 0x002c:
                // ,
                ++position;
                continue;
              // LineTerminator ::
              //   - "New Line (U+000A)"
              //   - "Carriage Return (U+000D)" [lookahead != "New Line (U+000A)"]
              //   - "Carriage Return (U+000D)" "New Line (U+000A)"

              case 0x000a:
                // \n
                ++position;
                ++lexer.line;
                lexer.lineStart = position;
                continue;
              case 0x000d:
                // \r
                if (body.charCodeAt(position + 1) === 0x000a) {
                  position += 2;
                } else {
                  ++position;
                }
                ++lexer.line;
                lexer.lineStart = position;
                continue;
              // Comment

              case 0x0023:
                // #
                return readComment(lexer, position);
              // Token ::
              //   - Punctuator
              //   - Name
              //   - IntValue
              //   - FloatValue
              //   - StringValue
              //
              // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }

              case 0x0021:
                // !
                return createToken(lexer, _tokenKind.TokenKind.BANG, position, position + 1);
              case 0x0024:
                // $
                return createToken(lexer, _tokenKind.TokenKind.DOLLAR, position, position + 1);
              case 0x0026:
                // &
                return createToken(lexer, _tokenKind.TokenKind.AMP, position, position + 1);
              case 0x0028:
                // (
                return createToken(lexer, _tokenKind.TokenKind.PAREN_L, position, position + 1);
              case 0x0029:
                // )
                return createToken(lexer, _tokenKind.TokenKind.PAREN_R, position, position + 1);
              case 0x002e:
                // .
                if (body.charCodeAt(position + 1) === 0x002e && body.charCodeAt(position + 2) === 0x002e) {
                  return createToken(lexer, _tokenKind.TokenKind.SPREAD, position, position + 3);
                }
                break;
              case 0x003a:
                // :
                return createToken(lexer, _tokenKind.TokenKind.COLON, position, position + 1);
              case 0x003d:
                // =
                return createToken(lexer, _tokenKind.TokenKind.EQUALS, position, position + 1);
              case 0x0040:
                // @
                return createToken(lexer, _tokenKind.TokenKind.AT, position, position + 1);
              case 0x005b:
                // [
                return createToken(lexer, _tokenKind.TokenKind.BRACKET_L, position, position + 1);
              case 0x005d:
                // ]
                return createToken(lexer, _tokenKind.TokenKind.BRACKET_R, position, position + 1);
              case 0x007b:
                // {
                return createToken(lexer, _tokenKind.TokenKind.BRACE_L, position, position + 1);
              case 0x007c:
                // |
                return createToken(lexer, _tokenKind.TokenKind.PIPE, position, position + 1);
              case 0x007d:
                // }
                return createToken(lexer, _tokenKind.TokenKind.BRACE_R, position, position + 1);
              // StringValue

              case 0x0022:
                // "
                if (body.charCodeAt(position + 1) === 0x0022 && body.charCodeAt(position + 2) === 0x0022) {
                  return readBlockString(lexer, position);
                }
                return readString(lexer, position);
            } // IntValue | FloatValue (Digit | -)

            if ((0, _characterClasses.isDigit)(code) || code === 0x002d) {
              return readNumber(lexer, position, code);
            } // Name

            if ((0, _characterClasses.isNameStart)(code)) {
              return readName(lexer, position);
            }
            throw (0, _syntaxError.syntaxError)(lexer.source, position, code === 0x0027 ? 'Unexpected single quote character (\'), did you mean to use a double quote (")?' : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`);
          }
          return createToken(lexer, _tokenKind.TokenKind.EOF, bodyLength, bodyLength);
        }
        /**
         * Reads a comment token from the source file.
         *
         * ```
         * Comment :: # CommentChar* [lookahead != CommentChar]
         *
         * CommentChar :: SourceCharacter but not LineTerminator
         * ```
         */

        function readComment(lexer, start) {
          const body = lexer.source.body;
          const bodyLength = body.length;
          let position = start + 1;
          while (position < bodyLength) {
            const code = body.charCodeAt(position); // LineTerminator (\n | \r)

            if (code === 0x000a || code === 0x000d) {
              break;
            } // SourceCharacter

            if (isUnicodeScalarValue(code)) {
              ++position;
            } else if (isSupplementaryCodePoint(body, position)) {
              position += 2;
            } else {
              break;
            }
          }
          return createToken(lexer, _tokenKind.TokenKind.COMMENT, start, position, body.slice(start + 1, position));
        }
        /**
         * Reads a number token from the source file, either a FloatValue or an IntValue
         * depending on whether a FractionalPart or ExponentPart is encountered.
         *
         * ```
         * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]
         *
         * IntegerPart ::
         *   - NegativeSign? 0
         *   - NegativeSign? NonZeroDigit Digit*
         *
         * NegativeSign :: -
         *
         * NonZeroDigit :: Digit but not `0`
         *
         * FloatValue ::
         *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]
         *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]
         *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]
         *
         * FractionalPart :: . Digit+
         *
         * ExponentPart :: ExponentIndicator Sign? Digit+
         *
         * ExponentIndicator :: one of `e` `E`
         *
         * Sign :: one of + -
         * ```
         */

        function readNumber(lexer, start, firstCode) {
          const body = lexer.source.body;
          let position = start;
          let code = firstCode;
          let isFloat = false; // NegativeSign (-)

          if (code === 0x002d) {
            code = body.charCodeAt(++position);
          } // Zero (0)

          if (code === 0x0030) {
            code = body.charCodeAt(++position);
            if ((0, _characterClasses.isDigit)(code)) {
              throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid number, unexpected digit after 0: ${printCodePointAt(lexer, position)}.`);
            }
          } else {
            position = readDigits(lexer, position, code);
            code = body.charCodeAt(position);
          } // Full stop (.)

          if (code === 0x002e) {
            isFloat = true;
            code = body.charCodeAt(++position);
            position = readDigits(lexer, position, code);
            code = body.charCodeAt(position);
          } // E e

          if (code === 0x0045 || code === 0x0065) {
            isFloat = true;
            code = body.charCodeAt(++position); // + -

            if (code === 0x002b || code === 0x002d) {
              code = body.charCodeAt(++position);
            }
            position = readDigits(lexer, position, code);
            code = body.charCodeAt(position);
          } // Numbers cannot be followed by . or NameStart

          if (code === 0x002e || (0, _characterClasses.isNameStart)(code)) {
            throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid number, expected digit but got: ${printCodePointAt(lexer, position)}.`);
          }
          return createToken(lexer, isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT, start, position, body.slice(start, position));
        }
        /**
         * Returns the new position in the source after reading one or more digits.
         */

        function readDigits(lexer, start, firstCode) {
          if (!(0, _characterClasses.isDigit)(firstCode)) {
            throw (0, _syntaxError.syntaxError)(lexer.source, start, `Invalid number, expected digit but got: ${printCodePointAt(lexer, start)}.`);
          }
          const body = lexer.source.body;
          let position = start + 1; // +1 to skip first firstCode

          while ((0, _characterClasses.isDigit)(body.charCodeAt(position))) {
            ++position;
          }
          return position;
        }
        /**
         * Reads a single-quote string token from the source file.
         *
         * ```
         * StringValue ::
         *   - `""` [lookahead != `"`]
         *   - `"` StringCharacter+ `"`
         *
         * StringCharacter ::
         *   - SourceCharacter but not `"` or `\` or LineTerminator
         *   - `\u` EscapedUnicode
         *   - `\` EscapedCharacter
         *
         * EscapedUnicode ::
         *   - `{` HexDigit+ `}`
         *   - HexDigit HexDigit HexDigit HexDigit
         *
         * EscapedCharacter :: one of `"` `\` `/` `b` `f` `n` `r` `t`
         * ```
         */

        function readString(lexer, start) {
          const body = lexer.source.body;
          const bodyLength = body.length;
          let position = start + 1;
          let chunkStart = position;
          let value = '';
          while (position < bodyLength) {
            const code = body.charCodeAt(position); // Closing Quote (")

            if (code === 0x0022) {
              value += body.slice(chunkStart, position);
              return createToken(lexer, _tokenKind.TokenKind.STRING, start, position + 1, value);
            } // Escape Sequence (\)

            if (code === 0x005c) {
              value += body.slice(chunkStart, position);
              const escape = body.charCodeAt(position + 1) === 0x0075 // u
              ? body.charCodeAt(position + 2) === 0x007b // {
              ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
              value += escape.value;
              position += escape.size;
              chunkStart = position;
              continue;
            } // LineTerminator (\n | \r)

            if (code === 0x000a || code === 0x000d) {
              break;
            } // SourceCharacter

            if (isUnicodeScalarValue(code)) {
              ++position;
            } else if (isSupplementaryCodePoint(body, position)) {
              position += 2;
            } else {
              throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid character within String: ${printCodePointAt(lexer, position)}.`);
            }
          }
          throw (0, _syntaxError.syntaxError)(lexer.source, position, 'Unterminated string.');
        } // The string value and lexed size of an escape sequence.

        function readEscapedUnicodeVariableWidth(lexer, position) {
          const body = lexer.source.body;
          let point = 0;
          let size = 3; // Cannot be larger than 12 chars (\u{00000000}).

          while (size < 12) {
            const code = body.charCodeAt(position + size++); // Closing Brace (})

            if (code === 0x007d) {
              // Must be at least 5 chars (\u{0}) and encode a Unicode scalar value.
              if (size < 5 || !isUnicodeScalarValue(point)) {
                break;
              }
              return {
                value: String.fromCodePoint(point),
                size
              };
            } // Append this hex digit to the code point.

            point = point << 4 | readHexDigit(code);
            if (point < 0) {
              break;
            }
          }
          throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid Unicode escape sequence: "${body.slice(position, position + size)}".`);
        }
        function readEscapedUnicodeFixedWidth(lexer, position) {
          const body = lexer.source.body;
          const code = read16BitHexCode(body, position + 2);
          if (isUnicodeScalarValue(code)) {
            return {
              value: String.fromCodePoint(code),
              size: 6
            };
          } // GraphQL allows JSON-style surrogate pair escape sequences, but only when
          // a valid pair is formed.

          if (isLeadingSurrogate(code)) {
            // \u
            if (body.charCodeAt(position + 6) === 0x005c && body.charCodeAt(position + 7) === 0x0075) {
              const trailingCode = read16BitHexCode(body, position + 8);
              if (isTrailingSurrogate(trailingCode)) {
                // JavaScript defines strings as a sequence of UTF-16 code units and
                // encodes Unicode code points above U+FFFF using a surrogate pair of
                // code units. Since this is a surrogate pair escape sequence, just
                // include both codes into the JavaScript string value. Had JavaScript
                // not been internally based on UTF-16, then this surrogate pair would
                // be decoded to retrieve the supplementary code point.
                return {
                  value: String.fromCodePoint(code, trailingCode),
                  size: 12
                };
              }
            }
          }
          throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`);
        }
        /**
         * Reads four hexadecimal characters and returns the positive integer that 16bit
         * hexadecimal string represents. For example, "000f" will return 15, and "dead"
         * will return 57005.
         *
         * Returns a negative number if any char was not a valid hexadecimal digit.
         */

        function read16BitHexCode(body, position) {
          // readHexDigit() returns -1 on error. ORing a negative value with any other
          // value always produces a negative value.
          return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
        }
        /**
         * Reads a hexadecimal character and returns its positive integer value (0-15).
         *
         * '0' becomes 0, '9' becomes 9
         * 'A' becomes 10, 'F' becomes 15
         * 'a' becomes 10, 'f' becomes 15
         *
         * Returns -1 if the provided character code was not a valid hexadecimal digit.
         *
         * HexDigit :: one of
         *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`
         *   - `A` `B` `C` `D` `E` `F`
         *   - `a` `b` `c` `d` `e` `f`
         */

        function readHexDigit(code) {
          return code >= 0x0030 && code <= 0x0039 // 0-9
          ? code - 0x0030 : code >= 0x0041 && code <= 0x0046 // A-F
          ? code - 0x0037 : code >= 0x0061 && code <= 0x0066 // a-f
          ? code - 0x0057 : -1;
        }
        /**
         * | Escaped Character | Code Point | Character Name               |
         * | ----------------- | ---------- | ---------------------------- |
         * | `"`               | U+0022     | double quote                 |
         * | `\`               | U+005C     | reverse solidus (back slash) |
         * | `/`               | U+002F     | solidus (forward slash)      |
         * | `b`               | U+0008     | backspace                    |
         * | `f`               | U+000C     | form feed                    |
         * | `n`               | U+000A     | line feed (new line)         |
         * | `r`               | U+000D     | carriage return              |
         * | `t`               | U+0009     | horizontal tab               |
         */

        function readEscapedCharacter(lexer, position) {
          const body = lexer.source.body;
          const code = body.charCodeAt(position + 1);
          switch (code) {
            case 0x0022:
              // "
              return {
                value: '\u0022',
                size: 2
              };
            case 0x005c:
              // \
              return {
                value: '\u005c',
                size: 2
              };
            case 0x002f:
              // /
              return {
                value: '\u002f',
                size: 2
              };
            case 0x0062:
              // b
              return {
                value: '\u0008',
                size: 2
              };
            case 0x0066:
              // f
              return {
                value: '\u000c',
                size: 2
              };
            case 0x006e:
              // n
              return {
                value: '\u000a',
                size: 2
              };
            case 0x0072:
              // r
              return {
                value: '\u000d',
                size: 2
              };
            case 0x0074:
              // t
              return {
                value: '\u0009',
                size: 2
              };
          }
          throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid character escape sequence: "${body.slice(position, position + 2)}".`);
        }
        /**
         * Reads a block string token from the source file.
         *
         * ```
         * StringValue ::
         *   - `"""` BlockStringCharacter* `"""`
         *
         * BlockStringCharacter ::
         *   - SourceCharacter but not `"""` or `\"""`
         *   - `\"""`
         * ```
         */

        function readBlockString(lexer, start) {
          const body = lexer.source.body;
          const bodyLength = body.length;
          let lineStart = lexer.lineStart;
          let position = start + 3;
          let chunkStart = position;
          let currentLine = '';
          const blockLines = [];
          while (position < bodyLength) {
            const code = body.charCodeAt(position); // Closing Triple-Quote (""")

            if (code === 0x0022 && body.charCodeAt(position + 1) === 0x0022 && body.charCodeAt(position + 2) === 0x0022) {
              currentLine += body.slice(chunkStart, position);
              blockLines.push(currentLine);
              const token = createToken(lexer, _tokenKind.TokenKind.BLOCK_STRING, start, position + 3,
              // Return a string of the lines joined with U+000A.
              (0, _blockString.dedentBlockStringLines)(blockLines).join('\n'));
              lexer.line += blockLines.length - 1;
              lexer.lineStart = lineStart;
              return token;
            } // Escaped Triple-Quote (\""")

            if (code === 0x005c && body.charCodeAt(position + 1) === 0x0022 && body.charCodeAt(position + 2) === 0x0022 && body.charCodeAt(position + 3) === 0x0022) {
              currentLine += body.slice(chunkStart, position);
              chunkStart = position + 1; // skip only slash

              position += 4;
              continue;
            } // LineTerminator

            if (code === 0x000a || code === 0x000d) {
              currentLine += body.slice(chunkStart, position);
              blockLines.push(currentLine);
              if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {
                position += 2;
              } else {
                ++position;
              }
              currentLine = '';
              chunkStart = position;
              lineStart = position;
              continue;
            } // SourceCharacter

            if (isUnicodeScalarValue(code)) {
              ++position;
            } else if (isSupplementaryCodePoint(body, position)) {
              position += 2;
            } else {
              throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid character within String: ${printCodePointAt(lexer, position)}.`);
            }
          }
          throw (0, _syntaxError.syntaxError)(lexer.source, position, 'Unterminated string.');
        }
        /**
         * Reads an alphanumeric + underscore name from the source.
         *
         * ```
         * Name ::
         *   - NameStart NameContinue* [lookahead != NameContinue]
         * ```
         */

        function readName(lexer, start) {
          const body = lexer.source.body;
          const bodyLength = body.length;
          let position = start + 1;
          while (position < bodyLength) {
            const code = body.charCodeAt(position);
            if ((0, _characterClasses.isNameContinue)(code)) {
              ++position;
            } else {
              break;
            }
          }
          return createToken(lexer, _tokenKind.TokenKind.NAME, start, position, body.slice(start, position));
        }
      }, {
        "../error/syntaxError.mjs": 139,
        "./ast.mjs": 171,
        "./blockString.mjs": 172,
        "./characterClasses.mjs": 173,
        "./tokenKind.mjs": 185
      }],
      178: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getLocation = getLocation;
        var _invariant = require("../jsutils/invariant.mjs");
        const LineRegExp = /\r\n|[\n\r]/g;
        /**
         * Represents a location in a Source.
         */

        /**
         * Takes a Source and a UTF-8 character offset, and returns the corresponding
         * line and column as a SourceLocation.
         */
        function getLocation(source, position) {
          let lastLineStart = 0;
          let line = 1;
          for (const match of source.body.matchAll(LineRegExp)) {
            typeof match.index === 'number' || (0, _invariant.invariant)(false);
            if (match.index >= position) {
              break;
            }
            lastLineStart = match.index + match[0].length;
            line += 1;
          }
          return {
            line,
            column: position + 1 - lastLineStart
          };
        }
      }, {
        "../jsutils/invariant.mjs": 155
      }],
      179: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Parser = void 0;
        exports.parse = parse;
        exports.parseConstValue = parseConstValue;
        exports.parseType = parseType;
        exports.parseValue = parseValue;
        var _syntaxError = require("../error/syntaxError.mjs");
        var _ast = require("./ast.mjs");
        var _directiveLocation = require("./directiveLocation.mjs");
        var _kinds = require("./kinds.mjs");
        var _lexer = require("./lexer.mjs");
        var _source = require("./source.mjs");
        var _tokenKind = require("./tokenKind.mjs");
        /**
         * Configuration options to control parser behavior
         */

        /**
         * Given a GraphQL source, parses it into a Document.
         * Throws GraphQLError if a syntax error is encountered.
         */
        function parse(source, options) {
          const parser = new Parser(source, options);
          return parser.parseDocument();
        }
        /**
         * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
         * that value.
         * Throws GraphQLError if a syntax error is encountered.
         *
         * This is useful within tools that operate upon GraphQL Values directly and
         * in isolation of complete GraphQL documents.
         *
         * Consider providing the results to the utility function: valueFromAST().
         */

        function parseValue(source, options) {
          const parser = new Parser(source, options);
          parser.expectToken(_tokenKind.TokenKind.SOF);
          const value = parser.parseValueLiteral(false);
          parser.expectToken(_tokenKind.TokenKind.EOF);
          return value;
        }
        /**
         * Similar to parseValue(), but raises a parse error if it encounters a
         * variable. The return type will be a constant value.
         */

        function parseConstValue(source, options) {
          const parser = new Parser(source, options);
          parser.expectToken(_tokenKind.TokenKind.SOF);
          const value = parser.parseConstValueLiteral();
          parser.expectToken(_tokenKind.TokenKind.EOF);
          return value;
        }
        /**
         * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
         * that type.
         * Throws GraphQLError if a syntax error is encountered.
         *
         * This is useful within tools that operate upon GraphQL Types directly and
         * in isolation of complete GraphQL documents.
         *
         * Consider providing the results to the utility function: typeFromAST().
         */

        function parseType(source, options) {
          const parser = new Parser(source, options);
          parser.expectToken(_tokenKind.TokenKind.SOF);
          const type = parser.parseTypeReference();
          parser.expectToken(_tokenKind.TokenKind.EOF);
          return type;
        }
        /**
         * This class is exported only to assist people in implementing their own parsers
         * without duplicating too much code and should be used only as last resort for cases
         * such as experimental syntax or if certain features could not be contributed upstream.
         *
         * It is still part of the internal API and is versioned, so any changes to it are never
         * considered breaking changes. If you still need to support multiple versions of the
         * library, please use the `versionInfo` variable for version detection.
         *
         * @internal
         */

        class Parser {
          constructor(source, options = {}) {
            const sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
            this._lexer = new _lexer.Lexer(sourceObj);
            this._options = options;
            this._tokenCounter = 0;
          }
          /**
           * Converts a name lex token into a name parse node.
           */

          parseName() {
            const token = this.expectToken(_tokenKind.TokenKind.NAME);
            return this.node(token, {
              kind: _kinds.Kind.NAME,
              value: token.value
            });
          } // Implements the parsing rules in the Document section.

          /**
           * Document : Definition+
           */

          parseDocument() {
            return this.node(this._lexer.token, {
              kind: _kinds.Kind.DOCUMENT,
              definitions: this.many(_tokenKind.TokenKind.SOF, this.parseDefinition, _tokenKind.TokenKind.EOF)
            });
          }
          /**
           * Definition :
           *   - ExecutableDefinition
           *   - TypeSystemDefinition
           *   - TypeSystemExtension
           *
           * ExecutableDefinition :
           *   - OperationDefinition
           *   - FragmentDefinition
           *
           * TypeSystemDefinition :
           *   - SchemaDefinition
           *   - TypeDefinition
           *   - DirectiveDefinition
           *
           * TypeDefinition :
           *   - ScalarTypeDefinition
           *   - ObjectTypeDefinition
           *   - InterfaceTypeDefinition
           *   - UnionTypeDefinition
           *   - EnumTypeDefinition
           *   - InputObjectTypeDefinition
           */

          parseDefinition() {
            if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
              return this.parseOperationDefinition();
            } // Many definitions begin with a description and require a lookahead.

            const hasDescription = this.peekDescription();
            const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
            if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
              switch (keywordToken.value) {
                case 'schema':
                  return this.parseSchemaDefinition();
                case 'scalar':
                  return this.parseScalarTypeDefinition();
                case 'type':
                  return this.parseObjectTypeDefinition();
                case 'interface':
                  return this.parseInterfaceTypeDefinition();
                case 'union':
                  return this.parseUnionTypeDefinition();
                case 'enum':
                  return this.parseEnumTypeDefinition();
                case 'input':
                  return this.parseInputObjectTypeDefinition();
                case 'directive':
                  return this.parseDirectiveDefinition();
              }
              if (hasDescription) {
                throw (0, _syntaxError.syntaxError)(this._lexer.source, this._lexer.token.start, 'Unexpected description, descriptions are supported only on type definitions.');
              }
              switch (keywordToken.value) {
                case 'query':
                case 'mutation':
                case 'subscription':
                  return this.parseOperationDefinition();
                case 'fragment':
                  return this.parseFragmentDefinition();
                case 'extend':
                  return this.parseTypeSystemExtension();
              }
            }
            throw this.unexpected(keywordToken);
          } // Implements the parsing rules in the Operations section.

          /**
           * OperationDefinition :
           *  - SelectionSet
           *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
           */

          parseOperationDefinition() {
            const start = this._lexer.token;
            if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
              return this.node(start, {
                kind: _kinds.Kind.OPERATION_DEFINITION,
                operation: _ast.OperationTypeNode.QUERY,
                name: undefined,
                variableDefinitions: [],
                directives: [],
                selectionSet: this.parseSelectionSet()
              });
            }
            const operation = this.parseOperationType();
            let name;
            if (this.peek(_tokenKind.TokenKind.NAME)) {
              name = this.parseName();
            }
            return this.node(start, {
              kind: _kinds.Kind.OPERATION_DEFINITION,
              operation,
              name,
              variableDefinitions: this.parseVariableDefinitions(),
              directives: this.parseDirectives(false),
              selectionSet: this.parseSelectionSet()
            });
          }
          /**
           * OperationType : one of query mutation subscription
           */

          parseOperationType() {
            const operationToken = this.expectToken(_tokenKind.TokenKind.NAME);
            switch (operationToken.value) {
              case 'query':
                return _ast.OperationTypeNode.QUERY;
              case 'mutation':
                return _ast.OperationTypeNode.MUTATION;
              case 'subscription':
                return _ast.OperationTypeNode.SUBSCRIPTION;
            }
            throw this.unexpected(operationToken);
          }
          /**
           * VariableDefinitions : ( VariableDefinition+ )
           */

          parseVariableDefinitions() {
            return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind.TokenKind.PAREN_R);
          }
          /**
           * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
           */

          parseVariableDefinition() {
            return this.node(this._lexer.token, {
              kind: _kinds.Kind.VARIABLE_DEFINITION,
              variable: this.parseVariable(),
              type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),
              defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseConstValueLiteral() : undefined,
              directives: this.parseConstDirectives()
            });
          }
          /**
           * Variable : $ Name
           */

          parseVariable() {
            const start = this._lexer.token;
            this.expectToken(_tokenKind.TokenKind.DOLLAR);
            return this.node(start, {
              kind: _kinds.Kind.VARIABLE,
              name: this.parseName()
            });
          }
          /**
           * ```
           * SelectionSet : { Selection+ }
           * ```
           */

          parseSelectionSet() {
            return this.node(this._lexer.token, {
              kind: _kinds.Kind.SELECTION_SET,
              selections: this.many(_tokenKind.TokenKind.BRACE_L, this.parseSelection, _tokenKind.TokenKind.BRACE_R)
            });
          }
          /**
           * Selection :
           *   - Field
           *   - FragmentSpread
           *   - InlineFragment
           */

          parseSelection() {
            return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
          }
          /**
           * Field : Alias? Name Arguments? Directives? SelectionSet?
           *
           * Alias : Name :
           */

          parseField() {
            const start = this._lexer.token;
            const nameOrAlias = this.parseName();
            let alias;
            let name;
            if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {
              alias = nameOrAlias;
              name = this.parseName();
            } else {
              name = nameOrAlias;
            }
            return this.node(start, {
              kind: _kinds.Kind.FIELD,
              alias,
              name,
              arguments: this.parseArguments(false),
              directives: this.parseDirectives(false),
              selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined
            });
          }
          /**
           * Arguments[Const] : ( Argument[?Const]+ )
           */

          parseArguments(isConst) {
            const item = isConst ? this.parseConstArgument : this.parseArgument;
            return this.optionalMany(_tokenKind.TokenKind.PAREN_L, item, _tokenKind.TokenKind.PAREN_R);
          }
          /**
           * Argument[Const] : Name : Value[?Const]
           */

          parseArgument(isConst = false) {
            const start = this._lexer.token;
            const name = this.parseName();
            this.expectToken(_tokenKind.TokenKind.COLON);
            return this.node(start, {
              kind: _kinds.Kind.ARGUMENT,
              name,
              value: this.parseValueLiteral(isConst)
            });
          }
          parseConstArgument() {
            return this.parseArgument(true);
          } // Implements the parsing rules in the Fragments section.

          /**
           * Corresponds to both FragmentSpread and InlineFragment in the spec.
           *
           * FragmentSpread : ... FragmentName Directives?
           *
           * InlineFragment : ... TypeCondition? Directives? SelectionSet
           */

          parseFragment() {
            const start = this._lexer.token;
            this.expectToken(_tokenKind.TokenKind.SPREAD);
            const hasTypeCondition = this.expectOptionalKeyword('on');
            if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {
              return this.node(start, {
                kind: _kinds.Kind.FRAGMENT_SPREAD,
                name: this.parseFragmentName(),
                directives: this.parseDirectives(false)
              });
            }
            return this.node(start, {
              kind: _kinds.Kind.INLINE_FRAGMENT,
              typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
              directives: this.parseDirectives(false),
              selectionSet: this.parseSelectionSet()
            });
          }
          /**
           * FragmentDefinition :
           *   - fragment FragmentName on TypeCondition Directives? SelectionSet
           *
           * TypeCondition : NamedType
           */

          parseFragmentDefinition() {
            const start = this._lexer.token;
            this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes
            // the grammar of FragmentDefinition:
            //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

            if (this._options.allowLegacyFragmentVariables === true) {
              return this.node(start, {
                kind: _kinds.Kind.FRAGMENT_DEFINITION,
                name: this.parseFragmentName(),
                variableDefinitions: this.parseVariableDefinitions(),
                typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
                directives: this.parseDirectives(false),
                selectionSet: this.parseSelectionSet()
              });
            }
            return this.node(start, {
              kind: _kinds.Kind.FRAGMENT_DEFINITION,
              name: this.parseFragmentName(),
              typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
              directives: this.parseDirectives(false),
              selectionSet: this.parseSelectionSet()
            });
          }
          /**
           * FragmentName : Name but not `on`
           */

          parseFragmentName() {
            if (this._lexer.token.value === 'on') {
              throw this.unexpected();
            }
            return this.parseName();
          } // Implements the parsing rules in the Values section.

          /**
           * Value[Const] :
           *   - [~Const] Variable
           *   - IntValue
           *   - FloatValue
           *   - StringValue
           *   - BooleanValue
           *   - NullValue
           *   - EnumValue
           *   - ListValue[?Const]
           *   - ObjectValue[?Const]
           *
           * BooleanValue : one of `true` `false`
           *
           * NullValue : `null`
           *
           * EnumValue : Name but not `true`, `false` or `null`
           */

          parseValueLiteral(isConst) {
            const token = this._lexer.token;
            switch (token.kind) {
              case _tokenKind.TokenKind.BRACKET_L:
                return this.parseList(isConst);
              case _tokenKind.TokenKind.BRACE_L:
                return this.parseObject(isConst);
              case _tokenKind.TokenKind.INT:
                this.advanceLexer();
                return this.node(token, {
                  kind: _kinds.Kind.INT,
                  value: token.value
                });
              case _tokenKind.TokenKind.FLOAT:
                this.advanceLexer();
                return this.node(token, {
                  kind: _kinds.Kind.FLOAT,
                  value: token.value
                });
              case _tokenKind.TokenKind.STRING:
              case _tokenKind.TokenKind.BLOCK_STRING:
                return this.parseStringLiteral();
              case _tokenKind.TokenKind.NAME:
                this.advanceLexer();
                switch (token.value) {
                  case 'true':
                    return this.node(token, {
                      kind: _kinds.Kind.BOOLEAN,
                      value: true
                    });
                  case 'false':
                    return this.node(token, {
                      kind: _kinds.Kind.BOOLEAN,
                      value: false
                    });
                  case 'null':
                    return this.node(token, {
                      kind: _kinds.Kind.NULL
                    });
                  default:
                    return this.node(token, {
                      kind: _kinds.Kind.ENUM,
                      value: token.value
                    });
                }
              case _tokenKind.TokenKind.DOLLAR:
                if (isConst) {
                  this.expectToken(_tokenKind.TokenKind.DOLLAR);
                  if (this._lexer.token.kind === _tokenKind.TokenKind.NAME) {
                    const varName = this._lexer.token.value;
                    throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Unexpected variable "$${varName}" in constant value.`);
                  } else {
                    throw this.unexpected(token);
                  }
                }
                return this.parseVariable();
              default:
                throw this.unexpected();
            }
          }
          parseConstValueLiteral() {
            return this.parseValueLiteral(true);
          }
          parseStringLiteral() {
            const token = this._lexer.token;
            this.advanceLexer();
            return this.node(token, {
              kind: _kinds.Kind.STRING,
              value: token.value,
              block: token.kind === _tokenKind.TokenKind.BLOCK_STRING
            });
          }
          /**
           * ListValue[Const] :
           *   - [ ]
           *   - [ Value[?Const]+ ]
           */

          parseList(isConst) {
            const item = () => this.parseValueLiteral(isConst);
            return this.node(this._lexer.token, {
              kind: _kinds.Kind.LIST,
              values: this.any(_tokenKind.TokenKind.BRACKET_L, item, _tokenKind.TokenKind.BRACKET_R)
            });
          }
          /**
           * ```
           * ObjectValue[Const] :
           *   - { }
           *   - { ObjectField[?Const]+ }
           * ```
           */

          parseObject(isConst) {
            const item = () => this.parseObjectField(isConst);
            return this.node(this._lexer.token, {
              kind: _kinds.Kind.OBJECT,
              fields: this.any(_tokenKind.TokenKind.BRACE_L, item, _tokenKind.TokenKind.BRACE_R)
            });
          }
          /**
           * ObjectField[Const] : Name : Value[?Const]
           */

          parseObjectField(isConst) {
            const start = this._lexer.token;
            const name = this.parseName();
            this.expectToken(_tokenKind.TokenKind.COLON);
            return this.node(start, {
              kind: _kinds.Kind.OBJECT_FIELD,
              name,
              value: this.parseValueLiteral(isConst)
            });
          } // Implements the parsing rules in the Directives section.

          /**
           * Directives[Const] : Directive[?Const]+
           */

          parseDirectives(isConst) {
            const directives = [];
            while (this.peek(_tokenKind.TokenKind.AT)) {
              directives.push(this.parseDirective(isConst));
            }
            return directives;
          }
          parseConstDirectives() {
            return this.parseDirectives(true);
          }
          /**
           * ```
           * Directive[Const] : @ Name Arguments[?Const]?
           * ```
           */

          parseDirective(isConst) {
            const start = this._lexer.token;
            this.expectToken(_tokenKind.TokenKind.AT);
            return this.node(start, {
              kind: _kinds.Kind.DIRECTIVE,
              name: this.parseName(),
              arguments: this.parseArguments(isConst)
            });
          } // Implements the parsing rules in the Types section.

          /**
           * Type :
           *   - NamedType
           *   - ListType
           *   - NonNullType
           */

          parseTypeReference() {
            const start = this._lexer.token;
            let type;
            if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
              const innerType = this.parseTypeReference();
              this.expectToken(_tokenKind.TokenKind.BRACKET_R);
              type = this.node(start, {
                kind: _kinds.Kind.LIST_TYPE,
                type: innerType
              });
            } else {
              type = this.parseNamedType();
            }
            if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {
              return this.node(start, {
                kind: _kinds.Kind.NON_NULL_TYPE,
                type
              });
            }
            return type;
          }
          /**
           * NamedType : Name
           */

          parseNamedType() {
            return this.node(this._lexer.token, {
              kind: _kinds.Kind.NAMED_TYPE,
              name: this.parseName()
            });
          } // Implements the parsing rules in the Type Definition section.

          peekDescription() {
            return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);
          }
          /**
           * Description : StringValue
           */

          parseDescription() {
            if (this.peekDescription()) {
              return this.parseStringLiteral();
            }
          }
          /**
           * ```
           * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
           * ```
           */

          parseSchemaDefinition() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            this.expectKeyword('schema');
            const directives = this.parseConstDirectives();
            const operationTypes = this.many(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
            return this.node(start, {
              kind: _kinds.Kind.SCHEMA_DEFINITION,
              description,
              directives,
              operationTypes
            });
          }
          /**
           * OperationTypeDefinition : OperationType : NamedType
           */

          parseOperationTypeDefinition() {
            const start = this._lexer.token;
            const operation = this.parseOperationType();
            this.expectToken(_tokenKind.TokenKind.COLON);
            const type = this.parseNamedType();
            return this.node(start, {
              kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
              operation,
              type
            });
          }
          /**
           * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
           */

          parseScalarTypeDefinition() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            this.expectKeyword('scalar');
            const name = this.parseName();
            const directives = this.parseConstDirectives();
            return this.node(start, {
              kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
              description,
              name,
              directives
            });
          }
          /**
           * ObjectTypeDefinition :
           *   Description?
           *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
           */

          parseObjectTypeDefinition() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            this.expectKeyword('type');
            const name = this.parseName();
            const interfaces = this.parseImplementsInterfaces();
            const directives = this.parseConstDirectives();
            const fields = this.parseFieldsDefinition();
            return this.node(start, {
              kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
              description,
              name,
              interfaces,
              directives,
              fields
            });
          }
          /**
           * ImplementsInterfaces :
           *   - implements `&`? NamedType
           *   - ImplementsInterfaces & NamedType
           */

          parseImplementsInterfaces() {
            return this.expectOptionalKeyword('implements') ? this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType) : [];
          }
          /**
           * ```
           * FieldsDefinition : { FieldDefinition+ }
           * ```
           */

          parseFieldsDefinition() {
            return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind.TokenKind.BRACE_R);
          }
          /**
           * FieldDefinition :
           *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
           */

          parseFieldDefinition() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            const name = this.parseName();
            const args = this.parseArgumentDefs();
            this.expectToken(_tokenKind.TokenKind.COLON);
            const type = this.parseTypeReference();
            const directives = this.parseConstDirectives();
            return this.node(start, {
              kind: _kinds.Kind.FIELD_DEFINITION,
              description,
              name,
              arguments: args,
              type,
              directives
            });
          }
          /**
           * ArgumentsDefinition : ( InputValueDefinition+ )
           */

          parseArgumentDefs() {
            return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind.TokenKind.PAREN_R);
          }
          /**
           * InputValueDefinition :
           *   - Description? Name : Type DefaultValue? Directives[Const]?
           */

          parseInputValueDef() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            const name = this.parseName();
            this.expectToken(_tokenKind.TokenKind.COLON);
            const type = this.parseTypeReference();
            let defaultValue;
            if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {
              defaultValue = this.parseConstValueLiteral();
            }
            const directives = this.parseConstDirectives();
            return this.node(start, {
              kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
              description,
              name,
              type,
              defaultValue,
              directives
            });
          }
          /**
           * InterfaceTypeDefinition :
           *   - Description? interface Name Directives[Const]? FieldsDefinition?
           */

          parseInterfaceTypeDefinition() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            this.expectKeyword('interface');
            const name = this.parseName();
            const interfaces = this.parseImplementsInterfaces();
            const directives = this.parseConstDirectives();
            const fields = this.parseFieldsDefinition();
            return this.node(start, {
              kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
              description,
              name,
              interfaces,
              directives,
              fields
            });
          }
          /**
           * UnionTypeDefinition :
           *   - Description? union Name Directives[Const]? UnionMemberTypes?
           */

          parseUnionTypeDefinition() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            this.expectKeyword('union');
            const name = this.parseName();
            const directives = this.parseConstDirectives();
            const types = this.parseUnionMemberTypes();
            return this.node(start, {
              kind: _kinds.Kind.UNION_TYPE_DEFINITION,
              description,
              name,
              directives,
              types
            });
          }
          /**
           * UnionMemberTypes :
           *   - = `|`? NamedType
           *   - UnionMemberTypes | NamedType
           */

          parseUnionMemberTypes() {
            return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];
          }
          /**
           * EnumTypeDefinition :
           *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
           */

          parseEnumTypeDefinition() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            this.expectKeyword('enum');
            const name = this.parseName();
            const directives = this.parseConstDirectives();
            const values = this.parseEnumValuesDefinition();
            return this.node(start, {
              kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
              description,
              name,
              directives,
              values
            });
          }
          /**
           * ```
           * EnumValuesDefinition : { EnumValueDefinition+ }
           * ```
           */

          parseEnumValuesDefinition() {
            return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind.TokenKind.BRACE_R);
          }
          /**
           * EnumValueDefinition : Description? EnumValue Directives[Const]?
           */

          parseEnumValueDefinition() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            const name = this.parseEnumValueName();
            const directives = this.parseConstDirectives();
            return this.node(start, {
              kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
              description,
              name,
              directives
            });
          }
          /**
           * EnumValue : Name but not `true`, `false` or `null`
           */

          parseEnumValueName() {
            if (this._lexer.token.value === 'true' || this._lexer.token.value === 'false' || this._lexer.token.value === 'null') {
              throw (0, _syntaxError.syntaxError)(this._lexer.source, this._lexer.token.start, `${getTokenDesc(this._lexer.token)} is reserved and cannot be used for an enum value.`);
            }
            return this.parseName();
          }
          /**
           * InputObjectTypeDefinition :
           *   - Description? input Name Directives[Const]? InputFieldsDefinition?
           */

          parseInputObjectTypeDefinition() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            this.expectKeyword('input');
            const name = this.parseName();
            const directives = this.parseConstDirectives();
            const fields = this.parseInputFieldsDefinition();
            return this.node(start, {
              kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
              description,
              name,
              directives,
              fields
            });
          }
          /**
           * ```
           * InputFieldsDefinition : { InputValueDefinition+ }
           * ```
           */

          parseInputFieldsDefinition() {
            return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind.TokenKind.BRACE_R);
          }
          /**
           * TypeSystemExtension :
           *   - SchemaExtension
           *   - TypeExtension
           *
           * TypeExtension :
           *   - ScalarTypeExtension
           *   - ObjectTypeExtension
           *   - InterfaceTypeExtension
           *   - UnionTypeExtension
           *   - EnumTypeExtension
           *   - InputObjectTypeDefinition
           */

          parseTypeSystemExtension() {
            const keywordToken = this._lexer.lookahead();
            if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
              switch (keywordToken.value) {
                case 'schema':
                  return this.parseSchemaExtension();
                case 'scalar':
                  return this.parseScalarTypeExtension();
                case 'type':
                  return this.parseObjectTypeExtension();
                case 'interface':
                  return this.parseInterfaceTypeExtension();
                case 'union':
                  return this.parseUnionTypeExtension();
                case 'enum':
                  return this.parseEnumTypeExtension();
                case 'input':
                  return this.parseInputObjectTypeExtension();
              }
            }
            throw this.unexpected(keywordToken);
          }
          /**
           * ```
           * SchemaExtension :
           *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
           *  - extend schema Directives[Const]
           * ```
           */

          parseSchemaExtension() {
            const start = this._lexer.token;
            this.expectKeyword('extend');
            this.expectKeyword('schema');
            const directives = this.parseConstDirectives();
            const operationTypes = this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
            if (directives.length === 0 && operationTypes.length === 0) {
              throw this.unexpected();
            }
            return this.node(start, {
              kind: _kinds.Kind.SCHEMA_EXTENSION,
              directives,
              operationTypes
            });
          }
          /**
           * ScalarTypeExtension :
           *   - extend scalar Name Directives[Const]
           */

          parseScalarTypeExtension() {
            const start = this._lexer.token;
            this.expectKeyword('extend');
            this.expectKeyword('scalar');
            const name = this.parseName();
            const directives = this.parseConstDirectives();
            if (directives.length === 0) {
              throw this.unexpected();
            }
            return this.node(start, {
              kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
              name,
              directives
            });
          }
          /**
           * ObjectTypeExtension :
           *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
           *  - extend type Name ImplementsInterfaces? Directives[Const]
           *  - extend type Name ImplementsInterfaces
           */

          parseObjectTypeExtension() {
            const start = this._lexer.token;
            this.expectKeyword('extend');
            this.expectKeyword('type');
            const name = this.parseName();
            const interfaces = this.parseImplementsInterfaces();
            const directives = this.parseConstDirectives();
            const fields = this.parseFieldsDefinition();
            if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
              throw this.unexpected();
            }
            return this.node(start, {
              kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
              name,
              interfaces,
              directives,
              fields
            });
          }
          /**
           * InterfaceTypeExtension :
           *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
           *  - extend interface Name ImplementsInterfaces? Directives[Const]
           *  - extend interface Name ImplementsInterfaces
           */

          parseInterfaceTypeExtension() {
            const start = this._lexer.token;
            this.expectKeyword('extend');
            this.expectKeyword('interface');
            const name = this.parseName();
            const interfaces = this.parseImplementsInterfaces();
            const directives = this.parseConstDirectives();
            const fields = this.parseFieldsDefinition();
            if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
              throw this.unexpected();
            }
            return this.node(start, {
              kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
              name,
              interfaces,
              directives,
              fields
            });
          }
          /**
           * UnionTypeExtension :
           *   - extend union Name Directives[Const]? UnionMemberTypes
           *   - extend union Name Directives[Const]
           */

          parseUnionTypeExtension() {
            const start = this._lexer.token;
            this.expectKeyword('extend');
            this.expectKeyword('union');
            const name = this.parseName();
            const directives = this.parseConstDirectives();
            const types = this.parseUnionMemberTypes();
            if (directives.length === 0 && types.length === 0) {
              throw this.unexpected();
            }
            return this.node(start, {
              kind: _kinds.Kind.UNION_TYPE_EXTENSION,
              name,
              directives,
              types
            });
          }
          /**
           * EnumTypeExtension :
           *   - extend enum Name Directives[Const]? EnumValuesDefinition
           *   - extend enum Name Directives[Const]
           */

          parseEnumTypeExtension() {
            const start = this._lexer.token;
            this.expectKeyword('extend');
            this.expectKeyword('enum');
            const name = this.parseName();
            const directives = this.parseConstDirectives();
            const values = this.parseEnumValuesDefinition();
            if (directives.length === 0 && values.length === 0) {
              throw this.unexpected();
            }
            return this.node(start, {
              kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
              name,
              directives,
              values
            });
          }
          /**
           * InputObjectTypeExtension :
           *   - extend input Name Directives[Const]? InputFieldsDefinition
           *   - extend input Name Directives[Const]
           */

          parseInputObjectTypeExtension() {
            const start = this._lexer.token;
            this.expectKeyword('extend');
            this.expectKeyword('input');
            const name = this.parseName();
            const directives = this.parseConstDirectives();
            const fields = this.parseInputFieldsDefinition();
            if (directives.length === 0 && fields.length === 0) {
              throw this.unexpected();
            }
            return this.node(start, {
              kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
              name,
              directives,
              fields
            });
          }
          /**
           * ```
           * DirectiveDefinition :
           *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
           * ```
           */

          parseDirectiveDefinition() {
            const start = this._lexer.token;
            const description = this.parseDescription();
            this.expectKeyword('directive');
            this.expectToken(_tokenKind.TokenKind.AT);
            const name = this.parseName();
            const args = this.parseArgumentDefs();
            const repeatable = this.expectOptionalKeyword('repeatable');
            this.expectKeyword('on');
            const locations = this.parseDirectiveLocations();
            return this.node(start, {
              kind: _kinds.Kind.DIRECTIVE_DEFINITION,
              description,
              name,
              arguments: args,
              repeatable,
              locations
            });
          }
          /**
           * DirectiveLocations :
           *   - `|`? DirectiveLocation
           *   - DirectiveLocations | DirectiveLocation
           */

          parseDirectiveLocations() {
            return this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseDirectiveLocation);
          }
          /*
           * DirectiveLocation :
           *   - ExecutableDirectiveLocation
           *   - TypeSystemDirectiveLocation
           *
           * ExecutableDirectiveLocation : one of
           *   `QUERY`
           *   `MUTATION`
           *   `SUBSCRIPTION`
           *   `FIELD`
           *   `FRAGMENT_DEFINITION`
           *   `FRAGMENT_SPREAD`
           *   `INLINE_FRAGMENT`
           *
           * TypeSystemDirectiveLocation : one of
           *   `SCHEMA`
           *   `SCALAR`
           *   `OBJECT`
           *   `FIELD_DEFINITION`
           *   `ARGUMENT_DEFINITION`
           *   `INTERFACE`
           *   `UNION`
           *   `ENUM`
           *   `ENUM_VALUE`
           *   `INPUT_OBJECT`
           *   `INPUT_FIELD_DEFINITION`
           */

          parseDirectiveLocation() {
            const start = this._lexer.token;
            const name = this.parseName();
            if (Object.prototype.hasOwnProperty.call(_directiveLocation.DirectiveLocation, name.value)) {
              return name;
            }
            throw this.unexpected(start);
          } // Core parsing utility functions

          /**
           * Returns a node that, if configured to do so, sets a "loc" field as a
           * location object, used to identify the place in the source that created a
           * given parsed object.
           */

          node(startToken, node) {
            if (this._options.noLocation !== true) {
              node.loc = new _ast.Location(startToken, this._lexer.lastToken, this._lexer.source);
            }
            return node;
          }
          /**
           * Determines if the next token is of a given kind
           */

          peek(kind) {
            return this._lexer.token.kind === kind;
          }
          /**
           * If the next token is of the given kind, return that token after advancing the lexer.
           * Otherwise, do not change the parser state and throw an error.
           */

          expectToken(kind) {
            const token = this._lexer.token;
            if (token.kind === kind) {
              this.advanceLexer();
              return token;
            }
            throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`);
          }
          /**
           * If the next token is of the given kind, return "true" after advancing the lexer.
           * Otherwise, do not change the parser state and return "false".
           */

          expectOptionalToken(kind) {
            const token = this._lexer.token;
            if (token.kind === kind) {
              this.advanceLexer();
              return true;
            }
            return false;
          }
          /**
           * If the next token is a given keyword, advance the lexer.
           * Otherwise, do not change the parser state and throw an error.
           */

          expectKeyword(value) {
            const token = this._lexer.token;
            if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
              this.advanceLexer();
            } else {
              throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Expected "${value}", found ${getTokenDesc(token)}.`);
            }
          }
          /**
           * If the next token is a given keyword, return "true" after advancing the lexer.
           * Otherwise, do not change the parser state and return "false".
           */

          expectOptionalKeyword(value) {
            const token = this._lexer.token;
            if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
              this.advanceLexer();
              return true;
            }
            return false;
          }
          /**
           * Helper function for creating an error when an unexpected lexed token is encountered.
           */

          unexpected(atToken) {
            const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
            return (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Unexpected ${getTokenDesc(token)}.`);
          }
          /**
           * Returns a possibly empty list of parse nodes, determined by the parseFn.
           * This list begins with a lex token of openKind and ends with a lex token of closeKind.
           * Advances the parser to the next lex token after the closing token.
           */

          any(openKind, parseFn, closeKind) {
            this.expectToken(openKind);
            const nodes = [];
            while (!this.expectOptionalToken(closeKind)) {
              nodes.push(parseFn.call(this));
            }
            return nodes;
          }
          /**
           * Returns a list of parse nodes, determined by the parseFn.
           * It can be empty only if open token is missing otherwise it will always return non-empty list
           * that begins with a lex token of openKind and ends with a lex token of closeKind.
           * Advances the parser to the next lex token after the closing token.
           */

          optionalMany(openKind, parseFn, closeKind) {
            if (this.expectOptionalToken(openKind)) {
              const nodes = [];
              do {
                nodes.push(parseFn.call(this));
              } while (!this.expectOptionalToken(closeKind));
              return nodes;
            }
            return [];
          }
          /**
           * Returns a non-empty list of parse nodes, determined by the parseFn.
           * This list begins with a lex token of openKind and ends with a lex token of closeKind.
           * Advances the parser to the next lex token after the closing token.
           */

          many(openKind, parseFn, closeKind) {
            this.expectToken(openKind);
            const nodes = [];
            do {
              nodes.push(parseFn.call(this));
            } while (!this.expectOptionalToken(closeKind));
            return nodes;
          }
          /**
           * Returns a non-empty list of parse nodes, determined by the parseFn.
           * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
           * Advances the parser to the next lex token after last item in the list.
           */

          delimitedMany(delimiterKind, parseFn) {
            this.expectOptionalToken(delimiterKind);
            const nodes = [];
            do {
              nodes.push(parseFn.call(this));
            } while (this.expectOptionalToken(delimiterKind));
            return nodes;
          }
          advanceLexer() {
            const {
              maxTokens
            } = this._options;
            const token = this._lexer.advance();
            if (maxTokens !== undefined && token.kind !== _tokenKind.TokenKind.EOF) {
              ++this._tokenCounter;
              if (this._tokenCounter > maxTokens) {
                throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Document contains more that ${maxTokens} tokens. Parsing aborted.`);
              }
            }
          }
        }
        /**
         * A helper function to describe a token as a string for debugging.
         */
        exports.Parser = Parser;
        function getTokenDesc(token) {
          const value = token.value;
          return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : '');
        }
        /**
         * A helper function to describe a token kind as a string for debugging.
         */

        function getTokenKindDesc(kind) {
          return (0, _lexer.isPunctuatorTokenKind)(kind) ? `"${kind}"` : kind;
        }
      }, {
        "../error/syntaxError.mjs": 139,
        "./ast.mjs": 171,
        "./directiveLocation.mjs": 174,
        "./kinds.mjs": 176,
        "./lexer.mjs": 177,
        "./source.mjs": 184,
        "./tokenKind.mjs": 185
      }],
      180: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isConstValueNode = isConstValueNode;
        exports.isDefinitionNode = isDefinitionNode;
        exports.isExecutableDefinitionNode = isExecutableDefinitionNode;
        exports.isSelectionNode = isSelectionNode;
        exports.isTypeDefinitionNode = isTypeDefinitionNode;
        exports.isTypeExtensionNode = isTypeExtensionNode;
        exports.isTypeNode = isTypeNode;
        exports.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;
        exports.isTypeSystemExtensionNode = isTypeSystemExtensionNode;
        exports.isValueNode = isValueNode;
        var _kinds = require("./kinds.mjs");
        function isDefinitionNode(node) {
          return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
        }
        function isExecutableDefinitionNode(node) {
          return node.kind === _kinds.Kind.OPERATION_DEFINITION || node.kind === _kinds.Kind.FRAGMENT_DEFINITION;
        }
        function isSelectionNode(node) {
          return node.kind === _kinds.Kind.FIELD || node.kind === _kinds.Kind.FRAGMENT_SPREAD || node.kind === _kinds.Kind.INLINE_FRAGMENT;
        }
        function isValueNode(node) {
          return node.kind === _kinds.Kind.VARIABLE || node.kind === _kinds.Kind.INT || node.kind === _kinds.Kind.FLOAT || node.kind === _kinds.Kind.STRING || node.kind === _kinds.Kind.BOOLEAN || node.kind === _kinds.Kind.NULL || node.kind === _kinds.Kind.ENUM || node.kind === _kinds.Kind.LIST || node.kind === _kinds.Kind.OBJECT;
        }
        function isConstValueNode(node) {
          return isValueNode(node) && (node.kind === _kinds.Kind.LIST ? node.values.some(isConstValueNode) : node.kind === _kinds.Kind.OBJECT ? node.fields.some(field => isConstValueNode(field.value)) : node.kind !== _kinds.Kind.VARIABLE);
        }
        function isTypeNode(node) {
          return node.kind === _kinds.Kind.NAMED_TYPE || node.kind === _kinds.Kind.LIST_TYPE || node.kind === _kinds.Kind.NON_NULL_TYPE;
        }
        function isTypeSystemDefinitionNode(node) {
          return node.kind === _kinds.Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === _kinds.Kind.DIRECTIVE_DEFINITION;
        }
        function isTypeDefinitionNode(node) {
          return node.kind === _kinds.Kind.SCALAR_TYPE_DEFINITION || node.kind === _kinds.Kind.OBJECT_TYPE_DEFINITION || node.kind === _kinds.Kind.INTERFACE_TYPE_DEFINITION || node.kind === _kinds.Kind.UNION_TYPE_DEFINITION || node.kind === _kinds.Kind.ENUM_TYPE_DEFINITION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION;
        }
        function isTypeSystemExtensionNode(node) {
          return node.kind === _kinds.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
        }
        function isTypeExtensionNode(node) {
          return node.kind === _kinds.Kind.SCALAR_TYPE_EXTENSION || node.kind === _kinds.Kind.OBJECT_TYPE_EXTENSION || node.kind === _kinds.Kind.INTERFACE_TYPE_EXTENSION || node.kind === _kinds.Kind.UNION_TYPE_EXTENSION || node.kind === _kinds.Kind.ENUM_TYPE_EXTENSION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
        }
      }, {
        "./kinds.mjs": 176
      }],
      181: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.printLocation = printLocation;
        exports.printSourceLocation = printSourceLocation;
        var _location = require("./location.mjs");
        /**
         * Render a helpful description of the location in the GraphQL Source document.
         */
        function printLocation(location) {
          return printSourceLocation(location.source, (0, _location.getLocation)(location.source, location.start));
        }
        /**
         * Render a helpful description of the location in the GraphQL Source document.
         */

        function printSourceLocation(source, sourceLocation) {
          const firstLineColumnOffset = source.locationOffset.column - 1;
          const body = ''.padStart(firstLineColumnOffset) + source.body;
          const lineIndex = sourceLocation.line - 1;
          const lineOffset = source.locationOffset.line - 1;
          const lineNum = sourceLocation.line + lineOffset;
          const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
          const columnNum = sourceLocation.column + columnOffset;
          const locationStr = `${source.name}:${lineNum}:${columnNum}\n`;
          const lines = body.split(/\r\n|[\n\r]/g);
          const locationLine = lines[lineIndex]; // Special case for minified documents

          if (locationLine.length > 120) {
            const subLineIndex = Math.floor(columnNum / 80);
            const subLineColumnNum = columnNum % 80;
            const subLines = [];
            for (let i = 0; i < locationLine.length; i += 80) {
              subLines.push(locationLine.slice(i, i + 80));
            }
            return locationStr + printPrefixedLines([[`${lineNum} |`, subLines[0]], ...subLines.slice(1, subLineIndex + 1).map(subLine => ['|', subLine]), ['|', '^'.padStart(subLineColumnNum)], ['|', subLines[subLineIndex + 1]]]);
          }
          return locationStr + printPrefixedLines([
          // Lines specified like this: ["prefix", "string"],
          [`${lineNum - 1} |`, lines[lineIndex - 1]], [`${lineNum} |`, locationLine], ['|', '^'.padStart(columnNum)], [`${lineNum + 1} |`, lines[lineIndex + 1]]]);
        }
        function printPrefixedLines(lines) {
          const existingLines = lines.filter(([_, line]) => line !== undefined);
          const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
          return existingLines.map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : '')).join('\n');
        }
      }, {
        "./location.mjs": 178
      }],
      182: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.printString = printString;
        /**
         * Prints a string as a GraphQL StringValue literal. Replaces control characters
         * and excluded characters (" U+0022 and \\ U+005C) with escape sequences.
         */
        function printString(str) {
          return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
        } // eslint-disable-next-line no-control-regex

        const escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
        function escapedReplacer(str) {
          return escapeSequences[str.charCodeAt(0)];
        } // prettier-ignore

        const escapeSequences = ['\\u0000', '\\u0001', '\\u0002', '\\u0003', '\\u0004', '\\u0005', '\\u0006', '\\u0007', '\\b', '\\t', '\\n', '\\u000B', '\\f', '\\r', '\\u000E', '\\u000F', '\\u0010', '\\u0011', '\\u0012', '\\u0013', '\\u0014', '\\u0015', '\\u0016', '\\u0017', '\\u0018', '\\u0019', '\\u001A', '\\u001B', '\\u001C', '\\u001D', '\\u001E', '\\u001F', '', '', '\\"', '', '', '', '', '', '', '', '', '', '', '', '', '',
        // 2F
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        // 3F
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        // 4F
        '', '', '', '', '', '', '', '', '', '', '', '', '\\\\', '', '', '',
        // 5F
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        // 6F
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '\\u007F', '\\u0080', '\\u0081', '\\u0082', '\\u0083', '\\u0084', '\\u0085', '\\u0086', '\\u0087', '\\u0088', '\\u0089', '\\u008A', '\\u008B', '\\u008C', '\\u008D', '\\u008E', '\\u008F', '\\u0090', '\\u0091', '\\u0092', '\\u0093', '\\u0094', '\\u0095', '\\u0096', '\\u0097', '\\u0098', '\\u0099', '\\u009A', '\\u009B', '\\u009C', '\\u009D', '\\u009E', '\\u009F'];
      }, {}],
      183: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.print = print;
        var _blockString = require("./blockString.mjs");
        var _printString = require("./printString.mjs");
        var _visitor = require("./visitor.mjs");
        /**
         * Converts an AST into a string, using one set of reasonable
         * formatting rules.
         */

        function print(ast) {
          return (0, _visitor.visit)(ast, printDocASTReducer);
        }
        const MAX_LINE_LENGTH = 80;
        const printDocASTReducer = {
          Name: {
            leave: node => node.value
          },
          Variable: {
            leave: node => '$' + node.name
          },
          // Document
          Document: {
            leave: node => join(node.definitions, '\n\n')
          },
          OperationDefinition: {
            leave(node) {
              const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
              const prefix = join([node.operation, join([node.name, varDefs]), join(node.directives, ' ')], ' '); // Anonymous queries with no directives or variable definitions can use
              // the query short form.

              return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;
            }
          },
          VariableDefinition: {
            leave: ({
              variable,
              type,
              defaultValue,
              directives
            }) => variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '))
          },
          SelectionSet: {
            leave: ({
              selections
            }) => block(selections)
          },
          Field: {
            leave({
              alias,
              name,
              arguments: args,
              directives,
              selectionSet
            }) {
              const prefix = wrap('', alias, ': ') + name;
              let argsLine = prefix + wrap('(', join(args, ', '), ')');
              if (argsLine.length > MAX_LINE_LENGTH) {
                argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
              }
              return join([argsLine, join(directives, ' '), selectionSet], ' ');
            }
          },
          Argument: {
            leave: ({
              name,
              value
            }) => name + ': ' + value
          },
          // Fragments
          FragmentSpread: {
            leave: ({
              name,
              directives
            }) => '...' + name + wrap(' ', join(directives, ' '))
          },
          InlineFragment: {
            leave: ({
              typeCondition,
              directives,
              selectionSet
            }) => join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ')
          },
          FragmentDefinition: {
            leave: ({
              name,
              typeCondition,
              variableDefinitions,
              directives,
              selectionSet
            } // Note: fragment variable definitions are experimental and may be changed
            ) =>
            // or removed in the future.
            `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` + `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` + selectionSet
          },
          // Value
          IntValue: {
            leave: ({
              value
            }) => value
          },
          FloatValue: {
            leave: ({
              value
            }) => value
          },
          StringValue: {
            leave: ({
              value,
              block: isBlockString
            }) => isBlockString ? (0, _blockString.printBlockString)(value) : (0, _printString.printString)(value)
          },
          BooleanValue: {
            leave: ({
              value
            }) => value ? 'true' : 'false'
          },
          NullValue: {
            leave: () => 'null'
          },
          EnumValue: {
            leave: ({
              value
            }) => value
          },
          ListValue: {
            leave: ({
              values
            }) => '[' + join(values, ', ') + ']'
          },
          ObjectValue: {
            leave: ({
              fields
            }) => '{' + join(fields, ', ') + '}'
          },
          ObjectField: {
            leave: ({
              name,
              value
            }) => name + ': ' + value
          },
          // Directive
          Directive: {
            leave: ({
              name,
              arguments: args
            }) => '@' + name + wrap('(', join(args, ', '), ')')
          },
          // Type
          NamedType: {
            leave: ({
              name
            }) => name
          },
          ListType: {
            leave: ({
              type
            }) => '[' + type + ']'
          },
          NonNullType: {
            leave: ({
              type
            }) => type + '!'
          },
          // Type System Definitions
          SchemaDefinition: {
            leave: ({
              description,
              directives,
              operationTypes
            }) => wrap('', description, '\n') + join(['schema', join(directives, ' '), block(operationTypes)], ' ')
          },
          OperationTypeDefinition: {
            leave: ({
              operation,
              type
            }) => operation + ': ' + type
          },
          ScalarTypeDefinition: {
            leave: ({
              description,
              name,
              directives
            }) => wrap('', description, '\n') + join(['scalar', name, join(directives, ' ')], ' ')
          },
          ObjectTypeDefinition: {
            leave: ({
              description,
              name,
              interfaces,
              directives,
              fields
            }) => wrap('', description, '\n') + join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ')
          },
          FieldDefinition: {
            leave: ({
              description,
              name,
              arguments: args,
              type,
              directives
            }) => wrap('', description, '\n') + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '))
          },
          InputValueDefinition: {
            leave: ({
              description,
              name,
              type,
              defaultValue,
              directives
            }) => wrap('', description, '\n') + join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ')
          },
          InterfaceTypeDefinition: {
            leave: ({
              description,
              name,
              interfaces,
              directives,
              fields
            }) => wrap('', description, '\n') + join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ')
          },
          UnionTypeDefinition: {
            leave: ({
              description,
              name,
              directives,
              types
            }) => wrap('', description, '\n') + join(['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' ')
          },
          EnumTypeDefinition: {
            leave: ({
              description,
              name,
              directives,
              values
            }) => wrap('', description, '\n') + join(['enum', name, join(directives, ' '), block(values)], ' ')
          },
          EnumValueDefinition: {
            leave: ({
              description,
              name,
              directives
            }) => wrap('', description, '\n') + join([name, join(directives, ' ')], ' ')
          },
          InputObjectTypeDefinition: {
            leave: ({
              description,
              name,
              directives,
              fields
            }) => wrap('', description, '\n') + join(['input', name, join(directives, ' '), block(fields)], ' ')
          },
          DirectiveDefinition: {
            leave: ({
              description,
              name,
              arguments: args,
              repeatable,
              locations
            }) => wrap('', description, '\n') + 'directive @' + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ')
          },
          SchemaExtension: {
            leave: ({
              directives,
              operationTypes
            }) => join(['extend schema', join(directives, ' '), block(operationTypes)], ' ')
          },
          ScalarTypeExtension: {
            leave: ({
              name,
              directives
            }) => join(['extend scalar', name, join(directives, ' ')], ' ')
          },
          ObjectTypeExtension: {
            leave: ({
              name,
              interfaces,
              directives,
              fields
            }) => join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ')
          },
          InterfaceTypeExtension: {
            leave: ({
              name,
              interfaces,
              directives,
              fields
            }) => join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ')
          },
          UnionTypeExtension: {
            leave: ({
              name,
              directives,
              types
            }) => join(['extend union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' ')
          },
          EnumTypeExtension: {
            leave: ({
              name,
              directives,
              values
            }) => join(['extend enum', name, join(directives, ' '), block(values)], ' ')
          },
          InputObjectTypeExtension: {
            leave: ({
              name,
              directives,
              fields
            }) => join(['extend input', name, join(directives, ' '), block(fields)], ' ')
          }
        };
        /**
         * Given maybeArray, print an empty string if it is null or empty, otherwise
         * print all items together separated by separator if provided
         */

        function join(maybeArray, separator = '') {
          var _maybeArray$filter$jo;
          return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(x => x).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
        }
        /**
         * Given array, print each item on its own line, wrapped in an indented `{ }` block.
         */

        function block(array) {
          return wrap('{\n', indent(join(array, '\n')), '\n}');
        }
        /**
         * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
         */

        function wrap(start, maybeString, end = '') {
          return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
        }
        function indent(str) {
          return wrap('  ', str.replace(/\n/g, '\n  '));
        }
        function hasMultilineItems(maybeArray) {
          var _maybeArray$some;

          // FIXME: https://github.com/graphql/graphql-js/issues/2203

          /* c8 ignore next */
          return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some(str => str.includes('\n'))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
        }
      }, {
        "./blockString.mjs": 172,
        "./printString.mjs": 182,
        "./visitor.mjs": 186
      }],
      184: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Source = void 0;
        exports.isSource = isSource;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _inspect = require("../jsutils/inspect.mjs");
        var _instanceOf = require("../jsutils/instanceOf.mjs");
        /**
         * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are
         * optional, but they are useful for clients who store GraphQL documents in source files.
         * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might
         * be useful for `name` to be `"Foo.graphql"` and location to be `{ line: 40, column: 1 }`.
         * The `line` and `column` properties in `locationOffset` are 1-indexed.
         */
        class Source {
          constructor(body, name = 'GraphQL request', locationOffset = {
            line: 1,
            column: 1
          }) {
            typeof body === 'string' || (0, _devAssert.devAssert)(false, `Body must be a string. Received: ${(0, _inspect.inspect)(body)}.`);
            this.body = body;
            this.name = name;
            this.locationOffset = locationOffset;
            this.locationOffset.line > 0 || (0, _devAssert.devAssert)(false, 'line in locationOffset is 1-indexed and must be positive.');
            this.locationOffset.column > 0 || (0, _devAssert.devAssert)(false, 'column in locationOffset is 1-indexed and must be positive.');
          }
          get [Symbol.toStringTag]() {
            return 'Source';
          }
        }
        /**
         * Test if the given value is a Source object.
         *
         * @internal
         */
        exports.Source = Source;
        function isSource(source) {
          return (0, _instanceOf.instanceOf)(source, Source);
        }
      }, {
        "../jsutils/devAssert.mjs": 149,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/instanceOf.mjs": 154
      }],
      185: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TokenKind = void 0;
        /**
         * An exported enum describing the different kinds of tokens that the
         * lexer emits.
         */
        var TokenKind;
        (function (TokenKind) {
          TokenKind['SOF'] = '<SOF>';
          TokenKind['EOF'] = '<EOF>';
          TokenKind['BANG'] = '!';
          TokenKind['DOLLAR'] = '$';
          TokenKind['AMP'] = '&';
          TokenKind['PAREN_L'] = '(';
          TokenKind['PAREN_R'] = ')';
          TokenKind['SPREAD'] = '...';
          TokenKind['COLON'] = ':';
          TokenKind['EQUALS'] = '=';
          TokenKind['AT'] = '@';
          TokenKind['BRACKET_L'] = '[';
          TokenKind['BRACKET_R'] = ']';
          TokenKind['BRACE_L'] = '{';
          TokenKind['PIPE'] = '|';
          TokenKind['BRACE_R'] = '}';
          TokenKind['NAME'] = 'Name';
          TokenKind['INT'] = 'Int';
          TokenKind['FLOAT'] = 'Float';
          TokenKind['STRING'] = 'String';
          TokenKind['BLOCK_STRING'] = 'BlockString';
          TokenKind['COMMENT'] = 'Comment';
        })(TokenKind || (exports.TokenKind = TokenKind = {}));

        /**
         * The enum type representing the token kinds values.
         *
         * @deprecated Please use `TokenKind`. Will be remove in v17.
         */
      }, {}],
      186: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BREAK = void 0;
        exports.getEnterLeaveForKind = getEnterLeaveForKind;
        exports.getVisitFn = getVisitFn;
        exports.visit = visit;
        exports.visitInParallel = visitInParallel;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _inspect = require("../jsutils/inspect.mjs");
        var _ast = require("./ast.mjs");
        var _kinds = require("./kinds.mjs");
        /**
         * A visitor is provided to visit, it contains the collection of
         * relevant functions to be called during the visitor's traversal.
         */

        const BREAK = exports.BREAK = Object.freeze({});
        /**
         * visit() will walk through an AST using a depth-first traversal, calling
         * the visitor's enter function at each node in the traversal, and calling the
         * leave function after visiting that node and all of its child nodes.
         *
         * By returning different values from the enter and leave functions, the
         * behavior of the visitor can be altered, including skipping over a sub-tree of
         * the AST (by returning false), editing the AST by returning a value or null
         * to remove the value, or to stop the whole traversal by returning BREAK.
         *
         * When using visit() to edit an AST, the original AST will not be modified, and
         * a new version of the AST with the changes applied will be returned from the
         * visit function.
         *
         * ```ts
         * const editedAST = visit(ast, {
         *   enter(node, key, parent, path, ancestors) {
         *     // @return
         *     //   undefined: no action
         *     //   false: skip visiting this node
         *     //   visitor.BREAK: stop visiting altogether
         *     //   null: delete this node
         *     //   any value: replace this node with the returned value
         *   },
         *   leave(node, key, parent, path, ancestors) {
         *     // @return
         *     //   undefined: no action
         *     //   false: no action
         *     //   visitor.BREAK: stop visiting altogether
         *     //   null: delete this node
         *     //   any value: replace this node with the returned value
         *   }
         * });
         * ```
         *
         * Alternatively to providing enter() and leave() functions, a visitor can
         * instead provide functions named the same as the kinds of AST nodes, or
         * enter/leave visitors at a named key, leading to three permutations of the
         * visitor API:
         *
         * 1) Named visitors triggered when entering a node of a specific kind.
         *
         * ```ts
         * visit(ast, {
         *   Kind(node) {
         *     // enter the "Kind" node
         *   }
         * })
         * ```
         *
         * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.
         *
         * ```ts
         * visit(ast, {
         *   Kind: {
         *     enter(node) {
         *       // enter the "Kind" node
         *     }
         *     leave(node) {
         *       // leave the "Kind" node
         *     }
         *   }
         * })
         * ```
         *
         * 3) Generic visitors that trigger upon entering and leaving any node.
         *
         * ```ts
         * visit(ast, {
         *   enter(node) {
         *     // enter any node
         *   },
         *   leave(node) {
         *     // leave any node
         *   }
         * })
         * ```
         */

        function visit(root, visitor, visitorKeys = _ast.QueryDocumentKeys) {
          const enterLeaveMap = new Map();
          for (const kind of Object.values(_kinds.Kind)) {
            enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
          }
          /* eslint-disable no-undef-init */

          let stack = undefined;
          let inArray = Array.isArray(root);
          let keys = [root];
          let index = -1;
          let edits = [];
          let node = root;
          let key = undefined;
          let parent = undefined;
          const path = [];
          const ancestors = [];
          /* eslint-enable no-undef-init */

          do {
            index++;
            const isLeaving = index === keys.length;
            const isEdited = isLeaving && edits.length !== 0;
            if (isLeaving) {
              key = ancestors.length === 0 ? undefined : path[path.length - 1];
              node = parent;
              parent = ancestors.pop();
              if (isEdited) {
                if (inArray) {
                  node = node.slice();
                  let editOffset = 0;
                  for (const [editKey, editValue] of edits) {
                    const arrayKey = editKey - editOffset;
                    if (editValue === null) {
                      node.splice(arrayKey, 1);
                      editOffset++;
                    } else {
                      node[arrayKey] = editValue;
                    }
                  }
                } else {
                  node = Object.defineProperties({}, Object.getOwnPropertyDescriptors(node));
                  for (const [editKey, editValue] of edits) {
                    node[editKey] = editValue;
                  }
                }
              }
              index = stack.index;
              keys = stack.keys;
              edits = stack.edits;
              inArray = stack.inArray;
              stack = stack.prev;
            } else if (parent) {
              key = inArray ? index : keys[index];
              node = parent[key];
              if (node === null || node === undefined) {
                continue;
              }
              path.push(key);
            }
            let result;
            if (!Array.isArray(node)) {
              var _enterLeaveMap$get, _enterLeaveMap$get2;
              (0, _ast.isNode)(node) || (0, _devAssert.devAssert)(false, `Invalid AST Node: ${(0, _inspect.inspect)(node)}.`);
              const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
              result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path, ancestors);
              if (result === BREAK) {
                break;
              }
              if (result === false) {
                if (!isLeaving) {
                  path.pop();
                  continue;
                }
              } else if (result !== undefined) {
                edits.push([key, result]);
                if (!isLeaving) {
                  if ((0, _ast.isNode)(result)) {
                    node = result;
                  } else {
                    path.pop();
                    continue;
                  }
                }
              }
            }
            if (result === undefined && isEdited) {
              edits.push([key, node]);
            }
            if (isLeaving) {
              path.pop();
            } else {
              var _node$kind;
              stack = {
                inArray,
                index,
                keys,
                edits,
                prev: stack
              };
              inArray = Array.isArray(node);
              keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
              index = -1;
              edits = [];
              if (parent) {
                ancestors.push(parent);
              }
              parent = node;
            }
          } while (stack !== undefined);
          if (edits.length !== 0) {
            // New root
            return edits[edits.length - 1][1];
          }
          return root;
        }
        /**
         * Creates a new visitor instance which delegates to many visitors to run in
         * parallel. Each visitor will be visited for each node before moving on.
         *
         * If a prior visitor edits a node, no following visitors will see that node.
         */

        function visitInParallel(visitors) {
          const skipping = new Array(visitors.length).fill(null);
          const mergedVisitor = Object.create(null);
          for (const kind of Object.values(_kinds.Kind)) {
            let hasVisitor = false;
            const enterList = new Array(visitors.length).fill(undefined);
            const leaveList = new Array(visitors.length).fill(undefined);
            for (let i = 0; i < visitors.length; ++i) {
              const {
                enter,
                leave
              } = getEnterLeaveForKind(visitors[i], kind);
              hasVisitor || (hasVisitor = enter != null || leave != null);
              enterList[i] = enter;
              leaveList[i] = leave;
            }
            if (!hasVisitor) {
              continue;
            }
            const mergedEnterLeave = {
              enter(...args) {
                const node = args[0];
                for (let i = 0; i < visitors.length; i++) {
                  if (skipping[i] === null) {
                    var _enterList$i;
                    const result = (_enterList$i = enterList[i]) === null || _enterList$i === void 0 ? void 0 : _enterList$i.apply(visitors[i], args);
                    if (result === false) {
                      skipping[i] = node;
                    } else if (result === BREAK) {
                      skipping[i] = BREAK;
                    } else if (result !== undefined) {
                      return result;
                    }
                  }
                }
              },
              leave(...args) {
                const node = args[0];
                for (let i = 0; i < visitors.length; i++) {
                  if (skipping[i] === null) {
                    var _leaveList$i;
                    const result = (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0 ? void 0 : _leaveList$i.apply(visitors[i], args);
                    if (result === BREAK) {
                      skipping[i] = BREAK;
                    } else if (result !== undefined && result !== false) {
                      return result;
                    }
                  } else if (skipping[i] === node) {
                    skipping[i] = null;
                  }
                }
              }
            };
            mergedVisitor[kind] = mergedEnterLeave;
          }
          return mergedVisitor;
        }
        /**
         * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.
         */

        function getEnterLeaveForKind(visitor, kind) {
          const kindVisitor = visitor[kind];
          if (typeof kindVisitor === 'object') {
            // { Kind: { enter() {}, leave() {} } }
            return kindVisitor;
          } else if (typeof kindVisitor === 'function') {
            // { Kind() {} }
            return {
              enter: kindVisitor,
              leave: undefined
            };
          } // { enter() {}, leave() {} }

          return {
            enter: visitor.enter,
            leave: visitor.leave
          };
        }
        /**
         * Given a visitor instance, if it is leaving or not, and a node kind, return
         * the function the visitor runtime should call.
         *
         * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17
         */

        /* c8 ignore next 8 */

        function getVisitFn(visitor, kind, isLeaving) {
          const {
            enter,
            leave
          } = getEnterLeaveForKind(visitor, kind);
          return isLeaving ? leave : enter;
        }
      }, {
        "../jsutils/devAssert.mjs": 149,
        "../jsutils/inspect.mjs": 153,
        "./ast.mjs": 171,
        "./kinds.mjs": 176
      }],
      187: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.assertEnumValueName = assertEnumValueName;
        exports.assertName = assertName;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _GraphQLError = require("../error/GraphQLError.mjs");
        var _characterClasses = require("../language/characterClasses.mjs");
        /**
         * Upholds the spec rules about naming.
         */

        function assertName(name) {
          name != null || (0, _devAssert.devAssert)(false, 'Must provide name.');
          typeof name === 'string' || (0, _devAssert.devAssert)(false, 'Expected name to be a string.');
          if (name.length === 0) {
            throw new _GraphQLError.GraphQLError('Expected name to be a non-empty string.');
          }
          for (let i = 1; i < name.length; ++i) {
            if (!(0, _characterClasses.isNameContinue)(name.charCodeAt(i))) {
              throw new _GraphQLError.GraphQLError(`Names must only contain [_a-zA-Z0-9] but "${name}" does not.`);
            }
          }
          if (!(0, _characterClasses.isNameStart)(name.charCodeAt(0))) {
            throw new _GraphQLError.GraphQLError(`Names must start with [_a-zA-Z] but "${name}" does not.`);
          }
          return name;
        }
        /**
         * Upholds the spec rules about naming enum values.
         *
         * @internal
         */

        function assertEnumValueName(name) {
          if (name === 'true' || name === 'false' || name === 'null') {
            throw new _GraphQLError.GraphQLError(`Enum values cannot be named: ${name}`);
          }
          return assertName(name);
        }
      }, {
        "../error/GraphQLError.mjs": 136,
        "../jsutils/devAssert.mjs": 149,
        "../language/characterClasses.mjs": 173
      }],
      188: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GraphQLUnionType = exports.GraphQLScalarType = exports.GraphQLObjectType = exports.GraphQLNonNull = exports.GraphQLList = exports.GraphQLInterfaceType = exports.GraphQLInputObjectType = exports.GraphQLEnumType = void 0;
        exports.argsToArgsConfig = argsToArgsConfig;
        exports.assertAbstractType = assertAbstractType;
        exports.assertCompositeType = assertCompositeType;
        exports.assertEnumType = assertEnumType;
        exports.assertInputObjectType = assertInputObjectType;
        exports.assertInputType = assertInputType;
        exports.assertInterfaceType = assertInterfaceType;
        exports.assertLeafType = assertLeafType;
        exports.assertListType = assertListType;
        exports.assertNamedType = assertNamedType;
        exports.assertNonNullType = assertNonNullType;
        exports.assertNullableType = assertNullableType;
        exports.assertObjectType = assertObjectType;
        exports.assertOutputType = assertOutputType;
        exports.assertScalarType = assertScalarType;
        exports.assertType = assertType;
        exports.assertUnionType = assertUnionType;
        exports.assertWrappingType = assertWrappingType;
        exports.defineArguments = defineArguments;
        exports.getNamedType = getNamedType;
        exports.getNullableType = getNullableType;
        exports.isAbstractType = isAbstractType;
        exports.isCompositeType = isCompositeType;
        exports.isEnumType = isEnumType;
        exports.isInputObjectType = isInputObjectType;
        exports.isInputType = isInputType;
        exports.isInterfaceType = isInterfaceType;
        exports.isLeafType = isLeafType;
        exports.isListType = isListType;
        exports.isNamedType = isNamedType;
        exports.isNonNullType = isNonNullType;
        exports.isNullableType = isNullableType;
        exports.isObjectType = isObjectType;
        exports.isOutputType = isOutputType;
        exports.isRequiredArgument = isRequiredArgument;
        exports.isRequiredInputField = isRequiredInputField;
        exports.isScalarType = isScalarType;
        exports.isType = isType;
        exports.isUnionType = isUnionType;
        exports.isWrappingType = isWrappingType;
        exports.resolveObjMapThunk = resolveObjMapThunk;
        exports.resolveReadonlyArrayThunk = resolveReadonlyArrayThunk;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _didYouMean = require("../jsutils/didYouMean.mjs");
        var _identityFunc = require("../jsutils/identityFunc.mjs");
        var _inspect = require("../jsutils/inspect.mjs");
        var _instanceOf = require("../jsutils/instanceOf.mjs");
        var _isObjectLike = require("../jsutils/isObjectLike.mjs");
        var _keyMap = require("../jsutils/keyMap.mjs");
        var _keyValMap = require("../jsutils/keyValMap.mjs");
        var _mapValue = require("../jsutils/mapValue.mjs");
        var _suggestionList = require("../jsutils/suggestionList.mjs");
        var _toObjMap = require("../jsutils/toObjMap.mjs");
        var _GraphQLError = require("../error/GraphQLError.mjs");
        var _kinds = require("../language/kinds.mjs");
        var _printer = require("../language/printer.mjs");
        var _valueFromASTUntyped = require("../utilities/valueFromASTUntyped.mjs");
        var _assertName = require("./assertName.mjs");
        function isType(type) {
          return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
        }
        function assertType(type) {
          if (!isType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL type.`);
          }
          return type;
        }
        /**
         * There are predicates for each kind of GraphQL type.
         */

        function isScalarType(type) {
          return (0, _instanceOf.instanceOf)(type, GraphQLScalarType);
        }
        function assertScalarType(type) {
          if (!isScalarType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Scalar type.`);
          }
          return type;
        }
        function isObjectType(type) {
          return (0, _instanceOf.instanceOf)(type, GraphQLObjectType);
        }
        function assertObjectType(type) {
          if (!isObjectType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Object type.`);
          }
          return type;
        }
        function isInterfaceType(type) {
          return (0, _instanceOf.instanceOf)(type, GraphQLInterfaceType);
        }
        function assertInterfaceType(type) {
          if (!isInterfaceType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Interface type.`);
          }
          return type;
        }
        function isUnionType(type) {
          return (0, _instanceOf.instanceOf)(type, GraphQLUnionType);
        }
        function assertUnionType(type) {
          if (!isUnionType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Union type.`);
          }
          return type;
        }
        function isEnumType(type) {
          return (0, _instanceOf.instanceOf)(type, GraphQLEnumType);
        }
        function assertEnumType(type) {
          if (!isEnumType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Enum type.`);
          }
          return type;
        }
        function isInputObjectType(type) {
          return (0, _instanceOf.instanceOf)(type, GraphQLInputObjectType);
        }
        function assertInputObjectType(type) {
          if (!isInputObjectType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Input Object type.`);
          }
          return type;
        }
        function isListType(type) {
          return (0, _instanceOf.instanceOf)(type, GraphQLList);
        }
        function assertListType(type) {
          if (!isListType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL List type.`);
          }
          return type;
        }
        function isNonNullType(type) {
          return (0, _instanceOf.instanceOf)(type, GraphQLNonNull);
        }
        function assertNonNullType(type) {
          if (!isNonNullType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Non-Null type.`);
          }
          return type;
        }
        /**
         * These types may be used as input types for arguments and directives.
         */

        function isInputType(type) {
          return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
        }
        function assertInputType(type) {
          if (!isInputType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL input type.`);
          }
          return type;
        }
        /**
         * These types may be used as output types as the result of fields.
         */

        function isOutputType(type) {
          return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
        }
        function assertOutputType(type) {
          if (!isOutputType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL output type.`);
          }
          return type;
        }
        /**
         * These types may describe types which may be leaf values.
         */

        function isLeafType(type) {
          return isScalarType(type) || isEnumType(type);
        }
        function assertLeafType(type) {
          if (!isLeafType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL leaf type.`);
          }
          return type;
        }
        /**
         * These types may describe the parent context of a selection set.
         */

        function isCompositeType(type) {
          return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
        }
        function assertCompositeType(type) {
          if (!isCompositeType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL composite type.`);
          }
          return type;
        }
        /**
         * These types may describe the parent context of a selection set.
         */

        function isAbstractType(type) {
          return isInterfaceType(type) || isUnionType(type);
        }
        function assertAbstractType(type) {
          if (!isAbstractType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL abstract type.`);
          }
          return type;
        }
        /**
         * List Type Wrapper
         *
         * A list is a wrapping type which points to another type.
         * Lists are often created within the context of defining the fields of
         * an object type.
         *
         * Example:
         *
         * ```ts
         * const PersonType = new GraphQLObjectType({
         *   name: 'Person',
         *   fields: () => ({
         *     parents: { type: new GraphQLList(PersonType) },
         *     children: { type: new GraphQLList(PersonType) },
         *   })
         * })
         * ```
         */

        class GraphQLList {
          constructor(ofType) {
            isType(ofType) || (0, _devAssert.devAssert)(false, `Expected ${(0, _inspect.inspect)(ofType)} to be a GraphQL type.`);
            this.ofType = ofType;
          }
          get [Symbol.toStringTag]() {
            return 'GraphQLList';
          }
          toString() {
            return '[' + String(this.ofType) + ']';
          }
          toJSON() {
            return this.toString();
          }
        }
        /**
         * Non-Null Type Wrapper
         *
         * A non-null is a wrapping type which points to another type.
         * Non-null types enforce that their values are never null and can ensure
         * an error is raised if this ever occurs during a request. It is useful for
         * fields which you can make a strong guarantee on non-nullability, for example
         * usually the id field of a database row will never be null.
         *
         * Example:
         *
         * ```ts
         * const RowType = new GraphQLObjectType({
         *   name: 'Row',
         *   fields: () => ({
         *     id: { type: new GraphQLNonNull(GraphQLString) },
         *   })
         * })
         * ```
         * Note: the enforcement of non-nullability occurs within the executor.
         */
        exports.GraphQLList = GraphQLList;
        class GraphQLNonNull {
          constructor(ofType) {
            isNullableType(ofType) || (0, _devAssert.devAssert)(false, `Expected ${(0, _inspect.inspect)(ofType)} to be a GraphQL nullable type.`);
            this.ofType = ofType;
          }
          get [Symbol.toStringTag]() {
            return 'GraphQLNonNull';
          }
          toString() {
            return String(this.ofType) + '!';
          }
          toJSON() {
            return this.toString();
          }
        }
        /**
         * These types wrap and modify other types
         */
        exports.GraphQLNonNull = GraphQLNonNull;
        function isWrappingType(type) {
          return isListType(type) || isNonNullType(type);
        }
        function assertWrappingType(type) {
          if (!isWrappingType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL wrapping type.`);
          }
          return type;
        }
        /**
         * These types can all accept null as a value.
         */

        function isNullableType(type) {
          return isType(type) && !isNonNullType(type);
        }
        function assertNullableType(type) {
          if (!isNullableType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL nullable type.`);
          }
          return type;
        }
        function getNullableType(type) {
          if (type) {
            return isNonNullType(type) ? type.ofType : type;
          }
        }
        /**
         * These named types do not include modifiers like List or NonNull.
         */

        function isNamedType(type) {
          return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);
        }
        function assertNamedType(type) {
          if (!isNamedType(type)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(type)} to be a GraphQL named type.`);
          }
          return type;
        }
        function getNamedType(type) {
          if (type) {
            let unwrappedType = type;
            while (isWrappingType(unwrappedType)) {
              unwrappedType = unwrappedType.ofType;
            }
            return unwrappedType;
          }
        }
        /**
         * Used while defining GraphQL types to allow for circular references in
         * otherwise immutable type definitions.
         */

        function resolveReadonlyArrayThunk(thunk) {
          return typeof thunk === 'function' ? thunk() : thunk;
        }
        function resolveObjMapThunk(thunk) {
          return typeof thunk === 'function' ? thunk() : thunk;
        }
        /**
         * Custom extensions
         *
         * @remarks
         * Use a unique identifier name for your extension, for example the name of
         * your library or project. Do not use a shortened identifier as this increases
         * the risk of conflicts. We recommend you add at most one extension field,
         * an object which can contain all the values you need.
         */

        /**
         * Scalar Type Definition
         *
         * The leaf values of any request and input values to arguments are
         * Scalars (or Enums) and are defined with a name and a series of functions
         * used to parse input from ast or variables and to ensure validity.
         *
         * If a type's serialize function returns `null` or does not return a value
         * (i.e. it returns `undefined`) then an error will be raised and a `null`
         * value will be returned in the response. It is always better to validate
         *
         * Example:
         *
         * ```ts
         * const OddType = new GraphQLScalarType({
         *   name: 'Odd',
         *   serialize(value) {
         *     if (!Number.isFinite(value)) {
         *       throw new Error(
         *         `Scalar "Odd" cannot represent "${value}" since it is not a finite number.`,
         *       );
         *     }
         *
         *     if (value % 2 === 0) {
         *       throw new Error(`Scalar "Odd" cannot represent "${value}" since it is even.`);
         *     }
         *     return value;
         *   }
         * });
         * ```
         */
        class GraphQLScalarType {
          constructor(config) {
            var _config$parseValue, _config$serialize, _config$parseLiteral, _config$extensionASTN;
            const parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : _identityFunc.identityFunc;
            this.name = (0, _assertName.assertName)(config.name);
            this.description = config.description;
            this.specifiedByURL = config.specifiedByURL;
            this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : _identityFunc.identityFunc;
            this.parseValue = parseValue;
            this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : (node, variables) => parseValue((0, _valueFromASTUntyped.valueFromASTUntyped)(node, variables));
            this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
            this.astNode = config.astNode;
            this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];
            config.specifiedByURL == null || typeof config.specifiedByURL === 'string' || (0, _devAssert.devAssert)(false, `${this.name} must provide "specifiedByURL" as a string, ` + `but got: ${(0, _inspect.inspect)(config.specifiedByURL)}.`);
            config.serialize == null || typeof config.serialize === 'function' || (0, _devAssert.devAssert)(false, `${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`);
            if (config.parseLiteral) {
              typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || (0, _devAssert.devAssert)(false, `${this.name} must provide both "parseValue" and "parseLiteral" functions.`);
            }
          }
          get [Symbol.toStringTag]() {
            return 'GraphQLScalarType';
          }
          toConfig() {
            return {
              name: this.name,
              description: this.description,
              specifiedByURL: this.specifiedByURL,
              serialize: this.serialize,
              parseValue: this.parseValue,
              parseLiteral: this.parseLiteral,
              extensions: this.extensions,
              astNode: this.astNode,
              extensionASTNodes: this.extensionASTNodes
            };
          }
          toString() {
            return this.name;
          }
          toJSON() {
            return this.toString();
          }
        }

        /**
         * Object Type Definition
         *
         * Almost all of the GraphQL types you define will be object types. Object types
         * have a name, but most importantly describe their fields.
         *
         * Example:
         *
         * ```ts
         * const AddressType = new GraphQLObjectType({
         *   name: 'Address',
         *   fields: {
         *     street: { type: GraphQLString },
         *     number: { type: GraphQLInt },
         *     formatted: {
         *       type: GraphQLString,
         *       resolve(obj) {
         *         return obj.number + ' ' + obj.street
         *       }
         *     }
         *   }
         * });
         * ```
         *
         * When two types need to refer to each other, or a type needs to refer to
         * itself in a field, you can use a function expression (aka a closure or a
         * thunk) to supply the fields lazily.
         *
         * Example:
         *
         * ```ts
         * const PersonType = new GraphQLObjectType({
         *   name: 'Person',
         *   fields: () => ({
         *     name: { type: GraphQLString },
         *     bestFriend: { type: PersonType },
         *   })
         * });
         * ```
         */
        exports.GraphQLScalarType = GraphQLScalarType;
        class GraphQLObjectType {
          constructor(config) {
            var _config$extensionASTN2;
            this.name = (0, _assertName.assertName)(config.name);
            this.description = config.description;
            this.isTypeOf = config.isTypeOf;
            this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
            this.astNode = config.astNode;
            this.extensionASTNodes = (_config$extensionASTN2 = config.extensionASTNodes) !== null && _config$extensionASTN2 !== void 0 ? _config$extensionASTN2 : [];
            this._fields = () => defineFieldMap(config);
            this._interfaces = () => defineInterfaces(config);
            config.isTypeOf == null || typeof config.isTypeOf === 'function' || (0, _devAssert.devAssert)(false, `${this.name} must provide "isTypeOf" as a function, ` + `but got: ${(0, _inspect.inspect)(config.isTypeOf)}.`);
          }
          get [Symbol.toStringTag]() {
            return 'GraphQLObjectType';
          }
          getFields() {
            if (typeof this._fields === 'function') {
              this._fields = this._fields();
            }
            return this._fields;
          }
          getInterfaces() {
            if (typeof this._interfaces === 'function') {
              this._interfaces = this._interfaces();
            }
            return this._interfaces;
          }
          toConfig() {
            return {
              name: this.name,
              description: this.description,
              interfaces: this.getInterfaces(),
              fields: fieldsToFieldsConfig(this.getFields()),
              isTypeOf: this.isTypeOf,
              extensions: this.extensions,
              astNode: this.astNode,
              extensionASTNodes: this.extensionASTNodes
            };
          }
          toString() {
            return this.name;
          }
          toJSON() {
            return this.toString();
          }
        }
        exports.GraphQLObjectType = GraphQLObjectType;
        function defineInterfaces(config) {
          var _config$interfaces;
          const interfaces = resolveReadonlyArrayThunk((_config$interfaces = config.interfaces) !== null && _config$interfaces !== void 0 ? _config$interfaces : []);
          Array.isArray(interfaces) || (0, _devAssert.devAssert)(false, `${config.name} interfaces must be an Array or a function which returns an Array.`);
          return interfaces;
        }
        function defineFieldMap(config) {
          const fieldMap = resolveObjMapThunk(config.fields);
          isPlainObj(fieldMap) || (0, _devAssert.devAssert)(false, `${config.name} fields must be an object with field names as keys or a function which returns such an object.`);
          return (0, _mapValue.mapValue)(fieldMap, (fieldConfig, fieldName) => {
            var _fieldConfig$args;
            isPlainObj(fieldConfig) || (0, _devAssert.devAssert)(false, `${config.name}.${fieldName} field config must be an object.`);
            fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || (0, _devAssert.devAssert)(false, `${config.name}.${fieldName} field resolver must be a function if ` + `provided, but got: ${(0, _inspect.inspect)(fieldConfig.resolve)}.`);
            const argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
            isPlainObj(argsConfig) || (0, _devAssert.devAssert)(false, `${config.name}.${fieldName} args must be an object with argument names as keys.`);
            return {
              name: (0, _assertName.assertName)(fieldName),
              description: fieldConfig.description,
              type: fieldConfig.type,
              args: defineArguments(argsConfig),
              resolve: fieldConfig.resolve,
              subscribe: fieldConfig.subscribe,
              deprecationReason: fieldConfig.deprecationReason,
              extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),
              astNode: fieldConfig.astNode
            };
          });
        }
        function defineArguments(config) {
          return Object.entries(config).map(([argName, argConfig]) => ({
            name: (0, _assertName.assertName)(argName),
            description: argConfig.description,
            type: argConfig.type,
            defaultValue: argConfig.defaultValue,
            deprecationReason: argConfig.deprecationReason,
            extensions: (0, _toObjMap.toObjMap)(argConfig.extensions),
            astNode: argConfig.astNode
          }));
        }
        function isPlainObj(obj) {
          return (0, _isObjectLike.isObjectLike)(obj) && !Array.isArray(obj);
        }
        function fieldsToFieldsConfig(fields) {
          return (0, _mapValue.mapValue)(fields, field => ({
            description: field.description,
            type: field.type,
            args: argsToArgsConfig(field.args),
            resolve: field.resolve,
            subscribe: field.subscribe,
            deprecationReason: field.deprecationReason,
            extensions: field.extensions,
            astNode: field.astNode
          }));
        }
        /**
         * @internal
         */

        function argsToArgsConfig(args) {
          return (0, _keyValMap.keyValMap)(args, arg => arg.name, arg => ({
            description: arg.description,
            type: arg.type,
            defaultValue: arg.defaultValue,
            deprecationReason: arg.deprecationReason,
            extensions: arg.extensions,
            astNode: arg.astNode
          }));
        }
        function isRequiredArgument(arg) {
          return isNonNullType(arg.type) && arg.defaultValue === undefined;
        }

        /**
         * Interface Type Definition
         *
         * When a field can return one of a heterogeneous set of types, a Interface type
         * is used to describe what types are possible, what fields are in common across
         * all types, as well as a function to determine which type is actually used
         * when the field is resolved.
         *
         * Example:
         *
         * ```ts
         * const EntityType = new GraphQLInterfaceType({
         *   name: 'Entity',
         *   fields: {
         *     name: { type: GraphQLString }
         *   }
         * });
         * ```
         */
        class GraphQLInterfaceType {
          constructor(config) {
            var _config$extensionASTN3;
            this.name = (0, _assertName.assertName)(config.name);
            this.description = config.description;
            this.resolveType = config.resolveType;
            this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
            this.astNode = config.astNode;
            this.extensionASTNodes = (_config$extensionASTN3 = config.extensionASTNodes) !== null && _config$extensionASTN3 !== void 0 ? _config$extensionASTN3 : [];
            this._fields = defineFieldMap.bind(undefined, config);
            this._interfaces = defineInterfaces.bind(undefined, config);
            config.resolveType == null || typeof config.resolveType === 'function' || (0, _devAssert.devAssert)(false, `${this.name} must provide "resolveType" as a function, ` + `but got: ${(0, _inspect.inspect)(config.resolveType)}.`);
          }
          get [Symbol.toStringTag]() {
            return 'GraphQLInterfaceType';
          }
          getFields() {
            if (typeof this._fields === 'function') {
              this._fields = this._fields();
            }
            return this._fields;
          }
          getInterfaces() {
            if (typeof this._interfaces === 'function') {
              this._interfaces = this._interfaces();
            }
            return this._interfaces;
          }
          toConfig() {
            return {
              name: this.name,
              description: this.description,
              interfaces: this.getInterfaces(),
              fields: fieldsToFieldsConfig(this.getFields()),
              resolveType: this.resolveType,
              extensions: this.extensions,
              astNode: this.astNode,
              extensionASTNodes: this.extensionASTNodes
            };
          }
          toString() {
            return this.name;
          }
          toJSON() {
            return this.toString();
          }
        }

        /**
         * Union Type Definition
         *
         * When a field can return one of a heterogeneous set of types, a Union type
         * is used to describe what types are possible as well as providing a function
         * to determine which type is actually used when the field is resolved.
         *
         * Example:
         *
         * ```ts
         * const PetType = new GraphQLUnionType({
         *   name: 'Pet',
         *   types: [ DogType, CatType ],
         *   resolveType(value) {
         *     if (value instanceof Dog) {
         *       return DogType;
         *     }
         *     if (value instanceof Cat) {
         *       return CatType;
         *     }
         *   }
         * });
         * ```
         */
        exports.GraphQLInterfaceType = GraphQLInterfaceType;
        class GraphQLUnionType {
          constructor(config) {
            var _config$extensionASTN4;
            this.name = (0, _assertName.assertName)(config.name);
            this.description = config.description;
            this.resolveType = config.resolveType;
            this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
            this.astNode = config.astNode;
            this.extensionASTNodes = (_config$extensionASTN4 = config.extensionASTNodes) !== null && _config$extensionASTN4 !== void 0 ? _config$extensionASTN4 : [];
            this._types = defineTypes.bind(undefined, config);
            config.resolveType == null || typeof config.resolveType === 'function' || (0, _devAssert.devAssert)(false, `${this.name} must provide "resolveType" as a function, ` + `but got: ${(0, _inspect.inspect)(config.resolveType)}.`);
          }
          get [Symbol.toStringTag]() {
            return 'GraphQLUnionType';
          }
          getTypes() {
            if (typeof this._types === 'function') {
              this._types = this._types();
            }
            return this._types;
          }
          toConfig() {
            return {
              name: this.name,
              description: this.description,
              types: this.getTypes(),
              resolveType: this.resolveType,
              extensions: this.extensions,
              astNode: this.astNode,
              extensionASTNodes: this.extensionASTNodes
            };
          }
          toString() {
            return this.name;
          }
          toJSON() {
            return this.toString();
          }
        }
        exports.GraphQLUnionType = GraphQLUnionType;
        function defineTypes(config) {
          const types = resolveReadonlyArrayThunk(config.types);
          Array.isArray(types) || (0, _devAssert.devAssert)(false, `Must provide Array of types or a function which returns such an array for Union ${config.name}.`);
          return types;
        }

        /**
         * Enum Type Definition
         *
         * Some leaf values of requests and input values are Enums. GraphQL serializes
         * Enum values as strings, however internally Enums can be represented by any
         * kind of type, often integers.
         *
         * Example:
         *
         * ```ts
         * const RGBType = new GraphQLEnumType({
         *   name: 'RGB',
         *   values: {
         *     RED: { value: 0 },
         *     GREEN: { value: 1 },
         *     BLUE: { value: 2 }
         *   }
         * });
         * ```
         *
         * Note: If a value is not provided in a definition, the name of the enum value
         * will be used as its internal value.
         */
        class GraphQLEnumType {
          /* <T> */
          constructor(config) {
            var _config$extensionASTN5;
            this.name = (0, _assertName.assertName)(config.name);
            this.description = config.description;
            this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
            this.astNode = config.astNode;
            this.extensionASTNodes = (_config$extensionASTN5 = config.extensionASTNodes) !== null && _config$extensionASTN5 !== void 0 ? _config$extensionASTN5 : [];
            this._values = defineEnumValues(this.name, config.values);
            this._valueLookup = new Map(this._values.map(enumValue => [enumValue.value, enumValue]));
            this._nameLookup = (0, _keyMap.keyMap)(this._values, value => value.name);
          }
          get [Symbol.toStringTag]() {
            return 'GraphQLEnumType';
          }
          getValues() {
            return this._values;
          }
          getValue(name) {
            return this._nameLookup[name];
          }
          serialize(outputValue) {
            const enumValue = this._valueLookup.get(outputValue);
            if (enumValue === undefined) {
              throw new _GraphQLError.GraphQLError(`Enum "${this.name}" cannot represent value: ${(0, _inspect.inspect)(outputValue)}`);
            }
            return enumValue.name;
          }
          parseValue(inputValue) /* T */
          {
            if (typeof inputValue !== 'string') {
              const valueStr = (0, _inspect.inspect)(inputValue);
              throw new _GraphQLError.GraphQLError(`Enum "${this.name}" cannot represent non-string value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr));
            }
            const enumValue = this.getValue(inputValue);
            if (enumValue == null) {
              throw new _GraphQLError.GraphQLError(`Value "${inputValue}" does not exist in "${this.name}" enum.` + didYouMeanEnumValue(this, inputValue));
            }
            return enumValue.value;
          }
          parseLiteral(valueNode, _variables) /* T */
          {
            // Note: variables will be resolved to a value before calling this function.
            if (valueNode.kind !== _kinds.Kind.ENUM) {
              const valueStr = (0, _printer.print)(valueNode);
              throw new _GraphQLError.GraphQLError(`Enum "${this.name}" cannot represent non-enum value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr), {
                nodes: valueNode
              });
            }
            const enumValue = this.getValue(valueNode.value);
            if (enumValue == null) {
              const valueStr = (0, _printer.print)(valueNode);
              throw new _GraphQLError.GraphQLError(`Value "${valueStr}" does not exist in "${this.name}" enum.` + didYouMeanEnumValue(this, valueStr), {
                nodes: valueNode
              });
            }
            return enumValue.value;
          }
          toConfig() {
            const values = (0, _keyValMap.keyValMap)(this.getValues(), value => value.name, value => ({
              description: value.description,
              value: value.value,
              deprecationReason: value.deprecationReason,
              extensions: value.extensions,
              astNode: value.astNode
            }));
            return {
              name: this.name,
              description: this.description,
              values,
              extensions: this.extensions,
              astNode: this.astNode,
              extensionASTNodes: this.extensionASTNodes
            };
          }
          toString() {
            return this.name;
          }
          toJSON() {
            return this.toString();
          }
        }
        exports.GraphQLEnumType = GraphQLEnumType;
        function didYouMeanEnumValue(enumType, unknownValueStr) {
          const allNames = enumType.getValues().map(value => value.name);
          const suggestedValues = (0, _suggestionList.suggestionList)(unknownValueStr, allNames);
          return (0, _didYouMean.didYouMean)('the enum value', suggestedValues);
        }
        function defineEnumValues(typeName, valueMap) {
          isPlainObj(valueMap) || (0, _devAssert.devAssert)(false, `${typeName} values must be an object with value names as keys.`);
          return Object.entries(valueMap).map(([valueName, valueConfig]) => {
            isPlainObj(valueConfig) || (0, _devAssert.devAssert)(false, `${typeName}.${valueName} must refer to an object with a "value" key ` + `representing an internal value but got: ${(0, _inspect.inspect)(valueConfig)}.`);
            return {
              name: (0, _assertName.assertEnumValueName)(valueName),
              description: valueConfig.description,
              value: valueConfig.value !== undefined ? valueConfig.value : valueName,
              deprecationReason: valueConfig.deprecationReason,
              extensions: (0, _toObjMap.toObjMap)(valueConfig.extensions),
              astNode: valueConfig.astNode
            };
          });
        }

        /**
         * Input Object Type Definition
         *
         * An input object defines a structured collection of fields which may be
         * supplied to a field argument.
         *
         * Using `NonNull` will ensure that a value must be provided by the query
         *
         * Example:
         *
         * ```ts
         * const GeoPoint = new GraphQLInputObjectType({
         *   name: 'GeoPoint',
         *   fields: {
         *     lat: { type: new GraphQLNonNull(GraphQLFloat) },
         *     lon: { type: new GraphQLNonNull(GraphQLFloat) },
         *     alt: { type: GraphQLFloat, defaultValue: 0 },
         *   }
         * });
         * ```
         */
        class GraphQLInputObjectType {
          constructor(config) {
            var _config$extensionASTN6;
            this.name = (0, _assertName.assertName)(config.name);
            this.description = config.description;
            this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
            this.astNode = config.astNode;
            this.extensionASTNodes = (_config$extensionASTN6 = config.extensionASTNodes) !== null && _config$extensionASTN6 !== void 0 ? _config$extensionASTN6 : [];
            this._fields = defineInputFieldMap.bind(undefined, config);
          }
          get [Symbol.toStringTag]() {
            return 'GraphQLInputObjectType';
          }
          getFields() {
            if (typeof this._fields === 'function') {
              this._fields = this._fields();
            }
            return this._fields;
          }
          toConfig() {
            const fields = (0, _mapValue.mapValue)(this.getFields(), field => ({
              description: field.description,
              type: field.type,
              defaultValue: field.defaultValue,
              deprecationReason: field.deprecationReason,
              extensions: field.extensions,
              astNode: field.astNode
            }));
            return {
              name: this.name,
              description: this.description,
              fields,
              extensions: this.extensions,
              astNode: this.astNode,
              extensionASTNodes: this.extensionASTNodes
            };
          }
          toString() {
            return this.name;
          }
          toJSON() {
            return this.toString();
          }
        }
        exports.GraphQLInputObjectType = GraphQLInputObjectType;
        function defineInputFieldMap(config) {
          const fieldMap = resolveObjMapThunk(config.fields);
          isPlainObj(fieldMap) || (0, _devAssert.devAssert)(false, `${config.name} fields must be an object with field names as keys or a function which returns such an object.`);
          return (0, _mapValue.mapValue)(fieldMap, (fieldConfig, fieldName) => {
            !('resolve' in fieldConfig) || (0, _devAssert.devAssert)(false, `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`);
            return {
              name: (0, _assertName.assertName)(fieldName),
              description: fieldConfig.description,
              type: fieldConfig.type,
              defaultValue: fieldConfig.defaultValue,
              deprecationReason: fieldConfig.deprecationReason,
              extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),
              astNode: fieldConfig.astNode
            };
          });
        }
        function isRequiredInputField(field) {
          return isNonNullType(field.type) && field.defaultValue === undefined;
        }
      }, {
        "../error/GraphQLError.mjs": 136,
        "../jsutils/devAssert.mjs": 149,
        "../jsutils/didYouMean.mjs": 150,
        "../jsutils/identityFunc.mjs": 152,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/instanceOf.mjs": 154,
        "../jsutils/isObjectLike.mjs": 158,
        "../jsutils/keyMap.mjs": 160,
        "../jsutils/keyValMap.mjs": 161,
        "../jsutils/mapValue.mjs": 162,
        "../jsutils/suggestionList.mjs": 168,
        "../jsutils/toObjMap.mjs": 170,
        "../language/kinds.mjs": 176,
        "../language/printer.mjs": 183,
        "../utilities/valueFromASTUntyped.mjs": 217,
        "./assertName.mjs": 187
      }],
      189: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GraphQLSpecifiedByDirective = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = void 0;
        exports.assertDirective = assertDirective;
        exports.isDirective = isDirective;
        exports.isSpecifiedDirective = isSpecifiedDirective;
        exports.specifiedDirectives = void 0;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _inspect = require("../jsutils/inspect.mjs");
        var _instanceOf = require("../jsutils/instanceOf.mjs");
        var _isObjectLike = require("../jsutils/isObjectLike.mjs");
        var _toObjMap = require("../jsutils/toObjMap.mjs");
        var _directiveLocation = require("../language/directiveLocation.mjs");
        var _assertName = require("./assertName.mjs");
        var _definition = require("./definition.mjs");
        var _scalars = require("./scalars.mjs");
        /**
         * Test if the given value is a GraphQL directive.
         */

        function isDirective(directive) {
          return (0, _instanceOf.instanceOf)(directive, GraphQLDirective);
        }
        function assertDirective(directive) {
          if (!isDirective(directive)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(directive)} to be a GraphQL directive.`);
          }
          return directive;
        }
        /**
         * Custom extensions
         *
         * @remarks
         * Use a unique identifier name for your extension, for example the name of
         * your library or project. Do not use a shortened identifier as this increases
         * the risk of conflicts. We recommend you add at most one extension field,
         * an object which can contain all the values you need.
         */

        /**
         * Directives are used by the GraphQL runtime as a way of modifying execution
         * behavior. Type system creators will usually not create these directly.
         */
        class GraphQLDirective {
          constructor(config) {
            var _config$isRepeatable, _config$args;
            this.name = (0, _assertName.assertName)(config.name);
            this.description = config.description;
            this.locations = config.locations;
            this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
            this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
            this.astNode = config.astNode;
            Array.isArray(config.locations) || (0, _devAssert.devAssert)(false, `@${config.name} locations must be an Array.`);
            const args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};
            (0, _isObjectLike.isObjectLike)(args) && !Array.isArray(args) || (0, _devAssert.devAssert)(false, `@${config.name} args must be an object with argument names as keys.`);
            this.args = (0, _definition.defineArguments)(args);
          }
          get [Symbol.toStringTag]() {
            return 'GraphQLDirective';
          }
          toConfig() {
            return {
              name: this.name,
              description: this.description,
              locations: this.locations,
              args: (0, _definition.argsToArgsConfig)(this.args),
              isRepeatable: this.isRepeatable,
              extensions: this.extensions,
              astNode: this.astNode
            };
          }
          toString() {
            return '@' + this.name;
          }
          toJSON() {
            return this.toString();
          }
        }

        /**
         * Used to conditionally include fields or fragments.
         */
        exports.GraphQLDirective = GraphQLDirective;
        const GraphQLIncludeDirective = exports.GraphQLIncludeDirective = new GraphQLDirective({
          name: 'include',
          description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',
          locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
          args: {
            if: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
              description: 'Included when true.'
            }
          }
        });
        /**
         * Used to conditionally skip (exclude) fields or fragments.
         */

        const GraphQLSkipDirective = exports.GraphQLSkipDirective = new GraphQLDirective({
          name: 'skip',
          description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',
          locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
          args: {
            if: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
              description: 'Skipped when true.'
            }
          }
        });
        /**
         * Constant string used for default reason for a deprecation.
         */

        const DEFAULT_DEPRECATION_REASON = exports.DEFAULT_DEPRECATION_REASON = 'No longer supported';
        /**
         * Used to declare element of a GraphQL schema as deprecated.
         */

        const GraphQLDeprecatedDirective = exports.GraphQLDeprecatedDirective = new GraphQLDirective({
          name: 'deprecated',
          description: 'Marks an element of a GraphQL schema as no longer supported.',
          locations: [_directiveLocation.DirectiveLocation.FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION, _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ENUM_VALUE],
          args: {
            reason: {
              type: _scalars.GraphQLString,
              description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',
              defaultValue: DEFAULT_DEPRECATION_REASON
            }
          }
        });
        /**
         * Used to provide a URL for specifying the behavior of custom scalar definitions.
         */

        const GraphQLSpecifiedByDirective = exports.GraphQLSpecifiedByDirective = new GraphQLDirective({
          name: 'specifiedBy',
          description: 'Exposes a URL that specifies the behavior of this scalar.',
          locations: [_directiveLocation.DirectiveLocation.SCALAR],
          args: {
            url: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
              description: 'The URL that specifies the behavior of this scalar.'
            }
          }
        });
        /**
         * The full list of specified directives.
         */

        const specifiedDirectives = exports.specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);
        function isSpecifiedDirective(directive) {
          return specifiedDirectives.some(({
            name
          }) => name === directive.name);
        }
      }, {
        "../jsutils/devAssert.mjs": 149,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/instanceOf.mjs": 154,
        "../jsutils/isObjectLike.mjs": 158,
        "../jsutils/toObjMap.mjs": 170,
        "../language/directiveLocation.mjs": 174,
        "./assertName.mjs": 187,
        "./definition.mjs": 188,
        "./scalars.mjs": 192
      }],
      190: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
          enumerable: true,
          get: function () {
            return _directives.DEFAULT_DEPRECATION_REASON;
          }
        });
        Object.defineProperty(exports, "GRAPHQL_MAX_INT", {
          enumerable: true,
          get: function () {
            return _scalars.GRAPHQL_MAX_INT;
          }
        });
        Object.defineProperty(exports, "GRAPHQL_MIN_INT", {
          enumerable: true,
          get: function () {
            return _scalars.GRAPHQL_MIN_INT;
          }
        });
        Object.defineProperty(exports, "GraphQLBoolean", {
          enumerable: true,
          get: function () {
            return _scalars.GraphQLBoolean;
          }
        });
        Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
          enumerable: true,
          get: function () {
            return _directives.GraphQLDeprecatedDirective;
          }
        });
        Object.defineProperty(exports, "GraphQLDirective", {
          enumerable: true,
          get: function () {
            return _directives.GraphQLDirective;
          }
        });
        Object.defineProperty(exports, "GraphQLEnumType", {
          enumerable: true,
          get: function () {
            return _definition.GraphQLEnumType;
          }
        });
        Object.defineProperty(exports, "GraphQLFloat", {
          enumerable: true,
          get: function () {
            return _scalars.GraphQLFloat;
          }
        });
        Object.defineProperty(exports, "GraphQLID", {
          enumerable: true,
          get: function () {
            return _scalars.GraphQLID;
          }
        });
        Object.defineProperty(exports, "GraphQLIncludeDirective", {
          enumerable: true,
          get: function () {
            return _directives.GraphQLIncludeDirective;
          }
        });
        Object.defineProperty(exports, "GraphQLInputObjectType", {
          enumerable: true,
          get: function () {
            return _definition.GraphQLInputObjectType;
          }
        });
        Object.defineProperty(exports, "GraphQLInt", {
          enumerable: true,
          get: function () {
            return _scalars.GraphQLInt;
          }
        });
        Object.defineProperty(exports, "GraphQLInterfaceType", {
          enumerable: true,
          get: function () {
            return _definition.GraphQLInterfaceType;
          }
        });
        Object.defineProperty(exports, "GraphQLList", {
          enumerable: true,
          get: function () {
            return _definition.GraphQLList;
          }
        });
        Object.defineProperty(exports, "GraphQLNonNull", {
          enumerable: true,
          get: function () {
            return _definition.GraphQLNonNull;
          }
        });
        Object.defineProperty(exports, "GraphQLObjectType", {
          enumerable: true,
          get: function () {
            return _definition.GraphQLObjectType;
          }
        });
        Object.defineProperty(exports, "GraphQLScalarType", {
          enumerable: true,
          get: function () {
            return _definition.GraphQLScalarType;
          }
        });
        Object.defineProperty(exports, "GraphQLSchema", {
          enumerable: true,
          get: function () {
            return _schema.GraphQLSchema;
          }
        });
        Object.defineProperty(exports, "GraphQLSkipDirective", {
          enumerable: true,
          get: function () {
            return _directives.GraphQLSkipDirective;
          }
        });
        Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
          enumerable: true,
          get: function () {
            return _directives.GraphQLSpecifiedByDirective;
          }
        });
        Object.defineProperty(exports, "GraphQLString", {
          enumerable: true,
          get: function () {
            return _scalars.GraphQLString;
          }
        });
        Object.defineProperty(exports, "GraphQLUnionType", {
          enumerable: true,
          get: function () {
            return _definition.GraphQLUnionType;
          }
        });
        Object.defineProperty(exports, "SchemaMetaFieldDef", {
          enumerable: true,
          get: function () {
            return _introspection.SchemaMetaFieldDef;
          }
        });
        Object.defineProperty(exports, "TypeKind", {
          enumerable: true,
          get: function () {
            return _introspection.TypeKind;
          }
        });
        Object.defineProperty(exports, "TypeMetaFieldDef", {
          enumerable: true,
          get: function () {
            return _introspection.TypeMetaFieldDef;
          }
        });
        Object.defineProperty(exports, "TypeNameMetaFieldDef", {
          enumerable: true,
          get: function () {
            return _introspection.TypeNameMetaFieldDef;
          }
        });
        Object.defineProperty(exports, "__Directive", {
          enumerable: true,
          get: function () {
            return _introspection.__Directive;
          }
        });
        Object.defineProperty(exports, "__DirectiveLocation", {
          enumerable: true,
          get: function () {
            return _introspection.__DirectiveLocation;
          }
        });
        Object.defineProperty(exports, "__EnumValue", {
          enumerable: true,
          get: function () {
            return _introspection.__EnumValue;
          }
        });
        Object.defineProperty(exports, "__Field", {
          enumerable: true,
          get: function () {
            return _introspection.__Field;
          }
        });
        Object.defineProperty(exports, "__InputValue", {
          enumerable: true,
          get: function () {
            return _introspection.__InputValue;
          }
        });
        Object.defineProperty(exports, "__Schema", {
          enumerable: true,
          get: function () {
            return _introspection.__Schema;
          }
        });
        Object.defineProperty(exports, "__Type", {
          enumerable: true,
          get: function () {
            return _introspection.__Type;
          }
        });
        Object.defineProperty(exports, "__TypeKind", {
          enumerable: true,
          get: function () {
            return _introspection.__TypeKind;
          }
        });
        Object.defineProperty(exports, "assertAbstractType", {
          enumerable: true,
          get: function () {
            return _definition.assertAbstractType;
          }
        });
        Object.defineProperty(exports, "assertCompositeType", {
          enumerable: true,
          get: function () {
            return _definition.assertCompositeType;
          }
        });
        Object.defineProperty(exports, "assertDirective", {
          enumerable: true,
          get: function () {
            return _directives.assertDirective;
          }
        });
        Object.defineProperty(exports, "assertEnumType", {
          enumerable: true,
          get: function () {
            return _definition.assertEnumType;
          }
        });
        Object.defineProperty(exports, "assertEnumValueName", {
          enumerable: true,
          get: function () {
            return _assertName.assertEnumValueName;
          }
        });
        Object.defineProperty(exports, "assertInputObjectType", {
          enumerable: true,
          get: function () {
            return _definition.assertInputObjectType;
          }
        });
        Object.defineProperty(exports, "assertInputType", {
          enumerable: true,
          get: function () {
            return _definition.assertInputType;
          }
        });
        Object.defineProperty(exports, "assertInterfaceType", {
          enumerable: true,
          get: function () {
            return _definition.assertInterfaceType;
          }
        });
        Object.defineProperty(exports, "assertLeafType", {
          enumerable: true,
          get: function () {
            return _definition.assertLeafType;
          }
        });
        Object.defineProperty(exports, "assertListType", {
          enumerable: true,
          get: function () {
            return _definition.assertListType;
          }
        });
        Object.defineProperty(exports, "assertName", {
          enumerable: true,
          get: function () {
            return _assertName.assertName;
          }
        });
        Object.defineProperty(exports, "assertNamedType", {
          enumerable: true,
          get: function () {
            return _definition.assertNamedType;
          }
        });
        Object.defineProperty(exports, "assertNonNullType", {
          enumerable: true,
          get: function () {
            return _definition.assertNonNullType;
          }
        });
        Object.defineProperty(exports, "assertNullableType", {
          enumerable: true,
          get: function () {
            return _definition.assertNullableType;
          }
        });
        Object.defineProperty(exports, "assertObjectType", {
          enumerable: true,
          get: function () {
            return _definition.assertObjectType;
          }
        });
        Object.defineProperty(exports, "assertOutputType", {
          enumerable: true,
          get: function () {
            return _definition.assertOutputType;
          }
        });
        Object.defineProperty(exports, "assertScalarType", {
          enumerable: true,
          get: function () {
            return _definition.assertScalarType;
          }
        });
        Object.defineProperty(exports, "assertSchema", {
          enumerable: true,
          get: function () {
            return _schema.assertSchema;
          }
        });
        Object.defineProperty(exports, "assertType", {
          enumerable: true,
          get: function () {
            return _definition.assertType;
          }
        });
        Object.defineProperty(exports, "assertUnionType", {
          enumerable: true,
          get: function () {
            return _definition.assertUnionType;
          }
        });
        Object.defineProperty(exports, "assertValidSchema", {
          enumerable: true,
          get: function () {
            return _validate.assertValidSchema;
          }
        });
        Object.defineProperty(exports, "assertWrappingType", {
          enumerable: true,
          get: function () {
            return _definition.assertWrappingType;
          }
        });
        Object.defineProperty(exports, "getNamedType", {
          enumerable: true,
          get: function () {
            return _definition.getNamedType;
          }
        });
        Object.defineProperty(exports, "getNullableType", {
          enumerable: true,
          get: function () {
            return _definition.getNullableType;
          }
        });
        Object.defineProperty(exports, "introspectionTypes", {
          enumerable: true,
          get: function () {
            return _introspection.introspectionTypes;
          }
        });
        Object.defineProperty(exports, "isAbstractType", {
          enumerable: true,
          get: function () {
            return _definition.isAbstractType;
          }
        });
        Object.defineProperty(exports, "isCompositeType", {
          enumerable: true,
          get: function () {
            return _definition.isCompositeType;
          }
        });
        Object.defineProperty(exports, "isDirective", {
          enumerable: true,
          get: function () {
            return _directives.isDirective;
          }
        });
        Object.defineProperty(exports, "isEnumType", {
          enumerable: true,
          get: function () {
            return _definition.isEnumType;
          }
        });
        Object.defineProperty(exports, "isInputObjectType", {
          enumerable: true,
          get: function () {
            return _definition.isInputObjectType;
          }
        });
        Object.defineProperty(exports, "isInputType", {
          enumerable: true,
          get: function () {
            return _definition.isInputType;
          }
        });
        Object.defineProperty(exports, "isInterfaceType", {
          enumerable: true,
          get: function () {
            return _definition.isInterfaceType;
          }
        });
        Object.defineProperty(exports, "isIntrospectionType", {
          enumerable: true,
          get: function () {
            return _introspection.isIntrospectionType;
          }
        });
        Object.defineProperty(exports, "isLeafType", {
          enumerable: true,
          get: function () {
            return _definition.isLeafType;
          }
        });
        Object.defineProperty(exports, "isListType", {
          enumerable: true,
          get: function () {
            return _definition.isListType;
          }
        });
        Object.defineProperty(exports, "isNamedType", {
          enumerable: true,
          get: function () {
            return _definition.isNamedType;
          }
        });
        Object.defineProperty(exports, "isNonNullType", {
          enumerable: true,
          get: function () {
            return _definition.isNonNullType;
          }
        });
        Object.defineProperty(exports, "isNullableType", {
          enumerable: true,
          get: function () {
            return _definition.isNullableType;
          }
        });
        Object.defineProperty(exports, "isObjectType", {
          enumerable: true,
          get: function () {
            return _definition.isObjectType;
          }
        });
        Object.defineProperty(exports, "isOutputType", {
          enumerable: true,
          get: function () {
            return _definition.isOutputType;
          }
        });
        Object.defineProperty(exports, "isRequiredArgument", {
          enumerable: true,
          get: function () {
            return _definition.isRequiredArgument;
          }
        });
        Object.defineProperty(exports, "isRequiredInputField", {
          enumerable: true,
          get: function () {
            return _definition.isRequiredInputField;
          }
        });
        Object.defineProperty(exports, "isScalarType", {
          enumerable: true,
          get: function () {
            return _definition.isScalarType;
          }
        });
        Object.defineProperty(exports, "isSchema", {
          enumerable: true,
          get: function () {
            return _schema.isSchema;
          }
        });
        Object.defineProperty(exports, "isSpecifiedDirective", {
          enumerable: true,
          get: function () {
            return _directives.isSpecifiedDirective;
          }
        });
        Object.defineProperty(exports, "isSpecifiedScalarType", {
          enumerable: true,
          get: function () {
            return _scalars.isSpecifiedScalarType;
          }
        });
        Object.defineProperty(exports, "isType", {
          enumerable: true,
          get: function () {
            return _definition.isType;
          }
        });
        Object.defineProperty(exports, "isUnionType", {
          enumerable: true,
          get: function () {
            return _definition.isUnionType;
          }
        });
        Object.defineProperty(exports, "isWrappingType", {
          enumerable: true,
          get: function () {
            return _definition.isWrappingType;
          }
        });
        Object.defineProperty(exports, "resolveObjMapThunk", {
          enumerable: true,
          get: function () {
            return _definition.resolveObjMapThunk;
          }
        });
        Object.defineProperty(exports, "resolveReadonlyArrayThunk", {
          enumerable: true,
          get: function () {
            return _definition.resolveReadonlyArrayThunk;
          }
        });
        Object.defineProperty(exports, "specifiedDirectives", {
          enumerable: true,
          get: function () {
            return _directives.specifiedDirectives;
          }
        });
        Object.defineProperty(exports, "specifiedScalarTypes", {
          enumerable: true,
          get: function () {
            return _scalars.specifiedScalarTypes;
          }
        });
        Object.defineProperty(exports, "validateSchema", {
          enumerable: true,
          get: function () {
            return _validate.validateSchema;
          }
        });
        var _schema = require("./schema.mjs");
        var _definition = require("./definition.mjs");
        var _directives = require("./directives.mjs");
        var _scalars = require("./scalars.mjs");
        var _introspection = require("./introspection.mjs");
        var _validate = require("./validate.mjs");
        var _assertName = require("./assertName.mjs");
      }, {
        "./assertName.mjs": 187,
        "./definition.mjs": 188,
        "./directives.mjs": 189,
        "./introspection.mjs": 191,
        "./scalars.mjs": 192,
        "./schema.mjs": 193,
        "./validate.mjs": 194
      }],
      191: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.introspectionTypes = exports.__TypeKind = exports.__Type = exports.__Schema = exports.__InputValue = exports.__Field = exports.__EnumValue = exports.__DirectiveLocation = exports.__Directive = exports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.TypeKind = exports.SchemaMetaFieldDef = void 0;
        exports.isIntrospectionType = isIntrospectionType;
        var _inspect = require("../jsutils/inspect.mjs");
        var _invariant = require("../jsutils/invariant.mjs");
        var _directiveLocation = require("../language/directiveLocation.mjs");
        var _printer = require("../language/printer.mjs");
        var _astFromValue = require("../utilities/astFromValue.mjs");
        var _definition = require("./definition.mjs");
        var _scalars = require("./scalars.mjs");
        const __Schema = exports.__Schema = new _definition.GraphQLObjectType({
          name: '__Schema',
          description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',
          fields: () => ({
            description: {
              type: _scalars.GraphQLString,
              resolve: schema => schema.description
            },
            types: {
              description: 'A list of all types supported by this server.',
              type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type))),
              resolve(schema) {
                return Object.values(schema.getTypeMap());
              }
            },
            queryType: {
              description: 'The type that query operations will be rooted at.',
              type: new _definition.GraphQLNonNull(__Type),
              resolve: schema => schema.getQueryType()
            },
            mutationType: {
              description: 'If this server supports mutation, the type that mutation operations will be rooted at.',
              type: __Type,
              resolve: schema => schema.getMutationType()
            },
            subscriptionType: {
              description: 'If this server support subscription, the type that subscription operations will be rooted at.',
              type: __Type,
              resolve: schema => schema.getSubscriptionType()
            },
            directives: {
              description: 'A list of all directives supported by this server.',
              type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Directive))),
              resolve: schema => schema.getDirectives()
            }
          })
        });
        const __Directive = exports.__Directive = new _definition.GraphQLObjectType({
          name: '__Directive',
          description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
          fields: () => ({
            name: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
              resolve: directive => directive.name
            },
            description: {
              type: _scalars.GraphQLString,
              resolve: directive => directive.description
            },
            isRepeatable: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
              resolve: directive => directive.isRepeatable
            },
            locations: {
              type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__DirectiveLocation))),
              resolve: directive => directive.locations
            },
            args: {
              type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),
              args: {
                includeDeprecated: {
                  type: _scalars.GraphQLBoolean,
                  defaultValue: false
                }
              },
              resolve(field, {
                includeDeprecated
              }) {
                return includeDeprecated ? field.args : field.args.filter(arg => arg.deprecationReason == null);
              }
            }
          })
        });
        const __DirectiveLocation = exports.__DirectiveLocation = new _definition.GraphQLEnumType({
          name: '__DirectiveLocation',
          description: 'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',
          values: {
            QUERY: {
              value: _directiveLocation.DirectiveLocation.QUERY,
              description: 'Location adjacent to a query operation.'
            },
            MUTATION: {
              value: _directiveLocation.DirectiveLocation.MUTATION,
              description: 'Location adjacent to a mutation operation.'
            },
            SUBSCRIPTION: {
              value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,
              description: 'Location adjacent to a subscription operation.'
            },
            FIELD: {
              value: _directiveLocation.DirectiveLocation.FIELD,
              description: 'Location adjacent to a field.'
            },
            FRAGMENT_DEFINITION: {
              value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,
              description: 'Location adjacent to a fragment definition.'
            },
            FRAGMENT_SPREAD: {
              value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
              description: 'Location adjacent to a fragment spread.'
            },
            INLINE_FRAGMENT: {
              value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,
              description: 'Location adjacent to an inline fragment.'
            },
            VARIABLE_DEFINITION: {
              value: _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION,
              description: 'Location adjacent to a variable definition.'
            },
            SCHEMA: {
              value: _directiveLocation.DirectiveLocation.SCHEMA,
              description: 'Location adjacent to a schema definition.'
            },
            SCALAR: {
              value: _directiveLocation.DirectiveLocation.SCALAR,
              description: 'Location adjacent to a scalar definition.'
            },
            OBJECT: {
              value: _directiveLocation.DirectiveLocation.OBJECT,
              description: 'Location adjacent to an object type definition.'
            },
            FIELD_DEFINITION: {
              value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
              description: 'Location adjacent to a field definition.'
            },
            ARGUMENT_DEFINITION: {
              value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
              description: 'Location adjacent to an argument definition.'
            },
            INTERFACE: {
              value: _directiveLocation.DirectiveLocation.INTERFACE,
              description: 'Location adjacent to an interface definition.'
            },
            UNION: {
              value: _directiveLocation.DirectiveLocation.UNION,
              description: 'Location adjacent to a union definition.'
            },
            ENUM: {
              value: _directiveLocation.DirectiveLocation.ENUM,
              description: 'Location adjacent to an enum definition.'
            },
            ENUM_VALUE: {
              value: _directiveLocation.DirectiveLocation.ENUM_VALUE,
              description: 'Location adjacent to an enum value definition.'
            },
            INPUT_OBJECT: {
              value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,
              description: 'Location adjacent to an input object type definition.'
            },
            INPUT_FIELD_DEFINITION: {
              value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
              description: 'Location adjacent to an input object field definition.'
            }
          }
        });
        const __Type = exports.__Type = new _definition.GraphQLObjectType({
          name: '__Type',
          description: 'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',
          fields: () => ({
            kind: {
              type: new _definition.GraphQLNonNull(__TypeKind),
              resolve(type) {
                if ((0, _definition.isScalarType)(type)) {
                  return TypeKind.SCALAR;
                }
                if ((0, _definition.isObjectType)(type)) {
                  return TypeKind.OBJECT;
                }
                if ((0, _definition.isInterfaceType)(type)) {
                  return TypeKind.INTERFACE;
                }
                if ((0, _definition.isUnionType)(type)) {
                  return TypeKind.UNION;
                }
                if ((0, _definition.isEnumType)(type)) {
                  return TypeKind.ENUM;
                }
                if ((0, _definition.isInputObjectType)(type)) {
                  return TypeKind.INPUT_OBJECT;
                }
                if ((0, _definition.isListType)(type)) {
                  return TypeKind.LIST;
                }
                if ((0, _definition.isNonNullType)(type)) {
                  return TypeKind.NON_NULL;
                }
                /* c8 ignore next 3 */
                // Not reachable, all possible types have been considered)

                false || (0, _invariant.invariant)(false, `Unexpected type: "${(0, _inspect.inspect)(type)}".`);
              }
            },
            name: {
              type: _scalars.GraphQLString,
              resolve: type => 'name' in type ? type.name : undefined
            },
            description: {
              type: _scalars.GraphQLString,
              resolve: (type // FIXME: add test case
              ) => /* c8 ignore next */
              'description' in type ? type.description : undefined
            },
            specifiedByURL: {
              type: _scalars.GraphQLString,
              resolve: obj => 'specifiedByURL' in obj ? obj.specifiedByURL : undefined
            },
            fields: {
              type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Field)),
              args: {
                includeDeprecated: {
                  type: _scalars.GraphQLBoolean,
                  defaultValue: false
                }
              },
              resolve(type, {
                includeDeprecated
              }) {
                if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
                  const fields = Object.values(type.getFields());
                  return includeDeprecated ? fields : fields.filter(field => field.deprecationReason == null);
                }
              }
            },
            interfaces: {
              type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
              resolve(type) {
                if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
                  return type.getInterfaces();
                }
              }
            },
            possibleTypes: {
              type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
              resolve(type, _args, _context, {
                schema
              }) {
                if ((0, _definition.isAbstractType)(type)) {
                  return schema.getPossibleTypes(type);
                }
              }
            },
            enumValues: {
              type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__EnumValue)),
              args: {
                includeDeprecated: {
                  type: _scalars.GraphQLBoolean,
                  defaultValue: false
                }
              },
              resolve(type, {
                includeDeprecated
              }) {
                if ((0, _definition.isEnumType)(type)) {
                  const values = type.getValues();
                  return includeDeprecated ? values : values.filter(field => field.deprecationReason == null);
                }
              }
            },
            inputFields: {
              type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue)),
              args: {
                includeDeprecated: {
                  type: _scalars.GraphQLBoolean,
                  defaultValue: false
                }
              },
              resolve(type, {
                includeDeprecated
              }) {
                if ((0, _definition.isInputObjectType)(type)) {
                  const values = Object.values(type.getFields());
                  return includeDeprecated ? values : values.filter(field => field.deprecationReason == null);
                }
              }
            },
            ofType: {
              type: __Type,
              resolve: type => 'ofType' in type ? type.ofType : undefined
            }
          })
        });
        const __Field = exports.__Field = new _definition.GraphQLObjectType({
          name: '__Field',
          description: 'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',
          fields: () => ({
            name: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
              resolve: field => field.name
            },
            description: {
              type: _scalars.GraphQLString,
              resolve: field => field.description
            },
            args: {
              type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),
              args: {
                includeDeprecated: {
                  type: _scalars.GraphQLBoolean,
                  defaultValue: false
                }
              },
              resolve(field, {
                includeDeprecated
              }) {
                return includeDeprecated ? field.args : field.args.filter(arg => arg.deprecationReason == null);
              }
            },
            type: {
              type: new _definition.GraphQLNonNull(__Type),
              resolve: field => field.type
            },
            isDeprecated: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
              resolve: field => field.deprecationReason != null
            },
            deprecationReason: {
              type: _scalars.GraphQLString,
              resolve: field => field.deprecationReason
            }
          })
        });
        const __InputValue = exports.__InputValue = new _definition.GraphQLObjectType({
          name: '__InputValue',
          description: 'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',
          fields: () => ({
            name: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
              resolve: inputValue => inputValue.name
            },
            description: {
              type: _scalars.GraphQLString,
              resolve: inputValue => inputValue.description
            },
            type: {
              type: new _definition.GraphQLNonNull(__Type),
              resolve: inputValue => inputValue.type
            },
            defaultValue: {
              type: _scalars.GraphQLString,
              description: 'A GraphQL-formatted string representing the default value for this input value.',
              resolve(inputValue) {
                const {
                  type,
                  defaultValue
                } = inputValue;
                const valueAST = (0, _astFromValue.astFromValue)(defaultValue, type);
                return valueAST ? (0, _printer.print)(valueAST) : null;
              }
            },
            isDeprecated: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
              resolve: field => field.deprecationReason != null
            },
            deprecationReason: {
              type: _scalars.GraphQLString,
              resolve: obj => obj.deprecationReason
            }
          })
        });
        const __EnumValue = exports.__EnumValue = new _definition.GraphQLObjectType({
          name: '__EnumValue',
          description: 'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',
          fields: () => ({
            name: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
              resolve: enumValue => enumValue.name
            },
            description: {
              type: _scalars.GraphQLString,
              resolve: enumValue => enumValue.description
            },
            isDeprecated: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
              resolve: enumValue => enumValue.deprecationReason != null
            },
            deprecationReason: {
              type: _scalars.GraphQLString,
              resolve: enumValue => enumValue.deprecationReason
            }
          })
        });
        var TypeKind;
        (function (TypeKind) {
          TypeKind['SCALAR'] = 'SCALAR';
          TypeKind['OBJECT'] = 'OBJECT';
          TypeKind['INTERFACE'] = 'INTERFACE';
          TypeKind['UNION'] = 'UNION';
          TypeKind['ENUM'] = 'ENUM';
          TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';
          TypeKind['LIST'] = 'LIST';
          TypeKind['NON_NULL'] = 'NON_NULL';
        })(TypeKind || (exports.TypeKind = TypeKind = {}));
        const __TypeKind = exports.__TypeKind = new _definition.GraphQLEnumType({
          name: '__TypeKind',
          description: 'An enum describing what kind of type a given `__Type` is.',
          values: {
            SCALAR: {
              value: TypeKind.SCALAR,
              description: 'Indicates this type is a scalar.'
            },
            OBJECT: {
              value: TypeKind.OBJECT,
              description: 'Indicates this type is an object. `fields` and `interfaces` are valid fields.'
            },
            INTERFACE: {
              value: TypeKind.INTERFACE,
              description: 'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.'
            },
            UNION: {
              value: TypeKind.UNION,
              description: 'Indicates this type is a union. `possibleTypes` is a valid field.'
            },
            ENUM: {
              value: TypeKind.ENUM,
              description: 'Indicates this type is an enum. `enumValues` is a valid field.'
            },
            INPUT_OBJECT: {
              value: TypeKind.INPUT_OBJECT,
              description: 'Indicates this type is an input object. `inputFields` is a valid field.'
            },
            LIST: {
              value: TypeKind.LIST,
              description: 'Indicates this type is a list. `ofType` is a valid field.'
            },
            NON_NULL: {
              value: TypeKind.NON_NULL,
              description: 'Indicates this type is a non-null. `ofType` is a valid field.'
            }
          }
        });
        /**
         * Note that these are GraphQLField and not GraphQLFieldConfig,
         * so the format for args is different.
         */

        const SchemaMetaFieldDef = exports.SchemaMetaFieldDef = {
          name: '__schema',
          type: new _definition.GraphQLNonNull(__Schema),
          description: 'Access the current type schema of this server.',
          args: [],
          resolve: (_source, _args, _context, {
            schema
          }) => schema,
          deprecationReason: undefined,
          extensions: Object.create(null),
          astNode: undefined
        };
        const TypeMetaFieldDef = exports.TypeMetaFieldDef = {
          name: '__type',
          type: __Type,
          description: 'Request the type information of a single type.',
          args: [{
            name: 'name',
            description: undefined,
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            defaultValue: undefined,
            deprecationReason: undefined,
            extensions: Object.create(null),
            astNode: undefined
          }],
          resolve: (_source, {
            name
          }, _context, {
            schema
          }) => schema.getType(name),
          deprecationReason: undefined,
          extensions: Object.create(null),
          astNode: undefined
        };
        const TypeNameMetaFieldDef = exports.TypeNameMetaFieldDef = {
          name: '__typename',
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          description: 'The name of the current Object type at runtime.',
          args: [],
          resolve: (_source, _args, _context, {
            parentType
          }) => parentType.name,
          deprecationReason: undefined,
          extensions: Object.create(null),
          astNode: undefined
        };
        const introspectionTypes = exports.introspectionTypes = Object.freeze([__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind]);
        function isIntrospectionType(type) {
          return introspectionTypes.some(({
            name
          }) => type.name === name);
        }
      }, {
        "../jsutils/inspect.mjs": 153,
        "../jsutils/invariant.mjs": 155,
        "../language/directiveLocation.mjs": 174,
        "../language/printer.mjs": 183,
        "../utilities/astFromValue.mjs": 197,
        "./definition.mjs": 188,
        "./scalars.mjs": 192
      }],
      192: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GraphQLString = exports.GraphQLInt = exports.GraphQLID = exports.GraphQLFloat = exports.GraphQLBoolean = exports.GRAPHQL_MIN_INT = exports.GRAPHQL_MAX_INT = void 0;
        exports.isSpecifiedScalarType = isSpecifiedScalarType;
        exports.specifiedScalarTypes = void 0;
        var _inspect = require("../jsutils/inspect.mjs");
        var _isObjectLike = require("../jsutils/isObjectLike.mjs");
        var _GraphQLError = require("../error/GraphQLError.mjs");
        var _kinds = require("../language/kinds.mjs");
        var _printer = require("../language/printer.mjs");
        var _definition = require("./definition.mjs");
        /**
         * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).
         * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1
         * */

        const GRAPHQL_MAX_INT = exports.GRAPHQL_MAX_INT = 2147483647;
        /**
         * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).
         * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)
         * */

        const GRAPHQL_MIN_INT = exports.GRAPHQL_MIN_INT = -2147483648;
        const GraphQLInt = exports.GraphQLInt = new _definition.GraphQLScalarType({
          name: 'Int',
          description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',
          serialize(outputValue) {
            const coercedValue = serializeObject(outputValue);
            if (typeof coercedValue === 'boolean') {
              return coercedValue ? 1 : 0;
            }
            let num = coercedValue;
            if (typeof coercedValue === 'string' && coercedValue !== '') {
              num = Number(coercedValue);
            }
            if (typeof num !== 'number' || !Number.isInteger(num)) {
              throw new _GraphQLError.GraphQLError(`Int cannot represent non-integer value: ${(0, _inspect.inspect)(coercedValue)}`);
            }
            if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
              throw new _GraphQLError.GraphQLError('Int cannot represent non 32-bit signed integer value: ' + (0, _inspect.inspect)(coercedValue));
            }
            return num;
          },
          parseValue(inputValue) {
            if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {
              throw new _GraphQLError.GraphQLError(`Int cannot represent non-integer value: ${(0, _inspect.inspect)(inputValue)}`);
            }
            if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {
              throw new _GraphQLError.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${inputValue}`);
            }
            return inputValue;
          },
          parseLiteral(valueNode) {
            if (valueNode.kind !== _kinds.Kind.INT) {
              throw new _GraphQLError.GraphQLError(`Int cannot represent non-integer value: ${(0, _printer.print)(valueNode)}`, {
                nodes: valueNode
              });
            }
            const num = parseInt(valueNode.value, 10);
            if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
              throw new _GraphQLError.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${valueNode.value}`, {
                nodes: valueNode
              });
            }
            return num;
          }
        });
        const GraphQLFloat = exports.GraphQLFloat = new _definition.GraphQLScalarType({
          name: 'Float',
          description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',
          serialize(outputValue) {
            const coercedValue = serializeObject(outputValue);
            if (typeof coercedValue === 'boolean') {
              return coercedValue ? 1 : 0;
            }
            let num = coercedValue;
            if (typeof coercedValue === 'string' && coercedValue !== '') {
              num = Number(coercedValue);
            }
            if (typeof num !== 'number' || !Number.isFinite(num)) {
              throw new _GraphQLError.GraphQLError(`Float cannot represent non numeric value: ${(0, _inspect.inspect)(coercedValue)}`);
            }
            return num;
          },
          parseValue(inputValue) {
            if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {
              throw new _GraphQLError.GraphQLError(`Float cannot represent non numeric value: ${(0, _inspect.inspect)(inputValue)}`);
            }
            return inputValue;
          },
          parseLiteral(valueNode) {
            if (valueNode.kind !== _kinds.Kind.FLOAT && valueNode.kind !== _kinds.Kind.INT) {
              throw new _GraphQLError.GraphQLError(`Float cannot represent non numeric value: ${(0, _printer.print)(valueNode)}`, valueNode);
            }
            return parseFloat(valueNode.value);
          }
        });
        const GraphQLString = exports.GraphQLString = new _definition.GraphQLScalarType({
          name: 'String',
          description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',
          serialize(outputValue) {
            const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not
            // attempt to coerce object, function, symbol, or other types as strings.

            if (typeof coercedValue === 'string') {
              return coercedValue;
            }
            if (typeof coercedValue === 'boolean') {
              return coercedValue ? 'true' : 'false';
            }
            if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {
              return coercedValue.toString();
            }
            throw new _GraphQLError.GraphQLError(`String cannot represent value: ${(0, _inspect.inspect)(outputValue)}`);
          },
          parseValue(inputValue) {
            if (typeof inputValue !== 'string') {
              throw new _GraphQLError.GraphQLError(`String cannot represent a non string value: ${(0, _inspect.inspect)(inputValue)}`);
            }
            return inputValue;
          },
          parseLiteral(valueNode) {
            if (valueNode.kind !== _kinds.Kind.STRING) {
              throw new _GraphQLError.GraphQLError(`String cannot represent a non string value: ${(0, _printer.print)(valueNode)}`, {
                nodes: valueNode
              });
            }
            return valueNode.value;
          }
        });
        const GraphQLBoolean = exports.GraphQLBoolean = new _definition.GraphQLScalarType({
          name: 'Boolean',
          description: 'The `Boolean` scalar type represents `true` or `false`.',
          serialize(outputValue) {
            const coercedValue = serializeObject(outputValue);
            if (typeof coercedValue === 'boolean') {
              return coercedValue;
            }
            if (Number.isFinite(coercedValue)) {
              return coercedValue !== 0;
            }
            throw new _GraphQLError.GraphQLError(`Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(coercedValue)}`);
          },
          parseValue(inputValue) {
            if (typeof inputValue !== 'boolean') {
              throw new _GraphQLError.GraphQLError(`Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(inputValue)}`);
            }
            return inputValue;
          },
          parseLiteral(valueNode) {
            if (valueNode.kind !== _kinds.Kind.BOOLEAN) {
              throw new _GraphQLError.GraphQLError(`Boolean cannot represent a non boolean value: ${(0, _printer.print)(valueNode)}`, {
                nodes: valueNode
              });
            }
            return valueNode.value;
          }
        });
        const GraphQLID = exports.GraphQLID = new _definition.GraphQLScalarType({
          name: 'ID',
          description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
          serialize(outputValue) {
            const coercedValue = serializeObject(outputValue);
            if (typeof coercedValue === 'string') {
              return coercedValue;
            }
            if (Number.isInteger(coercedValue)) {
              return String(coercedValue);
            }
            throw new _GraphQLError.GraphQLError(`ID cannot represent value: ${(0, _inspect.inspect)(outputValue)}`);
          },
          parseValue(inputValue) {
            if (typeof inputValue === 'string') {
              return inputValue;
            }
            if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {
              return inputValue.toString();
            }
            throw new _GraphQLError.GraphQLError(`ID cannot represent value: ${(0, _inspect.inspect)(inputValue)}`);
          },
          parseLiteral(valueNode) {
            if (valueNode.kind !== _kinds.Kind.STRING && valueNode.kind !== _kinds.Kind.INT) {
              throw new _GraphQLError.GraphQLError('ID cannot represent a non-string and non-integer value: ' + (0, _printer.print)(valueNode), {
                nodes: valueNode
              });
            }
            return valueNode.value;
          }
        });
        const specifiedScalarTypes = exports.specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);
        function isSpecifiedScalarType(type) {
          return specifiedScalarTypes.some(({
            name
          }) => type.name === name);
        } // Support serializing objects with custom valueOf() or toJSON() functions -
        // a common way to represent a complex value which can be represented as
        // a string (ex: MongoDB id objects).

        function serializeObject(outputValue) {
          if ((0, _isObjectLike.isObjectLike)(outputValue)) {
            if (typeof outputValue.valueOf === 'function') {
              const valueOfResult = outputValue.valueOf();
              if (!(0, _isObjectLike.isObjectLike)(valueOfResult)) {
                return valueOfResult;
              }
            }
            if (typeof outputValue.toJSON === 'function') {
              return outputValue.toJSON();
            }
          }
          return outputValue;
        }
      }, {
        "../error/GraphQLError.mjs": 136,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/isObjectLike.mjs": 158,
        "../language/kinds.mjs": 176,
        "../language/printer.mjs": 183,
        "./definition.mjs": 188
      }],
      193: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GraphQLSchema = void 0;
        exports.assertSchema = assertSchema;
        exports.isSchema = isSchema;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _inspect = require("../jsutils/inspect.mjs");
        var _instanceOf = require("../jsutils/instanceOf.mjs");
        var _isObjectLike = require("../jsutils/isObjectLike.mjs");
        var _toObjMap = require("../jsutils/toObjMap.mjs");
        var _ast = require("../language/ast.mjs");
        var _definition = require("./definition.mjs");
        var _directives = require("./directives.mjs");
        var _introspection = require("./introspection.mjs");
        /**
         * Test if the given value is a GraphQL schema.
         */

        function isSchema(schema) {
          return (0, _instanceOf.instanceOf)(schema, GraphQLSchema);
        }
        function assertSchema(schema) {
          if (!isSchema(schema)) {
            throw new Error(`Expected ${(0, _inspect.inspect)(schema)} to be a GraphQL schema.`);
          }
          return schema;
        }
        /**
         * Custom extensions
         *
         * @remarks
         * Use a unique identifier name for your extension, for example the name of
         * your library or project. Do not use a shortened identifier as this increases
         * the risk of conflicts. We recommend you add at most one extension field,
         * an object which can contain all the values you need.
         */

        /**
         * Schema Definition
         *
         * A Schema is created by supplying the root types of each type of operation,
         * query and mutation (optional). A schema definition is then supplied to the
         * validator and executor.
         *
         * Example:
         *
         * ```ts
         * const MyAppSchema = new GraphQLSchema({
         *   query: MyAppQueryRootType,
         *   mutation: MyAppMutationRootType,
         * })
         * ```
         *
         * Note: When the schema is constructed, by default only the types that are
         * reachable by traversing the root types are included, other types must be
         * explicitly referenced.
         *
         * Example:
         *
         * ```ts
         * const characterInterface = new GraphQLInterfaceType({
         *   name: 'Character',
         *   ...
         * });
         *
         * const humanType = new GraphQLObjectType({
         *   name: 'Human',
         *   interfaces: [characterInterface],
         *   ...
         * });
         *
         * const droidType = new GraphQLObjectType({
         *   name: 'Droid',
         *   interfaces: [characterInterface],
         *   ...
         * });
         *
         * const schema = new GraphQLSchema({
         *   query: new GraphQLObjectType({
         *     name: 'Query',
         *     fields: {
         *       hero: { type: characterInterface, ... },
         *     }
         *   }),
         *   ...
         *   // Since this schema references only the `Character` interface it's
         *   // necessary to explicitly list the types that implement it if
         *   // you want them to be included in the final schema.
         *   types: [humanType, droidType],
         * })
         * ```
         *
         * Note: If an array of `directives` are provided to GraphQLSchema, that will be
         * the exact list of directives represented and allowed. If `directives` is not
         * provided then a default set of the specified directives (e.g. `@include` and
         * `@skip`) will be used. If you wish to provide *additional* directives to these
         * specified directives, you must explicitly declare them. Example:
         *
         * ```ts
         * const MyAppSchema = new GraphQLSchema({
         *   ...
         *   directives: specifiedDirectives.concat([ myCustomDirective ]),
         * })
         * ```
         */
        class GraphQLSchema {
          // Used as a cache for validateSchema().
          constructor(config) {
            var _config$extensionASTN, _config$directives;

            // If this schema was built from a source known to be valid, then it may be
            // marked with assumeValid to avoid an additional type system validation.
            this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.

            (0, _isObjectLike.isObjectLike)(config) || (0, _devAssert.devAssert)(false, 'Must provide configuration object.');
            !config.types || Array.isArray(config.types) || (0, _devAssert.devAssert)(false, `"types" must be Array if provided but got: ${(0, _inspect.inspect)(config.types)}.`);
            !config.directives || Array.isArray(config.directives) || (0, _devAssert.devAssert)(false, '"directives" must be Array if provided but got: ' + `${(0, _inspect.inspect)(config.directives)}.`);
            this.description = config.description;
            this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
            this.astNode = config.astNode;
            this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];
            this._queryType = config.query;
            this._mutationType = config.mutation;
            this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.

            this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : _directives.specifiedDirectives; // To preserve order of user-provided types, we add first to add them to
            // the set of "collected" types, so `collectReferencedTypes` ignore them.

            const allReferencedTypes = new Set(config.types);
            if (config.types != null) {
              for (const type of config.types) {
                // When we ready to process this type, we remove it from "collected" types
                // and then add it together with all dependent types in the correct position.
                allReferencedTypes.delete(type);
                collectReferencedTypes(type, allReferencedTypes);
              }
            }
            if (this._queryType != null) {
              collectReferencedTypes(this._queryType, allReferencedTypes);
            }
            if (this._mutationType != null) {
              collectReferencedTypes(this._mutationType, allReferencedTypes);
            }
            if (this._subscriptionType != null) {
              collectReferencedTypes(this._subscriptionType, allReferencedTypes);
            }
            for (const directive of this._directives) {
              // Directives are not validated until validateSchema() is called.
              if ((0, _directives.isDirective)(directive)) {
                for (const arg of directive.args) {
                  collectReferencedTypes(arg.type, allReferencedTypes);
                }
              }
            }
            collectReferencedTypes(_introspection.__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.

            this._typeMap = Object.create(null);
            this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.

            this._implementationsMap = Object.create(null);
            for (const namedType of allReferencedTypes) {
              if (namedType == null) {
                continue;
              }
              const typeName = namedType.name;
              typeName || (0, _devAssert.devAssert)(false, 'One of the provided types for building the Schema is missing a name.');
              if (this._typeMap[typeName] !== undefined) {
                throw new Error(`Schema must contain uniquely named types but contains multiple types named "${typeName}".`);
              }
              this._typeMap[typeName] = namedType;
              if ((0, _definition.isInterfaceType)(namedType)) {
                // Store implementations by interface.
                for (const iface of namedType.getInterfaces()) {
                  if ((0, _definition.isInterfaceType)(iface)) {
                    let implementations = this._implementationsMap[iface.name];
                    if (implementations === undefined) {
                      implementations = this._implementationsMap[iface.name] = {
                        objects: [],
                        interfaces: []
                      };
                    }
                    implementations.interfaces.push(namedType);
                  }
                }
              } else if ((0, _definition.isObjectType)(namedType)) {
                // Store implementations by objects.
                for (const iface of namedType.getInterfaces()) {
                  if ((0, _definition.isInterfaceType)(iface)) {
                    let implementations = this._implementationsMap[iface.name];
                    if (implementations === undefined) {
                      implementations = this._implementationsMap[iface.name] = {
                        objects: [],
                        interfaces: []
                      };
                    }
                    implementations.objects.push(namedType);
                  }
                }
              }
            }
          }
          get [Symbol.toStringTag]() {
            return 'GraphQLSchema';
          }
          getQueryType() {
            return this._queryType;
          }
          getMutationType() {
            return this._mutationType;
          }
          getSubscriptionType() {
            return this._subscriptionType;
          }
          getRootType(operation) {
            switch (operation) {
              case _ast.OperationTypeNode.QUERY:
                return this.getQueryType();
              case _ast.OperationTypeNode.MUTATION:
                return this.getMutationType();
              case _ast.OperationTypeNode.SUBSCRIPTION:
                return this.getSubscriptionType();
            }
          }
          getTypeMap() {
            return this._typeMap;
          }
          getType(name) {
            return this.getTypeMap()[name];
          }
          getPossibleTypes(abstractType) {
            return (0, _definition.isUnionType)(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
          }
          getImplementations(interfaceType) {
            const implementations = this._implementationsMap[interfaceType.name];
            return implementations !== null && implementations !== void 0 ? implementations : {
              objects: [],
              interfaces: []
            };
          }
          isSubType(abstractType, maybeSubType) {
            let map = this._subTypeMap[abstractType.name];
            if (map === undefined) {
              map = Object.create(null);
              if ((0, _definition.isUnionType)(abstractType)) {
                for (const type of abstractType.getTypes()) {
                  map[type.name] = true;
                }
              } else {
                const implementations = this.getImplementations(abstractType);
                for (const type of implementations.objects) {
                  map[type.name] = true;
                }
                for (const type of implementations.interfaces) {
                  map[type.name] = true;
                }
              }
              this._subTypeMap[abstractType.name] = map;
            }
            return map[maybeSubType.name] !== undefined;
          }
          getDirectives() {
            return this._directives;
          }
          getDirective(name) {
            return this.getDirectives().find(directive => directive.name === name);
          }
          toConfig() {
            return {
              description: this.description,
              query: this.getQueryType(),
              mutation: this.getMutationType(),
              subscription: this.getSubscriptionType(),
              types: Object.values(this.getTypeMap()),
              directives: this.getDirectives(),
              extensions: this.extensions,
              astNode: this.astNode,
              extensionASTNodes: this.extensionASTNodes,
              assumeValid: this.__validationErrors !== undefined
            };
          }
        }
        exports.GraphQLSchema = GraphQLSchema;
        function collectReferencedTypes(type, typeSet) {
          const namedType = (0, _definition.getNamedType)(type);
          if (!typeSet.has(namedType)) {
            typeSet.add(namedType);
            if ((0, _definition.isUnionType)(namedType)) {
              for (const memberType of namedType.getTypes()) {
                collectReferencedTypes(memberType, typeSet);
              }
            } else if ((0, _definition.isObjectType)(namedType) || (0, _definition.isInterfaceType)(namedType)) {
              for (const interfaceType of namedType.getInterfaces()) {
                collectReferencedTypes(interfaceType, typeSet);
              }
              for (const field of Object.values(namedType.getFields())) {
                collectReferencedTypes(field.type, typeSet);
                for (const arg of field.args) {
                  collectReferencedTypes(arg.type, typeSet);
                }
              }
            } else if ((0, _definition.isInputObjectType)(namedType)) {
              for (const field of Object.values(namedType.getFields())) {
                collectReferencedTypes(field.type, typeSet);
              }
            }
          }
          return typeSet;
        }
      }, {
        "../jsutils/devAssert.mjs": 149,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/instanceOf.mjs": 154,
        "../jsutils/isObjectLike.mjs": 158,
        "../jsutils/toObjMap.mjs": 170,
        "../language/ast.mjs": 171,
        "./definition.mjs": 188,
        "./directives.mjs": 189,
        "./introspection.mjs": 191
      }],
      194: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.assertValidSchema = assertValidSchema;
        exports.validateSchema = validateSchema;
        var _inspect = require("../jsutils/inspect.mjs");
        var _GraphQLError = require("../error/GraphQLError.mjs");
        var _ast = require("../language/ast.mjs");
        var _typeComparators = require("../utilities/typeComparators.mjs");
        var _definition = require("./definition.mjs");
        var _directives = require("./directives.mjs");
        var _introspection = require("./introspection.mjs");
        var _schema = require("./schema.mjs");
        /**
         * Implements the "Type Validation" sub-sections of the specification's
         * "Type System" section.
         *
         * Validation runs synchronously, returning an array of encountered errors, or
         * an empty array if no errors were encountered and the Schema is valid.
         */

        function validateSchema(schema) {
          // First check to ensure the provided value is in fact a GraphQLSchema.
          (0, _schema.assertSchema)(schema); // If this Schema has already been validated, return the previous results.

          if (schema.__validationErrors) {
            return schema.__validationErrors;
          } // Validate the schema, producing a list of errors.

          const context = new SchemaValidationContext(schema);
          validateRootTypes(context);
          validateDirectives(context);
          validateTypes(context); // Persist the results of validation before returning to ensure validation
          // does not run multiple times for this schema.

          const errors = context.getErrors();
          schema.__validationErrors = errors;
          return errors;
        }
        /**
         * Utility function which asserts a schema is valid by throwing an error if
         * it is invalid.
         */

        function assertValidSchema(schema) {
          const errors = validateSchema(schema);
          if (errors.length !== 0) {
            throw new Error(errors.map(error => error.message).join('\n\n'));
          }
        }
        class SchemaValidationContext {
          constructor(schema) {
            this._errors = [];
            this.schema = schema;
          }
          reportError(message, nodes) {
            const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;
            this._errors.push(new _GraphQLError.GraphQLError(message, {
              nodes: _nodes
            }));
          }
          getErrors() {
            return this._errors;
          }
        }
        function validateRootTypes(context) {
          const schema = context.schema;
          const queryType = schema.getQueryType();
          if (!queryType) {
            context.reportError('Query root type must be provided.', schema.astNode);
          } else if (!(0, _definition.isObjectType)(queryType)) {
            var _getOperationTypeNode;
            context.reportError(`Query root type must be Object type, it cannot be ${(0, _inspect.inspect)(queryType)}.`, (_getOperationTypeNode = getOperationTypeNode(schema, _ast.OperationTypeNode.QUERY)) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode);
          }
          const mutationType = schema.getMutationType();
          if (mutationType && !(0, _definition.isObjectType)(mutationType)) {
            var _getOperationTypeNode2;
            context.reportError('Mutation root type must be Object type if provided, it cannot be ' + `${(0, _inspect.inspect)(mutationType)}.`, (_getOperationTypeNode2 = getOperationTypeNode(schema, _ast.OperationTypeNode.MUTATION)) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode);
          }
          const subscriptionType = schema.getSubscriptionType();
          if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {
            var _getOperationTypeNode3;
            context.reportError('Subscription root type must be Object type if provided, it cannot be ' + `${(0, _inspect.inspect)(subscriptionType)}.`, (_getOperationTypeNode3 = getOperationTypeNode(schema, _ast.OperationTypeNode.SUBSCRIPTION)) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode);
          }
        }
        function getOperationTypeNode(schema, operation) {
          var _flatMap$find;
          return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes].flatMap(
          // FIXME: https://github.com/graphql/graphql-js/issues/2203
          schemaNode => {
            var _schemaNode$operation;
            return (/* c8 ignore next */
              (_schemaNode$operation = schemaNode === null || schemaNode === void 0 ? void 0 : schemaNode.operationTypes) !== null && _schemaNode$operation !== void 0 ? _schemaNode$operation : []
            );
          }).find(operationNode => operationNode.operation === operation)) === null || _flatMap$find === void 0 ? void 0 : _flatMap$find.type;
        }
        function validateDirectives(context) {
          for (const directive of context.schema.getDirectives()) {
            // Ensure all directives are in fact GraphQL directives.
            if (!(0, _directives.isDirective)(directive)) {
              context.reportError(`Expected directive but got: ${(0, _inspect.inspect)(directive)}.`, directive === null || directive === void 0 ? void 0 : directive.astNode);
              continue;
            } // Ensure they are named correctly.

            validateName(context, directive); // TODO: Ensure proper locations.
            // Ensure the arguments are valid.

            for (const arg of directive.args) {
              // Ensure they are named correctly.
              validateName(context, arg); // Ensure the type is an input type.

              if (!(0, _definition.isInputType)(arg.type)) {
                context.reportError(`The type of @${directive.name}(${arg.name}:) must be Input Type ` + `but got: ${(0, _inspect.inspect)(arg.type)}.`, arg.astNode);
              }
              if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
                var _arg$astNode;
                context.reportError(`Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`, [getDeprecatedDirectiveNode(arg.astNode), (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type]);
              }
            }
          }
        }
        function validateName(context, node) {
          // Ensure names are valid, however introspection types opt out.
          if (node.name.startsWith('__')) {
            context.reportError(`Name "${node.name}" must not begin with "__", which is reserved by GraphQL introspection.`, node.astNode);
          }
        }
        function validateTypes(context) {
          const validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);
          const typeMap = context.schema.getTypeMap();
          for (const type of Object.values(typeMap)) {
            // Ensure all provided types are in fact GraphQL type.
            if (!(0, _definition.isNamedType)(type)) {
              context.reportError(`Expected GraphQL named type but got: ${(0, _inspect.inspect)(type)}.`, type.astNode);
              continue;
            } // Ensure it is named correctly (excluding introspection types).

            if (!(0, _introspection.isIntrospectionType)(type)) {
              validateName(context, type);
            }
            if ((0, _definition.isObjectType)(type)) {
              // Ensure fields are valid
              validateFields(context, type); // Ensure objects implement the interfaces they claim to.

              validateInterfaces(context, type);
            } else if ((0, _definition.isInterfaceType)(type)) {
              // Ensure fields are valid.
              validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.

              validateInterfaces(context, type);
            } else if ((0, _definition.isUnionType)(type)) {
              // Ensure Unions include valid member types.
              validateUnionMembers(context, type);
            } else if ((0, _definition.isEnumType)(type)) {
              // Ensure Enums have valid values.
              validateEnumValues(context, type);
            } else if ((0, _definition.isInputObjectType)(type)) {
              // Ensure Input Object fields are valid.
              validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references

              validateInputObjectCircularRefs(type);
            }
          }
        }
        function validateFields(context, type) {
          const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.

          if (fields.length === 0) {
            context.reportError(`Type ${type.name} must define one or more fields.`, [type.astNode, ...type.extensionASTNodes]);
          }
          for (const field of fields) {
            // Ensure they are named correctly.
            validateName(context, field); // Ensure the type is an output type

            if (!(0, _definition.isOutputType)(field.type)) {
              var _field$astNode;
              context.reportError(`The type of ${type.name}.${field.name} must be Output Type ` + `but got: ${(0, _inspect.inspect)(field.type)}.`, (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);
            } // Ensure the arguments are valid

            for (const arg of field.args) {
              const argName = arg.name; // Ensure they are named correctly.

              validateName(context, arg); // Ensure the type is an input type

              if (!(0, _definition.isInputType)(arg.type)) {
                var _arg$astNode2;
                context.reportError(`The type of ${type.name}.${field.name}(${argName}:) must be Input ` + `Type but got: ${(0, _inspect.inspect)(arg.type)}.`, (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type);
              }
              if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
                var _arg$astNode3;
                context.reportError(`Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`, [getDeprecatedDirectiveNode(arg.astNode), (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type]);
              }
            }
          }
        }
        function validateInterfaces(context, type) {
          const ifaceTypeNames = Object.create(null);
          for (const iface of type.getInterfaces()) {
            if (!(0, _definition.isInterfaceType)(iface)) {
              context.reportError(`Type ${(0, _inspect.inspect)(type)} must only implement Interface types, ` + `it cannot implement ${(0, _inspect.inspect)(iface)}.`, getAllImplementsInterfaceNodes(type, iface));
              continue;
            }
            if (type === iface) {
              context.reportError(`Type ${type.name} cannot implement itself because it would create a circular reference.`, getAllImplementsInterfaceNodes(type, iface));
              continue;
            }
            if (ifaceTypeNames[iface.name]) {
              context.reportError(`Type ${type.name} can only implement ${iface.name} once.`, getAllImplementsInterfaceNodes(type, iface));
              continue;
            }
            ifaceTypeNames[iface.name] = true;
            validateTypeImplementsAncestors(context, type, iface);
            validateTypeImplementsInterface(context, type, iface);
          }
        }
        function validateTypeImplementsInterface(context, type, iface) {
          const typeFieldMap = type.getFields(); // Assert each interface field is implemented.

          for (const ifaceField of Object.values(iface.getFields())) {
            const fieldName = ifaceField.name;
            const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.

            if (!typeField) {
              context.reportError(`Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`, [ifaceField.astNode, type.astNode, ...type.extensionASTNodes]);
              continue;
            } // Assert interface field type is satisfied by type field type, by being
            // a valid subtype. (covariant)

            if (!(0, _typeComparators.isTypeSubTypeOf)(context.schema, typeField.type, ifaceField.type)) {
              var _ifaceField$astNode, _typeField$astNode;
              context.reportError(`Interface field ${iface.name}.${fieldName} expects type ` + `${(0, _inspect.inspect)(ifaceField.type)} but ${type.name}.${fieldName} ` + `is type ${(0, _inspect.inspect)(typeField.type)}.`, [(_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type, (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type]);
            } // Assert each interface field arg is implemented.

            for (const ifaceArg of ifaceField.args) {
              const argName = ifaceArg.name;
              const typeArg = typeField.args.find(arg => arg.name === argName); // Assert interface field arg exists on object field.

              if (!typeArg) {
                context.reportError(`Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`, [ifaceArg.astNode, typeField.astNode]);
                continue;
              } // Assert interface field arg type matches object field arg type.
              // (invariant)
              // TODO: change to contravariant?

              if (!(0, _typeComparators.isEqualType)(ifaceArg.type, typeArg.type)) {
                var _ifaceArg$astNode, _typeArg$astNode;
                context.reportError(`Interface field argument ${iface.name}.${fieldName}(${argName}:) ` + `expects type ${(0, _inspect.inspect)(ifaceArg.type)} but ` + `${type.name}.${fieldName}(${argName}:) is type ` + `${(0, _inspect.inspect)(typeArg.type)}.`, [(_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type, (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type]);
              } // TODO: validate default values?
            } // Assert additional arguments must not be required.

            for (const typeArg of typeField.args) {
              const argName = typeArg.name;
              const ifaceArg = ifaceField.args.find(arg => arg.name === argName);
              if (!ifaceArg && (0, _definition.isRequiredArgument)(typeArg)) {
                context.reportError(`Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`, [typeArg.astNode, ifaceField.astNode]);
              }
            }
          }
        }
        function validateTypeImplementsAncestors(context, type, iface) {
          const ifaceInterfaces = type.getInterfaces();
          for (const transitive of iface.getInterfaces()) {
            if (!ifaceInterfaces.includes(transitive)) {
              context.reportError(transitive === type ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.` : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`, [...getAllImplementsInterfaceNodes(iface, transitive), ...getAllImplementsInterfaceNodes(type, iface)]);
            }
          }
        }
        function validateUnionMembers(context, union) {
          const memberTypes = union.getTypes();
          if (memberTypes.length === 0) {
            context.reportError(`Union type ${union.name} must define one or more member types.`, [union.astNode, ...union.extensionASTNodes]);
          }
          const includedTypeNames = Object.create(null);
          for (const memberType of memberTypes) {
            if (includedTypeNames[memberType.name]) {
              context.reportError(`Union type ${union.name} can only include type ${memberType.name} once.`, getUnionMemberTypeNodes(union, memberType.name));
              continue;
            }
            includedTypeNames[memberType.name] = true;
            if (!(0, _definition.isObjectType)(memberType)) {
              context.reportError(`Union type ${union.name} can only include Object types, ` + `it cannot include ${(0, _inspect.inspect)(memberType)}.`, getUnionMemberTypeNodes(union, String(memberType)));
            }
          }
        }
        function validateEnumValues(context, enumType) {
          const enumValues = enumType.getValues();
          if (enumValues.length === 0) {
            context.reportError(`Enum type ${enumType.name} must define one or more values.`, [enumType.astNode, ...enumType.extensionASTNodes]);
          }
          for (const enumValue of enumValues) {
            // Ensure valid name.
            validateName(context, enumValue);
          }
        }
        function validateInputFields(context, inputObj) {
          const fields = Object.values(inputObj.getFields());
          if (fields.length === 0) {
            context.reportError(`Input Object type ${inputObj.name} must define one or more fields.`, [inputObj.astNode, ...inputObj.extensionASTNodes]);
          } // Ensure the arguments are valid

          for (const field of fields) {
            // Ensure they are named correctly.
            validateName(context, field); // Ensure the type is an input type

            if (!(0, _definition.isInputType)(field.type)) {
              var _field$astNode2;
              context.reportError(`The type of ${inputObj.name}.${field.name} must be Input Type ` + `but got: ${(0, _inspect.inspect)(field.type)}.`, (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);
            }
            if ((0, _definition.isRequiredInputField)(field) && field.deprecationReason != null) {
              var _field$astNode3;
              context.reportError(`Required input field ${inputObj.name}.${field.name} cannot be deprecated.`, [getDeprecatedDirectiveNode(field.astNode), (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type]);
            }
          }
        }
        function createInputObjectCircularRefsValidator(context) {
          // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.
          // Tracks already visited types to maintain O(N) and to ensure that cycles
          // are not redundantly reported.
          const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors

          const fieldPath = []; // Position in the type path

          const fieldPathIndexByTypeName = Object.create(null);
          return detectCycleRecursive; // This does a straight-forward DFS to find cycles.
          // It does not terminate when a cycle was found but continues to explore
          // the graph to find all possible cycles.

          function detectCycleRecursive(inputObj) {
            if (visitedTypes[inputObj.name]) {
              return;
            }
            visitedTypes[inputObj.name] = true;
            fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
            const fields = Object.values(inputObj.getFields());
            for (const field of fields) {
              if ((0, _definition.isNonNullType)(field.type) && (0, _definition.isInputObjectType)(field.type.ofType)) {
                const fieldType = field.type.ofType;
                const cycleIndex = fieldPathIndexByTypeName[fieldType.name];
                fieldPath.push(field);
                if (cycleIndex === undefined) {
                  detectCycleRecursive(fieldType);
                } else {
                  const cyclePath = fieldPath.slice(cycleIndex);
                  const pathStr = cyclePath.map(fieldObj => fieldObj.name).join('.');
                  context.reportError(`Cannot reference Input Object "${fieldType.name}" within itself through a series of non-null fields: "${pathStr}".`, cyclePath.map(fieldObj => fieldObj.astNode));
                }
                fieldPath.pop();
              }
            }
            fieldPathIndexByTypeName[inputObj.name] = undefined;
          }
        }
        function getAllImplementsInterfaceNodes(type, iface) {
          const {
            astNode,
            extensionASTNodes
          } = type;
          const nodes = astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203

          return nodes.flatMap(typeNode => {
            var _typeNode$interfaces;
            return (/* c8 ignore next */
              (_typeNode$interfaces = typeNode.interfaces) !== null && _typeNode$interfaces !== void 0 ? _typeNode$interfaces : []
            );
          }).filter(ifaceNode => ifaceNode.name.value === iface.name);
        }
        function getUnionMemberTypeNodes(union, typeName) {
          const {
            astNode,
            extensionASTNodes
          } = union;
          const nodes = astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203

          return nodes.flatMap(unionNode => {
            var _unionNode$types;
            return (/* c8 ignore next */
              (_unionNode$types = unionNode.types) !== null && _unionNode$types !== void 0 ? _unionNode$types : []
            );
          }).filter(typeNode => typeNode.name.value === typeName);
        }
        function getDeprecatedDirectiveNode(definitionNode) {
          var _definitionNode$direc;
          return definitionNode === null || definitionNode === void 0 ? void 0 : (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find(node => node.name.value === _directives.GraphQLDeprecatedDirective.name);
        }
      }, {
        "../error/GraphQLError.mjs": 136,
        "../jsutils/inspect.mjs": 153,
        "../language/ast.mjs": 171,
        "../utilities/typeComparators.mjs": 214,
        "./definition.mjs": 188,
        "./directives.mjs": 189,
        "./introspection.mjs": 191,
        "./schema.mjs": 193
      }],
      195: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TypeInfo = void 0;
        exports.visitWithTypeInfo = visitWithTypeInfo;
        var _ast = require("../language/ast.mjs");
        var _kinds = require("../language/kinds.mjs");
        var _visitor = require("../language/visitor.mjs");
        var _definition = require("../type/definition.mjs");
        var _introspection = require("../type/introspection.mjs");
        var _typeFromAST = require("./typeFromAST.mjs");
        /**
         * TypeInfo is a utility class which, given a GraphQL schema, can keep track
         * of the current field and type definitions at any point in a GraphQL document
         * AST during a recursive descent by calling `enter(node)` and `leave(node)`.
         */

        class TypeInfo {
          constructor(schema,
          /**
           * Initial type may be provided in rare cases to facilitate traversals
           *  beginning somewhere other than documents.
           */
          initialType, /** @deprecated will be removed in 17.0.0 */
          getFieldDefFn) {
            this._schema = schema;
            this._typeStack = [];
            this._parentTypeStack = [];
            this._inputTypeStack = [];
            this._fieldDefStack = [];
            this._defaultValueStack = [];
            this._directive = null;
            this._argument = null;
            this._enumValue = null;
            this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;
            if (initialType) {
              if ((0, _definition.isInputType)(initialType)) {
                this._inputTypeStack.push(initialType);
              }
              if ((0, _definition.isCompositeType)(initialType)) {
                this._parentTypeStack.push(initialType);
              }
              if ((0, _definition.isOutputType)(initialType)) {
                this._typeStack.push(initialType);
              }
            }
          }
          get [Symbol.toStringTag]() {
            return 'TypeInfo';
          }
          getType() {
            if (this._typeStack.length > 0) {
              return this._typeStack[this._typeStack.length - 1];
            }
          }
          getParentType() {
            if (this._parentTypeStack.length > 0) {
              return this._parentTypeStack[this._parentTypeStack.length - 1];
            }
          }
          getInputType() {
            if (this._inputTypeStack.length > 0) {
              return this._inputTypeStack[this._inputTypeStack.length - 1];
            }
          }
          getParentInputType() {
            if (this._inputTypeStack.length > 1) {
              return this._inputTypeStack[this._inputTypeStack.length - 2];
            }
          }
          getFieldDef() {
            if (this._fieldDefStack.length > 0) {
              return this._fieldDefStack[this._fieldDefStack.length - 1];
            }
          }
          getDefaultValue() {
            if (this._defaultValueStack.length > 0) {
              return this._defaultValueStack[this._defaultValueStack.length - 1];
            }
          }
          getDirective() {
            return this._directive;
          }
          getArgument() {
            return this._argument;
          }
          getEnumValue() {
            return this._enumValue;
          }
          enter(node) {
            const schema = this._schema; // Note: many of the types below are explicitly typed as "unknown" to drop
            // any assumptions of a valid schema to ensure runtime types are properly
            // checked before continuing since TypeInfo is used as part of validation
            // which occurs before guarantees of schema and document validity.

            switch (node.kind) {
              case _kinds.Kind.SELECTION_SET:
                {
                  const namedType = (0, _definition.getNamedType)(this.getType());
                  this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);
                  break;
                }
              case _kinds.Kind.FIELD:
                {
                  const parentType = this.getParentType();
                  let fieldDef;
                  let fieldType;
                  if (parentType) {
                    fieldDef = this._getFieldDef(schema, parentType, node);
                    if (fieldDef) {
                      fieldType = fieldDef.type;
                    }
                  }
                  this._fieldDefStack.push(fieldDef);
                  this._typeStack.push((0, _definition.isOutputType)(fieldType) ? fieldType : undefined);
                  break;
                }
              case _kinds.Kind.DIRECTIVE:
                this._directive = schema.getDirective(node.name.value);
                break;
              case _kinds.Kind.OPERATION_DEFINITION:
                {
                  const rootType = schema.getRootType(node.operation);
                  this._typeStack.push((0, _definition.isObjectType)(rootType) ? rootType : undefined);
                  break;
                }
              case _kinds.Kind.INLINE_FRAGMENT:
              case _kinds.Kind.FRAGMENT_DEFINITION:
                {
                  const typeConditionAST = node.typeCondition;
                  const outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());
                  this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);
                  break;
                }
              case _kinds.Kind.VARIABLE_DEFINITION:
                {
                  const inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);
                  this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);
                  break;
                }
              case _kinds.Kind.ARGUMENT:
                {
                  var _this$getDirective;
                  let argDef;
                  let argType;
                  const fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();
                  if (fieldOrDirective) {
                    argDef = fieldOrDirective.args.find(arg => arg.name === node.name.value);
                    if (argDef) {
                      argType = argDef.type;
                    }
                  }
                  this._argument = argDef;
                  this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);
                  this._inputTypeStack.push((0, _definition.isInputType)(argType) ? argType : undefined);
                  break;
                }
              case _kinds.Kind.LIST:
                {
                  const listType = (0, _definition.getNullableType)(this.getInputType());
                  const itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType; // List positions never have a default value.

                  this._defaultValueStack.push(undefined);
                  this._inputTypeStack.push((0, _definition.isInputType)(itemType) ? itemType : undefined);
                  break;
                }
              case _kinds.Kind.OBJECT_FIELD:
                {
                  const objectType = (0, _definition.getNamedType)(this.getInputType());
                  let inputFieldType;
                  let inputField;
                  if ((0, _definition.isInputObjectType)(objectType)) {
                    inputField = objectType.getFields()[node.name.value];
                    if (inputField) {
                      inputFieldType = inputField.type;
                    }
                  }
                  this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);
                  this._inputTypeStack.push((0, _definition.isInputType)(inputFieldType) ? inputFieldType : undefined);
                  break;
                }
              case _kinds.Kind.ENUM:
                {
                  const enumType = (0, _definition.getNamedType)(this.getInputType());
                  let enumValue;
                  if ((0, _definition.isEnumType)(enumType)) {
                    enumValue = enumType.getValue(node.value);
                  }
                  this._enumValue = enumValue;
                  break;
                }
              default: // Ignore other nodes
            }
          }

          leave(node) {
            switch (node.kind) {
              case _kinds.Kind.SELECTION_SET:
                this._parentTypeStack.pop();
                break;
              case _kinds.Kind.FIELD:
                this._fieldDefStack.pop();
                this._typeStack.pop();
                break;
              case _kinds.Kind.DIRECTIVE:
                this._directive = null;
                break;
              case _kinds.Kind.OPERATION_DEFINITION:
              case _kinds.Kind.INLINE_FRAGMENT:
              case _kinds.Kind.FRAGMENT_DEFINITION:
                this._typeStack.pop();
                break;
              case _kinds.Kind.VARIABLE_DEFINITION:
                this._inputTypeStack.pop();
                break;
              case _kinds.Kind.ARGUMENT:
                this._argument = null;
                this._defaultValueStack.pop();
                this._inputTypeStack.pop();
                break;
              case _kinds.Kind.LIST:
              case _kinds.Kind.OBJECT_FIELD:
                this._defaultValueStack.pop();
                this._inputTypeStack.pop();
                break;
              case _kinds.Kind.ENUM:
                this._enumValue = null;
                break;
              default: // Ignore other nodes
            }
          }
        }

        /**
         * Not exactly the same as the executor's definition of getFieldDef, in this
         * statically evaluated environment we do not always have an Object type,
         * and need to handle Interface and Union types.
         */
        exports.TypeInfo = TypeInfo;
        function getFieldDef(schema, parentType, fieldNode) {
          const name = fieldNode.name.value;
          if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
            return _introspection.SchemaMetaFieldDef;
          }
          if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
            return _introspection.TypeMetaFieldDef;
          }
          if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {
            return _introspection.TypeNameMetaFieldDef;
          }
          if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
            return parentType.getFields()[name];
          }
        }
        /**
         * Creates a new visitor instance which maintains a provided TypeInfo instance
         * along with visiting visitor.
         */

        function visitWithTypeInfo(typeInfo, visitor) {
          return {
            enter(...args) {
              const node = args[0];
              typeInfo.enter(node);
              const fn = (0, _visitor.getEnterLeaveForKind)(visitor, node.kind).enter;
              if (fn) {
                const result = fn.apply(visitor, args);
                if (result !== undefined) {
                  typeInfo.leave(node);
                  if ((0, _ast.isNode)(result)) {
                    typeInfo.enter(result);
                  }
                }
                return result;
              }
            },
            leave(...args) {
              const node = args[0];
              const fn = (0, _visitor.getEnterLeaveForKind)(visitor, node.kind).leave;
              let result;
              if (fn) {
                result = fn.apply(visitor, args);
              }
              typeInfo.leave(node);
              return result;
            }
          };
        }
      }, {
        "../language/ast.mjs": 171,
        "../language/kinds.mjs": 176,
        "../language/visitor.mjs": 186,
        "../type/definition.mjs": 188,
        "../type/introspection.mjs": 191,
        "./typeFromAST.mjs": 215
      }],
      196: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.assertValidName = assertValidName;
        exports.isValidNameError = isValidNameError;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _GraphQLError = require("../error/GraphQLError.mjs");
        var _assertName = require("../type/assertName.mjs");
        /* c8 ignore start */

        /**
         * Upholds the spec rules about naming.
         * @deprecated Please use `assertName` instead. Will be removed in v17
         */

        function assertValidName(name) {
          const error = isValidNameError(name);
          if (error) {
            throw error;
          }
          return name;
        }
        /**
         * Returns an Error if a name is invalid.
         * @deprecated Please use `assertName` instead. Will be removed in v17
         */

        function isValidNameError(name) {
          typeof name === 'string' || (0, _devAssert.devAssert)(false, 'Expected name to be a string.');
          if (name.startsWith('__')) {
            return new _GraphQLError.GraphQLError(`Name "${name}" must not begin with "__", which is reserved by GraphQL introspection.`);
          }
          try {
            (0, _assertName.assertName)(name);
          } catch (error) {
            return error;
          }
        }
        /* c8 ignore stop */
      }, {
        "../error/GraphQLError.mjs": 136,
        "../jsutils/devAssert.mjs": 149,
        "../type/assertName.mjs": 187
      }],
      197: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.astFromValue = astFromValue;
        var _inspect = require("../jsutils/inspect.mjs");
        var _invariant = require("../jsutils/invariant.mjs");
        var _isIterableObject = require("../jsutils/isIterableObject.mjs");
        var _isObjectLike = require("../jsutils/isObjectLike.mjs");
        var _kinds = require("../language/kinds.mjs");
        var _definition = require("../type/definition.mjs");
        var _scalars = require("../type/scalars.mjs");
        /**
         * Produces a GraphQL Value AST given a JavaScript object.
         * Function will match JavaScript/JSON values to GraphQL AST schema format
         * by using suggested GraphQLInputType. For example:
         *
         *     astFromValue("value", GraphQLString)
         *
         * A GraphQL type must be provided, which will be used to interpret different
         * JavaScript values.
         *
         * | JSON Value    | GraphQL Value        |
         * | ------------- | -------------------- |
         * | Object        | Input Object         |
         * | Array         | List                 |
         * | Boolean       | Boolean              |
         * | String        | String / Enum Value  |
         * | Number        | Int / Float          |
         * | Unknown       | Enum Value           |
         * | null          | NullValue            |
         *
         */

        function astFromValue(value, type) {
          if ((0, _definition.isNonNullType)(type)) {
            const astValue = astFromValue(value, type.ofType);
            if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === _kinds.Kind.NULL) {
              return null;
            }
            return astValue;
          } // only explicit null, not undefined, NaN

          if (value === null) {
            return {
              kind: _kinds.Kind.NULL
            };
          } // undefined

          if (value === undefined) {
            return null;
          } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
          // the value is not an array, convert the value using the list's item type.

          if ((0, _definition.isListType)(type)) {
            const itemType = type.ofType;
            if ((0, _isIterableObject.isIterableObject)(value)) {
              const valuesNodes = [];
              for (const item of value) {
                const itemNode = astFromValue(item, itemType);
                if (itemNode != null) {
                  valuesNodes.push(itemNode);
                }
              }
              return {
                kind: _kinds.Kind.LIST,
                values: valuesNodes
              };
            }
            return astFromValue(value, itemType);
          } // Populate the fields of the input object by creating ASTs from each value
          // in the JavaScript object according to the fields in the input type.

          if ((0, _definition.isInputObjectType)(type)) {
            if (!(0, _isObjectLike.isObjectLike)(value)) {
              return null;
            }
            const fieldNodes = [];
            for (const field of Object.values(type.getFields())) {
              const fieldValue = astFromValue(value[field.name], field.type);
              if (fieldValue) {
                fieldNodes.push({
                  kind: _kinds.Kind.OBJECT_FIELD,
                  name: {
                    kind: _kinds.Kind.NAME,
                    value: field.name
                  },
                  value: fieldValue
                });
              }
            }
            return {
              kind: _kinds.Kind.OBJECT,
              fields: fieldNodes
            };
          }
          if ((0, _definition.isLeafType)(type)) {
            // Since value is an internally represented value, it must be serialized
            // to an externally represented value before converting into an AST.
            const serialized = type.serialize(value);
            if (serialized == null) {
              return null;
            } // Others serialize based on their corresponding JavaScript scalar types.

            if (typeof serialized === 'boolean') {
              return {
                kind: _kinds.Kind.BOOLEAN,
                value: serialized
              };
            } // JavaScript numbers can be Int or Float values.

            if (typeof serialized === 'number' && Number.isFinite(serialized)) {
              const stringNum = String(serialized);
              return integerStringRegExp.test(stringNum) ? {
                kind: _kinds.Kind.INT,
                value: stringNum
              } : {
                kind: _kinds.Kind.FLOAT,
                value: stringNum
              };
            }
            if (typeof serialized === 'string') {
              // Enum types use Enum literals.
              if ((0, _definition.isEnumType)(type)) {
                return {
                  kind: _kinds.Kind.ENUM,
                  value: serialized
                };
              } // ID types can use Int literals.

              if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {
                return {
                  kind: _kinds.Kind.INT,
                  value: serialized
                };
              }
              return {
                kind: _kinds.Kind.STRING,
                value: serialized
              };
            }
            throw new TypeError(`Cannot convert value to AST: ${(0, _inspect.inspect)(serialized)}.`);
          }
          /* c8 ignore next 3 */
          // Not reachable, all possible types have been considered.

          false || (0, _invariant.invariant)(false, 'Unexpected input type: ' + (0, _inspect.inspect)(type));
        }
        /**
         * IntValue:
         *   - NegativeSign? 0
         *   - NegativeSign? NonZeroDigit ( Digit+ )?
         */

        const integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;
      }, {
        "../jsutils/inspect.mjs": 153,
        "../jsutils/invariant.mjs": 155,
        "../jsutils/isIterableObject.mjs": 157,
        "../jsutils/isObjectLike.mjs": 158,
        "../language/kinds.mjs": 176,
        "../type/definition.mjs": 188,
        "../type/scalars.mjs": 192
      }],
      198: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.buildASTSchema = buildASTSchema;
        exports.buildSchema = buildSchema;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _kinds = require("../language/kinds.mjs");
        var _parser = require("../language/parser.mjs");
        var _directives = require("../type/directives.mjs");
        var _schema = require("../type/schema.mjs");
        var _validate = require("../validation/validate.mjs");
        var _extendSchema = require("./extendSchema.mjs");
        /**
         * This takes the ast of a schema document produced by the parse function in
         * src/language/parser.js.
         *
         * If no schema definition is provided, then it will look for types named Query,
         * Mutation and Subscription.
         *
         * Given that AST it constructs a GraphQLSchema. The resulting schema
         * has no resolve methods, so execution will use default resolvers.
         */
        function buildASTSchema(documentAST, options) {
          documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.devAssert)(false, 'Must provide valid Document AST.');
          if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
            (0, _validate.assertValidSDL)(documentAST);
          }
          const emptySchemaConfig = {
            description: undefined,
            types: [],
            directives: [],
            extensions: Object.create(null),
            extensionASTNodes: [],
            assumeValid: false
          };
          const config = (0, _extendSchema.extendSchemaImpl)(emptySchemaConfig, documentAST, options);
          if (config.astNode == null) {
            for (const type of config.types) {
              switch (type.name) {
                // Note: While this could make early assertions to get the correctly
                // typed values below, that would throw immediately while type system
                // validation with validateSchema() will produce more actionable results.
                case 'Query':
                  // @ts-expect-error validated in `validateSchema`
                  config.query = type;
                  break;
                case 'Mutation':
                  // @ts-expect-error validated in `validateSchema`
                  config.mutation = type;
                  break;
                case 'Subscription':
                  // @ts-expect-error validated in `validateSchema`
                  config.subscription = type;
                  break;
              }
            }
          }
          const directives = [...config.directives,
          // If specified directives were not explicitly declared, add them.
          ..._directives.specifiedDirectives.filter(stdDirective => config.directives.every(directive => directive.name !== stdDirective.name))];
          return new _schema.GraphQLSchema({
            ...config,
            directives
          });
        }
        /**
         * A helper function to build a GraphQLSchema directly from a source
         * document.
         */

        function buildSchema(source, options) {
          const document = (0, _parser.parse)(source, {
            noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
            allowLegacyFragmentVariables: options === null || options === void 0 ? void 0 : options.allowLegacyFragmentVariables
          });
          return buildASTSchema(document, {
            assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
            assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
          });
        }
      }, {
        "../jsutils/devAssert.mjs": 149,
        "../language/kinds.mjs": 176,
        "../language/parser.mjs": 179,
        "../type/directives.mjs": 189,
        "../type/schema.mjs": 193,
        "../validation/validate.mjs": 257,
        "./extendSchema.mjs": 202
      }],
      199: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.buildClientSchema = buildClientSchema;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _inspect = require("../jsutils/inspect.mjs");
        var _isObjectLike = require("../jsutils/isObjectLike.mjs");
        var _keyValMap = require("../jsutils/keyValMap.mjs");
        var _parser = require("../language/parser.mjs");
        var _definition = require("../type/definition.mjs");
        var _directives = require("../type/directives.mjs");
        var _introspection = require("../type/introspection.mjs");
        var _scalars = require("../type/scalars.mjs");
        var _schema = require("../type/schema.mjs");
        var _valueFromAST = require("./valueFromAST.mjs");
        /**
         * Build a GraphQLSchema for use by client tools.
         *
         * Given the result of a client running the introspection query, creates and
         * returns a GraphQLSchema instance which can be then used with all graphql-js
         * tools, but cannot be used to execute a query, as introspection does not
         * represent the "resolver", "parse" or "serialize" functions or any other
         * server-internal mechanisms.
         *
         * This function expects a complete introspection result. Don't forget to check
         * the "errors" field of a server response before calling this function.
         */

        function buildClientSchema(introspection, options) {
          (0, _isObjectLike.isObjectLike)(introspection) && (0, _isObjectLike.isObjectLike)(introspection.__schema) || (0, _devAssert.devAssert)(false, `Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${(0, _inspect.inspect)(introspection)}.`); // Get the schema from the introspection result.

          const schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.

          const typeMap = (0, _keyValMap.keyValMap)(schemaIntrospection.types, typeIntrospection => typeIntrospection.name, typeIntrospection => buildType(typeIntrospection)); // Include standard types only if they are used.

          for (const stdType of [..._scalars.specifiedScalarTypes, ..._introspection.introspectionTypes]) {
            if (typeMap[stdType.name]) {
              typeMap[stdType.name] = stdType;
            }
          } // Get the root Query, Mutation, and Subscription types.

          const queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
          const mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
          const subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if
          // directives were not queried for.

          const directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.

          return new _schema.GraphQLSchema({
            description: schemaIntrospection.description,
            query: queryType,
            mutation: mutationType,
            subscription: subscriptionType,
            types: Object.values(typeMap),
            directives,
            assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
          }); // Given a type reference in introspection, return the GraphQLType instance.
          // preferring cached instances before building new instances.

          function getType(typeRef) {
            if (typeRef.kind === _introspection.TypeKind.LIST) {
              const itemRef = typeRef.ofType;
              if (!itemRef) {
                throw new Error('Decorated type deeper than introspection query.');
              }
              return new _definition.GraphQLList(getType(itemRef));
            }
            if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
              const nullableRef = typeRef.ofType;
              if (!nullableRef) {
                throw new Error('Decorated type deeper than introspection query.');
              }
              const nullableType = getType(nullableRef);
              return new _definition.GraphQLNonNull((0, _definition.assertNullableType)(nullableType));
            }
            return getNamedType(typeRef);
          }
          function getNamedType(typeRef) {
            const typeName = typeRef.name;
            if (!typeName) {
              throw new Error(`Unknown type reference: ${(0, _inspect.inspect)(typeRef)}.`);
            }
            const type = typeMap[typeName];
            if (!type) {
              throw new Error(`Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`);
            }
            return type;
          }
          function getObjectType(typeRef) {
            return (0, _definition.assertObjectType)(getNamedType(typeRef));
          }
          function getInterfaceType(typeRef) {
            return (0, _definition.assertInterfaceType)(getNamedType(typeRef));
          } // Given a type's introspection result, construct the correct
          // GraphQLType instance.

          function buildType(type) {
            // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
            if (type != null && type.name != null && type.kind != null) {
              // FIXME: Properly type IntrospectionType, it's a breaking change so fix in v17
              // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
              switch (type.kind) {
                case _introspection.TypeKind.SCALAR:
                  return buildScalarDef(type);
                case _introspection.TypeKind.OBJECT:
                  return buildObjectDef(type);
                case _introspection.TypeKind.INTERFACE:
                  return buildInterfaceDef(type);
                case _introspection.TypeKind.UNION:
                  return buildUnionDef(type);
                case _introspection.TypeKind.ENUM:
                  return buildEnumDef(type);
                case _introspection.TypeKind.INPUT_OBJECT:
                  return buildInputObjectDef(type);
              }
            }
            const typeStr = (0, _inspect.inspect)(type);
            throw new Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`);
          }
          function buildScalarDef(scalarIntrospection) {
            return new _definition.GraphQLScalarType({
              name: scalarIntrospection.name,
              description: scalarIntrospection.description,
              specifiedByURL: scalarIntrospection.specifiedByURL
            });
          }
          function buildImplementationsList(implementingIntrospection) {
            // TODO: Temporary workaround until GraphQL ecosystem will fully support
            // 'interfaces' on interface types.
            if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === _introspection.TypeKind.INTERFACE) {
              return [];
            }
            if (!implementingIntrospection.interfaces) {
              const implementingIntrospectionStr = (0, _inspect.inspect)(implementingIntrospection);
              throw new Error(`Introspection result missing interfaces: ${implementingIntrospectionStr}.`);
            }
            return implementingIntrospection.interfaces.map(getInterfaceType);
          }
          function buildObjectDef(objectIntrospection) {
            return new _definition.GraphQLObjectType({
              name: objectIntrospection.name,
              description: objectIntrospection.description,
              interfaces: () => buildImplementationsList(objectIntrospection),
              fields: () => buildFieldDefMap(objectIntrospection)
            });
          }
          function buildInterfaceDef(interfaceIntrospection) {
            return new _definition.GraphQLInterfaceType({
              name: interfaceIntrospection.name,
              description: interfaceIntrospection.description,
              interfaces: () => buildImplementationsList(interfaceIntrospection),
              fields: () => buildFieldDefMap(interfaceIntrospection)
            });
          }
          function buildUnionDef(unionIntrospection) {
            if (!unionIntrospection.possibleTypes) {
              const unionIntrospectionStr = (0, _inspect.inspect)(unionIntrospection);
              throw new Error(`Introspection result missing possibleTypes: ${unionIntrospectionStr}.`);
            }
            return new _definition.GraphQLUnionType({
              name: unionIntrospection.name,
              description: unionIntrospection.description,
              types: () => unionIntrospection.possibleTypes.map(getObjectType)
            });
          }
          function buildEnumDef(enumIntrospection) {
            if (!enumIntrospection.enumValues) {
              const enumIntrospectionStr = (0, _inspect.inspect)(enumIntrospection);
              throw new Error(`Introspection result missing enumValues: ${enumIntrospectionStr}.`);
            }
            return new _definition.GraphQLEnumType({
              name: enumIntrospection.name,
              description: enumIntrospection.description,
              values: (0, _keyValMap.keyValMap)(enumIntrospection.enumValues, valueIntrospection => valueIntrospection.name, valueIntrospection => ({
                description: valueIntrospection.description,
                deprecationReason: valueIntrospection.deprecationReason
              }))
            });
          }
          function buildInputObjectDef(inputObjectIntrospection) {
            if (!inputObjectIntrospection.inputFields) {
              const inputObjectIntrospectionStr = (0, _inspect.inspect)(inputObjectIntrospection);
              throw new Error(`Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`);
            }
            return new _definition.GraphQLInputObjectType({
              name: inputObjectIntrospection.name,
              description: inputObjectIntrospection.description,
              fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields)
            });
          }
          function buildFieldDefMap(typeIntrospection) {
            if (!typeIntrospection.fields) {
              throw new Error(`Introspection result missing fields: ${(0, _inspect.inspect)(typeIntrospection)}.`);
            }
            return (0, _keyValMap.keyValMap)(typeIntrospection.fields, fieldIntrospection => fieldIntrospection.name, buildField);
          }
          function buildField(fieldIntrospection) {
            const type = getType(fieldIntrospection.type);
            if (!(0, _definition.isOutputType)(type)) {
              const typeStr = (0, _inspect.inspect)(type);
              throw new Error(`Introspection must provide output type for fields, but received: ${typeStr}.`);
            }
            if (!fieldIntrospection.args) {
              const fieldIntrospectionStr = (0, _inspect.inspect)(fieldIntrospection);
              throw new Error(`Introspection result missing field args: ${fieldIntrospectionStr}.`);
            }
            return {
              description: fieldIntrospection.description,
              deprecationReason: fieldIntrospection.deprecationReason,
              type,
              args: buildInputValueDefMap(fieldIntrospection.args)
            };
          }
          function buildInputValueDefMap(inputValueIntrospections) {
            return (0, _keyValMap.keyValMap)(inputValueIntrospections, inputValue => inputValue.name, buildInputValue);
          }
          function buildInputValue(inputValueIntrospection) {
            const type = getType(inputValueIntrospection.type);
            if (!(0, _definition.isInputType)(type)) {
              const typeStr = (0, _inspect.inspect)(type);
              throw new Error(`Introspection must provide input type for arguments, but received: ${typeStr}.`);
            }
            const defaultValue = inputValueIntrospection.defaultValue != null ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;
            return {
              description: inputValueIntrospection.description,
              type,
              defaultValue,
              deprecationReason: inputValueIntrospection.deprecationReason
            };
          }
          function buildDirective(directiveIntrospection) {
            if (!directiveIntrospection.args) {
              const directiveIntrospectionStr = (0, _inspect.inspect)(directiveIntrospection);
              throw new Error(`Introspection result missing directive args: ${directiveIntrospectionStr}.`);
            }
            if (!directiveIntrospection.locations) {
              const directiveIntrospectionStr = (0, _inspect.inspect)(directiveIntrospection);
              throw new Error(`Introspection result missing directive locations: ${directiveIntrospectionStr}.`);
            }
            return new _directives.GraphQLDirective({
              name: directiveIntrospection.name,
              description: directiveIntrospection.description,
              isRepeatable: directiveIntrospection.isRepeatable,
              locations: directiveIntrospection.locations.slice(),
              args: buildInputValueDefMap(directiveIntrospection.args)
            });
          }
        }
      }, {
        "../jsutils/devAssert.mjs": 149,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/isObjectLike.mjs": 158,
        "../jsutils/keyValMap.mjs": 161,
        "../language/parser.mjs": 179,
        "../type/definition.mjs": 188,
        "../type/directives.mjs": 189,
        "../type/introspection.mjs": 191,
        "../type/scalars.mjs": 192,
        "../type/schema.mjs": 193,
        "./valueFromAST.mjs": 216
      }],
      200: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.coerceInputValue = coerceInputValue;
        var _didYouMean = require("../jsutils/didYouMean.mjs");
        var _inspect = require("../jsutils/inspect.mjs");
        var _invariant = require("../jsutils/invariant.mjs");
        var _isIterableObject = require("../jsutils/isIterableObject.mjs");
        var _isObjectLike = require("../jsutils/isObjectLike.mjs");
        var _Path = require("../jsutils/Path.mjs");
        var _printPathArray = require("../jsutils/printPathArray.mjs");
        var _suggestionList = require("../jsutils/suggestionList.mjs");
        var _GraphQLError = require("../error/GraphQLError.mjs");
        var _definition = require("../type/definition.mjs");
        /**
         * Coerces a JavaScript value given a GraphQL Input Type.
         */
        function coerceInputValue(inputValue, type, onError = defaultOnError) {
          return coerceInputValueImpl(inputValue, type, onError, undefined);
        }
        function defaultOnError(path, invalidValue, error) {
          let errorPrefix = 'Invalid value ' + (0, _inspect.inspect)(invalidValue);
          if (path.length > 0) {
            errorPrefix += ` at "value${(0, _printPathArray.printPathArray)(path)}"`;
          }
          error.message = errorPrefix + ': ' + error.message;
          throw error;
        }
        function coerceInputValueImpl(inputValue, type, onError, path) {
          if ((0, _definition.isNonNullType)(type)) {
            if (inputValue != null) {
              return coerceInputValueImpl(inputValue, type.ofType, onError, path);
            }
            onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Expected non-nullable type "${(0, _inspect.inspect)(type)}" not to be null.`));
            return;
          }
          if (inputValue == null) {
            // Explicitly return the value null.
            return null;
          }
          if ((0, _definition.isListType)(type)) {
            const itemType = type.ofType;
            if ((0, _isIterableObject.isIterableObject)(inputValue)) {
              return Array.from(inputValue, (itemValue, index) => {
                const itemPath = (0, _Path.addPath)(path, index, undefined);
                return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
              });
            } // Lists accept a non-list value as a list of one.

            return [coerceInputValueImpl(inputValue, itemType, onError, path)];
          }
          if ((0, _definition.isInputObjectType)(type)) {
            if (!(0, _isObjectLike.isObjectLike)(inputValue)) {
              onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Expected type "${type.name}" to be an object.`));
              return;
            }
            const coercedValue = {};
            const fieldDefs = type.getFields();
            for (const field of Object.values(fieldDefs)) {
              const fieldValue = inputValue[field.name];
              if (fieldValue === undefined) {
                if (field.defaultValue !== undefined) {
                  coercedValue[field.name] = field.defaultValue;
                } else if ((0, _definition.isNonNullType)(field.type)) {
                  const typeStr = (0, _inspect.inspect)(field.type);
                  onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Field "${field.name}" of required type "${typeStr}" was not provided.`));
                }
                continue;
              }
              coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, (0, _Path.addPath)(path, field.name, type.name));
            } // Ensure every provided field is defined.

            for (const fieldName of Object.keys(inputValue)) {
              if (!fieldDefs[fieldName]) {
                const suggestions = (0, _suggestionList.suggestionList)(fieldName, Object.keys(type.getFields()));
                onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Field "${fieldName}" is not defined by type "${type.name}".` + (0, _didYouMean.didYouMean)(suggestions)));
              }
            }
            return coercedValue;
          }
          if ((0, _definition.isLeafType)(type)) {
            let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),
            // which can throw to indicate failure. If it throws, maintain a reference
            // to the original error.

            try {
              parseResult = type.parseValue(inputValue);
            } catch (error) {
              if (error instanceof _GraphQLError.GraphQLError) {
                onError((0, _Path.pathToArray)(path), inputValue, error);
              } else {
                onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Expected type "${type.name}". ` + error.message, {
                  originalError: error
                }));
              }
              return;
            }
            if (parseResult === undefined) {
              onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Expected type "${type.name}".`));
            }
            return parseResult;
          }
          /* c8 ignore next 3 */
          // Not reachable, all possible types have been considered.

          false || (0, _invariant.invariant)(false, 'Unexpected input type: ' + (0, _inspect.inspect)(type));
        }
      }, {
        "../error/GraphQLError.mjs": 136,
        "../jsutils/Path.mjs": 148,
        "../jsutils/didYouMean.mjs": 150,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/invariant.mjs": 155,
        "../jsutils/isIterableObject.mjs": 157,
        "../jsutils/isObjectLike.mjs": 158,
        "../jsutils/printPathArray.mjs": 165,
        "../jsutils/suggestionList.mjs": 168,
        "../type/definition.mjs": 188
      }],
      201: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.concatAST = concatAST;
        var _kinds = require("../language/kinds.mjs");
        /**
         * Provided a collection of ASTs, presumably each from different files,
         * concatenate the ASTs together into batched AST, useful for validating many
         * GraphQL source files which together represent one conceptual application.
         */

        function concatAST(documents) {
          const definitions = [];
          for (const doc of documents) {
            definitions.push(...doc.definitions);
          }
          return {
            kind: _kinds.Kind.DOCUMENT,
            definitions
          };
        }
      }, {
        "../language/kinds.mjs": 176
      }],
      202: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.extendSchema = extendSchema;
        exports.extendSchemaImpl = extendSchemaImpl;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _inspect = require("../jsutils/inspect.mjs");
        var _invariant = require("../jsutils/invariant.mjs");
        var _keyMap = require("../jsutils/keyMap.mjs");
        var _mapValue = require("../jsutils/mapValue.mjs");
        var _kinds = require("../language/kinds.mjs");
        var _predicates = require("../language/predicates.mjs");
        var _definition = require("../type/definition.mjs");
        var _directives = require("../type/directives.mjs");
        var _introspection = require("../type/introspection.mjs");
        var _scalars = require("../type/scalars.mjs");
        var _schema = require("../type/schema.mjs");
        var _validate = require("../validation/validate.mjs");
        var _values = require("../execution/values.mjs");
        var _valueFromAST = require("./valueFromAST.mjs");
        /**
         * Produces a new schema given an existing schema and a document which may
         * contain GraphQL type extensions and definitions. The original schema will
         * remain unaltered.
         *
         * Because a schema represents a graph of references, a schema cannot be
         * extended without effectively making an entire copy. We do not know until it's
         * too late if subgraphs remain unchanged.
         *
         * This algorithm copies the provided schema, applying extensions while
         * producing the copy. The original schema remains unaltered.
         */
        function extendSchema(schema, documentAST, options) {
          (0, _schema.assertSchema)(schema);
          documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.devAssert)(false, 'Must provide valid Document AST.');
          if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
            (0, _validate.assertValidSDLExtension)(documentAST, schema);
          }
          const schemaConfig = schema.toConfig();
          const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
          return schemaConfig === extendedConfig ? schema : new _schema.GraphQLSchema(extendedConfig);
        }
        /**
         * @internal
         */

        function extendSchemaImpl(schemaConfig, documentAST, options) {
          var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;

          // Collect the type definitions and extensions found in the document.
          const typeDefs = [];
          const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can
          // have the same name. For example, a type named "skip".

          const directiveDefs = [];
          let schemaDef; // Schema extensions are collected which may add additional operation types.

          const schemaExtensions = [];
          for (const def of documentAST.definitions) {
            if (def.kind === _kinds.Kind.SCHEMA_DEFINITION) {
              schemaDef = def;
            } else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION) {
              schemaExtensions.push(def);
            } else if ((0, _predicates.isTypeDefinitionNode)(def)) {
              typeDefs.push(def);
            } else if ((0, _predicates.isTypeExtensionNode)(def)) {
              const extendedTypeName = def.name.value;
              const existingTypeExtensions = typeExtensionsMap[extendedTypeName];
              typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
            } else if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
              directiveDefs.push(def);
            }
          } // If this document contains no new types, extensions, or directives then
          // return the same unmodified GraphQLSchema instance.

          if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {
            return schemaConfig;
          }
          const typeMap = Object.create(null);
          for (const existingType of schemaConfig.types) {
            typeMap[existingType.name] = extendNamedType(existingType);
          }
          for (const typeNode of typeDefs) {
            var _stdTypeMap$name;
            const name = typeNode.name.value;
            typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
          }
          const operationTypes = {
            // Get the extended root operation types.
            query: schemaConfig.query && replaceNamedType(schemaConfig.query),
            mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
            subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),
            // Then, incorporate schema definition and all schema extensions.
            ...(schemaDef && getOperationTypes([schemaDef])),
            ...getOperationTypes(schemaExtensions)
          }; // Then produce and return a Schema config with these types.

          return {
            description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value,
            ...operationTypes,
            types: Object.values(typeMap),
            directives: [...schemaConfig.directives.map(replaceDirective), ...directiveDefs.map(buildDirective)],
            extensions: Object.create(null),
            astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
            extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
            assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
          }; // Below are functions used for producing this schema that have closed over
          // this scope and have access to the schema, cache, and newly defined types.

          function replaceType(type) {
            if ((0, _definition.isListType)(type)) {
              // @ts-expect-error
              return new _definition.GraphQLList(replaceType(type.ofType));
            }
            if ((0, _definition.isNonNullType)(type)) {
              // @ts-expect-error
              return new _definition.GraphQLNonNull(replaceType(type.ofType));
            } // @ts-expect-error FIXME

            return replaceNamedType(type);
          }
          function replaceNamedType(type) {
            // Note: While this could make early assertions to get the correctly
            // typed values, that would throw immediately while type system
            // validation with validateSchema() will produce more actionable results.
            return typeMap[type.name];
          }
          function replaceDirective(directive) {
            const config = directive.toConfig();
            return new _directives.GraphQLDirective({
              ...config,
              args: (0, _mapValue.mapValue)(config.args, extendArg)
            });
          }
          function extendNamedType(type) {
            if ((0, _introspection.isIntrospectionType)(type) || (0, _scalars.isSpecifiedScalarType)(type)) {
              // Builtin types are not extended.
              return type;
            }
            if ((0, _definition.isScalarType)(type)) {
              return extendScalarType(type);
            }
            if ((0, _definition.isObjectType)(type)) {
              return extendObjectType(type);
            }
            if ((0, _definition.isInterfaceType)(type)) {
              return extendInterfaceType(type);
            }
            if ((0, _definition.isUnionType)(type)) {
              return extendUnionType(type);
            }
            if ((0, _definition.isEnumType)(type)) {
              return extendEnumType(type);
            }
            if ((0, _definition.isInputObjectType)(type)) {
              return extendInputObjectType(type);
            }
            /* c8 ignore next 3 */
            // Not reachable, all possible type definition nodes have been considered.

            false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));
          }
          function extendInputObjectType(type) {
            var _typeExtensionsMap$co;
            const config = type.toConfig();
            const extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
            return new _definition.GraphQLInputObjectType({
              ...config,
              fields: () => ({
                ...(0, _mapValue.mapValue)(config.fields, field => ({
                  ...field,
                  type: replaceType(field.type)
                })),
                ...buildInputFieldMap(extensions)
              }),
              extensionASTNodes: config.extensionASTNodes.concat(extensions)
            });
          }
          function extendEnumType(type) {
            var _typeExtensionsMap$ty;
            const config = type.toConfig();
            const extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
            return new _definition.GraphQLEnumType({
              ...config,
              values: {
                ...config.values,
                ...buildEnumValueMap(extensions)
              },
              extensionASTNodes: config.extensionASTNodes.concat(extensions)
            });
          }
          function extendScalarType(type) {
            var _typeExtensionsMap$co2;
            const config = type.toConfig();
            const extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
            let specifiedByURL = config.specifiedByURL;
            for (const extensionNode of extensions) {
              var _getSpecifiedByURL;
              specifiedByURL = (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null && _getSpecifiedByURL !== void 0 ? _getSpecifiedByURL : specifiedByURL;
            }
            return new _definition.GraphQLScalarType({
              ...config,
              specifiedByURL,
              extensionASTNodes: config.extensionASTNodes.concat(extensions)
            });
          }
          function extendObjectType(type) {
            var _typeExtensionsMap$co3;
            const config = type.toConfig();
            const extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
            return new _definition.GraphQLObjectType({
              ...config,
              interfaces: () => [...type.getInterfaces().map(replaceNamedType), ...buildInterfaces(extensions)],
              fields: () => ({
                ...(0, _mapValue.mapValue)(config.fields, extendField),
                ...buildFieldMap(extensions)
              }),
              extensionASTNodes: config.extensionASTNodes.concat(extensions)
            });
          }
          function extendInterfaceType(type) {
            var _typeExtensionsMap$co4;
            const config = type.toConfig();
            const extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
            return new _definition.GraphQLInterfaceType({
              ...config,
              interfaces: () => [...type.getInterfaces().map(replaceNamedType), ...buildInterfaces(extensions)],
              fields: () => ({
                ...(0, _mapValue.mapValue)(config.fields, extendField),
                ...buildFieldMap(extensions)
              }),
              extensionASTNodes: config.extensionASTNodes.concat(extensions)
            });
          }
          function extendUnionType(type) {
            var _typeExtensionsMap$co5;
            const config = type.toConfig();
            const extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
            return new _definition.GraphQLUnionType({
              ...config,
              types: () => [...type.getTypes().map(replaceNamedType), ...buildUnionTypes(extensions)],
              extensionASTNodes: config.extensionASTNodes.concat(extensions)
            });
          }
          function extendField(field) {
            return {
              ...field,
              type: replaceType(field.type),
              args: field.args && (0, _mapValue.mapValue)(field.args, extendArg)
            };
          }
          function extendArg(arg) {
            return {
              ...arg,
              type: replaceType(arg.type)
            };
          }
          function getOperationTypes(nodes) {
            const opTypes = {};
            for (const node of nodes) {
              var _node$operationTypes;

              // FIXME: https://github.com/graphql/graphql-js/issues/2203
              const operationTypesNodes = /* c8 ignore next */
              (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
              for (const operationType of operationTypesNodes) {
                // Note: While this could make early assertions to get the correctly
                // typed values below, that would throw immediately while type system
                // validation with validateSchema() will produce more actionable results.
                // @ts-expect-error
                opTypes[operationType.operation] = getNamedType(operationType.type);
              }
            }
            return opTypes;
          }
          function getNamedType(node) {
            var _stdTypeMap$name2;
            const name = node.name.value;
            const type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];
            if (type === undefined) {
              throw new Error(`Unknown type: "${name}".`);
            }
            return type;
          }
          function getWrappedType(node) {
            if (node.kind === _kinds.Kind.LIST_TYPE) {
              return new _definition.GraphQLList(getWrappedType(node.type));
            }
            if (node.kind === _kinds.Kind.NON_NULL_TYPE) {
              return new _definition.GraphQLNonNull(getWrappedType(node.type));
            }
            return getNamedType(node);
          }
          function buildDirective(node) {
            var _node$description;
            return new _directives.GraphQLDirective({
              name: node.name.value,
              description: (_node$description = node.description) === null || _node$description === void 0 ? void 0 : _node$description.value,
              // @ts-expect-error
              locations: node.locations.map(({
                value
              }) => value),
              isRepeatable: node.repeatable,
              args: buildArgumentMap(node.arguments),
              astNode: node
            });
          }
          function buildFieldMap(nodes) {
            const fieldConfigMap = Object.create(null);
            for (const node of nodes) {
              var _node$fields;

              // FIXME: https://github.com/graphql/graphql-js/issues/2203
              const nodeFields = /* c8 ignore next */
              (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
              for (const field of nodeFields) {
                var _field$description;
                fieldConfigMap[field.name.value] = {
                  // Note: While this could make assertions to get the correctly typed
                  // value, that would throw immediately while type system validation
                  // with validateSchema() will produce more actionable results.
                  type: getWrappedType(field.type),
                  description: (_field$description = field.description) === null || _field$description === void 0 ? void 0 : _field$description.value,
                  args: buildArgumentMap(field.arguments),
                  deprecationReason: getDeprecationReason(field),
                  astNode: field
                };
              }
            }
            return fieldConfigMap;
          }
          function buildArgumentMap(args) {
            // FIXME: https://github.com/graphql/graphql-js/issues/2203
            const argsNodes = /* c8 ignore next */
            args !== null && args !== void 0 ? args : [];
            const argConfigMap = Object.create(null);
            for (const arg of argsNodes) {
              var _arg$description;

              // Note: While this could make assertions to get the correctly typed
              // value, that would throw immediately while type system validation
              // with validateSchema() will produce more actionable results.
              const type = getWrappedType(arg.type);
              argConfigMap[arg.name.value] = {
                type,
                description: (_arg$description = arg.description) === null || _arg$description === void 0 ? void 0 : _arg$description.value,
                defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),
                deprecationReason: getDeprecationReason(arg),
                astNode: arg
              };
            }
            return argConfigMap;
          }
          function buildInputFieldMap(nodes) {
            const inputFieldMap = Object.create(null);
            for (const node of nodes) {
              var _node$fields2;

              // FIXME: https://github.com/graphql/graphql-js/issues/2203
              const fieldsNodes = /* c8 ignore next */
              (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];
              for (const field of fieldsNodes) {
                var _field$description2;

                // Note: While this could make assertions to get the correctly typed
                // value, that would throw immediately while type system validation
                // with validateSchema() will produce more actionable results.
                const type = getWrappedType(field.type);
                inputFieldMap[field.name.value] = {
                  type,
                  description: (_field$description2 = field.description) === null || _field$description2 === void 0 ? void 0 : _field$description2.value,
                  defaultValue: (0, _valueFromAST.valueFromAST)(field.defaultValue, type),
                  deprecationReason: getDeprecationReason(field),
                  astNode: field
                };
              }
            }
            return inputFieldMap;
          }
          function buildEnumValueMap(nodes) {
            const enumValueMap = Object.create(null);
            for (const node of nodes) {
              var _node$values;

              // FIXME: https://github.com/graphql/graphql-js/issues/2203
              const valuesNodes = /* c8 ignore next */
              (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
              for (const value of valuesNodes) {
                var _value$description;
                enumValueMap[value.name.value] = {
                  description: (_value$description = value.description) === null || _value$description === void 0 ? void 0 : _value$description.value,
                  deprecationReason: getDeprecationReason(value),
                  astNode: value
                };
              }
            }
            return enumValueMap;
          }
          function buildInterfaces(nodes) {
            // Note: While this could make assertions to get the correctly typed
            // values below, that would throw immediately while type system
            // validation with validateSchema() will produce more actionable results.
            // @ts-expect-error
            return nodes.flatMap(
            // FIXME: https://github.com/graphql/graphql-js/issues/2203
            node => {
              var _node$interfaces$map, _node$interfaces;
              return (/* c8 ignore next */
                (_node$interfaces$map = (_node$interfaces = node.interfaces) === null || _node$interfaces === void 0 ? void 0 : _node$interfaces.map(getNamedType)) !== null && _node$interfaces$map !== void 0 ? _node$interfaces$map : []
              );
            });
          }
          function buildUnionTypes(nodes) {
            // Note: While this could make assertions to get the correctly typed
            // values below, that would throw immediately while type system
            // validation with validateSchema() will produce more actionable results.
            // @ts-expect-error
            return nodes.flatMap(
            // FIXME: https://github.com/graphql/graphql-js/issues/2203
            node => {
              var _node$types$map, _node$types;
              return (/* c8 ignore next */
                (_node$types$map = (_node$types = node.types) === null || _node$types === void 0 ? void 0 : _node$types.map(getNamedType)) !== null && _node$types$map !== void 0 ? _node$types$map : []
              );
            });
          }
          function buildType(astNode) {
            var _typeExtensionsMap$na;
            const name = astNode.name.value;
            const extensionASTNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];
            switch (astNode.kind) {
              case _kinds.Kind.OBJECT_TYPE_DEFINITION:
                {
                  var _astNode$description;
                  const allNodes = [astNode, ...extensionASTNodes];
                  return new _definition.GraphQLObjectType({
                    name,
                    description: (_astNode$description = astNode.description) === null || _astNode$description === void 0 ? void 0 : _astNode$description.value,
                    interfaces: () => buildInterfaces(allNodes),
                    fields: () => buildFieldMap(allNodes),
                    astNode,
                    extensionASTNodes
                  });
                }
              case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
                {
                  var _astNode$description2;
                  const allNodes = [astNode, ...extensionASTNodes];
                  return new _definition.GraphQLInterfaceType({
                    name,
                    description: (_astNode$description2 = astNode.description) === null || _astNode$description2 === void 0 ? void 0 : _astNode$description2.value,
                    interfaces: () => buildInterfaces(allNodes),
                    fields: () => buildFieldMap(allNodes),
                    astNode,
                    extensionASTNodes
                  });
                }
              case _kinds.Kind.ENUM_TYPE_DEFINITION:
                {
                  var _astNode$description3;
                  const allNodes = [astNode, ...extensionASTNodes];
                  return new _definition.GraphQLEnumType({
                    name,
                    description: (_astNode$description3 = astNode.description) === null || _astNode$description3 === void 0 ? void 0 : _astNode$description3.value,
                    values: buildEnumValueMap(allNodes),
                    astNode,
                    extensionASTNodes
                  });
                }
              case _kinds.Kind.UNION_TYPE_DEFINITION:
                {
                  var _astNode$description4;
                  const allNodes = [astNode, ...extensionASTNodes];
                  return new _definition.GraphQLUnionType({
                    name,
                    description: (_astNode$description4 = astNode.description) === null || _astNode$description4 === void 0 ? void 0 : _astNode$description4.value,
                    types: () => buildUnionTypes(allNodes),
                    astNode,
                    extensionASTNodes
                  });
                }
              case _kinds.Kind.SCALAR_TYPE_DEFINITION:
                {
                  var _astNode$description5;
                  return new _definition.GraphQLScalarType({
                    name,
                    description: (_astNode$description5 = astNode.description) === null || _astNode$description5 === void 0 ? void 0 : _astNode$description5.value,
                    specifiedByURL: getSpecifiedByURL(astNode),
                    astNode,
                    extensionASTNodes
                  });
                }
              case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
                {
                  var _astNode$description6;
                  const allNodes = [astNode, ...extensionASTNodes];
                  return new _definition.GraphQLInputObjectType({
                    name,
                    description: (_astNode$description6 = astNode.description) === null || _astNode$description6 === void 0 ? void 0 : _astNode$description6.value,
                    fields: () => buildInputFieldMap(allNodes),
                    astNode,
                    extensionASTNodes
                  });
                }
            }
          }
        }
        const stdTypeMap = (0, _keyMap.keyMap)([..._scalars.specifiedScalarTypes, ..._introspection.introspectionTypes], type => type.name);
        /**
         * Given a field or enum value node, returns the string value for the
         * deprecation reason.
         */

        function getDeprecationReason(node) {
          const deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`

          return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
        }
        /**
         * Given a scalar node, returns the string value for the specifiedByURL.
         */

        function getSpecifiedByURL(node) {
          const specifiedBy = (0, _values.getDirectiveValues)(_directives.GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`

          return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
        }
      }, {
        "../execution/values.mjs": 145,
        "../jsutils/devAssert.mjs": 149,
        "../jsutils/inspect.mjs": 153,
        "../jsutils/invariant.mjs": 155,
        "../jsutils/keyMap.mjs": 160,
        "../jsutils/mapValue.mjs": 162,
        "../language/kinds.mjs": 176,
        "../language/predicates.mjs": 180,
        "../type/definition.mjs": 188,
        "../type/directives.mjs": 189,
        "../type/introspection.mjs": 191,
        "../type/scalars.mjs": 192,
        "../type/schema.mjs": 193,
        "../validation/validate.mjs": 257,
        "./valueFromAST.mjs": 216
      }],
      203: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DangerousChangeType = exports.BreakingChangeType = void 0;
        exports.findBreakingChanges = findBreakingChanges;
        exports.findDangerousChanges = findDangerousChanges;
        var _inspect = require("../jsutils/inspect.mjs");
        var _invariant = require("../jsutils/invariant.mjs");
        var _keyMap = require("../jsutils/keyMap.mjs");
        var _printer = require("../language/printer.mjs");
        var _definition = require("../type/definition.mjs");
        var _scalars = require("../type/scalars.mjs");
        var _astFromValue = require("./astFromValue.mjs");
        var _sortValueNode = require("./sortValueNode.mjs");
        var BreakingChangeType;
        (function (BreakingChangeType) {
          BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';
          BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';
          BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';
          BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';
          BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] = 'REQUIRED_INPUT_FIELD_ADDED';
          BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] = 'IMPLEMENTED_INTERFACE_REMOVED';
          BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';
          BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';
          BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';
          BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';
          BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';
          BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';
          BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';
          BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] = 'REQUIRED_DIRECTIVE_ARG_ADDED';
          BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] = 'DIRECTIVE_REPEATABLE_REMOVED';
          BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] = 'DIRECTIVE_LOCATION_REMOVED';
        })(BreakingChangeType || (exports.BreakingChangeType = BreakingChangeType = {}));
        var DangerousChangeType;
        (function (DangerousChangeType) {
          DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';
          DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';
          DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] = 'OPTIONAL_INPUT_FIELD_ADDED';
          DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';
          DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] = 'IMPLEMENTED_INTERFACE_ADDED';
          DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';
        })(DangerousChangeType || (exports.DangerousChangeType = DangerousChangeType = {}));
        /**
         * Given two schemas, returns an Array containing descriptions of all the types
         * of breaking changes covered by the other functions down below.
         */
        function findBreakingChanges(oldSchema, newSchema) {
          // @ts-expect-error
          return findSchemaChanges(oldSchema, newSchema).filter(change => change.type in BreakingChangeType);
        }
        /**
         * Given two schemas, returns an Array containing descriptions of all the types
         * of potentially dangerous changes covered by the other functions down below.
         */

        function findDangerousChanges(oldSchema, newSchema) {
          // @ts-expect-error
          return findSchemaChanges(oldSchema, newSchema).filter(change => change.type in DangerousChangeType);
        }
        function findSchemaChanges(oldSchema, newSchema) {
          return [...findTypeChanges(oldSchema, newSchema), ...findDirectiveChanges(oldSchema, newSchema)];
        }
        function findDirectiveChanges(oldSchema, newSchema) {
          const schemaChanges = [];
          const directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());
          for (const oldDirective of directivesDiff.removed) {
            schemaChanges.push({
              type: BreakingChangeType.DIRECTIVE_REMOVED,
              description: `${oldDirective.name} was removed.`
            });
          }
          for (const [oldDirective, newDirective] of directivesDiff.persisted) {
            const argsDiff = diff(oldDirective.args, newDirective.args);
            for (const newArg of argsDiff.added) {
              if ((0, _definition.isRequiredArgument)(newArg)) {
                schemaChanges.push({
                  type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
                  description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`
                });
              }
            }
            for (const oldArg of argsDiff.removed) {
              schemaChanges.push({
                type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
                description: `${oldArg.name} was removed from ${oldDirective.name}.`
              });
            }
            if (oldDirective.isRepeatable && !newDirective.isRepeatable) {
              schemaChanges.push({
                type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
                description: `Repeatable flag was removed from ${oldDirective.name}.`
              });
            }
            for (const location of oldDirective.locations) {
              if (!newDirective.locations.includes(location)) {
                schemaChanges.push({
                  type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
                  description: `${location} was removed from ${oldDirective.name}.`
                });
              }
            }
          }
          return schemaChanges;
        }
        function findTypeChanges(oldSchema, newSchema) {
          const schemaChanges = [];
          const typesDiff = diff(Object.values(oldSchema.getTypeMap()), Object.values(newSchema.getTypeMap()));
          for (const oldType of typesDiff.removed) {
            schemaChanges.push({
              type: BreakingChangeType.TYPE_REMOVED,
              description: (0, _scalars.isSpecifiedScalarType)(oldType) ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.` : `${oldType.name} was removed.`
            });
          }
          for (const [oldType, newType] of typesDiff.persisted) {
            if ((0, _definition.isEnumType)(oldType) && (0, _definition.isEnumType)(newType)) {
              schemaChanges.push(...findEnumTypeChanges(oldType, newType));
            } else if ((0, _definition.isUnionType)(oldType) && (0, _definition.isUnionType)(newType)) {
              schemaChanges.push(...findUnionTypeChanges(oldType, newType));
            } else if ((0, _definition.isInputObjectType)(oldType) && (0, _definition.isInputObjectType)(newType)) {
              schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));
            } else if ((0, _definition.isObjectType)(oldType) && (0, _definition.isObjectType)(newType)) {
              schemaChanges.push(...findFieldChanges(oldType, newType), ...findImplementedInterfacesChanges(oldType, newType));
            } else if ((0, _definition.isInterfaceType)(oldType) && (0, _definition.isInterfaceType)(newType)) {
              schemaChanges.push(...findFieldChanges(oldType, newType), ...findImplementedInterfacesChanges(oldType, newType));
            } else if (oldType.constructor !== newType.constructor) {
              schemaChanges.push({
                type: BreakingChangeType.TYPE_CHANGED_KIND,
                description: `${oldType.name} changed from ` + `${typeKindName(oldType)} to ${typeKindName(newType)}.`
              });
            }
          }
          return schemaChanges;
        }
        function findInputObjectTypeChanges(oldType, newType) {
          const schemaChanges = [];
          const fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));
          for (const newField of fieldsDiff.added) {
            if ((0, _definition.isRequiredInputField)(newField)) {
              schemaChanges.push({
                type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
                description: `A required field ${newField.name} on input type ${oldType.name} was added.`
              });
            } else {
              schemaChanges.push({
                type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
                description: `An optional field ${newField.name} on input type ${oldType.name} was added.`
              });
            }
          }
          for (const oldField of fieldsDiff.removed) {
            schemaChanges.push({
              type: BreakingChangeType.FIELD_REMOVED,
              description: `${oldType.name}.${oldField.name} was removed.`
            });
          }
          for (const [oldField, newField] of fieldsDiff.persisted) {
            const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldField.type, newField.type);
            if (!isSafe) {
              schemaChanges.push({
                type: BreakingChangeType.FIELD_CHANGED_KIND,
                description: `${oldType.name}.${oldField.name} changed type from ` + `${String(oldField.type)} to ${String(newField.type)}.`
              });
            }
          }
          return schemaChanges;
        }
        function findUnionTypeChanges(oldType, newType) {
          const schemaChanges = [];
          const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());
          for (const newPossibleType of possibleTypesDiff.added) {
            schemaChanges.push({
              type: DangerousChangeType.TYPE_ADDED_TO_UNION,
              description: `${newPossibleType.name} was added to union type ${oldType.name}.`
            });
          }
          for (const oldPossibleType of possibleTypesDiff.removed) {
            schemaChanges.push({
              type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
              description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`
            });
          }
          return schemaChanges;
        }
        function findEnumTypeChanges(oldType, newType) {
          const schemaChanges = [];
          const valuesDiff = diff(oldType.getValues(), newType.getValues());
          for (const newValue of valuesDiff.added) {
            schemaChanges.push({
              type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
              description: `${newValue.name} was added to enum type ${oldType.name}.`
            });
          }
          for (const oldValue of valuesDiff.removed) {
            schemaChanges.push({
              type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
              description: `${oldValue.name} was removed from enum type ${oldType.name}.`
            });
          }
          return schemaChanges;
        }
        function findImplementedInterfacesChanges(oldType, newType) {
          const schemaChanges = [];
          const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());
          for (const newInterface of interfacesDiff.added) {
            schemaChanges.push({
              type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
              description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`
            });
          }
          for (const oldInterface of interfacesDiff.removed) {
            schemaChanges.push({
              type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
              description: `${oldType.name} no longer implements interface ${oldInterface.name}.`
            });
          }
          return schemaChanges;
        }
        function findFieldChanges(oldType, newType) {
          const schemaChanges = [];
          const fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));
          for (const oldField of fieldsDiff.removed) {
            schemaChanges.push({
              type: BreakingChangeType.FIELD_REMOVED,
              description: `${oldType.name}.${oldField.name} was removed.`
            });
          }
          for (const [oldField, newField] of fieldsDiff.persisted) {
            schemaChanges.push(...findArgChanges(oldType, oldField, newField));
            const isSafe = isChangeSafeForObjectOrInterfaceField(oldField.type, newField.type);
            if (!isSafe) {
              schemaChanges.push({
                type: BreakingChangeType.FIELD_CHANGED_KIND,
                description: `${oldType.name}.${oldField.name} changed type from ` + `${String(oldField.type)} to ${String(newField.type)}.`
              });
            }
          }
          return schemaChanges;
        }
        function findArgChanges(oldType, oldField, newField) {
          const schemaChanges = [];
          const argsDiff = diff(oldField.args, newField.args);
          for (const oldArg of argsDiff.removed) {
            schemaChanges.push({
              type: BreakingChangeType.ARG_REMOVED,
              description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`
            });
          }
          for (const [oldArg, newArg] of argsDiff.persisted) {
            const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArg.type, newArg.type);
            if (!isSafe) {
              schemaChanges.push({
                type: BreakingChangeType.ARG_CHANGED_KIND,
                description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` + `${String(oldArg.type)} to ${String(newArg.type)}.`
              });
            } else if (oldArg.defaultValue !== undefined) {
              if (newArg.defaultValue === undefined) {
                schemaChanges.push({
                  type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                  description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`
                });
              } else {
                // Since we looking only for client's observable changes we should
                // compare default values in the same representation as they are
                // represented inside introspection.
                const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);
                const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);
                if (oldValueStr !== newValueStr) {
                  schemaChanges.push({
                    type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                    description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`
                  });
                }
              }
            }
          }
          for (const newArg of argsDiff.added) {
            if ((0, _definition.isRequiredArgument)(newArg)) {
              schemaChanges.push({
                type: BreakingChangeType.REQUIRED_ARG_ADDED,
                description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`
              });
            } else {
              schemaChanges.push({
                type: DangerousChangeType.OPTIONAL_ARG_ADDED,
                description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`
              });
            }
          }
          return schemaChanges;
        }
        function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
          if ((0, _definition.isListType)(oldType)) {
            return (
              // if they're both lists, make sure the underlying types are compatible
              (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||
              // moving from nullable to non-null of the same underlying type is safe
              (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
            );
          }
          if ((0, _definition.isNonNullType)(oldType)) {
            // if they're both non-null, make sure the underlying types are compatible
            return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
          }
          return (
            // if they're both named types, see if their names are equivalent
            (0, _definition.isNamedType)(newType) && oldType.name === newType.name ||
            // moving from nullable to non-null of the same underlying type is safe
            (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
          );
        }
        function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
          if ((0, _definition.isListType)(oldType)) {
            // if they're both lists, make sure the underlying types are compatible
            return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
          }
          if ((0, _definition.isNonNullType)(oldType)) {
            return (
              // if they're both non-null, make sure the underlying types are
              // compatible
              (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||
              // moving from non-null to nullable of the same underlying type is safe
              !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)
            );
          } // if they're both named types, see if their names are equivalent

          return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
        }
        function typeKindName(type) {
          if ((0, _definition.isScalarType)(type)) {
            return 'a Scalar type';
          }
          if ((0, _definition.isObjectType)(type)) {
            return 'an Object type';
          }
          if ((0, _definition.isInterfaceType)(type)) {
            return 'an Interface type';
          }
          if ((0, _definition.isUnionType)(type)) {
            return 'a Union type';
          }
          if ((0, _definition.isEnumType)(type)) {
            return 'an Enum type';
          }
          if ((0, _definition.isInputObjectType)(type)) {
            return 'an Input type';
          }
          /* c8 ignore next 3 */
          // Not reachable, all possible types have been considered.

          false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));
        }
        function stringifyValue(value, type) {
          const ast = (0, _astFromValue.astFromValue)(value, type);
          ast != null || (0, _invariant.invariant)(false);
          return (0, _printer.print)((0, _sortValueNode.sortValueNode)(ast));
        }
        function diff(oldArray, newArray) {
          const added = [];
          const removed = [];
          const persisted = [];
          const oldMap = (0, _keyMap.keyMap)(oldArray, ({
            name
          }) => name);
          const newMap = (0, _keyMap.keyMap)(newArray, ({
            name
          }) => name);
          for (const oldItem of oldArray) {
            const newItem = newMap[oldItem.name];
            if (newItem === undefined) {
              removed.push(oldItem);
            } else {
              persisted.push([oldItem, newItem]);
            }
          }
          for (const newItem of newArray) {
            if (oldMap[newItem.name] === undefined) {
              added.push(newItem);
            }
          }
          return {
            added,
            persisted,
            removed
          };
        }
      }, {
        "../jsutils/inspect.mjs": 153,
        "../jsutils/invariant.mjs": 155,
        "../jsutils/keyMap.mjs": 160,
        "../language/printer.mjs": 183,
        "../type/definition.mjs": 188,
        "../type/scalars.mjs": 192,
        "./astFromValue.mjs": 197,
        "./sortValueNode.mjs": 212
      }],
      204: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getIntrospectionQuery = getIntrospectionQuery;
        /**
         * Produce the GraphQL query recommended for a full schema introspection.
         * Accepts optional IntrospectionOptions.
         */
        function getIntrospectionQuery(options) {
          const optionsWithDefault = {
            descriptions: true,
            specifiedByUrl: false,
            directiveIsRepeatable: false,
            schemaDescription: false,
            inputValueDeprecation: false,
            ...options
          };
          const descriptions = optionsWithDefault.descriptions ? 'description' : '';
          const specifiedByUrl = optionsWithDefault.specifiedByUrl ? 'specifiedByURL' : '';
          const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? 'isRepeatable' : '';
          const schemaDescription = optionsWithDefault.schemaDescription ? descriptions : '';
          function inputDeprecation(str) {
            return optionsWithDefault.inputValueDeprecation ? str : '';
          }
          return `
    query IntrospectionQuery {
      __schema {
        ${schemaDescription}
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          ${descriptions}
          ${directiveIsRepeatable}
          locations
          args${inputDeprecation('(includeDeprecated: true)')} {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      ${descriptions}
      ${specifiedByUrl}
      fields(includeDeprecated: true) {
        name
        ${descriptions}
        args${inputDeprecation('(includeDeprecated: true)')} {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields${inputDeprecation('(includeDeprecated: true)')} {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        ${descriptions}
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      ${descriptions}
      type { ...TypeRef }
      defaultValue
      ${inputDeprecation('isDeprecated')}
      ${inputDeprecation('deprecationReason')}
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  `;
        }
      }, {}],
      205: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getOperationAST = getOperationAST;
        var _kinds = require("../language/kinds.mjs");
        /**
         * Returns an operation AST given a document AST and optionally an operation
         * name. If a name is not provided, an operation is only returned if only one is
         * provided in the document.
         */

        function getOperationAST(documentAST, operationName) {
          let operation = null;
          for (const definition of documentAST.definitions) {
            if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
              var _definition$name;
              if (operationName == null) {
                // If no operation name was provided, only return an Operation if there
                // is one defined in the document. Upon encountering the second, return
                // null.
                if (operation) {
                  return null;
                }
                operation = definition;
              } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
                return definition;
              }
            }
          }
          return operation;
        }
      }, {
        "../language/kinds.mjs": 176
      }],
      206: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getOperationRootType = getOperationRootType;
        var _GraphQLError = require("../error/GraphQLError.mjs");
        /**
         * Extracts the root type of the operation from the schema.
         *
         * @deprecated Please use `GraphQLSchema.getRootType` instead. Will be removed in v17
         */
        function getOperationRootType(schema, operation) {
          if (operation.operation === 'query') {
            const queryType = schema.getQueryType();
            if (!queryType) {
              throw new _GraphQLError.GraphQLError('Schema does not define the required query root type.', {
                nodes: operation
              });
            }
            return queryType;
          }
          if (operation.operation === 'mutation') {
            const mutationType = schema.getMutationType();
            if (!mutationType) {
              throw new _GraphQLError.GraphQLError('Schema is not configured for mutations.', {
                nodes: operation
              });
            }
            return mutationType;
          }
          if (operation.operation === 'subscription') {
            const subscriptionType = schema.getSubscriptionType();
            if (!subscriptionType) {
              throw new _GraphQLError.GraphQLError('Schema is not configured for subscriptions.', {
                nodes: operation
              });
            }
            return subscriptionType;
          }
          throw new _GraphQLError.GraphQLError('Can only have query, mutation and subscription operations.', {
            nodes: operation
          });
        }
      }, {
        "../error/GraphQLError.mjs": 136
      }],
      207: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "BreakingChangeType", {
          enumerable: true,
          get: function () {
            return _findBreakingChanges.BreakingChangeType;
          }
        });
        Object.defineProperty(exports, "DangerousChangeType", {
          enumerable: true,
          get: function () {
            return _findBreakingChanges.DangerousChangeType;
          }
        });
        Object.defineProperty(exports, "TypeInfo", {
          enumerable: true,
          get: function () {
            return _TypeInfo.TypeInfo;
          }
        });
        Object.defineProperty(exports, "assertValidName", {
          enumerable: true,
          get: function () {
            return _assertValidName.assertValidName;
          }
        });
        Object.defineProperty(exports, "astFromValue", {
          enumerable: true,
          get: function () {
            return _astFromValue.astFromValue;
          }
        });
        Object.defineProperty(exports, "buildASTSchema", {
          enumerable: true,
          get: function () {
            return _buildASTSchema.buildASTSchema;
          }
        });
        Object.defineProperty(exports, "buildClientSchema", {
          enumerable: true,
          get: function () {
            return _buildClientSchema.buildClientSchema;
          }
        });
        Object.defineProperty(exports, "buildSchema", {
          enumerable: true,
          get: function () {
            return _buildASTSchema.buildSchema;
          }
        });
        Object.defineProperty(exports, "coerceInputValue", {
          enumerable: true,
          get: function () {
            return _coerceInputValue.coerceInputValue;
          }
        });
        Object.defineProperty(exports, "concatAST", {
          enumerable: true,
          get: function () {
            return _concatAST.concatAST;
          }
        });
        Object.defineProperty(exports, "doTypesOverlap", {
          enumerable: true,
          get: function () {
            return _typeComparators.doTypesOverlap;
          }
        });
        Object.defineProperty(exports, "extendSchema", {
          enumerable: true,
          get: function () {
            return _extendSchema.extendSchema;
          }
        });
        Object.defineProperty(exports, "findBreakingChanges", {
          enumerable: true,
          get: function () {
            return _findBreakingChanges.findBreakingChanges;
          }
        });
        Object.defineProperty(exports, "findDangerousChanges", {
          enumerable: true,
          get: function () {
            return _findBreakingChanges.findDangerousChanges;
          }
        });
        Object.defineProperty(exports, "getIntrospectionQuery", {
          enumerable: true,
          get: function () {
            return _getIntrospectionQuery.getIntrospectionQuery;
          }
        });
        Object.defineProperty(exports, "getOperationAST", {
          enumerable: true,
          get: function () {
            return _getOperationAST.getOperationAST;
          }
        });
        Object.defineProperty(exports, "getOperationRootType", {
          enumerable: true,
          get: function () {
            return _getOperationRootType.getOperationRootType;
          }
        });
        Object.defineProperty(exports, "introspectionFromSchema", {
          enumerable: true,
          get: function () {
            return _introspectionFromSchema.introspectionFromSchema;
          }
        });
        Object.defineProperty(exports, "isEqualType", {
          enumerable: true,
          get: function () {
            return _typeComparators.isEqualType;
          }
        });
        Object.defineProperty(exports, "isTypeSubTypeOf", {
          enumerable: true,
          get: function () {
            return _typeComparators.isTypeSubTypeOf;
          }
        });
        Object.defineProperty(exports, "isValidNameError", {
          enumerable: true,
          get: function () {
            return _assertValidName.isValidNameError;
          }
        });
        Object.defineProperty(exports, "lexicographicSortSchema", {
          enumerable: true,
          get: function () {
            return _lexicographicSortSchema.lexicographicSortSchema;
          }
        });
        Object.defineProperty(exports, "printIntrospectionSchema", {
          enumerable: true,
          get: function () {
            return _printSchema.printIntrospectionSchema;
          }
        });
        Object.defineProperty(exports, "printSchema", {
          enumerable: true,
          get: function () {
            return _printSchema.printSchema;
          }
        });
        Object.defineProperty(exports, "printType", {
          enumerable: true,
          get: function () {
            return _printSchema.printType;
          }
        });
        Object.defineProperty(exports, "separateOperations", {
          enumerable: true,
          get: function () {
            return _separateOperations.separateOperations;
          }
        });
        Object.defineProperty(exports, "stripIgnoredCharacters", {
          enumerable: true,
          get: function () {
            return _stripIgnoredCharacters.stripIgnoredCharacters;
          }
        });
        Object.defineProperty(exports, "typeFromAST", {
          enumerable: true,
          get: function () {
            return _typeFromAST.typeFromAST;
          }
        });
        Object.defineProperty(exports, "valueFromAST", {
          enumerable: true,
          get: function () {
            return _valueFromAST.valueFromAST;
          }
        });
        Object.defineProperty(exports, "valueFromASTUntyped", {
          enumerable: true,
          get: function () {
            return _valueFromASTUntyped.valueFromASTUntyped;
          }
        });
        Object.defineProperty(exports, "visitWithTypeInfo", {
          enumerable: true,
          get: function () {
            return _TypeInfo.visitWithTypeInfo;
          }
        });
        var _getIntrospectionQuery = require("./getIntrospectionQuery.mjs");
        var _getOperationAST = require("./getOperationAST.mjs");
        var _getOperationRootType = require("./getOperationRootType.mjs");
        var _introspectionFromSchema = require("./introspectionFromSchema.mjs");
        var _buildClientSchema = require("./buildClientSchema.mjs");
        var _buildASTSchema = require("./buildASTSchema.mjs");
        var _extendSchema = require("./extendSchema.mjs");
        var _lexicographicSortSchema = require("./lexicographicSortSchema.mjs");
        var _printSchema = require("./printSchema.mjs");
        var _typeFromAST = require("./typeFromAST.mjs");
        var _valueFromAST = require("./valueFromAST.mjs");
        var _valueFromASTUntyped = require("./valueFromASTUntyped.mjs");
        var _astFromValue = require("./astFromValue.mjs");
        var _TypeInfo = require("./TypeInfo.mjs");
        var _coerceInputValue = require("./coerceInputValue.mjs");
        var _concatAST = require("./concatAST.mjs");
        var _separateOperations = require("./separateOperations.mjs");
        var _stripIgnoredCharacters = require("./stripIgnoredCharacters.mjs");
        var _typeComparators = require("./typeComparators.mjs");
        var _assertValidName = require("./assertValidName.mjs");
        var _findBreakingChanges = require("./findBreakingChanges.mjs");
      }, {
        "./TypeInfo.mjs": 195,
        "./assertValidName.mjs": 196,
        "./astFromValue.mjs": 197,
        "./buildASTSchema.mjs": 198,
        "./buildClientSchema.mjs": 199,
        "./coerceInputValue.mjs": 200,
        "./concatAST.mjs": 201,
        "./extendSchema.mjs": 202,
        "./findBreakingChanges.mjs": 203,
        "./getIntrospectionQuery.mjs": 204,
        "./getOperationAST.mjs": 205,
        "./getOperationRootType.mjs": 206,
        "./introspectionFromSchema.mjs": 208,
        "./lexicographicSortSchema.mjs": 209,
        "./printSchema.mjs": 210,
        "./separateOperations.mjs": 211,
        "./stripIgnoredCharacters.mjs": 213,
        "./typeComparators.mjs": 214,
        "./typeFromAST.mjs": 215,
        "./valueFromAST.mjs": 216,
        "./valueFromASTUntyped.mjs": 217
      }],
      208: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.introspectionFromSchema = introspectionFromSchema;
        var _invariant = require("../jsutils/invariant.mjs");
        var _parser = require("../language/parser.mjs");
        var _execute = require("../execution/execute.mjs");
        var _getIntrospectionQuery = require("./getIntrospectionQuery.mjs");
        /**
         * Build an IntrospectionQuery from a GraphQLSchema
         *
         * IntrospectionQuery is useful for utilities that care about type and field
         * relationships, but do not need to traverse through those relationships.
         *
         * This is the inverse of buildClientSchema. The primary use case is outside
         * of the server context, for instance when doing schema comparisons.
         */

        function introspectionFromSchema(schema, options) {
          const optionsWithDefaults = {
            specifiedByUrl: true,
            directiveIsRepeatable: true,
            schemaDescription: true,
            inputValueDeprecation: true,
            ...options
          };
          const document = (0, _parser.parse)((0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults));
          const result = (0, _execute.executeSync)({
            schema,
            document
          });
          !result.errors && result.data || (0, _invariant.invariant)(false);
          return result.data;
        }
      }, {
        "../execution/execute.mjs": 141,
        "../jsutils/invariant.mjs": 155,
        "../language/parser.mjs": 179,
        "./getIntrospectionQuery.mjs": 204
      }],
      209: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.lexicographicSortSchema = lexicographicSortSchema;
        var _inspect = require("../jsutils/inspect.mjs");
        var _invariant = require("../jsutils/invariant.mjs");
        var _keyValMap = require("../jsutils/keyValMap.mjs");
        var _naturalCompare = require("../jsutils/naturalCompare.mjs");
        var _definition = require("../type/definition.mjs");
        var _directives = require("../type/directives.mjs");
        var _introspection = require("../type/introspection.mjs");
        var _schema = require("../type/schema.mjs");
        /**
         * Sort GraphQLSchema.
         *
         * This function returns a sorted copy of the given GraphQLSchema.
         */

        function lexicographicSortSchema(schema) {
          const schemaConfig = schema.toConfig();
          const typeMap = (0, _keyValMap.keyValMap)(sortByName(schemaConfig.types), type => type.name, sortNamedType);
          return new _schema.GraphQLSchema({
            ...schemaConfig,
            types: Object.values(typeMap),
            directives: sortByName(schemaConfig.directives).map(sortDirective),
            query: replaceMaybeType(schemaConfig.query),
            mutation: replaceMaybeType(schemaConfig.mutation),
            subscription: replaceMaybeType(schemaConfig.subscription)
          });
          function replaceType(type) {
            if ((0, _definition.isListType)(type)) {
              // @ts-expect-error
              return new _definition.GraphQLList(replaceType(type.ofType));
            } else if ((0, _definition.isNonNullType)(type)) {
              // @ts-expect-error
              return new _definition.GraphQLNonNull(replaceType(type.ofType));
            } // @ts-expect-error FIXME: TS Conversion

            return replaceNamedType(type);
          }
          function replaceNamedType(type) {
            return typeMap[type.name];
          }
          function replaceMaybeType(maybeType) {
            return maybeType && replaceNamedType(maybeType);
          }
          function sortDirective(directive) {
            const config = directive.toConfig();
            return new _directives.GraphQLDirective({
              ...config,
              locations: sortBy(config.locations, x => x),
              args: sortArgs(config.args)
            });
          }
          function sortArgs(args) {
            return sortObjMap(args, arg => ({
              ...arg,
              type: replaceType(arg.type)
            }));
          }
          function sortFields(fieldsMap) {
            return sortObjMap(fieldsMap, field => ({
              ...field,
              type: replaceType(field.type),
              args: field.args && sortArgs(field.args)
            }));
          }
          function sortInputFields(fieldsMap) {
            return sortObjMap(fieldsMap, field => ({
              ...field,
              type: replaceType(field.type)
            }));
          }
          function sortTypes(array) {
            return sortByName(array).map(replaceNamedType);
          }
          function sortNamedType(type) {
            if ((0, _definition.isScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {
              return type;
            }
            if ((0, _definition.isObjectType)(type)) {
              const config = type.toConfig();
              return new _definition.GraphQLObjectType({
                ...config,
                interfaces: () => sortTypes(config.interfaces),
                fields: () => sortFields(config.fields)
              });
            }
            if ((0, _definition.isInterfaceType)(type)) {
              const config = type.toConfig();
              return new _definition.GraphQLInterfaceType({
                ...config,
                interfaces: () => sortTypes(config.interfaces),
                fields: () => sortFields(config.fields)
              });
            }
            if ((0, _definition.isUnionType)(type)) {
              const config = type.toConfig();
              return new _definition.GraphQLUnionType({
                ...config,
                types: () => sortTypes(config.types)
              });
            }
            if ((0, _definition.isEnumType)(type)) {
              const config = type.toConfig();
              return new _definition.GraphQLEnumType({
                ...config,
                values: sortObjMap(config.values, value => value)
              });
            }
            if ((0, _definition.isInputObjectType)(type)) {
              const config = type.toConfig();
              return new _definition.GraphQLInputObjectType({
                ...config,
                fields: () => sortInputFields(config.fields)
              });
            }
            /* c8 ignore next 3 */
            // Not reachable, all possible types have been considered.

            false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));
          }
        }
        function sortObjMap(map, sortValueFn) {
          const sortedMap = Object.create(null);
          for (const key of Object.keys(map).sort(_naturalCompare.naturalCompare)) {
            sortedMap[key] = sortValueFn(map[key]);
          }
          return sortedMap;
        }
        function sortByName(array) {
          return sortBy(array, obj => obj.name);
        }
        function sortBy(array, mapToKey) {
          return array.slice().sort((obj1, obj2) => {
            const key1 = mapToKey(obj1);
            const key2 = mapToKey(obj2);
            return (0, _naturalCompare.naturalCompare)(key1, key2);
          });
        }
      }, {
        "../jsutils/inspect.mjs": 153,
        "../jsutils/invariant.mjs": 155,
        "../jsutils/keyValMap.mjs": 161,
        "../jsutils/naturalCompare.mjs": 164,
        "../type/definition.mjs": 188,
        "../type/directives.mjs": 189,
        "../type/introspection.mjs": 191,
        "../type/schema.mjs": 193
      }],
      210: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.printIntrospectionSchema = printIntrospectionSchema;
        exports.printSchema = printSchema;
        exports.printType = printType;
        var _inspect = require("../jsutils/inspect.mjs");
        var _invariant = require("../jsutils/invariant.mjs");
        var _blockString = require("../language/blockString.mjs");
        var _kinds = require("../language/kinds.mjs");
        var _printer = require("../language/printer.mjs");
        var _definition = require("../type/definition.mjs");
        var _directives = require("../type/directives.mjs");
        var _introspection = require("../type/introspection.mjs");
        var _scalars = require("../type/scalars.mjs");
        var _astFromValue = require("./astFromValue.mjs");
        function printSchema(schema) {
          return printFilteredSchema(schema, n => !(0, _directives.isSpecifiedDirective)(n), isDefinedType);
        }
        function printIntrospectionSchema(schema) {
          return printFilteredSchema(schema, _directives.isSpecifiedDirective, _introspection.isIntrospectionType);
        }
        function isDefinedType(type) {
          return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
        }
        function printFilteredSchema(schema, directiveFilter, typeFilter) {
          const directives = schema.getDirectives().filter(directiveFilter);
          const types = Object.values(schema.getTypeMap()).filter(typeFilter);
          return [printSchemaDefinition(schema), ...directives.map(directive => printDirective(directive)), ...types.map(type => printType(type))].filter(Boolean).join('\n\n');
        }
        function printSchemaDefinition(schema) {
          if (schema.description == null && isSchemaOfCommonNames(schema)) {
            return;
          }
          const operationTypes = [];
          const queryType = schema.getQueryType();
          if (queryType) {
            operationTypes.push(`  query: ${queryType.name}`);
          }
          const mutationType = schema.getMutationType();
          if (mutationType) {
            operationTypes.push(`  mutation: ${mutationType.name}`);
          }
          const subscriptionType = schema.getSubscriptionType();
          if (subscriptionType) {
            operationTypes.push(`  subscription: ${subscriptionType.name}`);
          }
          return printDescription(schema) + `schema {\n${operationTypes.join('\n')}\n}`;
        }
        /**
         * GraphQL schema define root types for each type of operation. These types are
         * the same as any other type and can be named in any manner, however there is
         * a common naming convention:
         *
         * ```graphql
         *   schema {
         *     query: Query
         *     mutation: Mutation
         *     subscription: Subscription
         *   }
         * ```
         *
         * When using this naming convention, the schema description can be omitted.
         */

        function isSchemaOfCommonNames(schema) {
          const queryType = schema.getQueryType();
          if (queryType && queryType.name !== 'Query') {
            return false;
          }
          const mutationType = schema.getMutationType();
          if (mutationType && mutationType.name !== 'Mutation') {
            return false;
          }
          const subscriptionType = schema.getSubscriptionType();
          if (subscriptionType && subscriptionType.name !== 'Subscription') {
            return false;
          }
          return true;
        }
        function printType(type) {
          if ((0, _definition.isScalarType)(type)) {
            return printScalar(type);
          }
          if ((0, _definition.isObjectType)(type)) {
            return printObject(type);
          }
          if ((0, _definition.isInterfaceType)(type)) {
            return printInterface(type);
          }
          if ((0, _definition.isUnionType)(type)) {
            return printUnion(type);
          }
          if ((0, _definition.isEnumType)(type)) {
            return printEnum(type);
          }
          if ((0, _definition.isInputObjectType)(type)) {
            return printInputObject(type);
          }
          /* c8 ignore next 3 */
          // Not reachable, all possible types have been considered.

          false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));
        }
        function printScalar(type) {
          return printDescription(type) + `scalar ${type.name}` + printSpecifiedByURL(type);
        }
        function printImplementedInterfaces(type) {
          const interfaces = type.getInterfaces();
          return interfaces.length ? ' implements ' + interfaces.map(i => i.name).join(' & ') : '';
        }
        function printObject(type) {
          return printDescription(type) + `type ${type.name}` + printImplementedInterfaces(type) + printFields(type);
        }
        function printInterface(type) {
          return printDescription(type) + `interface ${type.name}` + printImplementedInterfaces(type) + printFields(type);
        }
        function printUnion(type) {
          const types = type.getTypes();
          const possibleTypes = types.length ? ' = ' + types.join(' | ') : '';
          return printDescription(type) + 'union ' + type.name + possibleTypes;
        }
        function printEnum(type) {
          const values = type.getValues().map((value, i) => printDescription(value, '  ', !i) + '  ' + value.name + printDeprecated(value.deprecationReason));
          return printDescription(type) + `enum ${type.name}` + printBlock(values);
        }
        function printInputObject(type) {
          const fields = Object.values(type.getFields()).map((f, i) => printDescription(f, '  ', !i) + '  ' + printInputValue(f));
          return printDescription(type) + `input ${type.name}` + printBlock(fields);
        }
        function printFields(type) {
          const fields = Object.values(type.getFields()).map((f, i) => printDescription(f, '  ', !i) + '  ' + f.name + printArgs(f.args, '  ') + ': ' + String(f.type) + printDeprecated(f.deprecationReason));
          return printBlock(fields);
        }
        function printBlock(items) {
          return items.length !== 0 ? ' {\n' + items.join('\n') + '\n}' : '';
        }
        function printArgs(args, indentation = '') {
          if (args.length === 0) {
            return '';
          } // If every arg does not have a description, print them on one line.

          if (args.every(arg => !arg.description)) {
            return '(' + args.map(printInputValue).join(', ') + ')';
          }
          return '(\n' + args.map((arg, i) => printDescription(arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg)).join('\n') + '\n' + indentation + ')';
        }
        function printInputValue(arg) {
          const defaultAST = (0, _astFromValue.astFromValue)(arg.defaultValue, arg.type);
          let argDecl = arg.name + ': ' + String(arg.type);
          if (defaultAST) {
            argDecl += ` = ${(0, _printer.print)(defaultAST)}`;
          }
          return argDecl + printDeprecated(arg.deprecationReason);
        }
        function printDirective(directive) {
          return printDescription(directive) + 'directive @' + directive.name + printArgs(directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');
        }
        function printDeprecated(reason) {
          if (reason == null) {
            return '';
          }
          if (reason !== _directives.DEFAULT_DEPRECATION_REASON) {
            const astValue = (0, _printer.print)({
              kind: _kinds.Kind.STRING,
              value: reason
            });
            return ` @deprecated(reason: ${astValue})`;
          }
          return ' @deprecated';
        }
        function printSpecifiedByURL(scalar) {
          if (scalar.specifiedByURL == null) {
            return '';
          }
          const astValue = (0, _printer.print)({
            kind: _kinds.Kind.STRING,
            value: scalar.specifiedByURL
          });
          return ` @specifiedBy(url: ${astValue})`;
        }
        function printDescription(def, indentation = '', firstInBlock = true) {
          const {
            description
          } = def;
          if (description == null) {
            return '';
          }
          const blockString = (0, _printer.print)({
            kind: _kinds.Kind.STRING,
            value: description,
            block: (0, _blockString.isPrintableAsBlockString)(description)
          });
          const prefix = indentation && !firstInBlock ? '\n' + indentation : indentation;
          return prefix + blockString.replace(/\n/g, '\n' + indentation) + '\n';
        }
      }, {
        "../jsutils/inspect.mjs": 153,
        "../jsutils/invariant.mjs": 155,
        "../language/blockString.mjs": 172,
        "../language/kinds.mjs": 176,
        "../language/printer.mjs": 183,
        "../type/definition.mjs": 188,
        "../type/directives.mjs": 189,
        "../type/introspection.mjs": 191,
        "../type/scalars.mjs": 192,
        "./astFromValue.mjs": 197
      }],
      211: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.separateOperations = separateOperations;
        var _kinds = require("../language/kinds.mjs");
        var _visitor = require("../language/visitor.mjs");
        /**
         * separateOperations accepts a single AST document which may contain many
         * operations and fragments and returns a collection of AST documents each of
         * which contains a single operation as well the fragment definitions it
         * refers to.
         */

        function separateOperations(documentAST) {
          const operations = [];
          const depGraph = Object.create(null); // Populate metadata and build a dependency graph.

          for (const definitionNode of documentAST.definitions) {
            switch (definitionNode.kind) {
              case _kinds.Kind.OPERATION_DEFINITION:
                operations.push(definitionNode);
                break;
              case _kinds.Kind.FRAGMENT_DEFINITION:
                depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);
                break;
              default: // ignore non-executable definitions
            }
          } // For each operation, produce a new synthesized AST which includes only what
          // is necessary for completing that operation.

          const separatedDocumentASTs = Object.create(null);
          for (const operation of operations) {
            const dependencies = new Set();
            for (const fragmentName of collectDependencies(operation.selectionSet)) {
              collectTransitiveDependencies(dependencies, depGraph, fragmentName);
            } // Provides the empty string for anonymous operations.

            const operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted
            // to retain the same order as the original document.

            separatedDocumentASTs[operationName] = {
              kind: _kinds.Kind.DOCUMENT,
              definitions: documentAST.definitions.filter(node => node === operation || node.kind === _kinds.Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value))
            };
          }
          return separatedDocumentASTs;
        }

        // From a dependency graph, collects a list of transitive dependencies by
        // recursing through a dependency graph.
        function collectTransitiveDependencies(collected, depGraph, fromName) {
          if (!collected.has(fromName)) {
            collected.add(fromName);
            const immediateDeps = depGraph[fromName];
            if (immediateDeps !== undefined) {
              for (const toName of immediateDeps) {
                collectTransitiveDependencies(collected, depGraph, toName);
              }
            }
          }
        }
        function collectDependencies(selectionSet) {
          const dependencies = [];
          (0, _visitor.visit)(selectionSet, {
            FragmentSpread(node) {
              dependencies.push(node.name.value);
            }
          });
          return dependencies;
        }
      }, {
        "../language/kinds.mjs": 176,
        "../language/visitor.mjs": 186
      }],
      212: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.sortValueNode = sortValueNode;
        var _naturalCompare = require("../jsutils/naturalCompare.mjs");
        var _kinds = require("../language/kinds.mjs");
        /**
         * Sort ValueNode.
         *
         * This function returns a sorted copy of the given ValueNode.
         *
         * @internal
         */

        function sortValueNode(valueNode) {
          switch (valueNode.kind) {
            case _kinds.Kind.OBJECT:
              return {
                ...valueNode,
                fields: sortFields(valueNode.fields)
              };
            case _kinds.Kind.LIST:
              return {
                ...valueNode,
                values: valueNode.values.map(sortValueNode)
              };
            case _kinds.Kind.INT:
            case _kinds.Kind.FLOAT:
            case _kinds.Kind.STRING:
            case _kinds.Kind.BOOLEAN:
            case _kinds.Kind.NULL:
            case _kinds.Kind.ENUM:
            case _kinds.Kind.VARIABLE:
              return valueNode;
          }
        }
        function sortFields(fields) {
          return fields.map(fieldNode => ({
            ...fieldNode,
            value: sortValueNode(fieldNode.value)
          })).sort((fieldA, fieldB) => (0, _naturalCompare.naturalCompare)(fieldA.name.value, fieldB.name.value));
        }
      }, {
        "../jsutils/naturalCompare.mjs": 164,
        "../language/kinds.mjs": 176
      }],
      213: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.stripIgnoredCharacters = stripIgnoredCharacters;
        var _blockString = require("../language/blockString.mjs");
        var _lexer = require("../language/lexer.mjs");
        var _source = require("../language/source.mjs");
        var _tokenKind = require("../language/tokenKind.mjs");
        /**
         * Strips characters that are not significant to the validity or execution
         * of a GraphQL document:
         *   - UnicodeBOM
         *   - WhiteSpace
         *   - LineTerminator
         *   - Comment
         *   - Comma
         *   - BlockString indentation
         *
         * Note: It is required to have a delimiter character between neighboring
         * non-punctuator tokens and this function always uses single space as delimiter.
         *
         * It is guaranteed that both input and output documents if parsed would result
         * in the exact same AST except for nodes location.
         *
         * Warning: It is guaranteed that this function will always produce stable results.
         * However, it's not guaranteed that it will stay the same between different
         * releases due to bugfixes or changes in the GraphQL specification.
         *
         * Query example:
         *
         * ```graphql
         * query SomeQuery($foo: String!, $bar: String) {
         *   someField(foo: $foo, bar: $bar) {
         *     a
         *     b {
         *       c
         *       d
         *     }
         *   }
         * }
         * ```
         *
         * Becomes:
         *
         * ```graphql
         * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}
         * ```
         *
         * SDL example:
         *
         * ```graphql
         * """
         * Type description
         * """
         * type Foo {
         *   """
         *   Field description
         *   """
         *   bar: String
         * }
         * ```
         *
         * Becomes:
         *
         * ```graphql
         * """Type description""" type Foo{"""Field description""" bar:String}
         * ```
         */

        function stripIgnoredCharacters(source) {
          const sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
          const body = sourceObj.body;
          const lexer = new _lexer.Lexer(sourceObj);
          let strippedBody = '';
          let wasLastAddedTokenNonPunctuator = false;
          while (lexer.advance().kind !== _tokenKind.TokenKind.EOF) {
            const currentToken = lexer.token;
            const tokenKind = currentToken.kind;
            /**
             * Every two non-punctuator tokens should have space between them.
             * Also prevent case of non-punctuator token following by spread resulting
             * in invalid token (e.g. `1...` is invalid Float token).
             */

            const isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(currentToken.kind);
            if (wasLastAddedTokenNonPunctuator) {
              if (isNonPunctuator || currentToken.kind === _tokenKind.TokenKind.SPREAD) {
                strippedBody += ' ';
              }
            }
            const tokenBody = body.slice(currentToken.start, currentToken.end);
            if (tokenKind === _tokenKind.TokenKind.BLOCK_STRING) {
              strippedBody += (0, _blockString.printBlockString)(currentToken.value, {
                minimize: true
              });
            } else {
              strippedBody += tokenBody;
            }
            wasLastAddedTokenNonPunctuator = isNonPunctuator;
          }
          return strippedBody;
        }
      }, {
        "../language/blockString.mjs": 172,
        "../language/lexer.mjs": 177,
        "../language/source.mjs": 184,
        "../language/tokenKind.mjs": 185
      }],
      214: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.doTypesOverlap = doTypesOverlap;
        exports.isEqualType = isEqualType;
        exports.isTypeSubTypeOf = isTypeSubTypeOf;
        var _definition = require("../type/definition.mjs");
        /**
         * Provided two types, return true if the types are equal (invariant).
         */
        function isEqualType(typeA, typeB) {
          // Equivalent types are equal.
          if (typeA === typeB) {
            return true;
          } // If either type is non-null, the other must also be non-null.

          if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {
            return isEqualType(typeA.ofType, typeB.ofType);
          } // If either type is a list, the other must also be a list.

          if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {
            return isEqualType(typeA.ofType, typeB.ofType);
          } // Otherwise the types are not equal.

          return false;
        }
        /**
         * Provided a type and a super type, return true if the first type is either
         * equal or a subset of the second super type (covariant).
         */

        function isTypeSubTypeOf(schema, maybeSubType, superType) {
          // Equivalent type is a valid subtype
          if (maybeSubType === superType) {
            return true;
          } // If superType is non-null, maybeSubType must also be non-null.

          if ((0, _definition.isNonNullType)(superType)) {
            if ((0, _definition.isNonNullType)(maybeSubType)) {
              return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
            }
            return false;
          }
          if ((0, _definition.isNonNullType)(maybeSubType)) {
            // If superType is nullable, maybeSubType may be non-null or nullable.
            return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
          } // If superType type is a list, maybeSubType type must also be a list.

          if ((0, _definition.isListType)(superType)) {
            if ((0, _definition.isListType)(maybeSubType)) {
              return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
            }
            return false;
          }
          if ((0, _definition.isListType)(maybeSubType)) {
            // If superType is not a list, maybeSubType must also be not a list.
            return false;
          } // If superType type is an abstract type, check if it is super type of maybeSubType.
          // Otherwise, the child type is not a valid subtype of the parent type.

          return (0, _definition.isAbstractType)(superType) && ((0, _definition.isInterfaceType)(maybeSubType) || (0, _definition.isObjectType)(maybeSubType)) && schema.isSubType(superType, maybeSubType);
        }
        /**
         * Provided two composite types, determine if they "overlap". Two composite
         * types overlap when the Sets of possible concrete types for each intersect.
         *
         * This is often used to determine if a fragment of a given type could possibly
         * be visited in a context of another type.
         *
         * This function is commutative.
         */

        function doTypesOverlap(schema, typeA, typeB) {
          // Equivalent types overlap
          if (typeA === typeB) {
            return true;
          }
          if ((0, _definition.isAbstractType)(typeA)) {
            if ((0, _definition.isAbstractType)(typeB)) {
              // If both types are abstract, then determine if there is any intersection
              // between possible concrete types of each.
              return schema.getPossibleTypes(typeA).some(type => schema.isSubType(typeB, type));
            } // Determine if the latter type is a possible concrete type of the former.

            return schema.isSubType(typeA, typeB);
          }
          if ((0, _definition.isAbstractType)(typeB)) {
            // Determine if the former type is a possible concrete type of the latter.
            return schema.isSubType(typeB, typeA);
          } // Otherwise the types do not overlap.

          return false;
        }
      }, {
        "../type/definition.mjs": 188
      }],
      215: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.typeFromAST = typeFromAST;
        var _kinds = require("../language/kinds.mjs");
        var _definition = require("../type/definition.mjs");
        function typeFromAST(schema, typeNode) {
          switch (typeNode.kind) {
            case _kinds.Kind.LIST_TYPE:
              {
                const innerType = typeFromAST(schema, typeNode.type);
                return innerType && new _definition.GraphQLList(innerType);
              }
            case _kinds.Kind.NON_NULL_TYPE:
              {
                const innerType = typeFromAST(schema, typeNode.type);
                return innerType && new _definition.GraphQLNonNull(innerType);
              }
            case _kinds.Kind.NAMED_TYPE:
              return schema.getType(typeNode.name.value);
          }
        }
      }, {
        "../language/kinds.mjs": 176,
        "../type/definition.mjs": 188
      }],
      216: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.valueFromAST = valueFromAST;
        var _inspect = require("../jsutils/inspect.mjs");
        var _invariant = require("../jsutils/invariant.mjs");
        var _keyMap = require("../jsutils/keyMap.mjs");
        var _kinds = require("../language/kinds.mjs");
        var _definition = require("../type/definition.mjs");
        /**
         * Produces a JavaScript value given a GraphQL Value AST.
         *
         * A GraphQL type must be provided, which will be used to interpret different
         * GraphQL Value literals.
         *
         * Returns `undefined` when the value could not be validly coerced according to
         * the provided type.
         *
         * | GraphQL Value        | JSON Value    |
         * | -------------------- | ------------- |
         * | Input Object         | Object        |
         * | List                 | Array         |
         * | Boolean              | Boolean       |
         * | String               | String        |
         * | Int / Float          | Number        |
         * | Enum Value           | Unknown       |
         * | NullValue            | null          |
         *
         */

        function valueFromAST(valueNode, type, variables) {
          if (!valueNode) {
            // When there is no node, then there is also no value.
            // Importantly, this is different from returning the value null.
            return;
          }
          if (valueNode.kind === _kinds.Kind.VARIABLE) {
            const variableName = valueNode.name.value;
            if (variables == null || variables[variableName] === undefined) {
              // No valid return value.
              return;
            }
            const variableValue = variables[variableName];
            if (variableValue === null && (0, _definition.isNonNullType)(type)) {
              return; // Invalid: intentionally return no value.
            } // Note: This does no further checking that this variable is correct.
            // This assumes that this query has been validated and the variable
            // usage here is of the correct type.

            return variableValue;
          }
          if ((0, _definition.isNonNullType)(type)) {
            if (valueNode.kind === _kinds.Kind.NULL) {
              return; // Invalid: intentionally return no value.
            }

            return valueFromAST(valueNode, type.ofType, variables);
          }
          if (valueNode.kind === _kinds.Kind.NULL) {
            // This is explicitly returning the value null.
            return null;
          }
          if ((0, _definition.isListType)(type)) {
            const itemType = type.ofType;
            if (valueNode.kind === _kinds.Kind.LIST) {
              const coercedValues = [];
              for (const itemNode of valueNode.values) {
                if (isMissingVariable(itemNode, variables)) {
                  // If an array contains a missing variable, it is either coerced to
                  // null or if the item type is non-null, it considered invalid.
                  if ((0, _definition.isNonNullType)(itemType)) {
                    return; // Invalid: intentionally return no value.
                  }

                  coercedValues.push(null);
                } else {
                  const itemValue = valueFromAST(itemNode, itemType, variables);
                  if (itemValue === undefined) {
                    return; // Invalid: intentionally return no value.
                  }

                  coercedValues.push(itemValue);
                }
              }
              return coercedValues;
            }
            const coercedValue = valueFromAST(valueNode, itemType, variables);
            if (coercedValue === undefined) {
              return; // Invalid: intentionally return no value.
            }

            return [coercedValue];
          }
          if ((0, _definition.isInputObjectType)(type)) {
            if (valueNode.kind !== _kinds.Kind.OBJECT) {
              return; // Invalid: intentionally return no value.
            }

            const coercedObj = Object.create(null);
            const fieldNodes = (0, _keyMap.keyMap)(valueNode.fields, field => field.name.value);
            for (const field of Object.values(type.getFields())) {
              const fieldNode = fieldNodes[field.name];
              if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
                if (field.defaultValue !== undefined) {
                  coercedObj[field.name] = field.defaultValue;
                } else if ((0, _definition.isNonNullType)(field.type)) {
                  return; // Invalid: intentionally return no value.
                }

                continue;
              }
              const fieldValue = valueFromAST(fieldNode.value, field.type, variables);
              if (fieldValue === undefined) {
                return; // Invalid: intentionally return no value.
              }

              coercedObj[field.name] = fieldValue;
            }
            return coercedObj;
          }
          if ((0, _definition.isLeafType)(type)) {
            // Scalars and Enums fulfill parsing a literal value via parseLiteral().
            // Invalid values represent a failure to parse correctly, in which case
            // no value is returned.
            let result;
            try {
              result = type.parseLiteral(valueNode, variables);
            } catch (_error) {
              return; // Invalid: intentionally return no value.
            }

            if (result === undefined) {
              return; // Invalid: intentionally return no value.
            }

            return result;
          }
          /* c8 ignore next 3 */
          // Not reachable, all possible input types have been considered.

          false || (0, _invariant.invariant)(false, 'Unexpected input type: ' + (0, _inspect.inspect)(type));
        } // Returns true if the provided valueNode is a variable which is not defined
        // in the set of variables.

        function isMissingVariable(valueNode, variables) {
          return valueNode.kind === _kinds.Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);
        }
      }, {
        "../jsutils/inspect.mjs": 153,
        "../jsutils/invariant.mjs": 155,
        "../jsutils/keyMap.mjs": 160,
        "../language/kinds.mjs": 176,
        "../type/definition.mjs": 188
      }],
      217: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.valueFromASTUntyped = valueFromASTUntyped;
        var _keyValMap = require("../jsutils/keyValMap.mjs");
        var _kinds = require("../language/kinds.mjs");
        /**
         * Produces a JavaScript value given a GraphQL Value AST.
         *
         * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
         * will reflect the provided GraphQL value AST.
         *
         * | GraphQL Value        | JavaScript Value |
         * | -------------------- | ---------------- |
         * | Input Object         | Object           |
         * | List                 | Array            |
         * | Boolean              | Boolean          |
         * | String / Enum        | String           |
         * | Int / Float          | Number           |
         * | Null                 | null             |
         *
         */

        function valueFromASTUntyped(valueNode, variables) {
          switch (valueNode.kind) {
            case _kinds.Kind.NULL:
              return null;
            case _kinds.Kind.INT:
              return parseInt(valueNode.value, 10);
            case _kinds.Kind.FLOAT:
              return parseFloat(valueNode.value);
            case _kinds.Kind.STRING:
            case _kinds.Kind.ENUM:
            case _kinds.Kind.BOOLEAN:
              return valueNode.value;
            case _kinds.Kind.LIST:
              return valueNode.values.map(node => valueFromASTUntyped(node, variables));
            case _kinds.Kind.OBJECT:
              return (0, _keyValMap.keyValMap)(valueNode.fields, field => field.name.value, field => valueFromASTUntyped(field.value, variables));
            case _kinds.Kind.VARIABLE:
              return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
          }
        }
      }, {
        "../jsutils/keyValMap.mjs": 161,
        "../language/kinds.mjs": 176
      }],
      218: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ValidationContext = exports.SDLValidationContext = exports.ASTValidationContext = void 0;
        var _kinds = require("../language/kinds.mjs");
        var _visitor = require("../language/visitor.mjs");
        var _TypeInfo = require("../utilities/TypeInfo.mjs");
        /**
         * An instance of this class is passed as the "this" context to all validators,
         * allowing access to commonly useful contextual information from within a
         * validation rule.
         */
        class ASTValidationContext {
          constructor(ast, onError) {
            this._ast = ast;
            this._fragments = undefined;
            this._fragmentSpreads = new Map();
            this._recursivelyReferencedFragments = new Map();
            this._onError = onError;
          }
          get [Symbol.toStringTag]() {
            return 'ASTValidationContext';
          }
          reportError(error) {
            this._onError(error);
          }
          getDocument() {
            return this._ast;
          }
          getFragment(name) {
            let fragments;
            if (this._fragments) {
              fragments = this._fragments;
            } else {
              fragments = Object.create(null);
              for (const defNode of this.getDocument().definitions) {
                if (defNode.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
                  fragments[defNode.name.value] = defNode;
                }
              }
              this._fragments = fragments;
            }
            return fragments[name];
          }
          getFragmentSpreads(node) {
            let spreads = this._fragmentSpreads.get(node);
            if (!spreads) {
              spreads = [];
              const setsToVisit = [node];
              let set;
              while (set = setsToVisit.pop()) {
                for (const selection of set.selections) {
                  if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {
                    spreads.push(selection);
                  } else if (selection.selectionSet) {
                    setsToVisit.push(selection.selectionSet);
                  }
                }
              }
              this._fragmentSpreads.set(node, spreads);
            }
            return spreads;
          }
          getRecursivelyReferencedFragments(operation) {
            let fragments = this._recursivelyReferencedFragments.get(operation);
            if (!fragments) {
              fragments = [];
              const collectedNames = Object.create(null);
              const nodesToVisit = [operation.selectionSet];
              let node;
              while (node = nodesToVisit.pop()) {
                for (const spread of this.getFragmentSpreads(node)) {
                  const fragName = spread.name.value;
                  if (collectedNames[fragName] !== true) {
                    collectedNames[fragName] = true;
                    const fragment = this.getFragment(fragName);
                    if (fragment) {
                      fragments.push(fragment);
                      nodesToVisit.push(fragment.selectionSet);
                    }
                  }
                }
              }
              this._recursivelyReferencedFragments.set(operation, fragments);
            }
            return fragments;
          }
        }
        exports.ASTValidationContext = ASTValidationContext;
        class SDLValidationContext extends ASTValidationContext {
          constructor(ast, schema, onError) {
            super(ast, onError);
            this._schema = schema;
          }
          get [Symbol.toStringTag]() {
            return 'SDLValidationContext';
          }
          getSchema() {
            return this._schema;
          }
        }
        exports.SDLValidationContext = SDLValidationContext;
        class ValidationContext extends ASTValidationContext {
          constructor(schema, ast, typeInfo, onError) {
            super(ast, onError);
            this._schema = schema;
            this._typeInfo = typeInfo;
            this._variableUsages = new Map();
            this._recursiveVariableUsages = new Map();
          }
          get [Symbol.toStringTag]() {
            return 'ValidationContext';
          }
          getSchema() {
            return this._schema;
          }
          getVariableUsages(node) {
            let usages = this._variableUsages.get(node);
            if (!usages) {
              const newUsages = [];
              const typeInfo = new _TypeInfo.TypeInfo(this._schema);
              (0, _visitor.visit)(node, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {
                VariableDefinition: () => false,
                Variable(variable) {
                  newUsages.push({
                    node: variable,
                    type: typeInfo.getInputType(),
                    defaultValue: typeInfo.getDefaultValue()
                  });
                }
              }));
              usages = newUsages;
              this._variableUsages.set(node, usages);
            }
            return usages;
          }
          getRecursiveVariableUsages(operation) {
            let usages = this._recursiveVariableUsages.get(operation);
            if (!usages) {
              usages = this.getVariableUsages(operation);
              for (const frag of this.getRecursivelyReferencedFragments(operation)) {
                usages = usages.concat(this.getVariableUsages(frag));
              }
              this._recursiveVariableUsages.set(operation, usages);
            }
            return usages;
          }
          getType() {
            return this._typeInfo.getType();
          }
          getParentType() {
            return this._typeInfo.getParentType();
          }
          getInputType() {
            return this._typeInfo.getInputType();
          }
          getParentInputType() {
            return this._typeInfo.getParentInputType();
          }
          getFieldDef() {
            return this._typeInfo.getFieldDef();
          }
          getDirective() {
            return this._typeInfo.getDirective();
          }
          getArgument() {
            return this._typeInfo.getArgument();
          }
          getEnumValue() {
            return this._typeInfo.getEnumValue();
          }
        }
        exports.ValidationContext = ValidationContext;
      }, {
        "../language/kinds.mjs": 176,
        "../language/visitor.mjs": 186,
        "../utilities/TypeInfo.mjs": 195
      }],
      219: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "ExecutableDefinitionsRule", {
          enumerable: true,
          get: function () {
            return _ExecutableDefinitionsRule.ExecutableDefinitionsRule;
          }
        });
        Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
          enumerable: true,
          get: function () {
            return _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule;
          }
        });
        Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
          enumerable: true,
          get: function () {
            return _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule;
          }
        });
        Object.defineProperty(exports, "KnownArgumentNamesRule", {
          enumerable: true,
          get: function () {
            return _KnownArgumentNamesRule.KnownArgumentNamesRule;
          }
        });
        Object.defineProperty(exports, "KnownDirectivesRule", {
          enumerable: true,
          get: function () {
            return _KnownDirectivesRule.KnownDirectivesRule;
          }
        });
        Object.defineProperty(exports, "KnownFragmentNamesRule", {
          enumerable: true,
          get: function () {
            return _KnownFragmentNamesRule.KnownFragmentNamesRule;
          }
        });
        Object.defineProperty(exports, "KnownTypeNamesRule", {
          enumerable: true,
          get: function () {
            return _KnownTypeNamesRule.KnownTypeNamesRule;
          }
        });
        Object.defineProperty(exports, "LoneAnonymousOperationRule", {
          enumerable: true,
          get: function () {
            return _LoneAnonymousOperationRule.LoneAnonymousOperationRule;
          }
        });
        Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
          enumerable: true,
          get: function () {
            return _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule;
          }
        });
        Object.defineProperty(exports, "NoDeprecatedCustomRule", {
          enumerable: true,
          get: function () {
            return _NoDeprecatedCustomRule.NoDeprecatedCustomRule;
          }
        });
        Object.defineProperty(exports, "NoFragmentCyclesRule", {
          enumerable: true,
          get: function () {
            return _NoFragmentCyclesRule.NoFragmentCyclesRule;
          }
        });
        Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
          enumerable: true,
          get: function () {
            return _NoSchemaIntrospectionCustomRule.NoSchemaIntrospectionCustomRule;
          }
        });
        Object.defineProperty(exports, "NoUndefinedVariablesRule", {
          enumerable: true,
          get: function () {
            return _NoUndefinedVariablesRule.NoUndefinedVariablesRule;
          }
        });
        Object.defineProperty(exports, "NoUnusedFragmentsRule", {
          enumerable: true,
          get: function () {
            return _NoUnusedFragmentsRule.NoUnusedFragmentsRule;
          }
        });
        Object.defineProperty(exports, "NoUnusedVariablesRule", {
          enumerable: true,
          get: function () {
            return _NoUnusedVariablesRule.NoUnusedVariablesRule;
          }
        });
        Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
          enumerable: true,
          get: function () {
            return _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule;
          }
        });
        Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
          enumerable: true,
          get: function () {
            return _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule;
          }
        });
        Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
          enumerable: true,
          get: function () {
            return _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule;
          }
        });
        Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
          enumerable: true,
          get: function () {
            return _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule;
          }
        });
        Object.defineProperty(exports, "ScalarLeafsRule", {
          enumerable: true,
          get: function () {
            return _ScalarLeafsRule.ScalarLeafsRule;
          }
        });
        Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
          enumerable: true,
          get: function () {
            return _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule;
          }
        });
        Object.defineProperty(exports, "UniqueArgumentDefinitionNamesRule", {
          enumerable: true,
          get: function () {
            return _UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueArgumentNamesRule", {
          enumerable: true,
          get: function () {
            return _UniqueArgumentNamesRule.UniqueArgumentNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
          enumerable: true,
          get: function () {
            return _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
          enumerable: true,
          get: function () {
            return _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule;
          }
        });
        Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
          enumerable: true,
          get: function () {
            return _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
          enumerable: true,
          get: function () {
            return _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueFragmentNamesRule", {
          enumerable: true,
          get: function () {
            return _UniqueFragmentNamesRule.UniqueFragmentNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
          enumerable: true,
          get: function () {
            return _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueOperationNamesRule", {
          enumerable: true,
          get: function () {
            return _UniqueOperationNamesRule.UniqueOperationNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueOperationTypesRule", {
          enumerable: true,
          get: function () {
            return _UniqueOperationTypesRule.UniqueOperationTypesRule;
          }
        });
        Object.defineProperty(exports, "UniqueTypeNamesRule", {
          enumerable: true,
          get: function () {
            return _UniqueTypeNamesRule.UniqueTypeNamesRule;
          }
        });
        Object.defineProperty(exports, "UniqueVariableNamesRule", {
          enumerable: true,
          get: function () {
            return _UniqueVariableNamesRule.UniqueVariableNamesRule;
          }
        });
        Object.defineProperty(exports, "ValidationContext", {
          enumerable: true,
          get: function () {
            return _ValidationContext.ValidationContext;
          }
        });
        Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
          enumerable: true,
          get: function () {
            return _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule;
          }
        });
        Object.defineProperty(exports, "VariablesAreInputTypesRule", {
          enumerable: true,
          get: function () {
            return _VariablesAreInputTypesRule.VariablesAreInputTypesRule;
          }
        });
        Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
          enumerable: true,
          get: function () {
            return _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule;
          }
        });
        Object.defineProperty(exports, "specifiedRules", {
          enumerable: true,
          get: function () {
            return _specifiedRules.specifiedRules;
          }
        });
        Object.defineProperty(exports, "validate", {
          enumerable: true,
          get: function () {
            return _validate.validate;
          }
        });
        var _validate = require("./validate.mjs");
        var _ValidationContext = require("./ValidationContext.mjs");
        var _specifiedRules = require("./specifiedRules.mjs");
        var _ExecutableDefinitionsRule = require("./rules/ExecutableDefinitionsRule.mjs");
        var _FieldsOnCorrectTypeRule = require("./rules/FieldsOnCorrectTypeRule.mjs");
        var _FragmentsOnCompositeTypesRule = require("./rules/FragmentsOnCompositeTypesRule.mjs");
        var _KnownArgumentNamesRule = require("./rules/KnownArgumentNamesRule.mjs");
        var _KnownDirectivesRule = require("./rules/KnownDirectivesRule.mjs");
        var _KnownFragmentNamesRule = require("./rules/KnownFragmentNamesRule.mjs");
        var _KnownTypeNamesRule = require("./rules/KnownTypeNamesRule.mjs");
        var _LoneAnonymousOperationRule = require("./rules/LoneAnonymousOperationRule.mjs");
        var _NoFragmentCyclesRule = require("./rules/NoFragmentCyclesRule.mjs");
        var _NoUndefinedVariablesRule = require("./rules/NoUndefinedVariablesRule.mjs");
        var _NoUnusedFragmentsRule = require("./rules/NoUnusedFragmentsRule.mjs");
        var _NoUnusedVariablesRule = require("./rules/NoUnusedVariablesRule.mjs");
        var _OverlappingFieldsCanBeMergedRule = require("./rules/OverlappingFieldsCanBeMergedRule.mjs");
        var _PossibleFragmentSpreadsRule = require("./rules/PossibleFragmentSpreadsRule.mjs");
        var _ProvidedRequiredArgumentsRule = require("./rules/ProvidedRequiredArgumentsRule.mjs");
        var _ScalarLeafsRule = require("./rules/ScalarLeafsRule.mjs");
        var _SingleFieldSubscriptionsRule = require("./rules/SingleFieldSubscriptionsRule.mjs");
        var _UniqueArgumentNamesRule = require("./rules/UniqueArgumentNamesRule.mjs");
        var _UniqueDirectivesPerLocationRule = require("./rules/UniqueDirectivesPerLocationRule.mjs");
        var _UniqueFragmentNamesRule = require("./rules/UniqueFragmentNamesRule.mjs");
        var _UniqueInputFieldNamesRule = require("./rules/UniqueInputFieldNamesRule.mjs");
        var _UniqueOperationNamesRule = require("./rules/UniqueOperationNamesRule.mjs");
        var _UniqueVariableNamesRule = require("./rules/UniqueVariableNamesRule.mjs");
        var _ValuesOfCorrectTypeRule = require("./rules/ValuesOfCorrectTypeRule.mjs");
        var _VariablesAreInputTypesRule = require("./rules/VariablesAreInputTypesRule.mjs");
        var _VariablesInAllowedPositionRule = require("./rules/VariablesInAllowedPositionRule.mjs");
        var _LoneSchemaDefinitionRule = require("./rules/LoneSchemaDefinitionRule.mjs");
        var _UniqueOperationTypesRule = require("./rules/UniqueOperationTypesRule.mjs");
        var _UniqueTypeNamesRule = require("./rules/UniqueTypeNamesRule.mjs");
        var _UniqueEnumValueNamesRule = require("./rules/UniqueEnumValueNamesRule.mjs");
        var _UniqueFieldDefinitionNamesRule = require("./rules/UniqueFieldDefinitionNamesRule.mjs");
        var _UniqueArgumentDefinitionNamesRule = require("./rules/UniqueArgumentDefinitionNamesRule.mjs");
        var _UniqueDirectiveNamesRule = require("./rules/UniqueDirectiveNamesRule.mjs");
        var _PossibleTypeExtensionsRule = require("./rules/PossibleTypeExtensionsRule.mjs");
        var _NoDeprecatedCustomRule = require("./rules/custom/NoDeprecatedCustomRule.mjs");
        var _NoSchemaIntrospectionCustomRule = require("./rules/custom/NoSchemaIntrospectionCustomRule.mjs");
      }, {
        "./ValidationContext.mjs": 218,
        "./rules/ExecutableDefinitionsRule.mjs": 220,
        "./rules/FieldsOnCorrectTypeRule.mjs": 221,
        "./rules/FragmentsOnCompositeTypesRule.mjs": 222,
        "./rules/KnownArgumentNamesRule.mjs": 223,
        "./rules/KnownDirectivesRule.mjs": 224,
        "./rules/KnownFragmentNamesRule.mjs": 225,
        "./rules/KnownTypeNamesRule.mjs": 226,
        "./rules/LoneAnonymousOperationRule.mjs": 227,
        "./rules/LoneSchemaDefinitionRule.mjs": 228,
        "./rules/NoFragmentCyclesRule.mjs": 229,
        "./rules/NoUndefinedVariablesRule.mjs": 230,
        "./rules/NoUnusedFragmentsRule.mjs": 231,
        "./rules/NoUnusedVariablesRule.mjs": 232,
        "./rules/OverlappingFieldsCanBeMergedRule.mjs": 233,
        "./rules/PossibleFragmentSpreadsRule.mjs": 234,
        "./rules/PossibleTypeExtensionsRule.mjs": 235,
        "./rules/ProvidedRequiredArgumentsRule.mjs": 236,
        "./rules/ScalarLeafsRule.mjs": 237,
        "./rules/SingleFieldSubscriptionsRule.mjs": 238,
        "./rules/UniqueArgumentDefinitionNamesRule.mjs": 239,
        "./rules/UniqueArgumentNamesRule.mjs": 240,
        "./rules/UniqueDirectiveNamesRule.mjs": 241,
        "./rules/UniqueDirectivesPerLocationRule.mjs": 242,
        "./rules/UniqueEnumValueNamesRule.mjs": 243,
        "./rules/UniqueFieldDefinitionNamesRule.mjs": 244,
        "./rules/UniqueFragmentNamesRule.mjs": 245,
        "./rules/UniqueInputFieldNamesRule.mjs": 246,
        "./rules/UniqueOperationNamesRule.mjs": 247,
        "./rules/UniqueOperationTypesRule.mjs": 248,
        "./rules/UniqueTypeNamesRule.mjs": 249,
        "./rules/UniqueVariableNamesRule.mjs": 250,
        "./rules/ValuesOfCorrectTypeRule.mjs": 251,
        "./rules/VariablesAreInputTypesRule.mjs": 252,
        "./rules/VariablesInAllowedPositionRule.mjs": 253,
        "./rules/custom/NoDeprecatedCustomRule.mjs": 254,
        "./rules/custom/NoSchemaIntrospectionCustomRule.mjs": 255,
        "./specifiedRules.mjs": 256,
        "./validate.mjs": 257
      }],
      220: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ExecutableDefinitionsRule = ExecutableDefinitionsRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _kinds = require("../../language/kinds.mjs");
        var _predicates = require("../../language/predicates.mjs");
        /**
         * Executable definitions
         *
         * A GraphQL document is only valid for execution if all definitions are either
         * operation or fragment definitions.
         *
         * See https://spec.graphql.org/draft/#sec-Executable-Definitions
         */
        function ExecutableDefinitionsRule(context) {
          return {
            Document(node) {
              for (const definition of node.definitions) {
                if (!(0, _predicates.isExecutableDefinitionNode)(definition)) {
                  const defName = definition.kind === _kinds.Kind.SCHEMA_DEFINITION || definition.kind === _kinds.Kind.SCHEMA_EXTENSION ? 'schema' : '"' + definition.name.value + '"';
                  context.reportError(new _GraphQLError.GraphQLError(`The ${defName} definition is not executable.`, {
                    nodes: definition
                  }));
                }
              }
              return false;
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../language/kinds.mjs": 176,
        "../../language/predicates.mjs": 180
      }],
      221: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;
        var _didYouMean = require("../../jsutils/didYouMean.mjs");
        var _naturalCompare = require("../../jsutils/naturalCompare.mjs");
        var _suggestionList = require("../../jsutils/suggestionList.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _definition = require("../../type/definition.mjs");
        /**
         * Fields on correct type
         *
         * A GraphQL document is only valid if all fields selected are defined by the
         * parent type, or are an allowed meta field such as __typename.
         *
         * See https://spec.graphql.org/draft/#sec-Field-Selections
         */
        function FieldsOnCorrectTypeRule(context) {
          return {
            Field(node) {
              const type = context.getParentType();
              if (type) {
                const fieldDef = context.getFieldDef();
                if (!fieldDef) {
                  // This field doesn't exist, lets look for suggestions.
                  const schema = context.getSchema();
                  const fieldName = node.name.value; // First determine if there are any suggested types to condition on.

                  let suggestion = (0, _didYouMean.didYouMean)('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?

                  if (suggestion === '') {
                    suggestion = (0, _didYouMean.didYouMean)(getSuggestedFieldNames(type, fieldName));
                  } // Report an error, including helpful suggestions.

                  context.reportError(new _GraphQLError.GraphQLError(`Cannot query field "${fieldName}" on type "${type.name}".` + suggestion, {
                    nodes: node
                  }));
                }
              }
            }
          };
        }
        /**
         * Go through all of the implementations of type, as well as the interfaces that
         * they implement. If any of those types include the provided field, suggest them,
         * sorted by how often the type is referenced.
         */

        function getSuggestedTypeNames(schema, type, fieldName) {
          if (!(0, _definition.isAbstractType)(type)) {
            // Must be an Object type, which does not have possible fields.
            return [];
          }
          const suggestedTypes = new Set();
          const usageCount = Object.create(null);
          for (const possibleType of schema.getPossibleTypes(type)) {
            if (!possibleType.getFields()[fieldName]) {
              continue;
            } // This object type defines this field.

            suggestedTypes.add(possibleType);
            usageCount[possibleType.name] = 1;
            for (const possibleInterface of possibleType.getInterfaces()) {
              var _usageCount$possibleI;
              if (!possibleInterface.getFields()[fieldName]) {
                continue;
              } // This interface type defines this field.

              suggestedTypes.add(possibleInterface);
              usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
            }
          }
          return [...suggestedTypes].sort((typeA, typeB) => {
            // Suggest both interface and object types based on how common they are.
            const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];
            if (usageCountDiff !== 0) {
              return usageCountDiff;
            } // Suggest super types first followed by subtypes

            if ((0, _definition.isInterfaceType)(typeA) && schema.isSubType(typeA, typeB)) {
              return -1;
            }
            if ((0, _definition.isInterfaceType)(typeB) && schema.isSubType(typeB, typeA)) {
              return 1;
            }
            return (0, _naturalCompare.naturalCompare)(typeA.name, typeB.name);
          }).map(x => x.name);
        }
        /**
         * For the field name provided, determine if there are any similar field names
         * that may be the result of a typo.
         */

        function getSuggestedFieldNames(type, fieldName) {
          if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
            const possibleFieldNames = Object.keys(type.getFields());
            return (0, _suggestionList.suggestionList)(fieldName, possibleFieldNames);
          } // Otherwise, must be a Union type, which does not define fields.

          return [];
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/didYouMean.mjs": 150,
        "../../jsutils/naturalCompare.mjs": 164,
        "../../jsutils/suggestionList.mjs": 168,
        "../../type/definition.mjs": 188
      }],
      222: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _printer = require("../../language/printer.mjs");
        var _definition = require("../../type/definition.mjs");
        var _typeFromAST = require("../../utilities/typeFromAST.mjs");
        /**
         * Fragments on composite type
         *
         * Fragments use a type condition to determine if they apply, since fragments
         * can only be spread into a composite type (object, interface, or union), the
         * type condition must also be a composite type.
         *
         * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types
         */
        function FragmentsOnCompositeTypesRule(context) {
          return {
            InlineFragment(node) {
              const typeCondition = node.typeCondition;
              if (typeCondition) {
                const type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);
                if (type && !(0, _definition.isCompositeType)(type)) {
                  const typeStr = (0, _printer.print)(typeCondition);
                  context.reportError(new _GraphQLError.GraphQLError(`Fragment cannot condition on non composite type "${typeStr}".`, {
                    nodes: typeCondition
                  }));
                }
              }
            },
            FragmentDefinition(node) {
              const type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);
              if (type && !(0, _definition.isCompositeType)(type)) {
                const typeStr = (0, _printer.print)(node.typeCondition);
                context.reportError(new _GraphQLError.GraphQLError(`Fragment "${node.name.value}" cannot condition on non composite type "${typeStr}".`, {
                  nodes: node.typeCondition
                }));
              }
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../language/printer.mjs": 183,
        "../../type/definition.mjs": 188,
        "../../utilities/typeFromAST.mjs": 215
      }],
      223: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;
        exports.KnownArgumentNamesRule = KnownArgumentNamesRule;
        var _didYouMean = require("../../jsutils/didYouMean.mjs");
        var _suggestionList = require("../../jsutils/suggestionList.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _kinds = require("../../language/kinds.mjs");
        var _directives = require("../../type/directives.mjs");
        /**
         * Known argument names
         *
         * A GraphQL field is only valid if all supplied arguments are defined by
         * that field.
         *
         * See https://spec.graphql.org/draft/#sec-Argument-Names
         * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations
         */
        function KnownArgumentNamesRule(context) {
          return {
            // eslint-disable-next-line new-cap
            ...KnownArgumentNamesOnDirectivesRule(context),
            Argument(argNode) {
              const argDef = context.getArgument();
              const fieldDef = context.getFieldDef();
              const parentType = context.getParentType();
              if (!argDef && fieldDef && parentType) {
                const argName = argNode.name.value;
                const knownArgsNames = fieldDef.args.map(arg => arg.name);
                const suggestions = (0, _suggestionList.suggestionList)(argName, knownArgsNames);
                context.reportError(new _GraphQLError.GraphQLError(`Unknown argument "${argName}" on field "${parentType.name}.${fieldDef.name}".` + (0, _didYouMean.didYouMean)(suggestions), {
                  nodes: argNode
                }));
              }
            }
          };
        }
        /**
         * @internal
         */

        function KnownArgumentNamesOnDirectivesRule(context) {
          const directiveArgs = Object.create(null);
          const schema = context.getSchema();
          const definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
          for (const directive of definedDirectives) {
            directiveArgs[directive.name] = directive.args.map(arg => arg.name);
          }
          const astDefinitions = context.getDocument().definitions;
          for (const def of astDefinitions) {
            if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
              var _def$arguments;

              // FIXME: https://github.com/graphql/graphql-js/issues/2203

              /* c8 ignore next */
              const argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
              directiveArgs[def.name.value] = argsNodes.map(arg => arg.name.value);
            }
          }
          return {
            Directive(directiveNode) {
              const directiveName = directiveNode.name.value;
              const knownArgs = directiveArgs[directiveName];
              if (directiveNode.arguments && knownArgs) {
                for (const argNode of directiveNode.arguments) {
                  const argName = argNode.name.value;
                  if (!knownArgs.includes(argName)) {
                    const suggestions = (0, _suggestionList.suggestionList)(argName, knownArgs);
                    context.reportError(new _GraphQLError.GraphQLError(`Unknown argument "${argName}" on directive "@${directiveName}".` + (0, _didYouMean.didYouMean)(suggestions), {
                      nodes: argNode
                    }));
                  }
                }
              }
              return false;
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/didYouMean.mjs": 150,
        "../../jsutils/suggestionList.mjs": 168,
        "../../language/kinds.mjs": 176,
        "../../type/directives.mjs": 189
      }],
      224: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.KnownDirectivesRule = KnownDirectivesRule;
        var _inspect = require("../../jsutils/inspect.mjs");
        var _invariant = require("../../jsutils/invariant.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _ast = require("../../language/ast.mjs");
        var _directiveLocation = require("../../language/directiveLocation.mjs");
        var _kinds = require("../../language/kinds.mjs");
        var _directives = require("../../type/directives.mjs");
        /**
         * Known directives
         *
         * A GraphQL document is only valid if all `@directives` are known by the
         * schema and legally positioned.
         *
         * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined
         */
        function KnownDirectivesRule(context) {
          const locationsMap = Object.create(null);
          const schema = context.getSchema();
          const definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
          for (const directive of definedDirectives) {
            locationsMap[directive.name] = directive.locations;
          }
          const astDefinitions = context.getDocument().definitions;
          for (const def of astDefinitions) {
            if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
              locationsMap[def.name.value] = def.locations.map(name => name.value);
            }
          }
          return {
            Directive(node, _key, _parent, _path, ancestors) {
              const name = node.name.value;
              const locations = locationsMap[name];
              if (!locations) {
                context.reportError(new _GraphQLError.GraphQLError(`Unknown directive "@${name}".`, {
                  nodes: node
                }));
                return;
              }
              const candidateLocation = getDirectiveLocationForASTPath(ancestors);
              if (candidateLocation && !locations.includes(candidateLocation)) {
                context.reportError(new _GraphQLError.GraphQLError(`Directive "@${name}" may not be used on ${candidateLocation}.`, {
                  nodes: node
                }));
              }
            }
          };
        }
        function getDirectiveLocationForASTPath(ancestors) {
          const appliedTo = ancestors[ancestors.length - 1];
          'kind' in appliedTo || (0, _invariant.invariant)(false);
          switch (appliedTo.kind) {
            case _kinds.Kind.OPERATION_DEFINITION:
              return getDirectiveLocationForOperation(appliedTo.operation);
            case _kinds.Kind.FIELD:
              return _directiveLocation.DirectiveLocation.FIELD;
            case _kinds.Kind.FRAGMENT_SPREAD:
              return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;
            case _kinds.Kind.INLINE_FRAGMENT:
              return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;
            case _kinds.Kind.FRAGMENT_DEFINITION:
              return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;
            case _kinds.Kind.VARIABLE_DEFINITION:
              return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;
            case _kinds.Kind.SCHEMA_DEFINITION:
            case _kinds.Kind.SCHEMA_EXTENSION:
              return _directiveLocation.DirectiveLocation.SCHEMA;
            case _kinds.Kind.SCALAR_TYPE_DEFINITION:
            case _kinds.Kind.SCALAR_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.SCALAR;
            case _kinds.Kind.OBJECT_TYPE_DEFINITION:
            case _kinds.Kind.OBJECT_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.OBJECT;
            case _kinds.Kind.FIELD_DEFINITION:
              return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;
            case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
            case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.INTERFACE;
            case _kinds.Kind.UNION_TYPE_DEFINITION:
            case _kinds.Kind.UNION_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.UNION;
            case _kinds.Kind.ENUM_TYPE_DEFINITION:
            case _kinds.Kind.ENUM_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.ENUM;
            case _kinds.Kind.ENUM_VALUE_DEFINITION:
              return _directiveLocation.DirectiveLocation.ENUM_VALUE;
            case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
            case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.INPUT_OBJECT;
            case _kinds.Kind.INPUT_VALUE_DEFINITION:
              {
                const parentNode = ancestors[ancestors.length - 3];
                'kind' in parentNode || (0, _invariant.invariant)(false);
                return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
              }
            // Not reachable, all possible types have been considered.

            /* c8 ignore next */

            default:
              false || (0, _invariant.invariant)(false, 'Unexpected kind: ' + (0, _inspect.inspect)(appliedTo.kind));
          }
        }
        function getDirectiveLocationForOperation(operation) {
          switch (operation) {
            case _ast.OperationTypeNode.QUERY:
              return _directiveLocation.DirectiveLocation.QUERY;
            case _ast.OperationTypeNode.MUTATION:
              return _directiveLocation.DirectiveLocation.MUTATION;
            case _ast.OperationTypeNode.SUBSCRIPTION:
              return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/inspect.mjs": 153,
        "../../jsutils/invariant.mjs": 155,
        "../../language/ast.mjs": 171,
        "../../language/directiveLocation.mjs": 174,
        "../../language/kinds.mjs": 176,
        "../../type/directives.mjs": 189
      }],
      225: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.KnownFragmentNamesRule = KnownFragmentNamesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Known fragment names
         *
         * A GraphQL document is only valid if all `...Fragment` fragment spreads refer
         * to fragments defined in the same document.
         *
         * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined
         */
        function KnownFragmentNamesRule(context) {
          return {
            FragmentSpread(node) {
              const fragmentName = node.name.value;
              const fragment = context.getFragment(fragmentName);
              if (!fragment) {
                context.reportError(new _GraphQLError.GraphQLError(`Unknown fragment "${fragmentName}".`, {
                  nodes: node.name
                }));
              }
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      226: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.KnownTypeNamesRule = KnownTypeNamesRule;
        var _didYouMean = require("../../jsutils/didYouMean.mjs");
        var _suggestionList = require("../../jsutils/suggestionList.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _predicates = require("../../language/predicates.mjs");
        var _introspection = require("../../type/introspection.mjs");
        var _scalars = require("../../type/scalars.mjs");
        /**
         * Known type names
         *
         * A GraphQL document is only valid if referenced types (specifically
         * variable definitions and fragment conditions) are defined by the type schema.
         *
         * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence
         */
        function KnownTypeNamesRule(context) {
          const schema = context.getSchema();
          const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);
          const definedTypes = Object.create(null);
          for (const def of context.getDocument().definitions) {
            if ((0, _predicates.isTypeDefinitionNode)(def)) {
              definedTypes[def.name.value] = true;
            }
          }
          const typeNames = [...Object.keys(existingTypesMap), ...Object.keys(definedTypes)];
          return {
            NamedType(node, _1, parent, _2, ancestors) {
              const typeName = node.name.value;
              if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
                var _ancestors$;
                const definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
                const isSDL = definitionNode != null && isSDLNode(definitionNode);
                if (isSDL && standardTypeNames.includes(typeName)) {
                  return;
                }
                const suggestedTypes = (0, _suggestionList.suggestionList)(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);
                context.reportError(new _GraphQLError.GraphQLError(`Unknown type "${typeName}".` + (0, _didYouMean.didYouMean)(suggestedTypes), {
                  nodes: node
                }));
              }
            }
          };
        }
        const standardTypeNames = [..._scalars.specifiedScalarTypes, ..._introspection.introspectionTypes].map(type => type.name);
        function isSDLNode(value) {
          return 'kind' in value && ((0, _predicates.isTypeSystemDefinitionNode)(value) || (0, _predicates.isTypeSystemExtensionNode)(value));
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/didYouMean.mjs": 150,
        "../../jsutils/suggestionList.mjs": 168,
        "../../language/predicates.mjs": 180,
        "../../type/introspection.mjs": 191,
        "../../type/scalars.mjs": 192
      }],
      227: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LoneAnonymousOperationRule = LoneAnonymousOperationRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _kinds = require("../../language/kinds.mjs");
        /**
         * Lone anonymous operation
         *
         * A GraphQL document is only valid if when it contains an anonymous operation
         * (the query short-hand) that it contains only that one operation definition.
         *
         * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation
         */
        function LoneAnonymousOperationRule(context) {
          let operationCount = 0;
          return {
            Document(node) {
              operationCount = node.definitions.filter(definition => definition.kind === _kinds.Kind.OPERATION_DEFINITION).length;
            },
            OperationDefinition(node) {
              if (!node.name && operationCount > 1) {
                context.reportError(new _GraphQLError.GraphQLError('This anonymous operation must be the only defined operation.', {
                  nodes: node
                }));
              }
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../language/kinds.mjs": 176
      }],
      228: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Lone Schema definition
         *
         * A GraphQL document is only valid if it contains only one schema definition.
         */
        function LoneSchemaDefinitionRule(context) {
          var _ref, _ref2, _oldSchema$astNode;
          const oldSchema = context.getSchema();
          const alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
          let schemaDefinitionsCount = 0;
          return {
            SchemaDefinition(node) {
              if (alreadyDefined) {
                context.reportError(new _GraphQLError.GraphQLError('Cannot define a new schema within a schema extension.', {
                  nodes: node
                }));
                return;
              }
              if (schemaDefinitionsCount > 0) {
                context.reportError(new _GraphQLError.GraphQLError('Must provide only one schema definition.', {
                  nodes: node
                }));
              }
              ++schemaDefinitionsCount;
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      229: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NoFragmentCyclesRule = NoFragmentCyclesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * No fragment cycles
         *
         * The graph of fragment spreads must not form any cycles including spreading itself.
         * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.
         *
         * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles
         */
        function NoFragmentCyclesRule(context) {
          // Tracks already visited fragments to maintain O(N) and to ensure that cycles
          // are not redundantly reported.
          const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors

          const spreadPath = []; // Position in the spread path

          const spreadPathIndexByName = Object.create(null);
          return {
            OperationDefinition: () => false,
            FragmentDefinition(node) {
              detectCycleRecursive(node);
              return false;
            }
          }; // This does a straight-forward DFS to find cycles.
          // It does not terminate when a cycle was found but continues to explore
          // the graph to find all possible cycles.

          function detectCycleRecursive(fragment) {
            if (visitedFrags[fragment.name.value]) {
              return;
            }
            const fragmentName = fragment.name.value;
            visitedFrags[fragmentName] = true;
            const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
            if (spreadNodes.length === 0) {
              return;
            }
            spreadPathIndexByName[fragmentName] = spreadPath.length;
            for (const spreadNode of spreadNodes) {
              const spreadName = spreadNode.name.value;
              const cycleIndex = spreadPathIndexByName[spreadName];
              spreadPath.push(spreadNode);
              if (cycleIndex === undefined) {
                const spreadFragment = context.getFragment(spreadName);
                if (spreadFragment) {
                  detectCycleRecursive(spreadFragment);
                }
              } else {
                const cyclePath = spreadPath.slice(cycleIndex);
                const viaPath = cyclePath.slice(0, -1).map(s => '"' + s.name.value + '"').join(', ');
                context.reportError(new _GraphQLError.GraphQLError(`Cannot spread fragment "${spreadName}" within itself` + (viaPath !== '' ? ` via ${viaPath}.` : '.'), {
                  nodes: cyclePath
                }));
              }
              spreadPath.pop();
            }
            spreadPathIndexByName[fragmentName] = undefined;
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      230: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * No undefined variables
         *
         * A GraphQL operation is only valid if all variables encountered, both directly
         * and via fragment spreads, are defined by that operation.
         *
         * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined
         */
        function NoUndefinedVariablesRule(context) {
          let variableNameDefined = Object.create(null);
          return {
            OperationDefinition: {
              enter() {
                variableNameDefined = Object.create(null);
              },
              leave(operation) {
                const usages = context.getRecursiveVariableUsages(operation);
                for (const {
                  node
                } of usages) {
                  const varName = node.name.value;
                  if (variableNameDefined[varName] !== true) {
                    context.reportError(new _GraphQLError.GraphQLError(operation.name ? `Variable "$${varName}" is not defined by operation "${operation.name.value}".` : `Variable "$${varName}" is not defined.`, {
                      nodes: [node, operation]
                    }));
                  }
                }
              }
            },
            VariableDefinition(node) {
              variableNameDefined[node.variable.name.value] = true;
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      231: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * No unused fragments
         *
         * A GraphQL document is only valid if all fragment definitions are spread
         * within operations, or spread within other fragments spread within operations.
         *
         * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used
         */
        function NoUnusedFragmentsRule(context) {
          const operationDefs = [];
          const fragmentDefs = [];
          return {
            OperationDefinition(node) {
              operationDefs.push(node);
              return false;
            },
            FragmentDefinition(node) {
              fragmentDefs.push(node);
              return false;
            },
            Document: {
              leave() {
                const fragmentNameUsed = Object.create(null);
                for (const operation of operationDefs) {
                  for (const fragment of context.getRecursivelyReferencedFragments(operation)) {
                    fragmentNameUsed[fragment.name.value] = true;
                  }
                }
                for (const fragmentDef of fragmentDefs) {
                  const fragName = fragmentDef.name.value;
                  if (fragmentNameUsed[fragName] !== true) {
                    context.reportError(new _GraphQLError.GraphQLError(`Fragment "${fragName}" is never used.`, {
                      nodes: fragmentDef
                    }));
                  }
                }
              }
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      232: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NoUnusedVariablesRule = NoUnusedVariablesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * No unused variables
         *
         * A GraphQL operation is only valid if all variables defined by an operation
         * are used, either directly or within a spread fragment.
         *
         * See https://spec.graphql.org/draft/#sec-All-Variables-Used
         */
        function NoUnusedVariablesRule(context) {
          let variableDefs = [];
          return {
            OperationDefinition: {
              enter() {
                variableDefs = [];
              },
              leave(operation) {
                const variableNameUsed = Object.create(null);
                const usages = context.getRecursiveVariableUsages(operation);
                for (const {
                  node
                } of usages) {
                  variableNameUsed[node.name.value] = true;
                }
                for (const variableDef of variableDefs) {
                  const variableName = variableDef.variable.name.value;
                  if (variableNameUsed[variableName] !== true) {
                    context.reportError(new _GraphQLError.GraphQLError(operation.name ? `Variable "$${variableName}" is never used in operation "${operation.name.value}".` : `Variable "$${variableName}" is never used.`, {
                      nodes: variableDef
                    }));
                  }
                }
              }
            },
            VariableDefinition(def) {
              variableDefs.push(def);
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      233: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;
        var _inspect = require("../../jsutils/inspect.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _kinds = require("../../language/kinds.mjs");
        var _printer = require("../../language/printer.mjs");
        var _definition = require("../../type/definition.mjs");
        var _sortValueNode = require("../../utilities/sortValueNode.mjs");
        var _typeFromAST = require("../../utilities/typeFromAST.mjs");
        function reasonMessage(reason) {
          if (Array.isArray(reason)) {
            return reason.map(([responseName, subReason]) => `subfields "${responseName}" conflict because ` + reasonMessage(subReason)).join(' and ');
          }
          return reason;
        }
        /**
         * Overlapping fields can be merged
         *
         * A selection set is only valid if all fields (including spreading any
         * fragments) either correspond to distinct response names or can be merged
         * without ambiguity.
         *
         * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging
         */

        function OverlappingFieldsCanBeMergedRule(context) {
          // A memoization for when two fragments are compared "between" each other for
          // conflicts. Two fragments may be compared many times, so memoizing this can
          // dramatically improve the performance of this validator.
          const comparedFragmentPairs = new PairSet(); // A cache for the "field map" and list of fragment names found in any given
          // selection set. Selection sets may be asked for this information multiple
          // times, so this improves the performance of this validator.

          const cachedFieldsAndFragmentNames = new Map();
          return {
            SelectionSet(selectionSet) {
              const conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);
              for (const [[responseName, reason], fields1, fields2] of conflicts) {
                const reasonMsg = reasonMessage(reason);
                context.reportError(new _GraphQLError.GraphQLError(`Fields "${responseName}" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`, {
                  nodes: fields1.concat(fields2)
                }));
              }
            }
          };
        }

        /**
         * Algorithm:
         *
         * Conflicts occur when two fields exist in a query which will produce the same
         * response name, but represent differing values, thus creating a conflict.
         * The algorithm below finds all conflicts via making a series of comparisons
         * between fields. In order to compare as few fields as possible, this makes
         * a series of comparisons "within" sets of fields and "between" sets of fields.
         *
         * Given any selection set, a collection produces both a set of fields by
         * also including all inline fragments, as well as a list of fragments
         * referenced by fragment spreads.
         *
         * A) Each selection set represented in the document first compares "within" its
         * collected set of fields, finding any conflicts between every pair of
         * overlapping fields.
         * Note: This is the *only time* that a the fields "within" a set are compared
         * to each other. After this only fields "between" sets are compared.
         *
         * B) Also, if any fragment is referenced in a selection set, then a
         * comparison is made "between" the original set of fields and the
         * referenced fragment.
         *
         * C) Also, if multiple fragments are referenced, then comparisons
         * are made "between" each referenced fragment.
         *
         * D) When comparing "between" a set of fields and a referenced fragment, first
         * a comparison is made between each field in the original set of fields and
         * each field in the the referenced set of fields.
         *
         * E) Also, if any fragment is referenced in the referenced selection set,
         * then a comparison is made "between" the original set of fields and the
         * referenced fragment (recursively referring to step D).
         *
         * F) When comparing "between" two fragments, first a comparison is made between
         * each field in the first referenced set of fields and each field in the the
         * second referenced set of fields.
         *
         * G) Also, any fragments referenced by the first must be compared to the
         * second, and any fragments referenced by the second must be compared to the
         * first (recursively referring to step F).
         *
         * H) When comparing two fields, if both have selection sets, then a comparison
         * is made "between" both selection sets, first comparing the set of fields in
         * the first selection set with the set of fields in the second.
         *
         * I) Also, if any fragment is referenced in either selection set, then a
         * comparison is made "between" the other set of fields and the
         * referenced fragment.
         *
         * J) Also, if two fragments are referenced in both selection sets, then a
         * comparison is made "between" the two fragments.
         *
         */
        // Find all conflicts found "within" a selection set, including those found
        // via spreading in fragments. Called when visiting each SelectionSet in the
        // GraphQL Document.
        function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
          const conflicts = [];
          const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet); // (A) Find find all conflicts "within" the fields of this selection set.
          // Note: this is the *only place* `collectConflictsWithin` is called.

          collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);
          if (fragmentNames.length !== 0) {
            // (B) Then collect conflicts between these fields and those represented by
            // each spread fragment name found.
            for (let i = 0; i < fragmentNames.length; i++) {
              collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this
              // selection set to collect conflicts between fragments spread together.
              // This compares each item in the list of fragment names to every other
              // item in that same list (except for itself).

              for (let j = i + 1; j < fragmentNames.length; j++) {
                collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);
              }
            }
          }
          return conflicts;
        } // Collect all conflicts found between a set of fields and a fragment reference
        // including via spreading in any nested fragments.

        function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
          const fragment = context.getFragment(fragmentName);
          if (!fragment) {
            return;
          }
          const [fieldMap2, referencedFragmentNames] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment); // Do not compare a fragment's fieldMap to itself.

          if (fieldMap === fieldMap2) {
            return;
          } // (D) First collect any conflicts between the provided collection of fields
          // and the collection of fields represented by the given fragment.

          collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields
          // and any fragment names found in the given fragment.

          for (const referencedFragmentName of referencedFragmentNames) {
            // Memoize so two fragments are not compared for conflicts more than once.
            if (comparedFragmentPairs.has(referencedFragmentName, fragmentName, areMutuallyExclusive)) {
              continue;
            }
            comparedFragmentPairs.add(referencedFragmentName, fragmentName, areMutuallyExclusive);
            collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, referencedFragmentName);
          }
        } // Collect all conflicts found between two fragments, including via spreading in
        // any nested fragments.

        function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
          // No need to compare a fragment to itself.
          if (fragmentName1 === fragmentName2) {
            return;
          } // Memoize so two fragments are not compared for conflicts more than once.

          if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
            return;
          }
          comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
          const fragment1 = context.getFragment(fragmentName1);
          const fragment2 = context.getFragment(fragmentName2);
          if (!fragment1 || !fragment2) {
            return;
          }
          const [fieldMap1, referencedFragmentNames1] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1);
          const [fieldMap2, referencedFragmentNames2] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2); // (F) First, collect all conflicts between these two collections of fields
          // (not including any nested fragments).

          collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested
          // fragments spread in the second fragment.

          for (const referencedFragmentName2 of referencedFragmentNames2) {
            collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, referencedFragmentName2);
          } // (G) Then collect conflicts between the second fragment and any nested
          // fragments spread in the first fragment.

          for (const referencedFragmentName1 of referencedFragmentNames1) {
            collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, referencedFragmentName1, fragmentName2);
          }
        } // Find all conflicts found between two selection sets, including those found
        // via spreading in fragments. Called when determining if conflicts exist
        // between the sub-fields of two overlapping fields.

        function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
          const conflicts = [];
          const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1);
          const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2); // (H) First, collect all conflicts between these two collections of field.

          collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and
          // those referenced by each fragment name associated with the second.

          for (const fragmentName2 of fragmentNames2) {
            collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentName2);
          } // (I) Then collect conflicts between the second collection of fields and
          // those referenced by each fragment name associated with the first.

          for (const fragmentName1 of fragmentNames1) {
            collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentName1);
          } // (J) Also collect conflicts between any fragment names by the first and
          // fragment names by the second. This compares each item in the first set of
          // names to each item in the second set of names.

          for (const fragmentName1 of fragmentNames1) {
            for (const fragmentName2 of fragmentNames2) {
              collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2);
            }
          }
          return conflicts;
        } // Collect all Conflicts "within" one collection of fields.

        function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
          // A field map is a keyed collection, where each key represents a response
          // name and the value at that key is a list of all fields which provide that
          // response name. For every response name, if there are multiple fields, they
          // must be compared to find a potential conflict.
          for (const [responseName, fields] of Object.entries(fieldMap)) {
            // This compares every field in the list to every other field in this list
            // (except to itself). If the list only has one item, nothing needs to
            // be compared.
            if (fields.length > 1) {
              for (let i = 0; i < fields.length; i++) {
                for (let j = i + 1; j < fields.length; j++) {
                  const conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false,
                  // within one collection is never mutually exclusive
                  responseName, fields[i], fields[j]);
                  if (conflict) {
                    conflicts.push(conflict);
                  }
                }
              }
            }
          }
        } // Collect all Conflicts between two collections of fields. This is similar to,
        // but different from the `collectConflictsWithin` function above. This check
        // assumes that `collectConflictsWithin` has already been called on each
        // provided collection of fields. This is true because this validator traverses
        // each individual selection set.

        function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
          // A field map is a keyed collection, where each key represents a response
          // name and the value at that key is a list of all fields which provide that
          // response name. For any response name which appears in both provided field
          // maps, each field from the first field map must be compared to every field
          // in the second field map to find potential conflicts.
          for (const [responseName, fields1] of Object.entries(fieldMap1)) {
            const fields2 = fieldMap2[responseName];
            if (fields2) {
              for (const field1 of fields1) {
                for (const field2 of fields2) {
                  const conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2);
                  if (conflict) {
                    conflicts.push(conflict);
                  }
                }
              }
            }
          }
        } // Determines if there is a conflict between two particular fields, including
        // comparing their sub-fields.

        function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
          const [parentType1, node1, def1] = field1;
          const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same
          // time, due to the parent types, then it is safe to permit them to diverge
          // in aliased field or arguments used as they will not present any ambiguity
          // by differing.
          // It is known that two parent types could never overlap if they are
          // different Object types. Interface or Union types might overlap - if not
          // in the current state of the schema, then perhaps in some future version,
          // thus may not safely diverge.

          const areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);
          if (!areMutuallyExclusive) {
            // Two aliases must refer to the same field.
            const name1 = node1.name.value;
            const name2 = node2.name.value;
            if (name1 !== name2) {
              return [[responseName, `"${name1}" and "${name2}" are different fields`], [node1], [node2]];
            } // Two field calls must have the same arguments.

            if (!sameArguments(node1, node2)) {
              return [[responseName, 'they have differing arguments'], [node1], [node2]];
            }
          } // The return type for each field.

          const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
          const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;
          if (type1 && type2 && doTypesConflict(type1, type2)) {
            return [[responseName, `they return conflicting types "${(0, _inspect.inspect)(type1)}" and "${(0, _inspect.inspect)(type2)}"`], [node1], [node2]];
          } // Collect and compare sub-fields. Use the same "visited fragment names" list
          // for both collections so fields in a fragment reference are never
          // compared to themselves.

          const selectionSet1 = node1.selectionSet;
          const selectionSet2 = node2.selectionSet;
          if (selectionSet1 && selectionSet2) {
            const conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);
            return subfieldConflicts(conflicts, responseName, node1, node2);
          }
        }
        function sameArguments(node1, node2) {
          const args1 = node1.arguments;
          const args2 = node2.arguments;
          if (args1 === undefined || args1.length === 0) {
            return args2 === undefined || args2.length === 0;
          }
          if (args2 === undefined || args2.length === 0) {
            return false;
          }
          /* c8 ignore next */

          if (args1.length !== args2.length) {
            /* c8 ignore next */
            return false;
            /* c8 ignore next */
          }

          const values2 = new Map(args2.map(({
            name,
            value
          }) => [name.value, value]));
          return args1.every(arg1 => {
            const value1 = arg1.value;
            const value2 = values2.get(arg1.name.value);
            if (value2 === undefined) {
              return false;
            }
            return stringifyValue(value1) === stringifyValue(value2);
          });
        }
        function stringifyValue(value) {
          return (0, _printer.print)((0, _sortValueNode.sortValueNode)(value));
        } // Two types conflict if both types could not apply to a value simultaneously.
        // Composite types are ignored as their individual field types will be compared
        // later recursively. However List and Non-Null types must match.

        function doTypesConflict(type1, type2) {
          if ((0, _definition.isListType)(type1)) {
            return (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
          }
          if ((0, _definition.isListType)(type2)) {
            return true;
          }
          if ((0, _definition.isNonNullType)(type1)) {
            return (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
          }
          if ((0, _definition.isNonNullType)(type2)) {
            return true;
          }
          if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {
            return type1 !== type2;
          }
          return false;
        } // Given a selection set, return the collection of fields (a mapping of response
        // name to field nodes and definitions) as well as a list of fragment names
        // referenced via fragment spreads.

        function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
          const cached = cachedFieldsAndFragmentNames.get(selectionSet);
          if (cached) {
            return cached;
          }
          const nodeAndDefs = Object.create(null);
          const fragmentNames = Object.create(null);
          _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);
          const result = [nodeAndDefs, Object.keys(fragmentNames)];
          cachedFieldsAndFragmentNames.set(selectionSet, result);
          return result;
        } // Given a reference to a fragment, return the represented collection of fields
        // as well as a list of nested fragment names referenced via fragment spreads.

        function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
          // Short-circuit building a type from the node if possible.
          const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
          if (cached) {
            return cached;
          }
          const fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);
          return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
        }
        function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
          for (const selection of selectionSet.selections) {
            switch (selection.kind) {
              case _kinds.Kind.FIELD:
                {
                  const fieldName = selection.name.value;
                  let fieldDef;
                  if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
                    fieldDef = parentType.getFields()[fieldName];
                  }
                  const responseName = selection.alias ? selection.alias.value : fieldName;
                  if (!nodeAndDefs[responseName]) {
                    nodeAndDefs[responseName] = [];
                  }
                  nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
                  break;
                }
              case _kinds.Kind.FRAGMENT_SPREAD:
                fragmentNames[selection.name.value] = true;
                break;
              case _kinds.Kind.INLINE_FRAGMENT:
                {
                  const typeCondition = selection.typeCondition;
                  const inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;
                  _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);
                  break;
                }
            }
          }
        } // Given a series of Conflicts which occurred between two sub-fields, generate
        // a single Conflict.

        function subfieldConflicts(conflicts, responseName, node1, node2) {
          if (conflicts.length > 0) {
            return [[responseName, conflicts.map(([reason]) => reason)], [node1, ...conflicts.map(([, fields1]) => fields1).flat()], [node2, ...conflicts.map(([,, fields2]) => fields2).flat()]];
          }
        }
        /**
         * A way to keep track of pairs of things when the ordering of the pair does not matter.
         */

        class PairSet {
          constructor() {
            this._data = new Map();
          }
          has(a, b, areMutuallyExclusive) {
            var _this$_data$get;
            const [key1, key2] = a < b ? [a, b] : [b, a];
            const result = (_this$_data$get = this._data.get(key1)) === null || _this$_data$get === void 0 ? void 0 : _this$_data$get.get(key2);
            if (result === undefined) {
              return false;
            } // areMutuallyExclusive being false is a superset of being true, hence if
            // we want to know if this PairSet "has" these two with no exclusivity,
            // we have to ensure it was added as such.

            return areMutuallyExclusive ? true : areMutuallyExclusive === result;
          }
          add(a, b, areMutuallyExclusive) {
            const [key1, key2] = a < b ? [a, b] : [b, a];
            const map = this._data.get(key1);
            if (map === undefined) {
              this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));
            } else {
              map.set(key2, areMutuallyExclusive);
            }
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/inspect.mjs": 153,
        "../../language/kinds.mjs": 176,
        "../../language/printer.mjs": 183,
        "../../type/definition.mjs": 188,
        "../../utilities/sortValueNode.mjs": 212,
        "../../utilities/typeFromAST.mjs": 215
      }],
      234: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule;
        var _inspect = require("../../jsutils/inspect.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _definition = require("../../type/definition.mjs");
        var _typeComparators = require("../../utilities/typeComparators.mjs");
        var _typeFromAST = require("../../utilities/typeFromAST.mjs");
        /**
         * Possible fragment spread
         *
         * A fragment spread is only valid if the type condition could ever possibly
         * be true: if there is a non-empty intersection of the possible parent types,
         * and possible types which pass the type condition.
         */
        function PossibleFragmentSpreadsRule(context) {
          return {
            InlineFragment(node) {
              const fragType = context.getType();
              const parentType = context.getParentType();
              if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
                const parentTypeStr = (0, _inspect.inspect)(parentType);
                const fragTypeStr = (0, _inspect.inspect)(fragType);
                context.reportError(new _GraphQLError.GraphQLError(`Fragment cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`, {
                  nodes: node
                }));
              }
            },
            FragmentSpread(node) {
              const fragName = node.name.value;
              const fragType = getFragmentType(context, fragName);
              const parentType = context.getParentType();
              if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
                const parentTypeStr = (0, _inspect.inspect)(parentType);
                const fragTypeStr = (0, _inspect.inspect)(fragType);
                context.reportError(new _GraphQLError.GraphQLError(`Fragment "${fragName}" cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`, {
                  nodes: node
                }));
              }
            }
          };
        }
        function getFragmentType(context, name) {
          const frag = context.getFragment(name);
          if (frag) {
            const type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);
            if ((0, _definition.isCompositeType)(type)) {
              return type;
            }
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/inspect.mjs": 153,
        "../../type/definition.mjs": 188,
        "../../utilities/typeComparators.mjs": 214,
        "../../utilities/typeFromAST.mjs": 215
      }],
      235: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;
        var _didYouMean = require("../../jsutils/didYouMean.mjs");
        var _inspect = require("../../jsutils/inspect.mjs");
        var _invariant = require("../../jsutils/invariant.mjs");
        var _suggestionList = require("../../jsutils/suggestionList.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _kinds = require("../../language/kinds.mjs");
        var _predicates = require("../../language/predicates.mjs");
        var _definition = require("../../type/definition.mjs");
        /**
         * Possible type extension
         *
         * A type extension is only valid if the type is defined and has the same kind.
         */
        function PossibleTypeExtensionsRule(context) {
          const schema = context.getSchema();
          const definedTypes = Object.create(null);
          for (const def of context.getDocument().definitions) {
            if ((0, _predicates.isTypeDefinitionNode)(def)) {
              definedTypes[def.name.value] = def;
            }
          }
          return {
            ScalarTypeExtension: checkExtension,
            ObjectTypeExtension: checkExtension,
            InterfaceTypeExtension: checkExtension,
            UnionTypeExtension: checkExtension,
            EnumTypeExtension: checkExtension,
            InputObjectTypeExtension: checkExtension
          };
          function checkExtension(node) {
            const typeName = node.name.value;
            const defNode = definedTypes[typeName];
            const existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);
            let expectedKind;
            if (defNode) {
              expectedKind = defKindToExtKind[defNode.kind];
            } else if (existingType) {
              expectedKind = typeToExtKind(existingType);
            }
            if (expectedKind) {
              if (expectedKind !== node.kind) {
                const kindStr = extensionKindToTypeName(node.kind);
                context.reportError(new _GraphQLError.GraphQLError(`Cannot extend non-${kindStr} type "${typeName}".`, {
                  nodes: defNode ? [defNode, node] : node
                }));
              }
            } else {
              const allTypeNames = Object.keys({
                ...definedTypes,
                ...(schema === null || schema === void 0 ? void 0 : schema.getTypeMap())
              });
              const suggestedTypes = (0, _suggestionList.suggestionList)(typeName, allTypeNames);
              context.reportError(new _GraphQLError.GraphQLError(`Cannot extend type "${typeName}" because it is not defined.` + (0, _didYouMean.didYouMean)(suggestedTypes), {
                nodes: node.name
              }));
            }
          }
        }
        const defKindToExtKind = {
          [_kinds.Kind.SCALAR_TYPE_DEFINITION]: _kinds.Kind.SCALAR_TYPE_EXTENSION,
          [_kinds.Kind.OBJECT_TYPE_DEFINITION]: _kinds.Kind.OBJECT_TYPE_EXTENSION,
          [_kinds.Kind.INTERFACE_TYPE_DEFINITION]: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
          [_kinds.Kind.UNION_TYPE_DEFINITION]: _kinds.Kind.UNION_TYPE_EXTENSION,
          [_kinds.Kind.ENUM_TYPE_DEFINITION]: _kinds.Kind.ENUM_TYPE_EXTENSION,
          [_kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION]: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION
        };
        function typeToExtKind(type) {
          if ((0, _definition.isScalarType)(type)) {
            return _kinds.Kind.SCALAR_TYPE_EXTENSION;
          }
          if ((0, _definition.isObjectType)(type)) {
            return _kinds.Kind.OBJECT_TYPE_EXTENSION;
          }
          if ((0, _definition.isInterfaceType)(type)) {
            return _kinds.Kind.INTERFACE_TYPE_EXTENSION;
          }
          if ((0, _definition.isUnionType)(type)) {
            return _kinds.Kind.UNION_TYPE_EXTENSION;
          }
          if ((0, _definition.isEnumType)(type)) {
            return _kinds.Kind.ENUM_TYPE_EXTENSION;
          }
          if ((0, _definition.isInputObjectType)(type)) {
            return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
          }
          /* c8 ignore next 3 */
          // Not reachable. All possible types have been considered

          false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));
        }
        function extensionKindToTypeName(kind) {
          switch (kind) {
            case _kinds.Kind.SCALAR_TYPE_EXTENSION:
              return 'scalar';
            case _kinds.Kind.OBJECT_TYPE_EXTENSION:
              return 'object';
            case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
              return 'interface';
            case _kinds.Kind.UNION_TYPE_EXTENSION:
              return 'union';
            case _kinds.Kind.ENUM_TYPE_EXTENSION:
              return 'enum';
            case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
              return 'input object';
            // Not reachable. All possible types have been considered

            /* c8 ignore next */

            default:
              false || (0, _invariant.invariant)(false, 'Unexpected kind: ' + (0, _inspect.inspect)(kind));
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/didYouMean.mjs": 150,
        "../../jsutils/inspect.mjs": 153,
        "../../jsutils/invariant.mjs": 155,
        "../../jsutils/suggestionList.mjs": 168,
        "../../language/kinds.mjs": 176,
        "../../language/predicates.mjs": 180,
        "../../type/definition.mjs": 188
      }],
      236: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ProvidedRequiredArgumentsOnDirectivesRule = ProvidedRequiredArgumentsOnDirectivesRule;
        exports.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;
        var _inspect = require("../../jsutils/inspect.mjs");
        var _keyMap = require("../../jsutils/keyMap.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _kinds = require("../../language/kinds.mjs");
        var _printer = require("../../language/printer.mjs");
        var _definition = require("../../type/definition.mjs");
        var _directives = require("../../type/directives.mjs");
        /**
         * Provided required arguments
         *
         * A field or directive is only valid if all required (non-null without a
         * default value) field arguments have been provided.
         */
        function ProvidedRequiredArgumentsRule(context) {
          return {
            // eslint-disable-next-line new-cap
            ...ProvidedRequiredArgumentsOnDirectivesRule(context),
            Field: {
              // Validate on leave to allow for deeper errors to appear first.
              leave(fieldNode) {
                var _fieldNode$arguments;
                const fieldDef = context.getFieldDef();
                if (!fieldDef) {
                  return false;
                }
                const providedArgs = new Set(
                // FIXME: https://github.com/graphql/graphql-js/issues/2203
                /* c8 ignore next */
                (_fieldNode$arguments = fieldNode.arguments) === null || _fieldNode$arguments === void 0 ? void 0 : _fieldNode$arguments.map(arg => arg.name.value));
                for (const argDef of fieldDef.args) {
                  if (!providedArgs.has(argDef.name) && (0, _definition.isRequiredArgument)(argDef)) {
                    const argTypeStr = (0, _inspect.inspect)(argDef.type);
                    context.reportError(new _GraphQLError.GraphQLError(`Field "${fieldDef.name}" argument "${argDef.name}" of type "${argTypeStr}" is required, but it was not provided.`, {
                      nodes: fieldNode
                    }));
                  }
                }
              }
            }
          };
        }
        /**
         * @internal
         */

        function ProvidedRequiredArgumentsOnDirectivesRule(context) {
          var _schema$getDirectives;
          const requiredArgsMap = Object.create(null);
          const schema = context.getSchema();
          const definedDirectives = (_schema$getDirectives = schema === null || schema === void 0 ? void 0 : schema.getDirectives()) !== null && _schema$getDirectives !== void 0 ? _schema$getDirectives : _directives.specifiedDirectives;
          for (const directive of definedDirectives) {
            requiredArgsMap[directive.name] = (0, _keyMap.keyMap)(directive.args.filter(_definition.isRequiredArgument), arg => arg.name);
          }
          const astDefinitions = context.getDocument().definitions;
          for (const def of astDefinitions) {
            if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
              var _def$arguments;

              // FIXME: https://github.com/graphql/graphql-js/issues/2203

              /* c8 ignore next */
              const argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
              requiredArgsMap[def.name.value] = (0, _keyMap.keyMap)(argNodes.filter(isRequiredArgumentNode), arg => arg.name.value);
            }
          }
          return {
            Directive: {
              // Validate on leave to allow for deeper errors to appear first.
              leave(directiveNode) {
                const directiveName = directiveNode.name.value;
                const requiredArgs = requiredArgsMap[directiveName];
                if (requiredArgs) {
                  var _directiveNode$argume;

                  // FIXME: https://github.com/graphql/graphql-js/issues/2203

                  /* c8 ignore next */
                  const argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
                  const argNodeMap = new Set(argNodes.map(arg => arg.name.value));
                  for (const [argName, argDef] of Object.entries(requiredArgs)) {
                    if (!argNodeMap.has(argName)) {
                      const argType = (0, _definition.isType)(argDef.type) ? (0, _inspect.inspect)(argDef.type) : (0, _printer.print)(argDef.type);
                      context.reportError(new _GraphQLError.GraphQLError(`Directive "@${directiveName}" argument "${argName}" of type "${argType}" is required, but it was not provided.`, {
                        nodes: directiveNode
                      }));
                    }
                  }
                }
              }
            }
          };
        }
        function isRequiredArgumentNode(arg) {
          return arg.type.kind === _kinds.Kind.NON_NULL_TYPE && arg.defaultValue == null;
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/inspect.mjs": 153,
        "../../jsutils/keyMap.mjs": 160,
        "../../language/kinds.mjs": 176,
        "../../language/printer.mjs": 183,
        "../../type/definition.mjs": 188,
        "../../type/directives.mjs": 189
      }],
      237: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ScalarLeafsRule = ScalarLeafsRule;
        var _inspect = require("../../jsutils/inspect.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _definition = require("../../type/definition.mjs");
        /**
         * Scalar leafs
         *
         * A GraphQL document is valid only if all leaf fields (fields without
         * sub selections) are of scalar or enum types.
         */
        function ScalarLeafsRule(context) {
          return {
            Field(node) {
              const type = context.getType();
              const selectionSet = node.selectionSet;
              if (type) {
                if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {
                  if (selectionSet) {
                    const fieldName = node.name.value;
                    const typeStr = (0, _inspect.inspect)(type);
                    context.reportError(new _GraphQLError.GraphQLError(`Field "${fieldName}" must not have a selection since type "${typeStr}" has no subfields.`, {
                      nodes: selectionSet
                    }));
                  }
                } else if (!selectionSet) {
                  const fieldName = node.name.value;
                  const typeStr = (0, _inspect.inspect)(type);
                  context.reportError(new _GraphQLError.GraphQLError(`Field "${fieldName}" of type "${typeStr}" must have a selection of subfields. Did you mean "${fieldName} { ... }"?`, {
                    nodes: node
                  }));
                }
              }
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/inspect.mjs": 153,
        "../../type/definition.mjs": 188
      }],
      238: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _kinds = require("../../language/kinds.mjs");
        var _collectFields = require("../../execution/collectFields.mjs");
        /**
         * Subscriptions must only include a non-introspection field.
         *
         * A GraphQL subscription is valid only if it contains a single root field and
         * that root field is not an introspection field.
         *
         * See https://spec.graphql.org/draft/#sec-Single-root-field
         */
        function SingleFieldSubscriptionsRule(context) {
          return {
            OperationDefinition(node) {
              if (node.operation === 'subscription') {
                const schema = context.getSchema();
                const subscriptionType = schema.getSubscriptionType();
                if (subscriptionType) {
                  const operationName = node.name ? node.name.value : null;
                  const variableValues = Object.create(null);
                  const document = context.getDocument();
                  const fragments = Object.create(null);
                  for (const definition of document.definitions) {
                    if (definition.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
                      fragments[definition.name.value] = definition;
                    }
                  }
                  const fields = (0, _collectFields.collectFields)(schema, fragments, variableValues, subscriptionType, node.selectionSet);
                  if (fields.size > 1) {
                    const fieldSelectionLists = [...fields.values()];
                    const extraFieldSelectionLists = fieldSelectionLists.slice(1);
                    const extraFieldSelections = extraFieldSelectionLists.flat();
                    context.reportError(new _GraphQLError.GraphQLError(operationName != null ? `Subscription "${operationName}" must select only one top level field.` : 'Anonymous Subscription must select only one top level field.', {
                      nodes: extraFieldSelections
                    }));
                  }
                  for (const fieldNodes of fields.values()) {
                    const field = fieldNodes[0];
                    const fieldName = field.name.value;
                    if (fieldName.startsWith('__')) {
                      context.reportError(new _GraphQLError.GraphQLError(operationName != null ? `Subscription "${operationName}" must not select an introspection top level field.` : 'Anonymous Subscription must not select an introspection top level field.', {
                        nodes: fieldNodes
                      }));
                    }
                  }
                }
              }
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../execution/collectFields.mjs": 140,
        "../../language/kinds.mjs": 176
      }],
      239: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueArgumentDefinitionNamesRule = UniqueArgumentDefinitionNamesRule;
        var _groupBy = require("../../jsutils/groupBy.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Unique argument definition names
         *
         * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.
         * A GraphQL Directive is only valid if all its arguments are uniquely named.
         */
        function UniqueArgumentDefinitionNamesRule(context) {
          return {
            DirectiveDefinition(directiveNode) {
              var _directiveNode$argume;

              // FIXME: https://github.com/graphql/graphql-js/issues/2203

              /* c8 ignore next */
              const argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
              return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);
            },
            InterfaceTypeDefinition: checkArgUniquenessPerField,
            InterfaceTypeExtension: checkArgUniquenessPerField,
            ObjectTypeDefinition: checkArgUniquenessPerField,
            ObjectTypeExtension: checkArgUniquenessPerField
          };
          function checkArgUniquenessPerField(typeNode) {
            var _typeNode$fields;
            const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203

            /* c8 ignore next */

            const fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];
            for (const fieldDef of fieldNodes) {
              var _fieldDef$arguments;
              const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203

              /* c8 ignore next */

              const argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];
              checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);
            }
            return false;
          }
          function checkArgUniqueness(parentName, argumentNodes) {
            const seenArgs = (0, _groupBy.groupBy)(argumentNodes, arg => arg.name.value);
            for (const [argName, argNodes] of seenArgs) {
              if (argNodes.length > 1) {
                context.reportError(new _GraphQLError.GraphQLError(`Argument "${parentName}(${argName}:)" can only be defined once.`, {
                  nodes: argNodes.map(node => node.name)
                }));
              }
            }
            return false;
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/groupBy.mjs": 151
      }],
      240: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;
        var _groupBy = require("../../jsutils/groupBy.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Unique argument names
         *
         * A GraphQL field or directive is only valid if all supplied arguments are
         * uniquely named.
         *
         * See https://spec.graphql.org/draft/#sec-Argument-Names
         */
        function UniqueArgumentNamesRule(context) {
          return {
            Field: checkArgUniqueness,
            Directive: checkArgUniqueness
          };
          function checkArgUniqueness(parentNode) {
            var _parentNode$arguments;

            // FIXME: https://github.com/graphql/graphql-js/issues/2203

            /* c8 ignore next */
            const argumentNodes = (_parentNode$arguments = parentNode.arguments) !== null && _parentNode$arguments !== void 0 ? _parentNode$arguments : [];
            const seenArgs = (0, _groupBy.groupBy)(argumentNodes, arg => arg.name.value);
            for (const [argName, argNodes] of seenArgs) {
              if (argNodes.length > 1) {
                context.reportError(new _GraphQLError.GraphQLError(`There can be only one argument named "${argName}".`, {
                  nodes: argNodes.map(node => node.name)
                }));
              }
            }
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/groupBy.mjs": 151
      }],
      241: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Unique directive names
         *
         * A GraphQL document is only valid if all defined directives have unique names.
         */
        function UniqueDirectiveNamesRule(context) {
          const knownDirectiveNames = Object.create(null);
          const schema = context.getSchema();
          return {
            DirectiveDefinition(node) {
              const directiveName = node.name.value;
              if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {
                context.reportError(new _GraphQLError.GraphQLError(`Directive "@${directiveName}" already exists in the schema. It cannot be redefined.`, {
                  nodes: node.name
                }));
                return;
              }
              if (knownDirectiveNames[directiveName]) {
                context.reportError(new _GraphQLError.GraphQLError(`There can be only one directive named "@${directiveName}".`, {
                  nodes: [knownDirectiveNames[directiveName], node.name]
                }));
              } else {
                knownDirectiveNames[directiveName] = node.name;
              }
              return false;
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      242: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _kinds = require("../../language/kinds.mjs");
        var _predicates = require("../../language/predicates.mjs");
        var _directives = require("../../type/directives.mjs");
        /**
         * Unique directive names per location
         *
         * A GraphQL document is only valid if all non-repeatable directives at
         * a given location are uniquely named.
         *
         * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location
         */
        function UniqueDirectivesPerLocationRule(context) {
          const uniqueDirectiveMap = Object.create(null);
          const schema = context.getSchema();
          const definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
          for (const directive of definedDirectives) {
            uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
          }
          const astDefinitions = context.getDocument().definitions;
          for (const def of astDefinitions) {
            if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
              uniqueDirectiveMap[def.name.value] = !def.repeatable;
            }
          }
          const schemaDirectives = Object.create(null);
          const typeDirectivesMap = Object.create(null);
          return {
            // Many different AST nodes may contain directives. Rather than listing
            // them all, just listen for entering any node, and check to see if it
            // defines any directives.
            enter(node) {
              if (!('directives' in node) || !node.directives) {
                return;
              }
              let seenDirectives;
              if (node.kind === _kinds.Kind.SCHEMA_DEFINITION || node.kind === _kinds.Kind.SCHEMA_EXTENSION) {
                seenDirectives = schemaDirectives;
              } else if ((0, _predicates.isTypeDefinitionNode)(node) || (0, _predicates.isTypeExtensionNode)(node)) {
                const typeName = node.name.value;
                seenDirectives = typeDirectivesMap[typeName];
                if (seenDirectives === undefined) {
                  typeDirectivesMap[typeName] = seenDirectives = Object.create(null);
                }
              } else {
                seenDirectives = Object.create(null);
              }
              for (const directive of node.directives) {
                const directiveName = directive.name.value;
                if (uniqueDirectiveMap[directiveName]) {
                  if (seenDirectives[directiveName]) {
                    context.reportError(new _GraphQLError.GraphQLError(`The directive "@${directiveName}" can only be used once at this location.`, {
                      nodes: [seenDirectives[directiveName], directive]
                    }));
                  } else {
                    seenDirectives[directiveName] = directive;
                  }
                }
              }
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../language/kinds.mjs": 176,
        "../../language/predicates.mjs": 180,
        "../../type/directives.mjs": 189
      }],
      243: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _definition = require("../../type/definition.mjs");
        /**
         * Unique enum value names
         *
         * A GraphQL enum type is only valid if all its values are uniquely named.
         */
        function UniqueEnumValueNamesRule(context) {
          const schema = context.getSchema();
          const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
          const knownValueNames = Object.create(null);
          return {
            EnumTypeDefinition: checkValueUniqueness,
            EnumTypeExtension: checkValueUniqueness
          };
          function checkValueUniqueness(node) {
            var _node$values;
            const typeName = node.name.value;
            if (!knownValueNames[typeName]) {
              knownValueNames[typeName] = Object.create(null);
            } // FIXME: https://github.com/graphql/graphql-js/issues/2203

            /* c8 ignore next */

            const valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
            const valueNames = knownValueNames[typeName];
            for (const valueDef of valueNodes) {
              const valueName = valueDef.name.value;
              const existingType = existingTypeMap[typeName];
              if ((0, _definition.isEnumType)(existingType) && existingType.getValue(valueName)) {
                context.reportError(new _GraphQLError.GraphQLError(`Enum value "${typeName}.${valueName}" already exists in the schema. It cannot also be defined in this type extension.`, {
                  nodes: valueDef.name
                }));
              } else if (valueNames[valueName]) {
                context.reportError(new _GraphQLError.GraphQLError(`Enum value "${typeName}.${valueName}" can only be defined once.`, {
                  nodes: [valueNames[valueName], valueDef.name]
                }));
              } else {
                valueNames[valueName] = valueDef.name;
              }
            }
            return false;
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../type/definition.mjs": 188
      }],
      244: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _definition = require("../../type/definition.mjs");
        /**
         * Unique field definition names
         *
         * A GraphQL complex type is only valid if all its fields are uniquely named.
         */
        function UniqueFieldDefinitionNamesRule(context) {
          const schema = context.getSchema();
          const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
          const knownFieldNames = Object.create(null);
          return {
            InputObjectTypeDefinition: checkFieldUniqueness,
            InputObjectTypeExtension: checkFieldUniqueness,
            InterfaceTypeDefinition: checkFieldUniqueness,
            InterfaceTypeExtension: checkFieldUniqueness,
            ObjectTypeDefinition: checkFieldUniqueness,
            ObjectTypeExtension: checkFieldUniqueness
          };
          function checkFieldUniqueness(node) {
            var _node$fields;
            const typeName = node.name.value;
            if (!knownFieldNames[typeName]) {
              knownFieldNames[typeName] = Object.create(null);
            } // FIXME: https://github.com/graphql/graphql-js/issues/2203

            /* c8 ignore next */

            const fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
            const fieldNames = knownFieldNames[typeName];
            for (const fieldDef of fieldNodes) {
              const fieldName = fieldDef.name.value;
              if (hasField(existingTypeMap[typeName], fieldName)) {
                context.reportError(new _GraphQLError.GraphQLError(`Field "${typeName}.${fieldName}" already exists in the schema. It cannot also be defined in this type extension.`, {
                  nodes: fieldDef.name
                }));
              } else if (fieldNames[fieldName]) {
                context.reportError(new _GraphQLError.GraphQLError(`Field "${typeName}.${fieldName}" can only be defined once.`, {
                  nodes: [fieldNames[fieldName], fieldDef.name]
                }));
              } else {
                fieldNames[fieldName] = fieldDef.name;
              }
            }
            return false;
          }
        }
        function hasField(type, fieldName) {
          if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type) || (0, _definition.isInputObjectType)(type)) {
            return type.getFields()[fieldName] != null;
          }
          return false;
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../type/definition.mjs": 188
      }],
      245: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueFragmentNamesRule = UniqueFragmentNamesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Unique fragment names
         *
         * A GraphQL document is only valid if all defined fragments have unique names.
         *
         * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness
         */
        function UniqueFragmentNamesRule(context) {
          const knownFragmentNames = Object.create(null);
          return {
            OperationDefinition: () => false,
            FragmentDefinition(node) {
              const fragmentName = node.name.value;
              if (knownFragmentNames[fragmentName]) {
                context.reportError(new _GraphQLError.GraphQLError(`There can be only one fragment named "${fragmentName}".`, {
                  nodes: [knownFragmentNames[fragmentName], node.name]
                }));
              } else {
                knownFragmentNames[fragmentName] = node.name;
              }
              return false;
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      246: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;
        var _invariant = require("../../jsutils/invariant.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Unique input field names
         *
         * A GraphQL input object value is only valid if all supplied fields are
         * uniquely named.
         *
         * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness
         */
        function UniqueInputFieldNamesRule(context) {
          const knownNameStack = [];
          let knownNames = Object.create(null);
          return {
            ObjectValue: {
              enter() {
                knownNameStack.push(knownNames);
                knownNames = Object.create(null);
              },
              leave() {
                const prevKnownNames = knownNameStack.pop();
                prevKnownNames || (0, _invariant.invariant)(false);
                knownNames = prevKnownNames;
              }
            },
            ObjectField(node) {
              const fieldName = node.name.value;
              if (knownNames[fieldName]) {
                context.reportError(new _GraphQLError.GraphQLError(`There can be only one input field named "${fieldName}".`, {
                  nodes: [knownNames[fieldName], node.name]
                }));
              } else {
                knownNames[fieldName] = node.name;
              }
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/invariant.mjs": 155
      }],
      247: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueOperationNamesRule = UniqueOperationNamesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Unique operation names
         *
         * A GraphQL document is only valid if all defined operations have unique names.
         *
         * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness
         */
        function UniqueOperationNamesRule(context) {
          const knownOperationNames = Object.create(null);
          return {
            OperationDefinition(node) {
              const operationName = node.name;
              if (operationName) {
                if (knownOperationNames[operationName.value]) {
                  context.reportError(new _GraphQLError.GraphQLError(`There can be only one operation named "${operationName.value}".`, {
                    nodes: [knownOperationNames[operationName.value], operationName]
                  }));
                } else {
                  knownOperationNames[operationName.value] = operationName;
                }
              }
              return false;
            },
            FragmentDefinition: () => false
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      248: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueOperationTypesRule = UniqueOperationTypesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Unique operation types
         *
         * A GraphQL document is only valid if it has only one type per operation.
         */
        function UniqueOperationTypesRule(context) {
          const schema = context.getSchema();
          const definedOperationTypes = Object.create(null);
          const existingOperationTypes = schema ? {
            query: schema.getQueryType(),
            mutation: schema.getMutationType(),
            subscription: schema.getSubscriptionType()
          } : {};
          return {
            SchemaDefinition: checkOperationTypes,
            SchemaExtension: checkOperationTypes
          };
          function checkOperationTypes(node) {
            var _node$operationTypes;

            // See: https://github.com/graphql/graphql-js/issues/2203

            /* c8 ignore next */
            const operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
            for (const operationType of operationTypesNodes) {
              const operation = operationType.operation;
              const alreadyDefinedOperationType = definedOperationTypes[operation];
              if (existingOperationTypes[operation]) {
                context.reportError(new _GraphQLError.GraphQLError(`Type for ${operation} already defined in the schema. It cannot be redefined.`, {
                  nodes: operationType
                }));
              } else if (alreadyDefinedOperationType) {
                context.reportError(new _GraphQLError.GraphQLError(`There can be only one ${operation} type in schema.`, {
                  nodes: [alreadyDefinedOperationType, operationType]
                }));
              } else {
                definedOperationTypes[operation] = operationType;
              }
            }
            return false;
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      249: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueTypeNamesRule = UniqueTypeNamesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Unique type names
         *
         * A GraphQL document is only valid if all defined types have unique names.
         */
        function UniqueTypeNamesRule(context) {
          const knownTypeNames = Object.create(null);
          const schema = context.getSchema();
          return {
            ScalarTypeDefinition: checkTypeName,
            ObjectTypeDefinition: checkTypeName,
            InterfaceTypeDefinition: checkTypeName,
            UnionTypeDefinition: checkTypeName,
            EnumTypeDefinition: checkTypeName,
            InputObjectTypeDefinition: checkTypeName
          };
          function checkTypeName(node) {
            const typeName = node.name.value;
            if (schema !== null && schema !== void 0 && schema.getType(typeName)) {
              context.reportError(new _GraphQLError.GraphQLError(`Type "${typeName}" already exists in the schema. It cannot also be defined in this type definition.`, {
                nodes: node.name
              }));
              return;
            }
            if (knownTypeNames[typeName]) {
              context.reportError(new _GraphQLError.GraphQLError(`There can be only one type named "${typeName}".`, {
                nodes: [knownTypeNames[typeName], node.name]
              }));
            } else {
              knownTypeNames[typeName] = node.name;
            }
            return false;
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136
      }],
      250: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UniqueVariableNamesRule = UniqueVariableNamesRule;
        var _groupBy = require("../../jsutils/groupBy.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        /**
         * Unique variable names
         *
         * A GraphQL operation is only valid if all its variables are uniquely named.
         */
        function UniqueVariableNamesRule(context) {
          return {
            OperationDefinition(operationNode) {
              var _operationNode$variab;

              // See: https://github.com/graphql/graphql-js/issues/2203

              /* c8 ignore next */
              const variableDefinitions = (_operationNode$variab = operationNode.variableDefinitions) !== null && _operationNode$variab !== void 0 ? _operationNode$variab : [];
              const seenVariableDefinitions = (0, _groupBy.groupBy)(variableDefinitions, node => node.variable.name.value);
              for (const [variableName, variableNodes] of seenVariableDefinitions) {
                if (variableNodes.length > 1) {
                  context.reportError(new _GraphQLError.GraphQLError(`There can be only one variable named "$${variableName}".`, {
                    nodes: variableNodes.map(node => node.variable.name)
                  }));
                }
              }
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/groupBy.mjs": 151
      }],
      251: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;
        var _didYouMean = require("../../jsutils/didYouMean.mjs");
        var _inspect = require("../../jsutils/inspect.mjs");
        var _keyMap = require("../../jsutils/keyMap.mjs");
        var _suggestionList = require("../../jsutils/suggestionList.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _printer = require("../../language/printer.mjs");
        var _definition = require("../../type/definition.mjs");
        /**
         * Value literals of correct type
         *
         * A GraphQL document is only valid if all value literals are of the type
         * expected at their position.
         *
         * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type
         */
        function ValuesOfCorrectTypeRule(context) {
          return {
            ListValue(node) {
              // Note: TypeInfo will traverse into a list's item type, so look to the
              // parent input type to check if it is a list.
              const type = (0, _definition.getNullableType)(context.getParentInputType());
              if (!(0, _definition.isListType)(type)) {
                isValidValueNode(context, node);
                return false; // Don't traverse further.
              }
            },

            ObjectValue(node) {
              const type = (0, _definition.getNamedType)(context.getInputType());
              if (!(0, _definition.isInputObjectType)(type)) {
                isValidValueNode(context, node);
                return false; // Don't traverse further.
              } // Ensure every required field exists.

              const fieldNodeMap = (0, _keyMap.keyMap)(node.fields, field => field.name.value);
              for (const fieldDef of Object.values(type.getFields())) {
                const fieldNode = fieldNodeMap[fieldDef.name];
                if (!fieldNode && (0, _definition.isRequiredInputField)(fieldDef)) {
                  const typeStr = (0, _inspect.inspect)(fieldDef.type);
                  context.reportError(new _GraphQLError.GraphQLError(`Field "${type.name}.${fieldDef.name}" of required type "${typeStr}" was not provided.`, {
                    nodes: node
                  }));
                }
              }
            },
            ObjectField(node) {
              const parentType = (0, _definition.getNamedType)(context.getParentInputType());
              const fieldType = context.getInputType();
              if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {
                const suggestions = (0, _suggestionList.suggestionList)(node.name.value, Object.keys(parentType.getFields()));
                context.reportError(new _GraphQLError.GraphQLError(`Field "${node.name.value}" is not defined by type "${parentType.name}".` + (0, _didYouMean.didYouMean)(suggestions), {
                  nodes: node
                }));
              }
            },
            NullValue(node) {
              const type = context.getInputType();
              if ((0, _definition.isNonNullType)(type)) {
                context.reportError(new _GraphQLError.GraphQLError(`Expected value of type "${(0, _inspect.inspect)(type)}", found ${(0, _printer.print)(node)}.`, {
                  nodes: node
                }));
              }
            },
            EnumValue: node => isValidValueNode(context, node),
            IntValue: node => isValidValueNode(context, node),
            FloatValue: node => isValidValueNode(context, node),
            StringValue: node => isValidValueNode(context, node),
            BooleanValue: node => isValidValueNode(context, node)
          };
        }
        /**
         * Any value literal may be a valid representation of a Scalar, depending on
         * that scalar type.
         */

        function isValidValueNode(context, node) {
          // Report any error at the full type expected by the location.
          const locationType = context.getInputType();
          if (!locationType) {
            return;
          }
          const type = (0, _definition.getNamedType)(locationType);
          if (!(0, _definition.isLeafType)(type)) {
            const typeStr = (0, _inspect.inspect)(locationType);
            context.reportError(new _GraphQLError.GraphQLError(`Expected value of type "${typeStr}", found ${(0, _printer.print)(node)}.`, {
              nodes: node
            }));
            return;
          } // Scalars and Enums determine if a literal value is valid via parseLiteral(),
          // which may throw or return an invalid value to indicate failure.

          try {
            const parseResult = type.parseLiteral(node, undefined
            /* variables */);

            if (parseResult === undefined) {
              const typeStr = (0, _inspect.inspect)(locationType);
              context.reportError(new _GraphQLError.GraphQLError(`Expected value of type "${typeStr}", found ${(0, _printer.print)(node)}.`, {
                nodes: node
              }));
            }
          } catch (error) {
            const typeStr = (0, _inspect.inspect)(locationType);
            if (error instanceof _GraphQLError.GraphQLError) {
              context.reportError(error);
            } else {
              context.reportError(new _GraphQLError.GraphQLError(`Expected value of type "${typeStr}", found ${(0, _printer.print)(node)}; ` + error.message, {
                nodes: node,
                originalError: error
              }));
            }
          }
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/didYouMean.mjs": 150,
        "../../jsutils/inspect.mjs": 153,
        "../../jsutils/keyMap.mjs": 160,
        "../../jsutils/suggestionList.mjs": 168,
        "../../language/printer.mjs": 183,
        "../../type/definition.mjs": 188
      }],
      252: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _printer = require("../../language/printer.mjs");
        var _definition = require("../../type/definition.mjs");
        var _typeFromAST = require("../../utilities/typeFromAST.mjs");
        /**
         * Variables are input types
         *
         * A GraphQL operation is only valid if all the variables it defines are of
         * input types (scalar, enum, or input object).
         *
         * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types
         */
        function VariablesAreInputTypesRule(context) {
          return {
            VariableDefinition(node) {
              const type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);
              if (type !== undefined && !(0, _definition.isInputType)(type)) {
                const variableName = node.variable.name.value;
                const typeName = (0, _printer.print)(node.type);
                context.reportError(new _GraphQLError.GraphQLError(`Variable "$${variableName}" cannot be non-input type "${typeName}".`, {
                  nodes: node.type
                }));
              }
            }
          };
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../language/printer.mjs": 183,
        "../../type/definition.mjs": 188,
        "../../utilities/typeFromAST.mjs": 215
      }],
      253: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;
        var _inspect = require("../../jsutils/inspect.mjs");
        var _GraphQLError = require("../../error/GraphQLError.mjs");
        var _kinds = require("../../language/kinds.mjs");
        var _definition = require("../../type/definition.mjs");
        var _typeComparators = require("../../utilities/typeComparators.mjs");
        var _typeFromAST = require("../../utilities/typeFromAST.mjs");
        /**
         * Variables in allowed position
         *
         * Variable usages must be compatible with the arguments they are passed to.
         *
         * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed
         */
        function VariablesInAllowedPositionRule(context) {
          let varDefMap = Object.create(null);
          return {
            OperationDefinition: {
              enter() {
                varDefMap = Object.create(null);
              },
              leave(operation) {
                const usages = context.getRecursiveVariableUsages(operation);
                for (const {
                  node,
                  type,
                  defaultValue
                } of usages) {
                  const varName = node.name.value;
                  const varDef = varDefMap[varName];
                  if (varDef && type) {
                    // A var type is allowed if it is the same or more strict (e.g. is
                    // a subtype of) than the expected type. It can be more strict if
                    // the variable type is non-null when the expected type is nullable.
                    // If both are list types, the variable item type can be more strict
                    // than the expected item type (contravariant).
                    const schema = context.getSchema();
                    const varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);
                    if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {
                      const varTypeStr = (0, _inspect.inspect)(varType);
                      const typeStr = (0, _inspect.inspect)(type);
                      context.reportError(new _GraphQLError.GraphQLError(`Variable "$${varName}" of type "${varTypeStr}" used in position expecting type "${typeStr}".`, {
                        nodes: [varDef, node]
                      }));
                    }
                  }
                }
              }
            },
            VariableDefinition(node) {
              varDefMap[node.variable.name.value] = node;
            }
          };
        }
        /**
         * Returns true if the variable is allowed in the location it was found,
         * which includes considering if default values exist for either the variable
         * or the location at which it is located.
         */

        function allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {
          if ((0, _definition.isNonNullType)(locationType) && !(0, _definition.isNonNullType)(varType)) {
            const hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL;
            const hasLocationDefaultValue = locationDefaultValue !== undefined;
            if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
              return false;
            }
            const nullableLocationType = locationType.ofType;
            return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, nullableLocationType);
          }
          return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);
        }
      }, {
        "../../error/GraphQLError.mjs": 136,
        "../../jsutils/inspect.mjs": 153,
        "../../language/kinds.mjs": 176,
        "../../type/definition.mjs": 188,
        "../../utilities/typeComparators.mjs": 214,
        "../../utilities/typeFromAST.mjs": 215
      }],
      254: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NoDeprecatedCustomRule = NoDeprecatedCustomRule;
        var _invariant = require("../../../jsutils/invariant.mjs");
        var _GraphQLError = require("../../../error/GraphQLError.mjs");
        var _definition = require("../../../type/definition.mjs");
        /**
         * No deprecated
         *
         * A GraphQL document is only valid if all selected fields and all used enum values have not been
         * deprecated.
         *
         * Note: This rule is optional and is not part of the Validation section of the GraphQL
         * Specification. The main purpose of this rule is detection of deprecated usages and not
         * necessarily to forbid their use when querying a service.
         */
        function NoDeprecatedCustomRule(context) {
          return {
            Field(node) {
              const fieldDef = context.getFieldDef();
              const deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;
              if (fieldDef && deprecationReason != null) {
                const parentType = context.getParentType();
                parentType != null || (0, _invariant.invariant)(false);
                context.reportError(new _GraphQLError.GraphQLError(`The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`, {
                  nodes: node
                }));
              }
            },
            Argument(node) {
              const argDef = context.getArgument();
              const deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;
              if (argDef && deprecationReason != null) {
                const directiveDef = context.getDirective();
                if (directiveDef != null) {
                  context.reportError(new _GraphQLError.GraphQLError(`Directive "@${directiveDef.name}" argument "${argDef.name}" is deprecated. ${deprecationReason}`, {
                    nodes: node
                  }));
                } else {
                  const parentType = context.getParentType();
                  const fieldDef = context.getFieldDef();
                  parentType != null && fieldDef != null || (0, _invariant.invariant)(false);
                  context.reportError(new _GraphQLError.GraphQLError(`Field "${parentType.name}.${fieldDef.name}" argument "${argDef.name}" is deprecated. ${deprecationReason}`, {
                    nodes: node
                  }));
                }
              }
            },
            ObjectField(node) {
              const inputObjectDef = (0, _definition.getNamedType)(context.getParentInputType());
              if ((0, _definition.isInputObjectType)(inputObjectDef)) {
                const inputFieldDef = inputObjectDef.getFields()[node.name.value];
                const deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;
                if (deprecationReason != null) {
                  context.reportError(new _GraphQLError.GraphQLError(`The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`, {
                    nodes: node
                  }));
                }
              }
            },
            EnumValue(node) {
              const enumValueDef = context.getEnumValue();
              const deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;
              if (enumValueDef && deprecationReason != null) {
                const enumTypeDef = (0, _definition.getNamedType)(context.getInputType());
                enumTypeDef != null || (0, _invariant.invariant)(false);
                context.reportError(new _GraphQLError.GraphQLError(`The enum value "${enumTypeDef.name}.${enumValueDef.name}" is deprecated. ${deprecationReason}`, {
                  nodes: node
                }));
              }
            }
          };
        }
      }, {
        "../../../error/GraphQLError.mjs": 136,
        "../../../jsutils/invariant.mjs": 155,
        "../../../type/definition.mjs": 188
      }],
      255: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;
        var _GraphQLError = require("../../../error/GraphQLError.mjs");
        var _definition = require("../../../type/definition.mjs");
        var _introspection = require("../../../type/introspection.mjs");
        /**
         * Prohibit introspection queries
         *
         * A GraphQL document is only valid if all fields selected are not fields that
         * return an introspection type.
         *
         * Note: This rule is optional and is not part of the Validation section of the
         * GraphQL Specification. This rule effectively disables introspection, which
         * does not reflect best practices and should only be done if absolutely necessary.
         */
        function NoSchemaIntrospectionCustomRule(context) {
          return {
            Field(node) {
              const type = (0, _definition.getNamedType)(context.getType());
              if (type && (0, _introspection.isIntrospectionType)(type)) {
                context.reportError(new _GraphQLError.GraphQLError(`GraphQL introspection has been disabled, but the requested query contained the field "${node.name.value}".`, {
                  nodes: node
                }));
              }
            }
          };
        }
      }, {
        "../../../error/GraphQLError.mjs": 136,
        "../../../type/definition.mjs": 188,
        "../../../type/introspection.mjs": 191
      }],
      256: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.specifiedSDLRules = exports.specifiedRules = void 0;
        var _ExecutableDefinitionsRule = require("./rules/ExecutableDefinitionsRule.mjs");
        var _FieldsOnCorrectTypeRule = require("./rules/FieldsOnCorrectTypeRule.mjs");
        var _FragmentsOnCompositeTypesRule = require("./rules/FragmentsOnCompositeTypesRule.mjs");
        var _KnownArgumentNamesRule = require("./rules/KnownArgumentNamesRule.mjs");
        var _KnownDirectivesRule = require("./rules/KnownDirectivesRule.mjs");
        var _KnownFragmentNamesRule = require("./rules/KnownFragmentNamesRule.mjs");
        var _KnownTypeNamesRule = require("./rules/KnownTypeNamesRule.mjs");
        var _LoneAnonymousOperationRule = require("./rules/LoneAnonymousOperationRule.mjs");
        var _LoneSchemaDefinitionRule = require("./rules/LoneSchemaDefinitionRule.mjs");
        var _NoFragmentCyclesRule = require("./rules/NoFragmentCyclesRule.mjs");
        var _NoUndefinedVariablesRule = require("./rules/NoUndefinedVariablesRule.mjs");
        var _NoUnusedFragmentsRule = require("./rules/NoUnusedFragmentsRule.mjs");
        var _NoUnusedVariablesRule = require("./rules/NoUnusedVariablesRule.mjs");
        var _OverlappingFieldsCanBeMergedRule = require("./rules/OverlappingFieldsCanBeMergedRule.mjs");
        var _PossibleFragmentSpreadsRule = require("./rules/PossibleFragmentSpreadsRule.mjs");
        var _PossibleTypeExtensionsRule = require("./rules/PossibleTypeExtensionsRule.mjs");
        var _ProvidedRequiredArgumentsRule = require("./rules/ProvidedRequiredArgumentsRule.mjs");
        var _ScalarLeafsRule = require("./rules/ScalarLeafsRule.mjs");
        var _SingleFieldSubscriptionsRule = require("./rules/SingleFieldSubscriptionsRule.mjs");
        var _UniqueArgumentDefinitionNamesRule = require("./rules/UniqueArgumentDefinitionNamesRule.mjs");
        var _UniqueArgumentNamesRule = require("./rules/UniqueArgumentNamesRule.mjs");
        var _UniqueDirectiveNamesRule = require("./rules/UniqueDirectiveNamesRule.mjs");
        var _UniqueDirectivesPerLocationRule = require("./rules/UniqueDirectivesPerLocationRule.mjs");
        var _UniqueEnumValueNamesRule = require("./rules/UniqueEnumValueNamesRule.mjs");
        var _UniqueFieldDefinitionNamesRule = require("./rules/UniqueFieldDefinitionNamesRule.mjs");
        var _UniqueFragmentNamesRule = require("./rules/UniqueFragmentNamesRule.mjs");
        var _UniqueInputFieldNamesRule = require("./rules/UniqueInputFieldNamesRule.mjs");
        var _UniqueOperationNamesRule = require("./rules/UniqueOperationNamesRule.mjs");
        var _UniqueOperationTypesRule = require("./rules/UniqueOperationTypesRule.mjs");
        var _UniqueTypeNamesRule = require("./rules/UniqueTypeNamesRule.mjs");
        var _UniqueVariableNamesRule = require("./rules/UniqueVariableNamesRule.mjs");
        var _ValuesOfCorrectTypeRule = require("./rules/ValuesOfCorrectTypeRule.mjs");
        var _VariablesAreInputTypesRule = require("./rules/VariablesAreInputTypesRule.mjs");
        var _VariablesInAllowedPositionRule = require("./rules/VariablesInAllowedPositionRule.mjs");
        // Spec Section: "Executable Definitions"
        // Spec Section: "Field Selections on Objects, Interfaces, and Unions Types"

        // Spec Section: "Fragments on Composite Types"

        // Spec Section: "Argument Names"

        // Spec Section: "Directives Are Defined"

        // Spec Section: "Fragment spread target defined"

        // Spec Section: "Fragment Spread Type Existence"

        // Spec Section: "Lone Anonymous Operation"

        // SDL-specific validation rules

        // Spec Section: "Fragments must not form cycles"

        // Spec Section: "All Variable Used Defined"

        // Spec Section: "Fragments must be used"

        // Spec Section: "All Variables Used"

        // Spec Section: "Field Selection Merging"

        // Spec Section: "Fragment spread is possible"

        // Spec Section: "Argument Optionality"

        // Spec Section: "Leaf Field Selections"

        // Spec Section: "Subscriptions with Single Root Field"

        // Spec Section: "Argument Uniqueness"

        // Spec Section: "Directives Are Unique Per Location"

        // Spec Section: "Fragment Name Uniqueness"

        // Spec Section: "Input Object Field Uniqueness"

        // Spec Section: "Operation Name Uniqueness"

        // Spec Section: "Variable Uniqueness"

        // Spec Section: "Value Type Correctness"

        // Spec Section: "Variables are Input Types"

        // Spec Section: "All Variable Usages Are Allowed"

        /**
         * This set includes all validation rules defined by the GraphQL spec.
         *
         * The order of the rules in this list has been adjusted to lead to the
         * most clear output when encountering multiple validation errors.
         */
        const specifiedRules = exports.specifiedRules = Object.freeze([_ExecutableDefinitionsRule.ExecutableDefinitionsRule, _UniqueOperationNamesRule.UniqueOperationNamesRule, _LoneAnonymousOperationRule.LoneAnonymousOperationRule, _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule, _KnownTypeNamesRule.KnownTypeNamesRule, _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule, _VariablesAreInputTypesRule.VariablesAreInputTypesRule, _ScalarLeafsRule.ScalarLeafsRule, _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule, _UniqueFragmentNamesRule.UniqueFragmentNamesRule, _KnownFragmentNamesRule.KnownFragmentNamesRule, _NoUnusedFragmentsRule.NoUnusedFragmentsRule, _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule, _NoFragmentCyclesRule.NoFragmentCyclesRule, _UniqueVariableNamesRule.UniqueVariableNamesRule, _NoUndefinedVariablesRule.NoUndefinedVariablesRule, _NoUnusedVariablesRule.NoUnusedVariablesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _KnownArgumentNamesRule.KnownArgumentNamesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule, _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule, _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule]);
        /**
         * @internal
         */

        const specifiedSDLRules = exports.specifiedSDLRules = Object.freeze([_LoneSchemaDefinitionRule.LoneSchemaDefinitionRule, _UniqueOperationTypesRule.UniqueOperationTypesRule, _UniqueTypeNamesRule.UniqueTypeNamesRule, _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule, _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule, _UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule, _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule, _KnownTypeNamesRule.KnownTypeNamesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule, _KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule]);
      }, {
        "./rules/ExecutableDefinitionsRule.mjs": 220,
        "./rules/FieldsOnCorrectTypeRule.mjs": 221,
        "./rules/FragmentsOnCompositeTypesRule.mjs": 222,
        "./rules/KnownArgumentNamesRule.mjs": 223,
        "./rules/KnownDirectivesRule.mjs": 224,
        "./rules/KnownFragmentNamesRule.mjs": 225,
        "./rules/KnownTypeNamesRule.mjs": 226,
        "./rules/LoneAnonymousOperationRule.mjs": 227,
        "./rules/LoneSchemaDefinitionRule.mjs": 228,
        "./rules/NoFragmentCyclesRule.mjs": 229,
        "./rules/NoUndefinedVariablesRule.mjs": 230,
        "./rules/NoUnusedFragmentsRule.mjs": 231,
        "./rules/NoUnusedVariablesRule.mjs": 232,
        "./rules/OverlappingFieldsCanBeMergedRule.mjs": 233,
        "./rules/PossibleFragmentSpreadsRule.mjs": 234,
        "./rules/PossibleTypeExtensionsRule.mjs": 235,
        "./rules/ProvidedRequiredArgumentsRule.mjs": 236,
        "./rules/ScalarLeafsRule.mjs": 237,
        "./rules/SingleFieldSubscriptionsRule.mjs": 238,
        "./rules/UniqueArgumentDefinitionNamesRule.mjs": 239,
        "./rules/UniqueArgumentNamesRule.mjs": 240,
        "./rules/UniqueDirectiveNamesRule.mjs": 241,
        "./rules/UniqueDirectivesPerLocationRule.mjs": 242,
        "./rules/UniqueEnumValueNamesRule.mjs": 243,
        "./rules/UniqueFieldDefinitionNamesRule.mjs": 244,
        "./rules/UniqueFragmentNamesRule.mjs": 245,
        "./rules/UniqueInputFieldNamesRule.mjs": 246,
        "./rules/UniqueOperationNamesRule.mjs": 247,
        "./rules/UniqueOperationTypesRule.mjs": 248,
        "./rules/UniqueTypeNamesRule.mjs": 249,
        "./rules/UniqueVariableNamesRule.mjs": 250,
        "./rules/ValuesOfCorrectTypeRule.mjs": 251,
        "./rules/VariablesAreInputTypesRule.mjs": 252,
        "./rules/VariablesInAllowedPositionRule.mjs": 253
      }],
      257: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.assertValidSDL = assertValidSDL;
        exports.assertValidSDLExtension = assertValidSDLExtension;
        exports.validate = validate;
        exports.validateSDL = validateSDL;
        var _devAssert = require("../jsutils/devAssert.mjs");
        var _GraphQLError = require("../error/GraphQLError.mjs");
        var _visitor = require("../language/visitor.mjs");
        var _validate = require("../type/validate.mjs");
        var _TypeInfo = require("../utilities/TypeInfo.mjs");
        var _specifiedRules = require("./specifiedRules.mjs");
        var _ValidationContext = require("./ValidationContext.mjs");
        /**
         * Implements the "Validation" section of the spec.
         *
         * Validation runs synchronously, returning an array of encountered errors, or
         * an empty array if no errors were encountered and the document is valid.
         *
         * A list of specific validation rules may be provided. If not provided, the
         * default list of rules defined by the GraphQL specification will be used.
         *
         * Each validation rules is a function which returns a visitor
         * (see the language/visitor API). Visitor methods are expected to return
         * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
         *
         * Validate will stop validation after a `maxErrors` limit has been reached.
         * Attackers can send pathologically invalid queries to induce a DoS attack,
         * so by default `maxErrors` set to 100 errors.
         *
         * Optionally a custom TypeInfo instance may be provided. If not provided, one
         * will be created from the provided schema.
         */

        function validate(schema, documentAST, rules = _specifiedRules.specifiedRules, options, /** @deprecated will be removed in 17.0.0 */
        typeInfo = new _TypeInfo.TypeInfo(schema)) {
          var _options$maxErrors;
          const maxErrors = (_options$maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors) !== null && _options$maxErrors !== void 0 ? _options$maxErrors : 100;
          documentAST || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.

          (0, _validate.assertValidSchema)(schema);
          const abortObj = Object.freeze({});
          const errors = [];
          const context = new _ValidationContext.ValidationContext(schema, documentAST, typeInfo, error => {
            if (errors.length >= maxErrors) {
              errors.push(new _GraphQLError.GraphQLError('Too many validation errors, error limit reached. Validation aborted.')); // eslint-disable-next-line @typescript-eslint/no-throw-literal

              throw abortObj;
            }
            errors.push(error);
          }); // This uses a specialized visitor which runs multiple visitors in parallel,
          // while maintaining the visitor skip and break API.

          const visitor = (0, _visitor.visitInParallel)(rules.map(rule => rule(context))); // Visit the whole document with each instance of all provided rules.

          try {
            (0, _visitor.visit)(documentAST, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor));
          } catch (e) {
            if (e !== abortObj) {
              throw e;
            }
          }
          return errors;
        }
        /**
         * @internal
         */

        function validateSDL(documentAST, schemaToExtend, rules = _specifiedRules.specifiedSDLRules) {
          const errors = [];
          const context = new _ValidationContext.SDLValidationContext(documentAST, schemaToExtend, error => {
            errors.push(error);
          });
          const visitors = rules.map(rule => rule(context));
          (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));
          return errors;
        }
        /**
         * Utility function which asserts a SDL document is valid by throwing an error
         * if it is invalid.
         *
         * @internal
         */

        function assertValidSDL(documentAST) {
          const errors = validateSDL(documentAST);
          if (errors.length !== 0) {
            throw new Error(errors.map(error => error.message).join('\n\n'));
          }
        }
        /**
         * Utility function which asserts a SDL document is valid by throwing an error
         * if it is invalid.
         *
         * @internal
         */

        function assertValidSDLExtension(documentAST, schema) {
          const errors = validateSDL(documentAST, schema);
          if (errors.length !== 0) {
            throw new Error(errors.map(error => error.message).join('\n\n'));
          }
        }
      }, {
        "../error/GraphQLError.mjs": 136,
        "../jsutils/devAssert.mjs": 149,
        "../language/visitor.mjs": 186,
        "../type/validate.mjs": 194,
        "../utilities/TypeInfo.mjs": 195,
        "./ValidationContext.mjs": 218,
        "./specifiedRules.mjs": 256
      }],
      258: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.versionInfo = exports.version = void 0;
        // Note: This file is autogenerated using "resources/gen-version.js" script and
        // automatically updated by "npm version" command.

        /**
         * A string containing the version of the GraphQL.js library
         */
        const version = exports.version = '16.8.2';
        /**
         * An object containing the components of the GraphQL.js version string
         */

        const versionInfo = exports.versionInfo = Object.freeze({
          major: 16,
          minor: 8,
          patch: 2,
          preReleaseTag: null
        });
      }, {}],
      259: [function (require, module, exports) {
        if (typeof Object.create === 'function') {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
            }
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function () {};
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }
          };
        }
      }, {}],
      260: [function (require, module, exports) {
        module.exports = require('./lib/api')(require('./lib/keccak'));
      }, {
        "./lib/api": 261,
        "./lib/keccak": 265
      }],
      261: [function (require, module, exports) {
        const createKeccak = require('./keccak');
        const createShake = require('./shake');
        module.exports = function (KeccakState) {
          const Keccak = createKeccak(KeccakState);
          const Shake = createShake(KeccakState);
          return function (algorithm, options) {
            const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;
            switch (hash) {
              case 'keccak224':
                return new Keccak(1152, 448, null, 224, options);
              case 'keccak256':
                return new Keccak(1088, 512, null, 256, options);
              case 'keccak384':
                return new Keccak(832, 768, null, 384, options);
              case 'keccak512':
                return new Keccak(576, 1024, null, 512, options);
              case 'sha3-224':
                return new Keccak(1152, 448, 0x06, 224, options);
              case 'sha3-256':
                return new Keccak(1088, 512, 0x06, 256, options);
              case 'sha3-384':
                return new Keccak(832, 768, 0x06, 384, options);
              case 'sha3-512':
                return new Keccak(576, 1024, 0x06, 512, options);
              case 'shake128':
                return new Shake(1344, 256, 0x1f, options);
              case 'shake256':
                return new Shake(1088, 512, 0x1f, options);
              default:
                throw new Error('Invald algorithm: ' + algorithm);
            }
          };
        };
      }, {
        "./keccak": 262,
        "./shake": 263
      }],
      262: [function (require, module, exports) {
        (function (Buffer) {
          (function () {
            const {
              Transform
            } = require('readable-stream');
            module.exports = KeccakState => class Keccak extends Transform {
              constructor(rate, capacity, delimitedSuffix, hashBitLength, options) {
                super(options);
                this._rate = rate;
                this._capacity = capacity;
                this._delimitedSuffix = delimitedSuffix;
                this._hashBitLength = hashBitLength;
                this._options = options;
                this._state = new KeccakState();
                this._state.initialize(rate, capacity);
                this._finalized = false;
              }
              _transform(chunk, encoding, callback) {
                let error = null;
                try {
                  this.update(chunk, encoding);
                } catch (err) {
                  error = err;
                }
                callback(error);
              }
              _flush(callback) {
                let error = null;
                try {
                  this.push(this.digest());
                } catch (err) {
                  error = err;
                }
                callback(error);
              }
              update(data, encoding) {
                if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
                if (this._finalized) throw new Error('Digest already called');
                if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
                this._state.absorb(data);
                return this;
              }
              digest(encoding) {
                if (this._finalized) throw new Error('Digest already called');
                this._finalized = true;
                if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
                let digest = this._state.squeeze(this._hashBitLength / 8);
                if (encoding !== undefined) digest = digest.toString(encoding);
                this._resetState();
                return digest;
              }

              // remove result from memory
              _resetState() {
                this._state.initialize(this._rate, this._capacity);
                return this;
              }

              // because sometimes we need hash right now and little later
              _clone() {
                const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
                this._state.copy(clone._state);
                clone._finalized = this._finalized;
                return clone;
              }
            };
          }).call(this);
        }).call(this, require("buffer").Buffer);
      }, {
        "buffer": 2,
        "readable-stream": 280
      }],
      263: [function (require, module, exports) {
        (function (Buffer) {
          (function () {
            const {
              Transform
            } = require('readable-stream');
            module.exports = KeccakState => class Shake extends Transform {
              constructor(rate, capacity, delimitedSuffix, options) {
                super(options);
                this._rate = rate;
                this._capacity = capacity;
                this._delimitedSuffix = delimitedSuffix;
                this._options = options;
                this._state = new KeccakState();
                this._state.initialize(rate, capacity);
                this._finalized = false;
              }
              _transform(chunk, encoding, callback) {
                let error = null;
                try {
                  this.update(chunk, encoding);
                } catch (err) {
                  error = err;
                }
                callback(error);
              }
              _flush() {}
              _read(size) {
                this.push(this.squeeze(size));
              }
              update(data, encoding) {
                if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
                if (this._finalized) throw new Error('Squeeze already called');
                if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
                this._state.absorb(data);
                return this;
              }
              squeeze(dataByteLength, encoding) {
                if (!this._finalized) {
                  this._finalized = true;
                  this._state.absorbLastFewBits(this._delimitedSuffix);
                }
                let data = this._state.squeeze(dataByteLength);
                if (encoding !== undefined) data = data.toString(encoding);
                return data;
              }
              _resetState() {
                this._state.initialize(this._rate, this._capacity);
                return this;
              }
              _clone() {
                const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
                this._state.copy(clone._state);
                clone._finalized = this._finalized;
                return clone;
              }
            };
          }).call(this);
        }).call(this, require("buffer").Buffer);
      }, {
        "buffer": 2,
        "readable-stream": 280
      }],
      264: [function (require, module, exports) {
        const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
        exports.p1600 = function (s) {
          for (let round = 0; round < 24; ++round) {
            // theta
            const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
            const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
            const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
            const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
            const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
            const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
            const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
            const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
            const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
            const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
            let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
            let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
            const t1slo0 = s[0] ^ lo;
            const t1shi0 = s[1] ^ hi;
            const t1slo5 = s[10] ^ lo;
            const t1shi5 = s[11] ^ hi;
            const t1slo10 = s[20] ^ lo;
            const t1shi10 = s[21] ^ hi;
            const t1slo15 = s[30] ^ lo;
            const t1shi15 = s[31] ^ hi;
            const t1slo20 = s[40] ^ lo;
            const t1shi20 = s[41] ^ hi;
            lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
            hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
            const t1slo1 = s[2] ^ lo;
            const t1shi1 = s[3] ^ hi;
            const t1slo6 = s[12] ^ lo;
            const t1shi6 = s[13] ^ hi;
            const t1slo11 = s[22] ^ lo;
            const t1shi11 = s[23] ^ hi;
            const t1slo16 = s[32] ^ lo;
            const t1shi16 = s[33] ^ hi;
            const t1slo21 = s[42] ^ lo;
            const t1shi21 = s[43] ^ hi;
            lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
            hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
            const t1slo2 = s[4] ^ lo;
            const t1shi2 = s[5] ^ hi;
            const t1slo7 = s[14] ^ lo;
            const t1shi7 = s[15] ^ hi;
            const t1slo12 = s[24] ^ lo;
            const t1shi12 = s[25] ^ hi;
            const t1slo17 = s[34] ^ lo;
            const t1shi17 = s[35] ^ hi;
            const t1slo22 = s[44] ^ lo;
            const t1shi22 = s[45] ^ hi;
            lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
            hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
            const t1slo3 = s[6] ^ lo;
            const t1shi3 = s[7] ^ hi;
            const t1slo8 = s[16] ^ lo;
            const t1shi8 = s[17] ^ hi;
            const t1slo13 = s[26] ^ lo;
            const t1shi13 = s[27] ^ hi;
            const t1slo18 = s[36] ^ lo;
            const t1shi18 = s[37] ^ hi;
            const t1slo23 = s[46] ^ lo;
            const t1shi23 = s[47] ^ hi;
            lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
            hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
            const t1slo4 = s[8] ^ lo;
            const t1shi4 = s[9] ^ hi;
            const t1slo9 = s[18] ^ lo;
            const t1shi9 = s[19] ^ hi;
            const t1slo14 = s[28] ^ lo;
            const t1shi14 = s[29] ^ hi;
            const t1slo19 = s[38] ^ lo;
            const t1shi19 = s[39] ^ hi;
            const t1slo24 = s[48] ^ lo;
            const t1shi24 = s[49] ^ hi;

            // rho & pi
            const t2slo0 = t1slo0;
            const t2shi0 = t1shi0;
            const t2slo16 = t1shi5 << 4 | t1slo5 >>> 28;
            const t2shi16 = t1slo5 << 4 | t1shi5 >>> 28;
            const t2slo7 = t1slo10 << 3 | t1shi10 >>> 29;
            const t2shi7 = t1shi10 << 3 | t1slo10 >>> 29;
            const t2slo23 = t1shi15 << 9 | t1slo15 >>> 23;
            const t2shi23 = t1slo15 << 9 | t1shi15 >>> 23;
            const t2slo14 = t1slo20 << 18 | t1shi20 >>> 14;
            const t2shi14 = t1shi20 << 18 | t1slo20 >>> 14;
            const t2slo10 = t1slo1 << 1 | t1shi1 >>> 31;
            const t2shi10 = t1shi1 << 1 | t1slo1 >>> 31;
            const t2slo1 = t1shi6 << 12 | t1slo6 >>> 20;
            const t2shi1 = t1slo6 << 12 | t1shi6 >>> 20;
            const t2slo17 = t1slo11 << 10 | t1shi11 >>> 22;
            const t2shi17 = t1shi11 << 10 | t1slo11 >>> 22;
            const t2slo8 = t1shi16 << 13 | t1slo16 >>> 19;
            const t2shi8 = t1slo16 << 13 | t1shi16 >>> 19;
            const t2slo24 = t1slo21 << 2 | t1shi21 >>> 30;
            const t2shi24 = t1shi21 << 2 | t1slo21 >>> 30;
            const t2slo20 = t1shi2 << 30 | t1slo2 >>> 2;
            const t2shi20 = t1slo2 << 30 | t1shi2 >>> 2;
            const t2slo11 = t1slo7 << 6 | t1shi7 >>> 26;
            const t2shi11 = t1shi7 << 6 | t1slo7 >>> 26;
            const t2slo2 = t1shi12 << 11 | t1slo12 >>> 21;
            const t2shi2 = t1slo12 << 11 | t1shi12 >>> 21;
            const t2slo18 = t1slo17 << 15 | t1shi17 >>> 17;
            const t2shi18 = t1shi17 << 15 | t1slo17 >>> 17;
            const t2slo9 = t1shi22 << 29 | t1slo22 >>> 3;
            const t2shi9 = t1slo22 << 29 | t1shi22 >>> 3;
            const t2slo5 = t1slo3 << 28 | t1shi3 >>> 4;
            const t2shi5 = t1shi3 << 28 | t1slo3 >>> 4;
            const t2slo21 = t1shi8 << 23 | t1slo8 >>> 9;
            const t2shi21 = t1slo8 << 23 | t1shi8 >>> 9;
            const t2slo12 = t1slo13 << 25 | t1shi13 >>> 7;
            const t2shi12 = t1shi13 << 25 | t1slo13 >>> 7;
            const t2slo3 = t1slo18 << 21 | t1shi18 >>> 11;
            const t2shi3 = t1shi18 << 21 | t1slo18 >>> 11;
            const t2slo19 = t1shi23 << 24 | t1slo23 >>> 8;
            const t2shi19 = t1slo23 << 24 | t1shi23 >>> 8;
            const t2slo15 = t1slo4 << 27 | t1shi4 >>> 5;
            const t2shi15 = t1shi4 << 27 | t1slo4 >>> 5;
            const t2slo6 = t1slo9 << 20 | t1shi9 >>> 12;
            const t2shi6 = t1shi9 << 20 | t1slo9 >>> 12;
            const t2slo22 = t1shi14 << 7 | t1slo14 >>> 25;
            const t2shi22 = t1slo14 << 7 | t1shi14 >>> 25;
            const t2slo13 = t1slo19 << 8 | t1shi19 >>> 24;
            const t2shi13 = t1shi19 << 8 | t1slo19 >>> 24;
            const t2slo4 = t1slo24 << 14 | t1shi24 >>> 18;
            const t2shi4 = t1shi24 << 14 | t1slo24 >>> 18;

            // chi
            s[0] = t2slo0 ^ ~t2slo1 & t2slo2;
            s[1] = t2shi0 ^ ~t2shi1 & t2shi2;
            s[10] = t2slo5 ^ ~t2slo6 & t2slo7;
            s[11] = t2shi5 ^ ~t2shi6 & t2shi7;
            s[20] = t2slo10 ^ ~t2slo11 & t2slo12;
            s[21] = t2shi10 ^ ~t2shi11 & t2shi12;
            s[30] = t2slo15 ^ ~t2slo16 & t2slo17;
            s[31] = t2shi15 ^ ~t2shi16 & t2shi17;
            s[40] = t2slo20 ^ ~t2slo21 & t2slo22;
            s[41] = t2shi20 ^ ~t2shi21 & t2shi22;
            s[2] = t2slo1 ^ ~t2slo2 & t2slo3;
            s[3] = t2shi1 ^ ~t2shi2 & t2shi3;
            s[12] = t2slo6 ^ ~t2slo7 & t2slo8;
            s[13] = t2shi6 ^ ~t2shi7 & t2shi8;
            s[22] = t2slo11 ^ ~t2slo12 & t2slo13;
            s[23] = t2shi11 ^ ~t2shi12 & t2shi13;
            s[32] = t2slo16 ^ ~t2slo17 & t2slo18;
            s[33] = t2shi16 ^ ~t2shi17 & t2shi18;
            s[42] = t2slo21 ^ ~t2slo22 & t2slo23;
            s[43] = t2shi21 ^ ~t2shi22 & t2shi23;
            s[4] = t2slo2 ^ ~t2slo3 & t2slo4;
            s[5] = t2shi2 ^ ~t2shi3 & t2shi4;
            s[14] = t2slo7 ^ ~t2slo8 & t2slo9;
            s[15] = t2shi7 ^ ~t2shi8 & t2shi9;
            s[24] = t2slo12 ^ ~t2slo13 & t2slo14;
            s[25] = t2shi12 ^ ~t2shi13 & t2shi14;
            s[34] = t2slo17 ^ ~t2slo18 & t2slo19;
            s[35] = t2shi17 ^ ~t2shi18 & t2shi19;
            s[44] = t2slo22 ^ ~t2slo23 & t2slo24;
            s[45] = t2shi22 ^ ~t2shi23 & t2shi24;
            s[6] = t2slo3 ^ ~t2slo4 & t2slo0;
            s[7] = t2shi3 ^ ~t2shi4 & t2shi0;
            s[16] = t2slo8 ^ ~t2slo9 & t2slo5;
            s[17] = t2shi8 ^ ~t2shi9 & t2shi5;
            s[26] = t2slo13 ^ ~t2slo14 & t2slo10;
            s[27] = t2shi13 ^ ~t2shi14 & t2shi10;
            s[36] = t2slo18 ^ ~t2slo19 & t2slo15;
            s[37] = t2shi18 ^ ~t2shi19 & t2shi15;
            s[46] = t2slo23 ^ ~t2slo24 & t2slo20;
            s[47] = t2shi23 ^ ~t2shi24 & t2shi20;
            s[8] = t2slo4 ^ ~t2slo0 & t2slo1;
            s[9] = t2shi4 ^ ~t2shi0 & t2shi1;
            s[18] = t2slo9 ^ ~t2slo5 & t2slo6;
            s[19] = t2shi9 ^ ~t2shi5 & t2shi6;
            s[28] = t2slo14 ^ ~t2slo10 & t2slo11;
            s[29] = t2shi14 ^ ~t2shi10 & t2shi11;
            s[38] = t2slo19 ^ ~t2slo15 & t2slo16;
            s[39] = t2shi19 ^ ~t2shi15 & t2shi16;
            s[48] = t2slo24 ^ ~t2slo20 & t2slo21;
            s[49] = t2shi24 ^ ~t2shi20 & t2shi21;

            // iota
            s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
            s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
          }
        };
      }, {}],
      265: [function (require, module, exports) {
        (function (Buffer) {
          (function () {
            const keccakState = require('./keccak-state-unroll');
            function Keccak() {
              // much faster than `new Array(50)`
              this.state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              this.blockSize = null;
              this.count = 0;
              this.squeezing = false;
            }
            Keccak.prototype.initialize = function (rate, capacity) {
              for (let i = 0; i < 50; ++i) this.state[i] = 0;
              this.blockSize = rate / 8;
              this.count = 0;
              this.squeezing = false;
            };
            Keccak.prototype.absorb = function (data) {
              for (let i = 0; i < data.length; ++i) {
                this.state[~~(this.count / 4)] ^= data[i] << 8 * (this.count % 4);
                this.count += 1;
                if (this.count === this.blockSize) {
                  keccakState.p1600(this.state);
                  this.count = 0;
                }
              }
            };
            Keccak.prototype.absorbLastFewBits = function (bits) {
              this.state[~~(this.count / 4)] ^= bits << 8 * (this.count % 4);
              if ((bits & 0x80) !== 0 && this.count === this.blockSize - 1) keccakState.p1600(this.state);
              this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << 8 * ((this.blockSize - 1) % 4);
              keccakState.p1600(this.state);
              this.count = 0;
              this.squeezing = true;
            };
            Keccak.prototype.squeeze = function (length) {
              if (!this.squeezing) this.absorbLastFewBits(0x01);
              const output = Buffer.alloc(length);
              for (let i = 0; i < length; ++i) {
                output[i] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 0xff;
                this.count += 1;
                if (this.count === this.blockSize) {
                  keccakState.p1600(this.state);
                  this.count = 0;
                }
              }
              return output;
            };
            Keccak.prototype.copy = function (dest) {
              for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i];
              dest.blockSize = this.blockSize;
              dest.count = this.count;
              dest.squeezing = this.squeezing;
            };
            module.exports = Keccak;
          }).call(this);
        }).call(this, require("buffer").Buffer);
      }, {
        "./keccak-state-unroll": 264,
        "buffer": 2
      }],
      266: [function (require, module, exports) {
        'use strict';

        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var codes = {};
        function createErrorType(code, message, Base) {
          if (!Base) {
            Base = Error;
          }
          function getMessage(arg1, arg2, arg3) {
            if (typeof message === 'string') {
              return message;
            } else {
              return message(arg1, arg2, arg3);
            }
          }
          var NodeError = /*#__PURE__*/
          function (_Base) {
            _inheritsLoose(NodeError, _Base);
            function NodeError(arg1, arg2, arg3) {
              return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
            }
            return NodeError;
          }(Base);
          NodeError.prototype.name = Base.name;
          NodeError.prototype.code = code;
          codes[code] = NodeError;
        } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js

        function oneOf(expected, thing) {
          if (Array.isArray(expected)) {
            var len = expected.length;
            expected = expected.map(function (i) {
              return String(i);
            });
            if (len > 2) {
              return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
            } else if (len === 2) {
              return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
            } else {
              return "of ".concat(thing, " ").concat(expected[0]);
            }
          } else {
            return "of ".concat(thing, " ").concat(String(expected));
          }
        } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith

        function startsWith(str, search, pos) {
          return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
        } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith

        function endsWith(str, search, this_len) {
          if (this_len === undefined || this_len > str.length) {
            this_len = str.length;
          }
          return str.substring(this_len - search.length, this_len) === search;
        } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes

        function includes(str, search, start) {
          if (typeof start !== 'number') {
            start = 0;
          }
          if (start + search.length > str.length) {
            return false;
          } else {
            return str.indexOf(search, start) !== -1;
          }
        }
        createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
          return 'The value "' + value + '" is invalid for option "' + name + '"';
        }, TypeError);
        createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
          // determiner: 'must be' or 'must not be'
          var determiner;
          if (typeof expected === 'string' && startsWith(expected, 'not ')) {
            determiner = 'must not be';
            expected = expected.replace(/^not /, '');
          } else {
            determiner = 'must be';
          }
          var msg;
          if (endsWith(name, ' argument')) {
            // For cases like 'first argument'
            msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
          } else {
            var type = includes(name, '.') ? 'property' : 'argument';
            msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
          }
          msg += ". Received type ".concat(typeof actual);
          return msg;
        }, TypeError);
        createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
        createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
          return 'The ' + name + ' method is not implemented';
        });
        createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
        createErrorType('ERR_STREAM_DESTROYED', function (name) {
          return 'Cannot call ' + name + ' after a stream was destroyed';
        });
        createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
        createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
        createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
        createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
        createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
          return 'Unknown encoding: ' + arg;
        }, TypeError);
        createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
        module.exports.codes = codes;
      }, {}],
      267: [function (require, module, exports) {
        (function (process) {
          (function () {
            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            // a duplex stream is just a stream that is both readable and writable.
            // Since JS doesn't have multiple prototypal inheritance, this class
            // prototypally inherits from Readable, and then parasitically from
            // Writable.

            'use strict';

            /*<replacement>*/
            var objectKeys = Object.keys || function (obj) {
              var keys = [];
              for (var key in obj) keys.push(key);
              return keys;
            };
            /*</replacement>*/

            module.exports = Duplex;
            var Readable = require('./_stream_readable');
            var Writable = require('./_stream_writable');
            require('inherits')(Duplex, Readable);
            {
              // Allow the keys array to be GC'ed.
              var keys = objectKeys(Writable.prototype);
              for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
              }
            }
            function Duplex(options) {
              if (!(this instanceof Duplex)) return new Duplex(options);
              Readable.call(this, options);
              Writable.call(this, options);
              this.allowHalfOpen = true;
              if (options) {
                if (options.readable === false) this.readable = false;
                if (options.writable === false) this.writable = false;
                if (options.allowHalfOpen === false) {
                  this.allowHalfOpen = false;
                  this.once('end', onend);
                }
              }
            }
            Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                return this._writableState.highWaterMark;
              }
            });
            Object.defineProperty(Duplex.prototype, 'writableBuffer', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                return this._writableState && this._writableState.getBuffer();
              }
            });
            Object.defineProperty(Duplex.prototype, 'writableLength', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                return this._writableState.length;
              }
            });

            // the no-half-open enforcer
            function onend() {
              // If the writable side ended, then we're ok.
              if (this._writableState.ended) return;

              // no more data can be written.
              // But allow more writes to happen in this tick.
              process.nextTick(onEndNT, this);
            }
            function onEndNT(self) {
              self.end();
            }
            Object.defineProperty(Duplex.prototype, 'destroyed', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                if (this._readableState === undefined || this._writableState === undefined) {
                  return false;
                }
                return this._readableState.destroyed && this._writableState.destroyed;
              },
              set: function set(value) {
                // we ignore the value if the stream
                // has not been initialized yet
                if (this._readableState === undefined || this._writableState === undefined) {
                  return;
                }

                // backward compatibility, the user is explicitly
                // managing destroyed
                this._readableState.destroyed = value;
                this._writableState.destroyed = value;
              }
            });
          }).call(this);
        }).call(this, require('_process'));
      }, {
        "./_stream_readable": 269,
        "./_stream_writable": 271,
        "_process": 5,
        "inherits": 259
      }],
      268: [function (require, module, exports) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // a passthrough stream.
        // basically just the most minimal sort of Transform stream.
        // Every written chunk gets output as-is.

        'use strict';

        module.exports = PassThrough;
        var Transform = require('./_stream_transform');
        require('inherits')(PassThrough, Transform);
        function PassThrough(options) {
          if (!(this instanceof PassThrough)) return new PassThrough(options);
          Transform.call(this, options);
        }
        PassThrough.prototype._transform = function (chunk, encoding, cb) {
          cb(null, chunk);
        };
      }, {
        "./_stream_transform": 270,
        "inherits": 259
      }],
      269: [function (require, module, exports) {
        (function (process, global) {
          (function () {
            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            'use strict';

            module.exports = Readable;

            /*<replacement>*/
            var Duplex;
            /*</replacement>*/

            Readable.ReadableState = ReadableState;

            /*<replacement>*/
            var EE = require('events').EventEmitter;
            var EElistenerCount = function EElistenerCount(emitter, type) {
              return emitter.listeners(type).length;
            };
            /*</replacement>*/

            /*<replacement>*/
            var Stream = require('./internal/streams/stream');
            /*</replacement>*/

            var Buffer = require('buffer').Buffer;
            var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
            function _uint8ArrayToBuffer(chunk) {
              return Buffer.from(chunk);
            }
            function _isUint8Array(obj) {
              return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }

            /*<replacement>*/
            var debugUtil = require('util');
            var debug;
            if (debugUtil && debugUtil.debuglog) {
              debug = debugUtil.debuglog('stream');
            } else {
              debug = function debug() {};
            }
            /*</replacement>*/

            var BufferList = require('./internal/streams/buffer_list');
            var destroyImpl = require('./internal/streams/destroy');
            var _require = require('./internal/streams/state'),
              getHighWaterMark = _require.getHighWaterMark;
            var _require$codes = require('../errors').codes,
              ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
              ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
              ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
              ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

            // Lazy loaded to improve the startup performance.
            var StringDecoder;
            var createReadableStreamAsyncIterator;
            var from;
            require('inherits')(Readable, Stream);
            var errorOrDestroy = destroyImpl.errorOrDestroy;
            var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
            function prependListener(emitter, event, fn) {
              // Sadly this is not cacheable as some libraries bundle their own
              // event emitter implementation with them.
              if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

              // This is a hack to make sure that our error handler is attached before any
              // userland ones.  NEVER DO THIS. This is here only because this code needs
              // to continue to work with older versions of Node.js that do not include
              // the prependListener() method. The goal is to eventually remove this hack.
              if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
            }
            function ReadableState(options, stream, isDuplex) {
              Duplex = Duplex || require('./_stream_duplex');
              options = options || {};

              // Duplex streams are both readable and writable, but share
              // the same options object.
              // However, some cases require setting options to different
              // values for the readable and the writable sides of the duplex stream.
              // These options can be provided separately as readableXXX and writableXXX.
              if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

              // object stream flag. Used to make read(n) ignore n and to
              // make all the buffer merging and length checks go away
              this.objectMode = !!options.objectMode;
              if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

              // the point at which it stops calling _read() to fill the buffer
              // Note: 0 is a valid value, means "don't call _read preemptively ever"
              this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

              // A linked list is used to store data chunks instead of an array because the
              // linked list can remove elements from the beginning faster than
              // array.shift()
              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false;

              // a flag to be able to tell if the event 'readable'/'data' is emitted
              // immediately, or on a later tick.  We set this to true at first, because
              // any actions that shouldn't happen until "later" should generally also
              // not happen before the first read call.
              this.sync = true;

              // whenever we return null, then we set a flag to say
              // that we're awaiting a 'readable' event emission.
              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false;
              this.paused = true;

              // Should close be emitted on destroy. Defaults to true.
              this.emitClose = options.emitClose !== false;

              // Should .destroy() be called after 'end' (and potentially 'finish')
              this.autoDestroy = !!options.autoDestroy;

              // has it been destroyed
              this.destroyed = false;

              // Crypto is kind of old and crusty.  Historically, its default string
              // encoding is 'binary' so we have to make this configurable.
              // Everything else in the universe uses 'utf8', though.
              this.defaultEncoding = options.defaultEncoding || 'utf8';

              // the number of writers that are awaiting a drain event in .pipe()s
              this.awaitDrain = 0;

              // if true, a maybeReadMore has been scheduled
              this.readingMore = false;
              this.decoder = null;
              this.encoding = null;
              if (options.encoding) {
                if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                this.decoder = new StringDecoder(options.encoding);
                this.encoding = options.encoding;
              }
            }
            function Readable(options) {
              Duplex = Duplex || require('./_stream_duplex');
              if (!(this instanceof Readable)) return new Readable(options);

              // Checking for a Stream.Duplex instance is faster here instead of inside
              // the ReadableState constructor, at least with V8 6.5
              var isDuplex = this instanceof Duplex;
              this._readableState = new ReadableState(options, this, isDuplex);

              // legacy
              this.readable = true;
              if (options) {
                if (typeof options.read === 'function') this._read = options.read;
                if (typeof options.destroy === 'function') this._destroy = options.destroy;
              }
              Stream.call(this);
            }
            Object.defineProperty(Readable.prototype, 'destroyed', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                if (this._readableState === undefined) {
                  return false;
                }
                return this._readableState.destroyed;
              },
              set: function set(value) {
                // we ignore the value if the stream
                // has not been initialized yet
                if (!this._readableState) {
                  return;
                }

                // backward compatibility, the user is explicitly
                // managing destroyed
                this._readableState.destroyed = value;
              }
            });
            Readable.prototype.destroy = destroyImpl.destroy;
            Readable.prototype._undestroy = destroyImpl.undestroy;
            Readable.prototype._destroy = function (err, cb) {
              cb(err);
            };

            // Manually shove something into the read() buffer.
            // This returns true if the highWaterMark has not been hit yet,
            // similar to how Writable.write() returns true if you should
            // write() some more.
            Readable.prototype.push = function (chunk, encoding) {
              var state = this._readableState;
              var skipChunkCheck;
              if (!state.objectMode) {
                if (typeof chunk === 'string') {
                  encoding = encoding || state.defaultEncoding;
                  if (encoding !== state.encoding) {
                    chunk = Buffer.from(chunk, encoding);
                    encoding = '';
                  }
                  skipChunkCheck = true;
                }
              } else {
                skipChunkCheck = true;
              }
              return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
            };

            // Unshift should *always* be something directly out of read()
            Readable.prototype.unshift = function (chunk) {
              return readableAddChunk(this, chunk, null, true, false);
            };
            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
              debug('readableAddChunk', chunk);
              var state = stream._readableState;
              if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
              } else {
                var er;
                if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                if (er) {
                  errorOrDestroy(stream, er);
                } else if (state.objectMode || chunk && chunk.length > 0) {
                  if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                    chunk = _uint8ArrayToBuffer(chunk);
                  }
                  if (addToFront) {
                    if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
                  } else if (state.ended) {
                    errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
                  } else if (state.destroyed) {
                    return false;
                  } else {
                    state.reading = false;
                    if (state.decoder && !encoding) {
                      chunk = state.decoder.write(chunk);
                      if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
                    } else {
                      addChunk(stream, state, chunk, false);
                    }
                  }
                } else if (!addToFront) {
                  state.reading = false;
                  maybeReadMore(stream, state);
                }
              }

              // We can push more data if we are below the highWaterMark.
              // Also, if we have no data yet, we can stand some more bytes.
              // This is to work around cases where hwm=0, such as the repl.
              return !state.ended && (state.length < state.highWaterMark || state.length === 0);
            }
            function addChunk(stream, state, chunk, addToFront) {
              if (state.flowing && state.length === 0 && !state.sync) {
                state.awaitDrain = 0;
                stream.emit('data', chunk);
              } else {
                // update the buffer info.
                state.length += state.objectMode ? 1 : chunk.length;
                if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
                if (state.needReadable) emitReadable(stream);
              }
              maybeReadMore(stream, state);
            }
            function chunkInvalid(state, chunk) {
              var er;
              if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
              }
              return er;
            }
            Readable.prototype.isPaused = function () {
              return this._readableState.flowing === false;
            };

            // backwards compatibility.
            Readable.prototype.setEncoding = function (enc) {
              if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
              var decoder = new StringDecoder(enc);
              this._readableState.decoder = decoder;
              // If setEncoding(null), decoder.encoding equals utf8
              this._readableState.encoding = this._readableState.decoder.encoding;

              // Iterate over current buffer to convert already stored Buffers:
              var p = this._readableState.buffer.head;
              var content = '';
              while (p !== null) {
                content += decoder.write(p.data);
                p = p.next;
              }
              this._readableState.buffer.clear();
              if (content !== '') this._readableState.buffer.push(content);
              this._readableState.length = content.length;
              return this;
            };

            // Don't raise the hwm > 1GB
            var MAX_HWM = 0x40000000;
            function computeNewHighWaterMark(n) {
              if (n >= MAX_HWM) {
                // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
                n = MAX_HWM;
              } else {
                // Get the next highest power of 2 to prevent increasing hwm excessively in
                // tiny amounts
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
              }
              return n;
            }

            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function howMuchToRead(n, state) {
              if (n <= 0 || state.length === 0 && state.ended) return 0;
              if (state.objectMode) return 1;
              if (n !== n) {
                // Only flow one buffer at a time
                if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
              }
              // If we're asking for more than the current hwm, then raise the hwm.
              if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
              if (n <= state.length) return n;
              // Don't have enough
              if (!state.ended) {
                state.needReadable = true;
                return 0;
              }
              return state.length;
            }

            // you can override either this method, or the async _read(n) below.
            Readable.prototype.read = function (n) {
              debug('read', n);
              n = parseInt(n, 10);
              var state = this._readableState;
              var nOrig = n;
              if (n !== 0) state.emittedReadable = false;

              // if we're doing read(0) to trigger a readable event, but we
              // already have a bunch of data in the buffer, then just trigger
              // the 'readable' event and move on.
              if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
                debug('read: emitReadable', state.length, state.ended);
                if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                return null;
              }
              n = howMuchToRead(n, state);

              // if we've ended, and we're now clear, then finish it up.
              if (n === 0 && state.ended) {
                if (state.length === 0) endReadable(this);
                return null;
              }

              // All the actual chunk generation logic needs to be
              // *below* the call to _read.  The reason is that in certain
              // synthetic stream cases, such as passthrough streams, _read
              // may be a completely synchronous operation which may change
              // the state of the read buffer, providing enough data when
              // before there was *not* enough.
              //
              // So, the steps are:
              // 1. Figure out what the state of things will be after we do
              // a read from the buffer.
              //
              // 2. If that resulting state will trigger a _read, then call _read.
              // Note that this may be asynchronous, or synchronous.  Yes, it is
              // deeply ugly to write APIs this way, but that still doesn't mean
              // that the Readable class should behave improperly, as streams are
              // designed to be sync/async agnostic.
              // Take note if the _read call is sync or async (ie, if the read call
              // has returned yet), so that we know whether or not it's safe to emit
              // 'readable' etc.
              //
              // 3. Actually pull the requested chunks out of the buffer and return.

              // if we need a readable event, then we need to do some reading.
              var doRead = state.needReadable;
              debug('need readable', doRead);

              // if we currently have less than the highWaterMark, then also read some
              if (state.length === 0 || state.length - n < state.highWaterMark) {
                doRead = true;
                debug('length less than watermark', doRead);
              }

              // however, if we've ended, then there's no point, and if we're already
              // reading, then it's unnecessary.
              if (state.ended || state.reading) {
                doRead = false;
                debug('reading or ended', doRead);
              } else if (doRead) {
                debug('do read');
                state.reading = true;
                state.sync = true;
                // if the length is currently zero, then we *need* a readable event.
                if (state.length === 0) state.needReadable = true;
                // call internal read method
                this._read(state.highWaterMark);
                state.sync = false;
                // If _read pushed data synchronously, then `reading` will be false,
                // and we need to re-evaluate how much data we can return to the user.
                if (!state.reading) n = howMuchToRead(nOrig, state);
              }
              var ret;
              if (n > 0) ret = fromList(n, state);else ret = null;
              if (ret === null) {
                state.needReadable = state.length <= state.highWaterMark;
                n = 0;
              } else {
                state.length -= n;
                state.awaitDrain = 0;
              }
              if (state.length === 0) {
                // If we have nothing in the buffer, then we want to know
                // as soon as we *do* get something into the buffer.
                if (!state.ended) state.needReadable = true;

                // If we tried to read() past the EOF, then emit end on the next tick.
                if (nOrig !== n && state.ended) endReadable(this);
              }
              if (ret !== null) this.emit('data', ret);
              return ret;
            };
            function onEofChunk(stream, state) {
              debug('onEofChunk');
              if (state.ended) return;
              if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }
              state.ended = true;
              if (state.sync) {
                // if we are sync, wait until next tick to emit the data.
                // Otherwise we risk emitting data in the flow()
                // the readable code triggers during a read() call
                emitReadable(stream);
              } else {
                // emit 'readable' now to make sure it gets picked up.
                state.needReadable = false;
                if (!state.emittedReadable) {
                  state.emittedReadable = true;
                  emitReadable_(stream);
                }
              }
            }

            // Don't emit readable right away in sync mode, because this can trigger
            // another read() call => stack overflow.  This way, it might trigger
            // a nextTick recursion warning, but that's not so bad.
            function emitReadable(stream) {
              var state = stream._readableState;
              debug('emitReadable', state.needReadable, state.emittedReadable);
              state.needReadable = false;
              if (!state.emittedReadable) {
                debug('emitReadable', state.flowing);
                state.emittedReadable = true;
                process.nextTick(emitReadable_, stream);
              }
            }
            function emitReadable_(stream) {
              var state = stream._readableState;
              debug('emitReadable_', state.destroyed, state.length, state.ended);
              if (!state.destroyed && (state.length || state.ended)) {
                stream.emit('readable');
                state.emittedReadable = false;
              }

              // The stream needs another readable event if
              // 1. It is not flowing, as the flow mechanism will take
              //    care of it.
              // 2. It is not ended.
              // 3. It is below the highWaterMark, so we can schedule
              //    another readable later.
              state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
              flow(stream);
            }

            // at this point, the user has presumably seen the 'readable' event,
            // and called read() to consume some data.  that may have triggered
            // in turn another _read(n) call, in which case reading = true if
            // it's in progress.
            // However, if we're not ended, or reading, and the length < hwm,
            // then go ahead and try to read some more preemptively.
            function maybeReadMore(stream, state) {
              if (!state.readingMore) {
                state.readingMore = true;
                process.nextTick(maybeReadMore_, stream, state);
              }
            }
            function maybeReadMore_(stream, state) {
              // Attempt to read more data if we should.
              //
              // The conditions for reading more data are (one of):
              // - Not enough data buffered (state.length < state.highWaterMark). The loop
              //   is responsible for filling the buffer with enough data if such data
              //   is available. If highWaterMark is 0 and we are not in the flowing mode
              //   we should _not_ attempt to buffer any extra data. We'll get more data
              //   when the stream consumer calls read() instead.
              // - No data in the buffer, and the stream is in flowing mode. In this mode
              //   the loop below is responsible for ensuring read() is called. Failing to
              //   call read here would abort the flow and there's no other mechanism for
              //   continuing the flow if the stream consumer has just subscribed to the
              //   'data' event.
              //
              // In addition to the above conditions to keep reading data, the following
              // conditions prevent the data from being read:
              // - The stream has ended (state.ended).
              // - There is already a pending 'read' operation (state.reading). This is a
              //   case where the the stream has called the implementation defined _read()
              //   method, but they are processing the call asynchronously and have _not_
              //   called push() with new data. In this case we skip performing more
              //   read()s. The execution ends in this method again after the _read() ends
              //   up calling push() with more data.
              while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
                var len = state.length;
                debug('maybeReadMore read 0');
                stream.read(0);
                if (len === state.length)
                  // didn't get any data, stop spinning.
                  break;
              }
              state.readingMore = false;
            }

            // abstract method.  to be overridden in specific implementation classes.
            // call cb(er, data) where data is <= n in length.
            // for virtual (non-string, non-buffer) streams, "length" is somewhat
            // arbitrary, and perhaps not very meaningful.
            Readable.prototype._read = function (n) {
              errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
            };
            Readable.prototype.pipe = function (dest, pipeOpts) {
              var src = this;
              var state = this._readableState;
              switch (state.pipesCount) {
                case 0:
                  state.pipes = dest;
                  break;
                case 1:
                  state.pipes = [state.pipes, dest];
                  break;
                default:
                  state.pipes.push(dest);
                  break;
              }
              state.pipesCount += 1;
              debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
              var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
              var endFn = doEnd ? onend : unpipe;
              if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
              dest.on('unpipe', onunpipe);
              function onunpipe(readable, unpipeInfo) {
                debug('onunpipe');
                if (readable === src) {
                  if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                    unpipeInfo.hasUnpiped = true;
                    cleanup();
                  }
                }
              }
              function onend() {
                debug('onend');
                dest.end();
              }

              // when the dest drains, it reduces the awaitDrain counter
              // on the source.  This would be more elegant with a .once()
              // handler in flow(), but adding and removing repeatedly is
              // too slow.
              var ondrain = pipeOnDrain(src);
              dest.on('drain', ondrain);
              var cleanedUp = false;
              function cleanup() {
                debug('cleanup');
                // cleanup event handlers once the pipe is broken
                dest.removeListener('close', onclose);
                dest.removeListener('finish', onfinish);
                dest.removeListener('drain', ondrain);
                dest.removeListener('error', onerror);
                dest.removeListener('unpipe', onunpipe);
                src.removeListener('end', onend);
                src.removeListener('end', unpipe);
                src.removeListener('data', ondata);
                cleanedUp = true;

                // if the reader is waiting for a drain event from this
                // specific writer, then it would cause it to never start
                // flowing again.
                // So, if this is awaiting a drain, then we just call it now.
                // If we don't know, then assume that we are waiting for one.
                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
              }
              src.on('data', ondata);
              function ondata(chunk) {
                debug('ondata');
                var ret = dest.write(chunk);
                debug('dest.write', ret);
                if (ret === false) {
                  // If the user unpiped during `dest.write()`, it is possible
                  // to get stuck in a permanently paused state if that write
                  // also returned false.
                  // => Check whether `dest` is still a piping destination.
                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                    debug('false write response, pause', state.awaitDrain);
                    state.awaitDrain++;
                  }
                  src.pause();
                }
              }

              // if the dest has an error, then stop piping into it.
              // however, don't suppress the throwing behavior for this.
              function onerror(er) {
                debug('onerror', er);
                unpipe();
                dest.removeListener('error', onerror);
                if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
              }

              // Make sure our error handler is attached before userland ones.
              prependListener(dest, 'error', onerror);

              // Both close and finish should trigger unpipe, but only once.
              function onclose() {
                dest.removeListener('finish', onfinish);
                unpipe();
              }
              dest.once('close', onclose);
              function onfinish() {
                debug('onfinish');
                dest.removeListener('close', onclose);
                unpipe();
              }
              dest.once('finish', onfinish);
              function unpipe() {
                debug('unpipe');
                src.unpipe(dest);
              }

              // tell the dest that it's being piped to
              dest.emit('pipe', src);

              // start the flow if it hasn't been started already.
              if (!state.flowing) {
                debug('pipe resume');
                src.resume();
              }
              return dest;
            };
            function pipeOnDrain(src) {
              return function pipeOnDrainFunctionResult() {
                var state = src._readableState;
                debug('pipeOnDrain', state.awaitDrain);
                if (state.awaitDrain) state.awaitDrain--;
                if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                  state.flowing = true;
                  flow(src);
                }
              };
            }
            Readable.prototype.unpipe = function (dest) {
              var state = this._readableState;
              var unpipeInfo = {
                hasUnpiped: false
              };

              // if we're not piping anywhere, then do nothing.
              if (state.pipesCount === 0) return this;

              // just one destination.  most common case.
              if (state.pipesCount === 1) {
                // passed in one, but it's not the right one.
                if (dest && dest !== state.pipes) return this;
                if (!dest) dest = state.pipes;

                // got a match.
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest) dest.emit('unpipe', this, unpipeInfo);
                return this;
              }

              // slow case. multiple pipe destinations.

              if (!dest) {
                // remove all.
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
                  hasUnpiped: false
                });
                return this;
              }

              // try to find the right one.
              var index = indexOf(state.pipes, dest);
              if (index === -1) return this;
              state.pipes.splice(index, 1);
              state.pipesCount -= 1;
              if (state.pipesCount === 1) state.pipes = state.pipes[0];
              dest.emit('unpipe', this, unpipeInfo);
              return this;
            };

            // set up data events if they are asked for
            // Ensure readable listeners eventually get something
            Readable.prototype.on = function (ev, fn) {
              var res = Stream.prototype.on.call(this, ev, fn);
              var state = this._readableState;
              if (ev === 'data') {
                // update readableListening so that resume() may be a no-op
                // a few lines down. This is needed to support once('readable').
                state.readableListening = this.listenerCount('readable') > 0;

                // Try start flowing on next tick if stream isn't explicitly paused
                if (state.flowing !== false) this.resume();
              } else if (ev === 'readable') {
                if (!state.endEmitted && !state.readableListening) {
                  state.readableListening = state.needReadable = true;
                  state.flowing = false;
                  state.emittedReadable = false;
                  debug('on readable', state.length, state.reading);
                  if (state.length) {
                    emitReadable(this);
                  } else if (!state.reading) {
                    process.nextTick(nReadingNextTick, this);
                  }
                }
              }
              return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;
            Readable.prototype.removeListener = function (ev, fn) {
              var res = Stream.prototype.removeListener.call(this, ev, fn);
              if (ev === 'readable') {
                // We need to check if there is someone still listening to
                // readable and reset the state. However this needs to happen
                // after readable has been emitted but before I/O (nextTick) to
                // support once('readable', fn) cycles. This means that calling
                // resume within the same tick will have no
                // effect.
                process.nextTick(updateReadableListening, this);
              }
              return res;
            };
            Readable.prototype.removeAllListeners = function (ev) {
              var res = Stream.prototype.removeAllListeners.apply(this, arguments);
              if (ev === 'readable' || ev === undefined) {
                // We need to check if there is someone still listening to
                // readable and reset the state. However this needs to happen
                // after readable has been emitted but before I/O (nextTick) to
                // support once('readable', fn) cycles. This means that calling
                // resume within the same tick will have no
                // effect.
                process.nextTick(updateReadableListening, this);
              }
              return res;
            };
            function updateReadableListening(self) {
              var state = self._readableState;
              state.readableListening = self.listenerCount('readable') > 0;
              if (state.resumeScheduled && !state.paused) {
                // flowing needs to be set to true now, otherwise
                // the upcoming resume will not flow.
                state.flowing = true;

                // crude way to check if we should resume
              } else if (self.listenerCount('data') > 0) {
                self.resume();
              }
            }
            function nReadingNextTick(self) {
              debug('readable nexttick read 0');
              self.read(0);
            }

            // pause() and resume() are remnants of the legacy readable stream API
            // If the user uses them, then switch into old mode.
            Readable.prototype.resume = function () {
              var state = this._readableState;
              if (!state.flowing) {
                debug('resume');
                // we flow only if there is no one listening
                // for readable, but we still have to call
                // resume()
                state.flowing = !state.readableListening;
                resume(this, state);
              }
              state.paused = false;
              return this;
            };
            function resume(stream, state) {
              if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                process.nextTick(resume_, stream, state);
              }
            }
            function resume_(stream, state) {
              debug('resume', state.reading);
              if (!state.reading) {
                stream.read(0);
              }
              state.resumeScheduled = false;
              stream.emit('resume');
              flow(stream);
              if (state.flowing && !state.reading) stream.read(0);
            }
            Readable.prototype.pause = function () {
              debug('call pause flowing=%j', this._readableState.flowing);
              if (this._readableState.flowing !== false) {
                debug('pause');
                this._readableState.flowing = false;
                this.emit('pause');
              }
              this._readableState.paused = true;
              return this;
            };
            function flow(stream) {
              var state = stream._readableState;
              debug('flow', state.flowing);
              while (state.flowing && stream.read() !== null);
            }

            // wrap an old-style stream as the async data source.
            // This is *not* part of the readable stream interface.
            // It is an ugly unfortunate mess of history.
            Readable.prototype.wrap = function (stream) {
              var _this = this;
              var state = this._readableState;
              var paused = false;
              stream.on('end', function () {
                debug('wrapped end');
                if (state.decoder && !state.ended) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length) _this.push(chunk);
                }
                _this.push(null);
              });
              stream.on('data', function (chunk) {
                debug('wrapped data');
                if (state.decoder) chunk = state.decoder.write(chunk);

                // don't skip over falsy values in objectMode
                if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
                var ret = _this.push(chunk);
                if (!ret) {
                  paused = true;
                  stream.pause();
                }
              });

              // proxy all the other methods.
              // important when wrapping filters and duplexes.
              for (var i in stream) {
                if (this[i] === undefined && typeof stream[i] === 'function') {
                  this[i] = function methodWrap(method) {
                    return function methodWrapReturnFunction() {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              }

              // proxy certain important events.
              for (var n = 0; n < kProxyEvents.length; n++) {
                stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
              }

              // when we try to consume some more bytes, simply unpause the
              // underlying stream.
              this._read = function (n) {
                debug('wrapped _read', n);
                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };
              return this;
            };
            if (typeof Symbol === 'function') {
              Readable.prototype[Symbol.asyncIterator] = function () {
                if (createReadableStreamAsyncIterator === undefined) {
                  createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
                }
                return createReadableStreamAsyncIterator(this);
              };
            }
            Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                return this._readableState.highWaterMark;
              }
            });
            Object.defineProperty(Readable.prototype, 'readableBuffer', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                return this._readableState && this._readableState.buffer;
              }
            });
            Object.defineProperty(Readable.prototype, 'readableFlowing', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                return this._readableState.flowing;
              },
              set: function set(state) {
                if (this._readableState) {
                  this._readableState.flowing = state;
                }
              }
            });

            // exposed for testing purposes only.
            Readable._fromList = fromList;
            Object.defineProperty(Readable.prototype, 'readableLength', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                return this._readableState.length;
              }
            });

            // Pluck off n bytes from an array of buffers.
            // Length is the combined lengths of all the buffers in the list.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function fromList(n, state) {
              // nothing buffered
              if (state.length === 0) return null;
              var ret;
              if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
                // read it all, truncate the list
                if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
                state.buffer.clear();
              } else {
                // read part of list
                ret = state.buffer.consume(n, state.decoder);
              }
              return ret;
            }
            function endReadable(stream) {
              var state = stream._readableState;
              debug('endReadable', state.endEmitted);
              if (!state.endEmitted) {
                state.ended = true;
                process.nextTick(endReadableNT, state, stream);
              }
            }
            function endReadableNT(state, stream) {
              debug('endReadableNT', state.endEmitted, state.length);

              // Check that we didn't get one last unshift.
              if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit('end');
                if (state.autoDestroy) {
                  // In case of duplex streams we need a way to detect
                  // if the writable side is ready for autoDestroy as well
                  var wState = stream._writableState;
                  if (!wState || wState.autoDestroy && wState.finished) {
                    stream.destroy();
                  }
                }
              }
            }
            if (typeof Symbol === 'function') {
              Readable.from = function (iterable, opts) {
                if (from === undefined) {
                  from = require('./internal/streams/from');
                }
                return from(Readable, iterable, opts);
              };
            }
            function indexOf(xs, x) {
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x) return i;
              }
              return -1;
            }
          }).call(this);
        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {
        "../errors": 266,
        "./_stream_duplex": 267,
        "./internal/streams/async_iterator": 272,
        "./internal/streams/buffer_list": 273,
        "./internal/streams/destroy": 274,
        "./internal/streams/from": 276,
        "./internal/streams/state": 278,
        "./internal/streams/stream": 279,
        "_process": 5,
        "buffer": 2,
        "events": 3,
        "inherits": 259,
        "string_decoder/": 283,
        "util": 133
      }],
      270: [function (require, module, exports) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // a transform stream is a readable/writable stream where you do
        // something with the data.  Sometimes it's called a "filter",
        // but that's not a great name for it, since that implies a thing where
        // some bits pass through, and others are simply ignored.  (That would
        // be a valid example of a transform, of course.)
        //
        // While the output is causally related to the input, it's not a
        // necessarily symmetric or synchronous transformation.  For example,
        // a zlib stream might take multiple plain-text writes(), and then
        // emit a single compressed chunk some time in the future.
        //
        // Here's how this works:
        //
        // The Transform stream has all the aspects of the readable and writable
        // stream classes.  When you write(chunk), that calls _write(chunk,cb)
        // internally, and returns false if there's a lot of pending writes
        // buffered up.  When you call read(), that calls _read(n) until
        // there's enough pending readable data buffered up.
        //
        // In a transform stream, the written data is placed in a buffer.  When
        // _read(n) is called, it transforms the queued up data, calling the
        // buffered _write cb's as it consumes chunks.  If consuming a single
        // written chunk would result in multiple output chunks, then the first
        // outputted bit calls the readcb, and subsequent chunks just go into
        // the read buffer, and will cause it to emit 'readable' if necessary.
        //
        // This way, back-pressure is actually determined by the reading side,
        // since _read has to be called to start processing a new chunk.  However,
        // a pathological inflate type of transform can cause excessive buffering
        // here.  For example, imagine a stream where every byte of input is
        // interpreted as an integer from 0-255, and then results in that many
        // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
        // 1kb of data being output.  In this case, you could write a very small
        // amount of input, and end up with a very large amount of output.  In
        // such a pathological inflating mechanism, there'd be no way to tell
        // the system to stop doing the transform.  A single 4MB write could
        // cause the system to run out of memory.
        //
        // However, even in such a pathological case, only a single written chunk
        // would be consumed, and then the rest would wait (un-transformed) until
        // the results of the previous transformed chunk were consumed.

        'use strict';

        module.exports = Transform;
        var _require$codes = require('../errors').codes,
          ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
          ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
          ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
          ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
        var Duplex = require('./_stream_duplex');
        require('inherits')(Transform, Duplex);
        function afterTransform(er, data) {
          var ts = this._transformState;
          ts.transforming = false;
          var cb = ts.writecb;
          if (cb === null) {
            return this.emit('error', new ERR_MULTIPLE_CALLBACK());
          }
          ts.writechunk = null;
          ts.writecb = null;
          if (data != null)
            // single equals check for both `null` and `undefined`
            this.push(data);
          cb(er);
          var rs = this._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            this._read(rs.highWaterMark);
          }
        }
        function Transform(options) {
          if (!(this instanceof Transform)) return new Transform(options);
          Duplex.call(this, options);
          this._transformState = {
            afterTransform: afterTransform.bind(this),
            needTransform: false,
            transforming: false,
            writecb: null,
            writechunk: null,
            writeencoding: null
          };

          // start out asking for a readable event once data is transformed.
          this._readableState.needReadable = true;

          // we have implemented the _read method, and done the other things
          // that Readable wants before the first _read call, so unset the
          // sync guard flag.
          this._readableState.sync = false;
          if (options) {
            if (typeof options.transform === 'function') this._transform = options.transform;
            if (typeof options.flush === 'function') this._flush = options.flush;
          }

          // When the writable side finishes, then flush out anything remaining.
          this.on('prefinish', prefinish);
        }
        function prefinish() {
          var _this = this;
          if (typeof this._flush === 'function' && !this._readableState.destroyed) {
            this._flush(function (er, data) {
              done(_this, er, data);
            });
          } else {
            done(this, null, null);
          }
        }
        Transform.prototype.push = function (chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };

        // This is the part where you do stuff!
        // override this function in implementation classes.
        // 'chunk' is an input chunk.
        //
        // Call `push(newChunk)` to pass along transformed output
        // to the readable side.  You may call 'push' zero or more times.
        //
        // Call `cb(err)` when you are done with this chunk.  If you pass
        // an error, then that'll put the hurt on the whole operation.  If you
        // never call cb(), then you'll never get another chunk.
        Transform.prototype._transform = function (chunk, encoding, cb) {
          cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
        };
        Transform.prototype._write = function (chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
          }
        };

        // Doesn't matter what the args are here.
        // _transform does all the work.
        // That we got here means that the readable side wants more data.
        Transform.prototype._read = function (n) {
          var ts = this._transformState;
          if (ts.writechunk !== null && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            // mark that we need a transform, so that any data that comes in
            // will get processed, now that we've asked for it.
            ts.needTransform = true;
          }
        };
        Transform.prototype._destroy = function (err, cb) {
          Duplex.prototype._destroy.call(this, err, function (err2) {
            cb(err2);
          });
        };
        function done(stream, er, data) {
          if (er) return stream.emit('error', er);
          if (data != null)
            // single equals check for both `null` and `undefined`
            stream.push(data);

          // TODO(BridgeAR): Write a test for these two error cases
          // if there's nothing in the write buffer, then that means
          // that nothing more will ever be provided
          if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
          if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
          return stream.push(null);
        }
      }, {
        "../errors": 266,
        "./_stream_duplex": 267,
        "inherits": 259
      }],
      271: [function (require, module, exports) {
        (function (process, global) {
          (function () {
            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            // A bit simpler than readable streams.
            // Implement an async ._write(chunk, encoding, cb), and it'll handle all
            // the drain event emission and buffering.

            'use strict';

            module.exports = Writable;

            /* <replacement> */
            function WriteReq(chunk, encoding, cb) {
              this.chunk = chunk;
              this.encoding = encoding;
              this.callback = cb;
              this.next = null;
            }

            // It seems a linked list but it is not
            // there will be only 2 of these for each stream
            function CorkedRequest(state) {
              var _this = this;
              this.next = null;
              this.entry = null;
              this.finish = function () {
                onCorkedFinish(_this, state);
              };
            }
            /* </replacement> */

            /*<replacement>*/
            var Duplex;
            /*</replacement>*/

            Writable.WritableState = WritableState;

            /*<replacement>*/
            var internalUtil = {
              deprecate: require('util-deprecate')
            };
            /*</replacement>*/

            /*<replacement>*/
            var Stream = require('./internal/streams/stream');
            /*</replacement>*/

            var Buffer = require('buffer').Buffer;
            var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
            function _uint8ArrayToBuffer(chunk) {
              return Buffer.from(chunk);
            }
            function _isUint8Array(obj) {
              return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var destroyImpl = require('./internal/streams/destroy');
            var _require = require('./internal/streams/state'),
              getHighWaterMark = _require.getHighWaterMark;
            var _require$codes = require('../errors').codes,
              ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
              ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
              ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
              ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
              ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
              ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
              ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
              ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
            var errorOrDestroy = destroyImpl.errorOrDestroy;
            require('inherits')(Writable, Stream);
            function nop() {}
            function WritableState(options, stream, isDuplex) {
              Duplex = Duplex || require('./_stream_duplex');
              options = options || {};

              // Duplex streams are both readable and writable, but share
              // the same options object.
              // However, some cases require setting options to different
              // values for the readable and the writable sides of the duplex stream,
              // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
              if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

              // object stream flag to indicate whether or not this stream
              // contains buffers or objects.
              this.objectMode = !!options.objectMode;
              if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

              // the point at which write() starts returning false
              // Note: 0 is a valid value, means that we always return false if
              // the entire buffer is not flushed immediately on write()
              this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

              // if _final has been called
              this.finalCalled = false;

              // drain event flag.
              this.needDrain = false;
              // at the start of calling end()
              this.ending = false;
              // when end() has been called, and returned
              this.ended = false;
              // when 'finish' is emitted
              this.finished = false;

              // has it been destroyed
              this.destroyed = false;

              // should we decode strings into buffers before passing to _write?
              // this is here so that some node-core streams can optimize string
              // handling at a lower level.
              var noDecode = options.decodeStrings === false;
              this.decodeStrings = !noDecode;

              // Crypto is kind of old and crusty.  Historically, its default string
              // encoding is 'binary' so we have to make this configurable.
              // Everything else in the universe uses 'utf8', though.
              this.defaultEncoding = options.defaultEncoding || 'utf8';

              // not an actual buffer we keep track of, but a measurement
              // of how much we're waiting to get pushed to some underlying
              // socket or file.
              this.length = 0;

              // a flag to see when we're in the middle of a write.
              this.writing = false;

              // when true all writes will be buffered until .uncork() call
              this.corked = 0;

              // a flag to be able to tell if the onwrite cb is called immediately,
              // or on a later tick.  We set this to true at first, because any
              // actions that shouldn't happen until "later" should generally also
              // not happen before the first write call.
              this.sync = true;

              // a flag to know if we're processing previously buffered items, which
              // may call the _write() callback in the same tick, so that we don't
              // end up in an overlapped onwrite situation.
              this.bufferProcessing = false;

              // the callback that's passed to _write(chunk,cb)
              this.onwrite = function (er) {
                onwrite(stream, er);
              };

              // the callback that the user supplies to write(chunk,encoding,cb)
              this.writecb = null;

              // the amount that is being written when _write is called.
              this.writelen = 0;
              this.bufferedRequest = null;
              this.lastBufferedRequest = null;

              // number of pending user-supplied write callbacks
              // this must be 0 before 'finish' can be emitted
              this.pendingcb = 0;

              // emit prefinish if the only thing we're waiting for is _write cbs
              // This is relevant for synchronous Transform streams
              this.prefinished = false;

              // True if the error was already emitted and should not be thrown again
              this.errorEmitted = false;

              // Should close be emitted on destroy. Defaults to true.
              this.emitClose = options.emitClose !== false;

              // Should .destroy() be called after 'finish' (and potentially 'end')
              this.autoDestroy = !!options.autoDestroy;

              // count buffered requests
              this.bufferedRequestCount = 0;

              // allocate the first CorkedRequest, there is always
              // one allocated and free to use, and we maintain at most two
              this.corkedRequestsFree = new CorkedRequest(this);
            }
            WritableState.prototype.getBuffer = function getBuffer() {
              var current = this.bufferedRequest;
              var out = [];
              while (current) {
                out.push(current);
                current = current.next;
              }
              return out;
            };
            (function () {
              try {
                Object.defineProperty(WritableState.prototype, 'buffer', {
                  get: internalUtil.deprecate(function writableStateBufferGetter() {
                    return this.getBuffer();
                  }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                });
              } catch (_) {}
            })();

            // Test _writableState for inheritance to account for Duplex streams,
            // whose prototype chain only points to Readable.
            var realHasInstance;
            if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
              realHasInstance = Function.prototype[Symbol.hasInstance];
              Object.defineProperty(Writable, Symbol.hasInstance, {
                value: function value(object) {
                  if (realHasInstance.call(this, object)) return true;
                  if (this !== Writable) return false;
                  return object && object._writableState instanceof WritableState;
                }
              });
            } else {
              realHasInstance = function realHasInstance(object) {
                return object instanceof this;
              };
            }
            function Writable(options) {
              Duplex = Duplex || require('./_stream_duplex');

              // Writable ctor is applied to Duplexes, too.
              // `realHasInstance` is necessary because using plain `instanceof`
              // would return false, as no `_writableState` property is attached.

              // Trying to use the custom `instanceof` for Writable here will also break the
              // Node.js LazyTransform implementation, which has a non-trivial getter for
              // `_writableState` that would lead to infinite recursion.

              // Checking for a Stream.Duplex instance is faster here instead of inside
              // the WritableState constructor, at least with V8 6.5
              var isDuplex = this instanceof Duplex;
              if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
              this._writableState = new WritableState(options, this, isDuplex);

              // legacy.
              this.writable = true;
              if (options) {
                if (typeof options.write === 'function') this._write = options.write;
                if (typeof options.writev === 'function') this._writev = options.writev;
                if (typeof options.destroy === 'function') this._destroy = options.destroy;
                if (typeof options.final === 'function') this._final = options.final;
              }
              Stream.call(this);
            }

            // Otherwise people can pipe Writable streams, which is just wrong.
            Writable.prototype.pipe = function () {
              errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
            };
            function writeAfterEnd(stream, cb) {
              var er = new ERR_STREAM_WRITE_AFTER_END();
              // TODO: defer error events consistently everywhere, not just the cb
              errorOrDestroy(stream, er);
              process.nextTick(cb, er);
            }

            // Checks that a user-supplied chunk is valid, especially for the particular
            // mode the stream is in. Currently this means that `null` is never accepted
            // and undefined/non-string values are only allowed in object mode.
            function validChunk(stream, state, chunk, cb) {
              var er;
              if (chunk === null) {
                er = new ERR_STREAM_NULL_VALUES();
              } else if (typeof chunk !== 'string' && !state.objectMode) {
                er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
              }
              if (er) {
                errorOrDestroy(stream, er);
                process.nextTick(cb, er);
                return false;
              }
              return true;
            }
            Writable.prototype.write = function (chunk, encoding, cb) {
              var state = this._writableState;
              var ret = false;
              var isBuf = !state.objectMode && _isUint8Array(chunk);
              if (isBuf && !Buffer.isBuffer(chunk)) {
                chunk = _uint8ArrayToBuffer(chunk);
              }
              if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
              }
              if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
              if (typeof cb !== 'function') cb = nop;
              if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
              }
              return ret;
            };
            Writable.prototype.cork = function () {
              this._writableState.corked++;
            };
            Writable.prototype.uncork = function () {
              var state = this._writableState;
              if (state.corked) {
                state.corked--;
                if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
              }
            };
            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              // node::ParseEncoding() requires lower case.
              if (typeof encoding === 'string') encoding = encoding.toLowerCase();
              if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };
            Object.defineProperty(Writable.prototype, 'writableBuffer', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                return this._writableState && this._writableState.getBuffer();
              }
            });
            function decodeChunk(state, chunk, encoding) {
              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                chunk = Buffer.from(chunk, encoding);
              }
              return chunk;
            }
            Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                return this._writableState.highWaterMark;
              }
            });

            // if we're already writing something, then just put this
            // in the queue, and wait our turn.  Otherwise, call _write
            // If we return false, then we need a drain event, so set that flag.
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
              if (!isBuf) {
                var newChunk = decodeChunk(state, chunk, encoding);
                if (chunk !== newChunk) {
                  isBuf = true;
                  encoding = 'buffer';
                  chunk = newChunk;
                }
              }
              var len = state.objectMode ? 1 : chunk.length;
              state.length += len;
              var ret = state.length < state.highWaterMark;
              // we must ensure that previous needDrain will not be reset to false.
              if (!ret) state.needDrain = true;
              if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = {
                  chunk: chunk,
                  encoding: encoding,
                  isBuf: isBuf,
                  callback: cb,
                  next: null
                };
                if (last) {
                  last.next = state.lastBufferedRequest;
                } else {
                  state.bufferedRequest = state.lastBufferedRequest;
                }
                state.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
              }
              return ret;
            }
            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
              state.writelen = len;
              state.writecb = cb;
              state.writing = true;
              state.sync = true;
              if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
              state.sync = false;
            }
            function onwriteError(stream, state, sync, er, cb) {
              --state.pendingcb;
              if (sync) {
                // defer the callback if we are being called synchronously
                // to avoid piling up things on the stack
                process.nextTick(cb, er);
                // this can emit finish, and it will always happen
                // after error
                process.nextTick(finishMaybe, stream, state);
                stream._writableState.errorEmitted = true;
                errorOrDestroy(stream, er);
              } else {
                // the caller expect this to happen before if
                // it is async
                cb(er);
                stream._writableState.errorEmitted = true;
                errorOrDestroy(stream, er);
                // this can emit finish, but finish must
                // always follow error
                finishMaybe(stream, state);
              }
            }
            function onwriteStateUpdate(state) {
              state.writing = false;
              state.writecb = null;
              state.length -= state.writelen;
              state.writelen = 0;
            }
            function onwrite(stream, er) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;
              if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
              onwriteStateUpdate(state);
              if (er) onwriteError(stream, state, sync, er, cb);else {
                // Check if we're actually ready to finish, but don't emit yet
                var finished = needFinish(state) || stream.destroyed;
                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                  clearBuffer(stream, state);
                }
                if (sync) {
                  process.nextTick(afterWrite, stream, state, finished, cb);
                } else {
                  afterWrite(stream, state, finished, cb);
                }
              }
            }
            function afterWrite(stream, state, finished, cb) {
              if (!finished) onwriteDrain(stream, state);
              state.pendingcb--;
              cb();
              finishMaybe(stream, state);
            }

            // Must force callback to be called on nextTick, so that we don't
            // emit 'drain' before the write() consumer gets the 'false' return
            // value, and has a chance to attach a 'drain' listener.
            function onwriteDrain(stream, state) {
              if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit('drain');
              }
            }

            // if there's something in the buffer waiting, then process it
            function clearBuffer(stream, state) {
              state.bufferProcessing = true;
              var entry = state.bufferedRequest;
              if (stream._writev && entry && entry.next) {
                // Fast case, write everything using _writev()
                var l = state.bufferedRequestCount;
                var buffer = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;
                var count = 0;
                var allBuffers = true;
                while (entry) {
                  buffer[count] = entry;
                  if (!entry.isBuf) allBuffers = false;
                  entry = entry.next;
                  count += 1;
                }
                buffer.allBuffers = allBuffers;
                doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                // doWrite is almost always async, defer these to save a bit of time
                // as the hot path ends with doWrite
                state.pendingcb++;
                state.lastBufferedRequest = null;
                if (holder.next) {
                  state.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state.corkedRequestsFree = new CorkedRequest(state);
                }
                state.bufferedRequestCount = 0;
              } else {
                // Slow case, write chunks one-by-one
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state.objectMode ? 1 : chunk.length;
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                  entry = entry.next;
                  state.bufferedRequestCount--;
                  // if we didn't call the onwrite immediately, then
                  // it means that we need to wait until it does.
                  // also, that means that the chunk and cb are currently
                  // being processed, so move the buffer counter past them.
                  if (state.writing) {
                    break;
                  }
                }
                if (entry === null) state.lastBufferedRequest = null;
              }
              state.bufferedRequest = entry;
              state.bufferProcessing = false;
            }
            Writable.prototype._write = function (chunk, encoding, cb) {
              cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
            };
            Writable.prototype._writev = null;
            Writable.prototype.end = function (chunk, encoding, cb) {
              var state = this._writableState;
              if (typeof chunk === 'function') {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
              }
              if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

              // .end() fully uncorks
              if (state.corked) {
                state.corked = 1;
                this.uncork();
              }

              // ignore unnecessary end() calls.
              if (!state.ending) endWritable(this, state, cb);
              return this;
            };
            Object.defineProperty(Writable.prototype, 'writableLength', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                return this._writableState.length;
              }
            });
            function needFinish(state) {
              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }
            function callFinal(stream, state) {
              stream._final(function (err) {
                state.pendingcb--;
                if (err) {
                  errorOrDestroy(stream, err);
                }
                state.prefinished = true;
                stream.emit('prefinish');
                finishMaybe(stream, state);
              });
            }
            function prefinish(stream, state) {
              if (!state.prefinished && !state.finalCalled) {
                if (typeof stream._final === 'function' && !state.destroyed) {
                  state.pendingcb++;
                  state.finalCalled = true;
                  process.nextTick(callFinal, stream, state);
                } else {
                  state.prefinished = true;
                  stream.emit('prefinish');
                }
              }
            }
            function finishMaybe(stream, state) {
              var need = needFinish(state);
              if (need) {
                prefinish(stream, state);
                if (state.pendingcb === 0) {
                  state.finished = true;
                  stream.emit('finish');
                  if (state.autoDestroy) {
                    // In case of duplex streams we need a way to detect
                    // if the readable side is ready for autoDestroy as well
                    var rState = stream._readableState;
                    if (!rState || rState.autoDestroy && rState.endEmitted) {
                      stream.destroy();
                    }
                  }
                }
              }
              return need;
            }
            function endWritable(stream, state, cb) {
              state.ending = true;
              finishMaybe(stream, state);
              if (cb) {
                if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
              }
              state.ended = true;
              stream.writable = false;
            }
            function onCorkedFinish(corkReq, state, err) {
              var entry = corkReq.entry;
              corkReq.entry = null;
              while (entry) {
                var cb = entry.callback;
                state.pendingcb--;
                cb(err);
                entry = entry.next;
              }

              // reuse the free corkReq.
              state.corkedRequestsFree.next = corkReq;
            }
            Object.defineProperty(Writable.prototype, 'destroyed', {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get() {
                if (this._writableState === undefined) {
                  return false;
                }
                return this._writableState.destroyed;
              },
              set: function set(value) {
                // we ignore the value if the stream
                // has not been initialized yet
                if (!this._writableState) {
                  return;
                }

                // backward compatibility, the user is explicitly
                // managing destroyed
                this._writableState.destroyed = value;
              }
            });
            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;
            Writable.prototype._destroy = function (err, cb) {
              cb(err);
            };
          }).call(this);
        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {
        "../errors": 266,
        "./_stream_duplex": 267,
        "./internal/streams/destroy": 274,
        "./internal/streams/state": 278,
        "./internal/streams/stream": 279,
        "_process": 5,
        "buffer": 2,
        "inherits": 259,
        "util-deprecate": 285
      }],
      272: [function (require, module, exports) {
        (function (process) {
          (function () {
            'use strict';

            var _Object$setPrototypeO;
            function _defineProperty(obj, key, value) {
              key = _toPropertyKey(key);
              if (key in obj) {
                Object.defineProperty(obj, key, {
                  value: value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key = _toPrimitive(arg, "string");
              return typeof key === "symbol" ? key : String(key);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null) return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== undefined) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object") return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            var finished = require('./end-of-stream');
            var kLastResolve = Symbol('lastResolve');
            var kLastReject = Symbol('lastReject');
            var kError = Symbol('error');
            var kEnded = Symbol('ended');
            var kLastPromise = Symbol('lastPromise');
            var kHandlePromise = Symbol('handlePromise');
            var kStream = Symbol('stream');
            function createIterResult(value, done) {
              return {
                value: value,
                done: done
              };
            }
            function readAndResolve(iter) {
              var resolve = iter[kLastResolve];
              if (resolve !== null) {
                var data = iter[kStream].read();
                // we defer if data is null
                // we can be expecting either 'end' or
                // 'error'
                if (data !== null) {
                  iter[kLastPromise] = null;
                  iter[kLastResolve] = null;
                  iter[kLastReject] = null;
                  resolve(createIterResult(data, false));
                }
              }
            }
            function onReadable(iter) {
              // we wait for the next tick, because it might
              // emit an error with process.nextTick
              process.nextTick(readAndResolve, iter);
            }
            function wrapForNext(lastPromise, iter) {
              return function (resolve, reject) {
                lastPromise.then(function () {
                  if (iter[kEnded]) {
                    resolve(createIterResult(undefined, true));
                    return;
                  }
                  iter[kHandlePromise](resolve, reject);
                }, reject);
              };
            }
            var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
            var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
              get stream() {
                return this[kStream];
              },
              next: function next() {
                var _this = this;
                // if we have detected an error in the meanwhile
                // reject straight away
                var error = this[kError];
                if (error !== null) {
                  return Promise.reject(error);
                }
                if (this[kEnded]) {
                  return Promise.resolve(createIterResult(undefined, true));
                }
                if (this[kStream].destroyed) {
                  // We need to defer via nextTick because if .destroy(err) is
                  // called, the error will be emitted via nextTick, and
                  // we cannot guarantee that there is no error lingering around
                  // waiting to be emitted.
                  return new Promise(function (resolve, reject) {
                    process.nextTick(function () {
                      if (_this[kError]) {
                        reject(_this[kError]);
                      } else {
                        resolve(createIterResult(undefined, true));
                      }
                    });
                  });
                }

                // if we have multiple next() calls
                // we will wait for the previous Promise to finish
                // this logic is optimized to support for await loops,
                // where next() is only called once at a time
                var lastPromise = this[kLastPromise];
                var promise;
                if (lastPromise) {
                  promise = new Promise(wrapForNext(lastPromise, this));
                } else {
                  // fast path needed to support multiple this.push()
                  // without triggering the next() queue
                  var data = this[kStream].read();
                  if (data !== null) {
                    return Promise.resolve(createIterResult(data, false));
                  }
                  promise = new Promise(this[kHandlePromise]);
                }
                this[kLastPromise] = promise;
                return promise;
              }
            }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
              return this;
            }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
              var _this2 = this;
              // destroy(err, cb) is a private API
              // we can guarantee we have that here, because we control the
              // Readable class this is attached to
              return new Promise(function (resolve, reject) {
                _this2[kStream].destroy(null, function (err) {
                  if (err) {
                    reject(err);
                    return;
                  }
                  resolve(createIterResult(undefined, true));
                });
              });
            }), _Object$setPrototypeO), AsyncIteratorPrototype);
            var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
              var _Object$create;
              var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
                value: stream,
                writable: true
              }), _defineProperty(_Object$create, kLastResolve, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kLastReject, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kError, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kEnded, {
                value: stream._readableState.endEmitted,
                writable: true
              }), _defineProperty(_Object$create, kHandlePromise, {
                value: function value(resolve, reject) {
                  var data = iterator[kStream].read();
                  if (data) {
                    iterator[kLastPromise] = null;
                    iterator[kLastResolve] = null;
                    iterator[kLastReject] = null;
                    resolve(createIterResult(data, false));
                  } else {
                    iterator[kLastResolve] = resolve;
                    iterator[kLastReject] = reject;
                  }
                },
                writable: true
              }), _Object$create));
              iterator[kLastPromise] = null;
              finished(stream, function (err) {
                if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
                  var reject = iterator[kLastReject];
                  // reject if we are waiting for data in the Promise
                  // returned by next() and store the error
                  if (reject !== null) {
                    iterator[kLastPromise] = null;
                    iterator[kLastResolve] = null;
                    iterator[kLastReject] = null;
                    reject(err);
                  }
                  iterator[kError] = err;
                  return;
                }
                var resolve = iterator[kLastResolve];
                if (resolve !== null) {
                  iterator[kLastPromise] = null;
                  iterator[kLastResolve] = null;
                  iterator[kLastReject] = null;
                  resolve(createIterResult(undefined, true));
                }
                iterator[kEnded] = true;
              });
              stream.on('readable', onReadable.bind(null, iterator));
              return iterator;
            };
            module.exports = createReadableStreamAsyncIterator;
          }).call(this);
        }).call(this, require('_process'));
      }, {
        "./end-of-stream": 275,
        "_process": 5
      }],
      273: [function (require, module, exports) {
        'use strict';

        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = null != arguments[i] ? arguments[i] : {};
            i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          key = _toPropertyKey(key);
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", {
            writable: false
          });
          return Constructor;
        }
        function _toPropertyKey(arg) {
          var key = _toPrimitive(arg, "string");
          return typeof key === "symbol" ? key : String(key);
        }
        function _toPrimitive(input, hint) {
          if (typeof input !== "object" || input === null) return input;
          var prim = input[Symbol.toPrimitive];
          if (prim !== undefined) {
            var res = prim.call(input, hint || "default");
            if (typeof res !== "object") return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return (hint === "string" ? String : Number)(input);
        }
        var _require = require('buffer'),
          Buffer = _require.Buffer;
        var _require2 = require('util'),
          inspect = _require2.inspect;
        var custom = inspect && inspect.custom || 'inspect';
        function copyBuffer(src, target, offset) {
          Buffer.prototype.copy.call(src, target, offset);
        }
        module.exports = /*#__PURE__*/function () {
          function BufferList() {
            _classCallCheck(this, BufferList);
            this.head = null;
            this.tail = null;
            this.length = 0;
          }
          _createClass(BufferList, [{
            key: "push",
            value: function push(v) {
              var entry = {
                data: v,
                next: null
              };
              if (this.length > 0) this.tail.next = entry;else this.head = entry;
              this.tail = entry;
              ++this.length;
            }
          }, {
            key: "unshift",
            value: function unshift(v) {
              var entry = {
                data: v,
                next: this.head
              };
              if (this.length === 0) this.tail = entry;
              this.head = entry;
              ++this.length;
            }
          }, {
            key: "shift",
            value: function shift() {
              if (this.length === 0) return;
              var ret = this.head.data;
              if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
              --this.length;
              return ret;
            }
          }, {
            key: "clear",
            value: function clear() {
              this.head = this.tail = null;
              this.length = 0;
            }
          }, {
            key: "join",
            value: function join(s) {
              if (this.length === 0) return '';
              var p = this.head;
              var ret = '' + p.data;
              while (p = p.next) ret += s + p.data;
              return ret;
            }
          }, {
            key: "concat",
            value: function concat(n) {
              if (this.length === 0) return Buffer.alloc(0);
              var ret = Buffer.allocUnsafe(n >>> 0);
              var p = this.head;
              var i = 0;
              while (p) {
                copyBuffer(p.data, ret, i);
                i += p.data.length;
                p = p.next;
              }
              return ret;
            }

            // Consumes a specified amount of bytes or characters from the buffered data.
          }, {
            key: "consume",
            value: function consume(n, hasStrings) {
              var ret;
              if (n < this.head.data.length) {
                // `slice` is the same for buffers and strings.
                ret = this.head.data.slice(0, n);
                this.head.data = this.head.data.slice(n);
              } else if (n === this.head.data.length) {
                // First chunk is a perfect match.
                ret = this.shift();
              } else {
                // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
              }
              return ret;
            }
          }, {
            key: "first",
            value: function first() {
              return this.head.data;
            }

            // Consumes a specified amount of characters from the buffered data.
          }, {
            key: "_getString",
            value: function _getString(n) {
              var p = this.head;
              var c = 1;
              var ret = p.data;
              n -= ret.length;
              while (p = p.next) {
                var str = p.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length) ret += str;else ret += str.slice(0, n);
                n -= nb;
                if (n === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p.next) this.head = p.next;else this.head = this.tail = null;
                  } else {
                    this.head = p;
                    p.data = str.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              this.length -= c;
              return ret;
            }

            // Consumes a specified amount of bytes from the buffered data.
          }, {
            key: "_getBuffer",
            value: function _getBuffer(n) {
              var ret = Buffer.allocUnsafe(n);
              var p = this.head;
              var c = 1;
              p.data.copy(ret);
              n -= p.data.length;
              while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;
                if (n === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p.next) this.head = p.next;else this.head = this.tail = null;
                  } else {
                    this.head = p;
                    p.data = buf.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              this.length -= c;
              return ret;
            }

            // Make sure the linked list only shows the minimal necessary information.
          }, {
            key: custom,
            value: function value(_, options) {
              return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
                // Only inspect one level.
                depth: 0,
                // It should not recurse.
                customInspect: false
              }));
            }
          }]);
          return BufferList;
        }();
      }, {
        "buffer": 2,
        "util": 133
      }],
      274: [function (require, module, exports) {
        (function (process) {
          (function () {
            'use strict';

            // undocumented cb() API, needed for core, not for public API
            function destroy(err, cb) {
              var _this = this;
              var readableDestroyed = this._readableState && this._readableState.destroyed;
              var writableDestroyed = this._writableState && this._writableState.destroyed;
              if (readableDestroyed || writableDestroyed) {
                if (cb) {
                  cb(err);
                } else if (err) {
                  if (!this._writableState) {
                    process.nextTick(emitErrorNT, this, err);
                  } else if (!this._writableState.errorEmitted) {
                    this._writableState.errorEmitted = true;
                    process.nextTick(emitErrorNT, this, err);
                  }
                }
                return this;
              }

              // we set destroyed to true before firing error callbacks in order
              // to make it re-entrance safe in case destroy() is called within callbacks

              if (this._readableState) {
                this._readableState.destroyed = true;
              }

              // if this is a duplex stream mark the writable part as destroyed as well
              if (this._writableState) {
                this._writableState.destroyed = true;
              }
              this._destroy(err || null, function (err) {
                if (!cb && err) {
                  if (!_this._writableState) {
                    process.nextTick(emitErrorAndCloseNT, _this, err);
                  } else if (!_this._writableState.errorEmitted) {
                    _this._writableState.errorEmitted = true;
                    process.nextTick(emitErrorAndCloseNT, _this, err);
                  } else {
                    process.nextTick(emitCloseNT, _this);
                  }
                } else if (cb) {
                  process.nextTick(emitCloseNT, _this);
                  cb(err);
                } else {
                  process.nextTick(emitCloseNT, _this);
                }
              });
              return this;
            }
            function emitErrorAndCloseNT(self, err) {
              emitErrorNT(self, err);
              emitCloseNT(self);
            }
            function emitCloseNT(self) {
              if (self._writableState && !self._writableState.emitClose) return;
              if (self._readableState && !self._readableState.emitClose) return;
              self.emit('close');
            }
            function undestroy() {
              if (this._readableState) {
                this._readableState.destroyed = false;
                this._readableState.reading = false;
                this._readableState.ended = false;
                this._readableState.endEmitted = false;
              }
              if (this._writableState) {
                this._writableState.destroyed = false;
                this._writableState.ended = false;
                this._writableState.ending = false;
                this._writableState.finalCalled = false;
                this._writableState.prefinished = false;
                this._writableState.finished = false;
                this._writableState.errorEmitted = false;
              }
            }
            function emitErrorNT(self, err) {
              self.emit('error', err);
            }
            function errorOrDestroy(stream, err) {
              // We have tests that rely on errors being emitted
              // in the same tick, so changing this is semver major.
              // For now when you opt-in to autoDestroy we allow
              // the error to be emitted nextTick. In a future
              // semver major update we should change the default to this.

              var rState = stream._readableState;
              var wState = stream._writableState;
              if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
            }
            module.exports = {
              destroy: destroy,
              undestroy: undestroy,
              errorOrDestroy: errorOrDestroy
            };
          }).call(this);
        }).call(this, require('_process'));
      }, {
        "_process": 5
      }],
      275: [function (require, module, exports) {
        // Ported from https://github.com/mafintosh/end-of-stream with
        // permission from the author, Mathias Buus (@mafintosh).

        'use strict';

        var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
        function once(callback) {
          var called = false;
          return function () {
            if (called) return;
            called = true;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            callback.apply(this, args);
          };
        }
        function noop() {}
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === 'function';
        }
        function eos(stream, opts, callback) {
          if (typeof opts === 'function') return eos(stream, null, opts);
          if (!opts) opts = {};
          callback = once(callback || noop);
          var readable = opts.readable || opts.readable !== false && stream.readable;
          var writable = opts.writable || opts.writable !== false && stream.writable;
          var onlegacyfinish = function onlegacyfinish() {
            if (!stream.writable) onfinish();
          };
          var writableEnded = stream._writableState && stream._writableState.finished;
          var onfinish = function onfinish() {
            writable = false;
            writableEnded = true;
            if (!readable) callback.call(stream);
          };
          var readableEnded = stream._readableState && stream._readableState.endEmitted;
          var onend = function onend() {
            readable = false;
            readableEnded = true;
            if (!writable) callback.call(stream);
          };
          var onerror = function onerror(err) {
            callback.call(stream, err);
          };
          var onclose = function onclose() {
            var err;
            if (readable && !readableEnded) {
              if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
              return callback.call(stream, err);
            }
            if (writable && !writableEnded) {
              if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
              return callback.call(stream, err);
            }
          };
          var onrequest = function onrequest() {
            stream.req.on('finish', onfinish);
          };
          if (isRequest(stream)) {
            stream.on('complete', onfinish);
            stream.on('abort', onclose);
            if (stream.req) onrequest();else stream.on('request', onrequest);
          } else if (writable && !stream._writableState) {
            // legacy streams
            stream.on('end', onlegacyfinish);
            stream.on('close', onlegacyfinish);
          }
          stream.on('end', onend);
          stream.on('finish', onfinish);
          if (opts.error !== false) stream.on('error', onerror);
          stream.on('close', onclose);
          return function () {
            stream.removeListener('complete', onfinish);
            stream.removeListener('abort', onclose);
            stream.removeListener('request', onrequest);
            if (stream.req) stream.req.removeListener('finish', onfinish);
            stream.removeListener('end', onlegacyfinish);
            stream.removeListener('close', onlegacyfinish);
            stream.removeListener('finish', onfinish);
            stream.removeListener('end', onend);
            stream.removeListener('error', onerror);
            stream.removeListener('close', onclose);
          };
        }
        module.exports = eos;
      }, {
        "../../../errors": 266
      }],
      276: [function (require, module, exports) {
        module.exports = function () {
          throw new Error('Readable.from is not available in the browser');
        };
      }, {}],
      277: [function (require, module, exports) {
        // Ported from https://github.com/mafintosh/pump with
        // permission from the author, Mathias Buus (@mafintosh).

        'use strict';

        var eos;
        function once(callback) {
          var called = false;
          return function () {
            if (called) return;
            called = true;
            callback.apply(void 0, arguments);
          };
        }
        var _require$codes = require('../../../errors').codes,
          ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
          ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
        function noop(err) {
          // Rethrow the error if it exists to avoid swallowing it
          if (err) throw err;
        }
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === 'function';
        }
        function destroyer(stream, reading, writing, callback) {
          callback = once(callback);
          var closed = false;
          stream.on('close', function () {
            closed = true;
          });
          if (eos === undefined) eos = require('./end-of-stream');
          eos(stream, {
            readable: reading,
            writable: writing
          }, function (err) {
            if (err) return callback(err);
            closed = true;
            callback();
          });
          var destroyed = false;
          return function (err) {
            if (closed) return;
            if (destroyed) return;
            destroyed = true;

            // request.destroy just do .end - .abort is what we want
            if (isRequest(stream)) return stream.abort();
            if (typeof stream.destroy === 'function') return stream.destroy();
            callback(err || new ERR_STREAM_DESTROYED('pipe'));
          };
        }
        function call(fn) {
          fn();
        }
        function pipe(from, to) {
          return from.pipe(to);
        }
        function popCallback(streams) {
          if (!streams.length) return noop;
          if (typeof streams[streams.length - 1] !== 'function') return noop;
          return streams.pop();
        }
        function pipeline() {
          for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
            streams[_key] = arguments[_key];
          }
          var callback = popCallback(streams);
          if (Array.isArray(streams[0])) streams = streams[0];
          if (streams.length < 2) {
            throw new ERR_MISSING_ARGS('streams');
          }
          var error;
          var destroys = streams.map(function (stream, i) {
            var reading = i < streams.length - 1;
            var writing = i > 0;
            return destroyer(stream, reading, writing, function (err) {
              if (!error) error = err;
              if (err) destroys.forEach(call);
              if (reading) return;
              destroys.forEach(call);
              callback(error);
            });
          });
          return streams.reduce(pipe);
        }
        module.exports = pipeline;
      }, {
        "../../../errors": 266,
        "./end-of-stream": 275
      }],
      278: [function (require, module, exports) {
        'use strict';

        var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
        function highWaterMarkFrom(options, isDuplex, duplexKey) {
          return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
        }
        function getHighWaterMark(state, options, duplexKey, isDuplex) {
          var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
          if (hwm != null) {
            if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
              var name = isDuplex ? duplexKey : 'highWaterMark';
              throw new ERR_INVALID_OPT_VALUE(name, hwm);
            }
            return Math.floor(hwm);
          }

          // Default value
          return state.objectMode ? 16 : 16 * 1024;
        }
        module.exports = {
          getHighWaterMark: getHighWaterMark
        };
      }, {
        "../../../errors": 266
      }],
      279: [function (require, module, exports) {
        module.exports = require('events').EventEmitter;
      }, {
        "events": 3
      }],
      280: [function (require, module, exports) {
        exports = module.exports = require('./lib/_stream_readable.js');
        exports.Stream = exports;
        exports.Readable = exports;
        exports.Writable = require('./lib/_stream_writable.js');
        exports.Duplex = require('./lib/_stream_duplex.js');
        exports.Transform = require('./lib/_stream_transform.js');
        exports.PassThrough = require('./lib/_stream_passthrough.js');
        exports.finished = require('./lib/internal/streams/end-of-stream.js');
        exports.pipeline = require('./lib/internal/streams/pipeline.js');
      }, {
        "./lib/_stream_duplex.js": 267,
        "./lib/_stream_passthrough.js": 268,
        "./lib/_stream_readable.js": 269,
        "./lib/_stream_transform.js": 270,
        "./lib/_stream_writable.js": 271,
        "./lib/internal/streams/end-of-stream.js": 275,
        "./lib/internal/streams/pipeline.js": 277
      }],
      281: [function (require, module, exports) {
        "use strict";

        var __importDefault = this && this.__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };
        const bn_js_1 = __importDefault(require("bn.js"));
        const buffer_1 = __importDefault(require("buffer"));
        const keccak_1 = __importDefault(require("keccak"));
        const Buffer = buffer_1.default.Buffer;
        function keccak256(value) {
          value = toBuffer(value);
          return (0, keccak_1.default)('keccak256').update(value).digest();
        }
        function toBuffer(value) {
          if (!Buffer.isBuffer(value)) {
            if (Array.isArray(value)) {
              value = Buffer.from(value);
            } else if (typeof value === 'string') {
              if (isHexString(value)) {
                value = Buffer.from(padToEven(stripHexPrefix(value)), 'hex');
              } else {
                value = Buffer.from(value);
              }
            } else if (typeof value === 'number') {
              value = intToBuffer(value);
            } else if (value === null || value === undefined) {
              value = Buffer.allocUnsafe(0);
            } else if (bn_js_1.default.isBN(value)) {
              value = value.toArrayLike(Buffer);
            } else if (value.toArray) {
              // converts a BN to a Buffer
              value = Buffer.from(value.toArray());
            } else {
              throw new Error('invalid type');
            }
          }
          return value;
        }
        function isHexString(value, length) {
          if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
          }
          if (length && value.length !== 2 + 2 * length) {
            return false;
          }
          return true;
        }
        function padToEven(value) {
          if (typeof value !== 'string') {
            throw new Error(`while padding to even, value must be string, is currently ${typeof value}, while padToEven.`);
          }
          if (value.length % 2) {
            value = `0${value}`;
          }
          return value;
        }
        function stripHexPrefix(value) {
          if (typeof value !== 'string') {
            return value;
          }
          return isHexPrefixed(value) ? value.slice(2) : value;
        }
        function isHexPrefixed(value) {
          if (typeof value !== 'string') {
            throw new Error("value must be type 'string', is currently type " + typeof value + ', while checking isHexPrefixed.');
          }
          return value.slice(0, 2) === '0x';
        }
        function intToBuffer(i) {
          const hex = intToHex(i);
          return Buffer.from(padToEven(hex.slice(2)), 'hex');
        }
        function intToHex(i) {
          const hex = i.toString(16);
          return `0x${hex}`;
        }
        if (typeof window !== 'undefined') {
          window.keccak256 = keccak256;
        }
        module.exports = keccak256;
      }, {
        "bn.js": 132,
        "buffer": 2,
        "keccak": 260
      }],
      282: [function (require, module, exports) {
        /* eslint-disable node/no-deprecated-api */
        var buffer = require('buffer');
        var Buffer = buffer.Buffer;

        // alternative to using Object.keys for old browsers
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key];
          }
        }
        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
          module.exports = buffer;
        } else {
          // Copy properties from require('buffer')
          copyProps(buffer, exports);
          exports.Buffer = SafeBuffer;
        }
        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer(arg, encodingOrOffset, length);
        }

        // Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer);
        SafeBuffer.from = function (arg, encodingOrOffset, length) {
          if (typeof arg === 'number') {
            throw new TypeError('Argument must not be a number');
          }
          return Buffer(arg, encodingOrOffset, length);
        };
        SafeBuffer.alloc = function (size, fill, encoding) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number');
          }
          var buf = Buffer(size);
          if (fill !== undefined) {
            if (typeof encoding === 'string') {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }
          } else {
            buf.fill(0);
          }
          return buf;
        };
        SafeBuffer.allocUnsafe = function (size) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number');
          }
          return Buffer(size);
        };
        SafeBuffer.allocUnsafeSlow = function (size) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number');
          }
          return buffer.SlowBuffer(size);
        };
      }, {
        "buffer": 2
      }],
      283: [function (require, module, exports) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        /*<replacement>*/
        var Buffer = require('safe-buffer').Buffer;
        /*</replacement>*/

        var isEncoding = Buffer.isEncoding || function (encoding) {
          encoding = '' + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
            case 'raw':
              return true;
            default:
              return false;
          }
        };
        function _normalizeEncoding(enc) {
          if (!enc) return 'utf8';
          var retried;
          while (true) {
            switch (enc) {
              case 'utf8':
              case 'utf-8':
                return 'utf8';
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return 'utf16le';
              case 'latin1':
              case 'binary':
                return 'latin1';
              case 'base64':
              case 'ascii':
              case 'hex':
                return enc;
              default:
                if (retried) return; // undefined
                enc = ('' + enc).toLowerCase();
                retried = true;
            }
          }
        }
        ;

        // Do not cache `Buffer.isEncoding` when checking encoding names as some
        // modules monkey-patch it to support additional encodings
        function normalizeEncoding(enc) {
          var nenc = _normalizeEncoding(enc);
          if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
          return nenc || enc;
        }

        // StringDecoder provides an interface for efficiently splitting a series of
        // buffers into a series of JS strings without breaking apart multi-byte
        // characters.
        exports.StringDecoder = StringDecoder;
        function StringDecoder(encoding) {
          this.encoding = normalizeEncoding(encoding);
          var nb;
          switch (this.encoding) {
            case 'utf16le':
              this.text = utf16Text;
              this.end = utf16End;
              nb = 4;
              break;
            case 'utf8':
              this.fillLast = utf8FillLast;
              nb = 4;
              break;
            case 'base64':
              this.text = base64Text;
              this.end = base64End;
              nb = 3;
              break;
            default:
              this.write = simpleWrite;
              this.end = simpleEnd;
              return;
          }
          this.lastNeed = 0;
          this.lastTotal = 0;
          this.lastChar = Buffer.allocUnsafe(nb);
        }
        StringDecoder.prototype.write = function (buf) {
          if (buf.length === 0) return '';
          var r;
          var i;
          if (this.lastNeed) {
            r = this.fillLast(buf);
            if (r === undefined) return '';
            i = this.lastNeed;
            this.lastNeed = 0;
          } else {
            i = 0;
          }
          if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
          return r || '';
        };
        StringDecoder.prototype.end = utf8End;

        // Returns only complete characters in a Buffer
        StringDecoder.prototype.text = utf8Text;

        // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
        StringDecoder.prototype.fillLast = function (buf) {
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
          this.lastNeed -= buf.length;
        };

        // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
        // continuation byte. If an invalid byte is detected, -2 is returned.
        function utf8CheckByte(byte) {
          if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
          return byte >> 6 === 0x02 ? -1 : -2;
        }

        // Checks at most 3 bytes at the end of a Buffer in order to detect an
        // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
        // needed to complete the UTF-8 character (if applicable) are returned.
        function utf8CheckIncomplete(self, buf, i) {
          var j = buf.length - 1;
          if (j < i) return 0;
          var nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) self.lastNeed = nb - 1;
            return nb;
          }
          if (--j < i || nb === -2) return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) self.lastNeed = nb - 2;
            return nb;
          }
          if (--j < i || nb === -2) return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) {
              if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
            }
            return nb;
          }
          return 0;
        }

        // Validates as many continuation bytes for a multi-byte UTF-8 character as
        // needed or are available. If we see a non-continuation byte where we expect
        // one, we "replace" the validated continuation bytes we've seen so far with
        // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
        // behavior. The continuation byte check is included three times in the case
        // where all of the continuation bytes for a character exist in the same buffer.
        // It is also done this way as a slight performance increase instead of using a
        // loop.
        function utf8CheckExtraBytes(self, buf, p) {
          if ((buf[0] & 0xC0) !== 0x80) {
            self.lastNeed = 0;
            return '\ufffd';
          }
          if (self.lastNeed > 1 && buf.length > 1) {
            if ((buf[1] & 0xC0) !== 0x80) {
              self.lastNeed = 1;
              return '\ufffd';
            }
            if (self.lastNeed > 2 && buf.length > 2) {
              if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return '\ufffd';
              }
            }
          }
        }

        // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
        function utf8FillLast(buf) {
          var p = this.lastTotal - this.lastNeed;
          var r = utf8CheckExtraBytes(this, buf, p);
          if (r !== undefined) return r;
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, p, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, p, 0, buf.length);
          this.lastNeed -= buf.length;
        }

        // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
        // partial character, the character's bytes are buffered until the required
        // number of bytes are available.
        function utf8Text(buf, i) {
          var total = utf8CheckIncomplete(this, buf, i);
          if (!this.lastNeed) return buf.toString('utf8', i);
          this.lastTotal = total;
          var end = buf.length - (total - this.lastNeed);
          buf.copy(this.lastChar, 0, end);
          return buf.toString('utf8', i, end);
        }

        // For UTF-8, a replacement character is added when ending on a partial
        // character.
        function utf8End(buf) {
          var r = buf && buf.length ? this.write(buf) : '';
          if (this.lastNeed) return r + '\ufffd';
          return r;
        }

        // UTF-16LE typically needs two bytes per character, but even if we have an even
        // number of bytes available, we need to check if we end on a leading/high
        // surrogate. In that case, we need to wait for the next two bytes in order to
        // decode the last character properly.
        function utf16Text(buf, i) {
          if ((buf.length - i) % 2 === 0) {
            var r = buf.toString('utf16le', i);
            if (r) {
              var c = r.charCodeAt(r.length - 1);
              if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
              }
            }
            return r;
          }
          this.lastNeed = 1;
          this.lastTotal = 2;
          this.lastChar[0] = buf[buf.length - 1];
          return buf.toString('utf16le', i, buf.length - 1);
        }

        // For UTF-16LE we do not explicitly append special replacement characters if we
        // end on a partial character, we simply let v8 handle that.
        function utf16End(buf) {
          var r = buf && buf.length ? this.write(buf) : '';
          if (this.lastNeed) {
            var end = this.lastTotal - this.lastNeed;
            return r + this.lastChar.toString('utf16le', 0, end);
          }
          return r;
        }
        function base64Text(buf, i) {
          var n = (buf.length - i) % 3;
          if (n === 0) return buf.toString('base64', i);
          this.lastNeed = 3 - n;
          this.lastTotal = 3;
          if (n === 1) {
            this.lastChar[0] = buf[buf.length - 1];
          } else {
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
          }
          return buf.toString('base64', i, buf.length - n);
        }
        function base64End(buf) {
          var r = buf && buf.length ? this.write(buf) : '';
          if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
          return r;
        }

        // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
        function simpleWrite(buf) {
          return buf.toString(this.encoding);
        }
        function simpleEnd(buf) {
          return buf && buf.length ? this.write(buf) : '';
        }
      }, {
        "safe-buffer": 282
      }],
      284: [function (require, module, exports) {
        (function (nacl) {
          'use strict';

          // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
          // Public domain.
          //
          // Implementation derived from TweetNaCl version 20140427.
          // See for details: http://tweetnacl.cr.yp.to/
          var gf = function (init) {
            var i,
              r = new Float64Array(16);
            if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
            return r;
          };

          //  Pluggable, initialized in high-level API below.
          var randombytes = function /* x, n */ () {
            throw new Error('no PRNG');
          };
          var _0 = new Uint8Array(16);
          var _9 = new Uint8Array(32);
          _9[0] = 9;
          var gf0 = gf(),
            gf1 = gf([1]),
            _121665 = gf([0xdb41, 1]),
            D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
            D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
            X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
            Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
            I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);
          function ts64(x, i, h, l) {
            x[i] = h >> 24 & 0xff;
            x[i + 1] = h >> 16 & 0xff;
            x[i + 2] = h >> 8 & 0xff;
            x[i + 3] = h & 0xff;
            x[i + 4] = l >> 24 & 0xff;
            x[i + 5] = l >> 16 & 0xff;
            x[i + 6] = l >> 8 & 0xff;
            x[i + 7] = l & 0xff;
          }
          function vn(x, xi, y, yi, n) {
            var i,
              d = 0;
            for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
            return (1 & d - 1 >>> 8) - 1;
          }
          function crypto_verify_16(x, xi, y, yi) {
            return vn(x, xi, y, yi, 16);
          }
          function crypto_verify_32(x, xi, y, yi) {
            return vn(x, xi, y, yi, 32);
          }
          function core_salsa20(o, p, k, c) {
            var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
              j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
              j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
              j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
              j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
              j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
              j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
              j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
              j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
              j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
              j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
              j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
              j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
              j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
              j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
              j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
            var x0 = j0,
              x1 = j1,
              x2 = j2,
              x3 = j3,
              x4 = j4,
              x5 = j5,
              x6 = j6,
              x7 = j7,
              x8 = j8,
              x9 = j9,
              x10 = j10,
              x11 = j11,
              x12 = j12,
              x13 = j13,
              x14 = j14,
              x15 = j15,
              u;
            for (var i = 0; i < 20; i += 2) {
              u = x0 + x12 | 0;
              x4 ^= u << 7 | u >>> 32 - 7;
              u = x4 + x0 | 0;
              x8 ^= u << 9 | u >>> 32 - 9;
              u = x8 + x4 | 0;
              x12 ^= u << 13 | u >>> 32 - 13;
              u = x12 + x8 | 0;
              x0 ^= u << 18 | u >>> 32 - 18;
              u = x5 + x1 | 0;
              x9 ^= u << 7 | u >>> 32 - 7;
              u = x9 + x5 | 0;
              x13 ^= u << 9 | u >>> 32 - 9;
              u = x13 + x9 | 0;
              x1 ^= u << 13 | u >>> 32 - 13;
              u = x1 + x13 | 0;
              x5 ^= u << 18 | u >>> 32 - 18;
              u = x10 + x6 | 0;
              x14 ^= u << 7 | u >>> 32 - 7;
              u = x14 + x10 | 0;
              x2 ^= u << 9 | u >>> 32 - 9;
              u = x2 + x14 | 0;
              x6 ^= u << 13 | u >>> 32 - 13;
              u = x6 + x2 | 0;
              x10 ^= u << 18 | u >>> 32 - 18;
              u = x15 + x11 | 0;
              x3 ^= u << 7 | u >>> 32 - 7;
              u = x3 + x15 | 0;
              x7 ^= u << 9 | u >>> 32 - 9;
              u = x7 + x3 | 0;
              x11 ^= u << 13 | u >>> 32 - 13;
              u = x11 + x7 | 0;
              x15 ^= u << 18 | u >>> 32 - 18;
              u = x0 + x3 | 0;
              x1 ^= u << 7 | u >>> 32 - 7;
              u = x1 + x0 | 0;
              x2 ^= u << 9 | u >>> 32 - 9;
              u = x2 + x1 | 0;
              x3 ^= u << 13 | u >>> 32 - 13;
              u = x3 + x2 | 0;
              x0 ^= u << 18 | u >>> 32 - 18;
              u = x5 + x4 | 0;
              x6 ^= u << 7 | u >>> 32 - 7;
              u = x6 + x5 | 0;
              x7 ^= u << 9 | u >>> 32 - 9;
              u = x7 + x6 | 0;
              x4 ^= u << 13 | u >>> 32 - 13;
              u = x4 + x7 | 0;
              x5 ^= u << 18 | u >>> 32 - 18;
              u = x10 + x9 | 0;
              x11 ^= u << 7 | u >>> 32 - 7;
              u = x11 + x10 | 0;
              x8 ^= u << 9 | u >>> 32 - 9;
              u = x8 + x11 | 0;
              x9 ^= u << 13 | u >>> 32 - 13;
              u = x9 + x8 | 0;
              x10 ^= u << 18 | u >>> 32 - 18;
              u = x15 + x14 | 0;
              x12 ^= u << 7 | u >>> 32 - 7;
              u = x12 + x15 | 0;
              x13 ^= u << 9 | u >>> 32 - 9;
              u = x13 + x12 | 0;
              x14 ^= u << 13 | u >>> 32 - 13;
              u = x14 + x13 | 0;
              x15 ^= u << 18 | u >>> 32 - 18;
            }
            x0 = x0 + j0 | 0;
            x1 = x1 + j1 | 0;
            x2 = x2 + j2 | 0;
            x3 = x3 + j3 | 0;
            x4 = x4 + j4 | 0;
            x5 = x5 + j5 | 0;
            x6 = x6 + j6 | 0;
            x7 = x7 + j7 | 0;
            x8 = x8 + j8 | 0;
            x9 = x9 + j9 | 0;
            x10 = x10 + j10 | 0;
            x11 = x11 + j11 | 0;
            x12 = x12 + j12 | 0;
            x13 = x13 + j13 | 0;
            x14 = x14 + j14 | 0;
            x15 = x15 + j15 | 0;
            o[0] = x0 >>> 0 & 0xff;
            o[1] = x0 >>> 8 & 0xff;
            o[2] = x0 >>> 16 & 0xff;
            o[3] = x0 >>> 24 & 0xff;
            o[4] = x1 >>> 0 & 0xff;
            o[5] = x1 >>> 8 & 0xff;
            o[6] = x1 >>> 16 & 0xff;
            o[7] = x1 >>> 24 & 0xff;
            o[8] = x2 >>> 0 & 0xff;
            o[9] = x2 >>> 8 & 0xff;
            o[10] = x2 >>> 16 & 0xff;
            o[11] = x2 >>> 24 & 0xff;
            o[12] = x3 >>> 0 & 0xff;
            o[13] = x3 >>> 8 & 0xff;
            o[14] = x3 >>> 16 & 0xff;
            o[15] = x3 >>> 24 & 0xff;
            o[16] = x4 >>> 0 & 0xff;
            o[17] = x4 >>> 8 & 0xff;
            o[18] = x4 >>> 16 & 0xff;
            o[19] = x4 >>> 24 & 0xff;
            o[20] = x5 >>> 0 & 0xff;
            o[21] = x5 >>> 8 & 0xff;
            o[22] = x5 >>> 16 & 0xff;
            o[23] = x5 >>> 24 & 0xff;
            o[24] = x6 >>> 0 & 0xff;
            o[25] = x6 >>> 8 & 0xff;
            o[26] = x6 >>> 16 & 0xff;
            o[27] = x6 >>> 24 & 0xff;
            o[28] = x7 >>> 0 & 0xff;
            o[29] = x7 >>> 8 & 0xff;
            o[30] = x7 >>> 16 & 0xff;
            o[31] = x7 >>> 24 & 0xff;
            o[32] = x8 >>> 0 & 0xff;
            o[33] = x8 >>> 8 & 0xff;
            o[34] = x8 >>> 16 & 0xff;
            o[35] = x8 >>> 24 & 0xff;
            o[36] = x9 >>> 0 & 0xff;
            o[37] = x9 >>> 8 & 0xff;
            o[38] = x9 >>> 16 & 0xff;
            o[39] = x9 >>> 24 & 0xff;
            o[40] = x10 >>> 0 & 0xff;
            o[41] = x10 >>> 8 & 0xff;
            o[42] = x10 >>> 16 & 0xff;
            o[43] = x10 >>> 24 & 0xff;
            o[44] = x11 >>> 0 & 0xff;
            o[45] = x11 >>> 8 & 0xff;
            o[46] = x11 >>> 16 & 0xff;
            o[47] = x11 >>> 24 & 0xff;
            o[48] = x12 >>> 0 & 0xff;
            o[49] = x12 >>> 8 & 0xff;
            o[50] = x12 >>> 16 & 0xff;
            o[51] = x12 >>> 24 & 0xff;
            o[52] = x13 >>> 0 & 0xff;
            o[53] = x13 >>> 8 & 0xff;
            o[54] = x13 >>> 16 & 0xff;
            o[55] = x13 >>> 24 & 0xff;
            o[56] = x14 >>> 0 & 0xff;
            o[57] = x14 >>> 8 & 0xff;
            o[58] = x14 >>> 16 & 0xff;
            o[59] = x14 >>> 24 & 0xff;
            o[60] = x15 >>> 0 & 0xff;
            o[61] = x15 >>> 8 & 0xff;
            o[62] = x15 >>> 16 & 0xff;
            o[63] = x15 >>> 24 & 0xff;
          }
          function core_hsalsa20(o, p, k, c) {
            var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
              j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
              j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
              j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
              j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
              j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
              j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
              j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
              j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
              j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
              j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
              j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
              j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
              j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
              j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
              j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
            var x0 = j0,
              x1 = j1,
              x2 = j2,
              x3 = j3,
              x4 = j4,
              x5 = j5,
              x6 = j6,
              x7 = j7,
              x8 = j8,
              x9 = j9,
              x10 = j10,
              x11 = j11,
              x12 = j12,
              x13 = j13,
              x14 = j14,
              x15 = j15,
              u;
            for (var i = 0; i < 20; i += 2) {
              u = x0 + x12 | 0;
              x4 ^= u << 7 | u >>> 32 - 7;
              u = x4 + x0 | 0;
              x8 ^= u << 9 | u >>> 32 - 9;
              u = x8 + x4 | 0;
              x12 ^= u << 13 | u >>> 32 - 13;
              u = x12 + x8 | 0;
              x0 ^= u << 18 | u >>> 32 - 18;
              u = x5 + x1 | 0;
              x9 ^= u << 7 | u >>> 32 - 7;
              u = x9 + x5 | 0;
              x13 ^= u << 9 | u >>> 32 - 9;
              u = x13 + x9 | 0;
              x1 ^= u << 13 | u >>> 32 - 13;
              u = x1 + x13 | 0;
              x5 ^= u << 18 | u >>> 32 - 18;
              u = x10 + x6 | 0;
              x14 ^= u << 7 | u >>> 32 - 7;
              u = x14 + x10 | 0;
              x2 ^= u << 9 | u >>> 32 - 9;
              u = x2 + x14 | 0;
              x6 ^= u << 13 | u >>> 32 - 13;
              u = x6 + x2 | 0;
              x10 ^= u << 18 | u >>> 32 - 18;
              u = x15 + x11 | 0;
              x3 ^= u << 7 | u >>> 32 - 7;
              u = x3 + x15 | 0;
              x7 ^= u << 9 | u >>> 32 - 9;
              u = x7 + x3 | 0;
              x11 ^= u << 13 | u >>> 32 - 13;
              u = x11 + x7 | 0;
              x15 ^= u << 18 | u >>> 32 - 18;
              u = x0 + x3 | 0;
              x1 ^= u << 7 | u >>> 32 - 7;
              u = x1 + x0 | 0;
              x2 ^= u << 9 | u >>> 32 - 9;
              u = x2 + x1 | 0;
              x3 ^= u << 13 | u >>> 32 - 13;
              u = x3 + x2 | 0;
              x0 ^= u << 18 | u >>> 32 - 18;
              u = x5 + x4 | 0;
              x6 ^= u << 7 | u >>> 32 - 7;
              u = x6 + x5 | 0;
              x7 ^= u << 9 | u >>> 32 - 9;
              u = x7 + x6 | 0;
              x4 ^= u << 13 | u >>> 32 - 13;
              u = x4 + x7 | 0;
              x5 ^= u << 18 | u >>> 32 - 18;
              u = x10 + x9 | 0;
              x11 ^= u << 7 | u >>> 32 - 7;
              u = x11 + x10 | 0;
              x8 ^= u << 9 | u >>> 32 - 9;
              u = x8 + x11 | 0;
              x9 ^= u << 13 | u >>> 32 - 13;
              u = x9 + x8 | 0;
              x10 ^= u << 18 | u >>> 32 - 18;
              u = x15 + x14 | 0;
              x12 ^= u << 7 | u >>> 32 - 7;
              u = x12 + x15 | 0;
              x13 ^= u << 9 | u >>> 32 - 9;
              u = x13 + x12 | 0;
              x14 ^= u << 13 | u >>> 32 - 13;
              u = x14 + x13 | 0;
              x15 ^= u << 18 | u >>> 32 - 18;
            }
            o[0] = x0 >>> 0 & 0xff;
            o[1] = x0 >>> 8 & 0xff;
            o[2] = x0 >>> 16 & 0xff;
            o[3] = x0 >>> 24 & 0xff;
            o[4] = x5 >>> 0 & 0xff;
            o[5] = x5 >>> 8 & 0xff;
            o[6] = x5 >>> 16 & 0xff;
            o[7] = x5 >>> 24 & 0xff;
            o[8] = x10 >>> 0 & 0xff;
            o[9] = x10 >>> 8 & 0xff;
            o[10] = x10 >>> 16 & 0xff;
            o[11] = x10 >>> 24 & 0xff;
            o[12] = x15 >>> 0 & 0xff;
            o[13] = x15 >>> 8 & 0xff;
            o[14] = x15 >>> 16 & 0xff;
            o[15] = x15 >>> 24 & 0xff;
            o[16] = x6 >>> 0 & 0xff;
            o[17] = x6 >>> 8 & 0xff;
            o[18] = x6 >>> 16 & 0xff;
            o[19] = x6 >>> 24 & 0xff;
            o[20] = x7 >>> 0 & 0xff;
            o[21] = x7 >>> 8 & 0xff;
            o[22] = x7 >>> 16 & 0xff;
            o[23] = x7 >>> 24 & 0xff;
            o[24] = x8 >>> 0 & 0xff;
            o[25] = x8 >>> 8 & 0xff;
            o[26] = x8 >>> 16 & 0xff;
            o[27] = x8 >>> 24 & 0xff;
            o[28] = x9 >>> 0 & 0xff;
            o[29] = x9 >>> 8 & 0xff;
            o[30] = x9 >>> 16 & 0xff;
            o[31] = x9 >>> 24 & 0xff;
          }
          function crypto_core_salsa20(out, inp, k, c) {
            core_salsa20(out, inp, k, c);
          }
          function crypto_core_hsalsa20(out, inp, k, c) {
            core_hsalsa20(out, inp, k, c);
          }
          var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
          // "expand 32-byte k"

          function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
            var z = new Uint8Array(16),
              x = new Uint8Array(64);
            var u, i;
            for (i = 0; i < 16; i++) z[i] = 0;
            for (i = 0; i < 8; i++) z[i] = n[i];
            while (b >= 64) {
              crypto_core_salsa20(x, z, k, sigma);
              for (i = 0; i < 64; i++) c[cpos + i] = m[mpos + i] ^ x[i];
              u = 1;
              for (i = 8; i < 16; i++) {
                u = u + (z[i] & 0xff) | 0;
                z[i] = u & 0xff;
                u >>>= 8;
              }
              b -= 64;
              cpos += 64;
              mpos += 64;
            }
            if (b > 0) {
              crypto_core_salsa20(x, z, k, sigma);
              for (i = 0; i < b; i++) c[cpos + i] = m[mpos + i] ^ x[i];
            }
            return 0;
          }
          function crypto_stream_salsa20(c, cpos, b, n, k) {
            var z = new Uint8Array(16),
              x = new Uint8Array(64);
            var u, i;
            for (i = 0; i < 16; i++) z[i] = 0;
            for (i = 0; i < 8; i++) z[i] = n[i];
            while (b >= 64) {
              crypto_core_salsa20(x, z, k, sigma);
              for (i = 0; i < 64; i++) c[cpos + i] = x[i];
              u = 1;
              for (i = 8; i < 16; i++) {
                u = u + (z[i] & 0xff) | 0;
                z[i] = u & 0xff;
                u >>>= 8;
              }
              b -= 64;
              cpos += 64;
            }
            if (b > 0) {
              crypto_core_salsa20(x, z, k, sigma);
              for (i = 0; i < b; i++) c[cpos + i] = x[i];
            }
            return 0;
          }
          function crypto_stream(c, cpos, d, n, k) {
            var s = new Uint8Array(32);
            crypto_core_hsalsa20(s, n, k, sigma);
            var sn = new Uint8Array(8);
            for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
            return crypto_stream_salsa20(c, cpos, d, sn, s);
          }
          function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
            var s = new Uint8Array(32);
            crypto_core_hsalsa20(s, n, k, sigma);
            var sn = new Uint8Array(8);
            for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
            return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
          }

          /*
          * Port of Andrew Moon's Poly1305-donna-16. Public domain.
          * https://github.com/floodyberry/poly1305-donna
          */

          var poly1305 = function (key) {
            this.buffer = new Uint8Array(16);
            this.r = new Uint16Array(10);
            this.h = new Uint16Array(10);
            this.pad = new Uint16Array(8);
            this.leftover = 0;
            this.fin = 0;
            var t0, t1, t2, t3, t4, t5, t6, t7;
            t0 = key[0] & 0xff | (key[1] & 0xff) << 8;
            this.r[0] = t0 & 0x1fff;
            t1 = key[2] & 0xff | (key[3] & 0xff) << 8;
            this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;
            t2 = key[4] & 0xff | (key[5] & 0xff) << 8;
            this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;
            t3 = key[6] & 0xff | (key[7] & 0xff) << 8;
            this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;
            t4 = key[8] & 0xff | (key[9] & 0xff) << 8;
            this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;
            this.r[5] = t4 >>> 1 & 0x1ffe;
            t5 = key[10] & 0xff | (key[11] & 0xff) << 8;
            this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;
            t6 = key[12] & 0xff | (key[13] & 0xff) << 8;
            this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;
            t7 = key[14] & 0xff | (key[15] & 0xff) << 8;
            this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;
            this.r[9] = t7 >>> 5 & 0x007f;
            this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
            this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
            this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
            this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
            this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
            this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
            this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
            this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
          };
          poly1305.prototype.blocks = function (m, mpos, bytes) {
            var hibit = this.fin ? 0 : 1 << 11;
            var t0, t1, t2, t3, t4, t5, t6, t7, c;
            var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
            var h0 = this.h[0],
              h1 = this.h[1],
              h2 = this.h[2],
              h3 = this.h[3],
              h4 = this.h[4],
              h5 = this.h[5],
              h6 = this.h[6],
              h7 = this.h[7],
              h8 = this.h[8],
              h9 = this.h[9];
            var r0 = this.r[0],
              r1 = this.r[1],
              r2 = this.r[2],
              r3 = this.r[3],
              r4 = this.r[4],
              r5 = this.r[5],
              r6 = this.r[6],
              r7 = this.r[7],
              r8 = this.r[8],
              r9 = this.r[9];
            while (bytes >= 16) {
              t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;
              h0 += t0 & 0x1fff;
              t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;
              h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;
              t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;
              h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;
              t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;
              h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;
              t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;
              h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;
              h5 += t4 >>> 1 & 0x1fff;
              t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;
              h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;
              t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;
              h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;
              t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;
              h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;
              h9 += t7 >>> 5 | hibit;
              c = 0;
              d0 = c;
              d0 += h0 * r0;
              d0 += h1 * (5 * r9);
              d0 += h2 * (5 * r8);
              d0 += h3 * (5 * r7);
              d0 += h4 * (5 * r6);
              c = d0 >>> 13;
              d0 &= 0x1fff;
              d0 += h5 * (5 * r5);
              d0 += h6 * (5 * r4);
              d0 += h7 * (5 * r3);
              d0 += h8 * (5 * r2);
              d0 += h9 * (5 * r1);
              c += d0 >>> 13;
              d0 &= 0x1fff;
              d1 = c;
              d1 += h0 * r1;
              d1 += h1 * r0;
              d1 += h2 * (5 * r9);
              d1 += h3 * (5 * r8);
              d1 += h4 * (5 * r7);
              c = d1 >>> 13;
              d1 &= 0x1fff;
              d1 += h5 * (5 * r6);
              d1 += h6 * (5 * r5);
              d1 += h7 * (5 * r4);
              d1 += h8 * (5 * r3);
              d1 += h9 * (5 * r2);
              c += d1 >>> 13;
              d1 &= 0x1fff;
              d2 = c;
              d2 += h0 * r2;
              d2 += h1 * r1;
              d2 += h2 * r0;
              d2 += h3 * (5 * r9);
              d2 += h4 * (5 * r8);
              c = d2 >>> 13;
              d2 &= 0x1fff;
              d2 += h5 * (5 * r7);
              d2 += h6 * (5 * r6);
              d2 += h7 * (5 * r5);
              d2 += h8 * (5 * r4);
              d2 += h9 * (5 * r3);
              c += d2 >>> 13;
              d2 &= 0x1fff;
              d3 = c;
              d3 += h0 * r3;
              d3 += h1 * r2;
              d3 += h2 * r1;
              d3 += h3 * r0;
              d3 += h4 * (5 * r9);
              c = d3 >>> 13;
              d3 &= 0x1fff;
              d3 += h5 * (5 * r8);
              d3 += h6 * (5 * r7);
              d3 += h7 * (5 * r6);
              d3 += h8 * (5 * r5);
              d3 += h9 * (5 * r4);
              c += d3 >>> 13;
              d3 &= 0x1fff;
              d4 = c;
              d4 += h0 * r4;
              d4 += h1 * r3;
              d4 += h2 * r2;
              d4 += h3 * r1;
              d4 += h4 * r0;
              c = d4 >>> 13;
              d4 &= 0x1fff;
              d4 += h5 * (5 * r9);
              d4 += h6 * (5 * r8);
              d4 += h7 * (5 * r7);
              d4 += h8 * (5 * r6);
              d4 += h9 * (5 * r5);
              c += d4 >>> 13;
              d4 &= 0x1fff;
              d5 = c;
              d5 += h0 * r5;
              d5 += h1 * r4;
              d5 += h2 * r3;
              d5 += h3 * r2;
              d5 += h4 * r1;
              c = d5 >>> 13;
              d5 &= 0x1fff;
              d5 += h5 * r0;
              d5 += h6 * (5 * r9);
              d5 += h7 * (5 * r8);
              d5 += h8 * (5 * r7);
              d5 += h9 * (5 * r6);
              c += d5 >>> 13;
              d5 &= 0x1fff;
              d6 = c;
              d6 += h0 * r6;
              d6 += h1 * r5;
              d6 += h2 * r4;
              d6 += h3 * r3;
              d6 += h4 * r2;
              c = d6 >>> 13;
              d6 &= 0x1fff;
              d6 += h5 * r1;
              d6 += h6 * r0;
              d6 += h7 * (5 * r9);
              d6 += h8 * (5 * r8);
              d6 += h9 * (5 * r7);
              c += d6 >>> 13;
              d6 &= 0x1fff;
              d7 = c;
              d7 += h0 * r7;
              d7 += h1 * r6;
              d7 += h2 * r5;
              d7 += h3 * r4;
              d7 += h4 * r3;
              c = d7 >>> 13;
              d7 &= 0x1fff;
              d7 += h5 * r2;
              d7 += h6 * r1;
              d7 += h7 * r0;
              d7 += h8 * (5 * r9);
              d7 += h9 * (5 * r8);
              c += d7 >>> 13;
              d7 &= 0x1fff;
              d8 = c;
              d8 += h0 * r8;
              d8 += h1 * r7;
              d8 += h2 * r6;
              d8 += h3 * r5;
              d8 += h4 * r4;
              c = d8 >>> 13;
              d8 &= 0x1fff;
              d8 += h5 * r3;
              d8 += h6 * r2;
              d8 += h7 * r1;
              d8 += h8 * r0;
              d8 += h9 * (5 * r9);
              c += d8 >>> 13;
              d8 &= 0x1fff;
              d9 = c;
              d9 += h0 * r9;
              d9 += h1 * r8;
              d9 += h2 * r7;
              d9 += h3 * r6;
              d9 += h4 * r5;
              c = d9 >>> 13;
              d9 &= 0x1fff;
              d9 += h5 * r4;
              d9 += h6 * r3;
              d9 += h7 * r2;
              d9 += h8 * r1;
              d9 += h9 * r0;
              c += d9 >>> 13;
              d9 &= 0x1fff;
              c = (c << 2) + c | 0;
              c = c + d0 | 0;
              d0 = c & 0x1fff;
              c = c >>> 13;
              d1 += c;
              h0 = d0;
              h1 = d1;
              h2 = d2;
              h3 = d3;
              h4 = d4;
              h5 = d5;
              h6 = d6;
              h7 = d7;
              h8 = d8;
              h9 = d9;
              mpos += 16;
              bytes -= 16;
            }
            this.h[0] = h0;
            this.h[1] = h1;
            this.h[2] = h2;
            this.h[3] = h3;
            this.h[4] = h4;
            this.h[5] = h5;
            this.h[6] = h6;
            this.h[7] = h7;
            this.h[8] = h8;
            this.h[9] = h9;
          };
          poly1305.prototype.finish = function (mac, macpos) {
            var g = new Uint16Array(10);
            var c, mask, f, i;
            if (this.leftover) {
              i = this.leftover;
              this.buffer[i++] = 1;
              for (; i < 16; i++) this.buffer[i] = 0;
              this.fin = 1;
              this.blocks(this.buffer, 0, 16);
            }
            c = this.h[1] >>> 13;
            this.h[1] &= 0x1fff;
            for (i = 2; i < 10; i++) {
              this.h[i] += c;
              c = this.h[i] >>> 13;
              this.h[i] &= 0x1fff;
            }
            this.h[0] += c * 5;
            c = this.h[0] >>> 13;
            this.h[0] &= 0x1fff;
            this.h[1] += c;
            c = this.h[1] >>> 13;
            this.h[1] &= 0x1fff;
            this.h[2] += c;
            g[0] = this.h[0] + 5;
            c = g[0] >>> 13;
            g[0] &= 0x1fff;
            for (i = 1; i < 10; i++) {
              g[i] = this.h[i] + c;
              c = g[i] >>> 13;
              g[i] &= 0x1fff;
            }
            g[9] -= 1 << 13;
            mask = (c ^ 1) - 1;
            for (i = 0; i < 10; i++) g[i] &= mask;
            mask = ~mask;
            for (i = 0; i < 10; i++) this.h[i] = this.h[i] & mask | g[i];
            this.h[0] = (this.h[0] | this.h[1] << 13) & 0xffff;
            this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 0xffff;
            this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 0xffff;
            this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 0xffff;
            this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 0xffff;
            this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 0xffff;
            this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 0xffff;
            this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 0xffff;
            f = this.h[0] + this.pad[0];
            this.h[0] = f & 0xffff;
            for (i = 1; i < 8; i++) {
              f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
              this.h[i] = f & 0xffff;
            }
            mac[macpos + 0] = this.h[0] >>> 0 & 0xff;
            mac[macpos + 1] = this.h[0] >>> 8 & 0xff;
            mac[macpos + 2] = this.h[1] >>> 0 & 0xff;
            mac[macpos + 3] = this.h[1] >>> 8 & 0xff;
            mac[macpos + 4] = this.h[2] >>> 0 & 0xff;
            mac[macpos + 5] = this.h[2] >>> 8 & 0xff;
            mac[macpos + 6] = this.h[3] >>> 0 & 0xff;
            mac[macpos + 7] = this.h[3] >>> 8 & 0xff;
            mac[macpos + 8] = this.h[4] >>> 0 & 0xff;
            mac[macpos + 9] = this.h[4] >>> 8 & 0xff;
            mac[macpos + 10] = this.h[5] >>> 0 & 0xff;
            mac[macpos + 11] = this.h[5] >>> 8 & 0xff;
            mac[macpos + 12] = this.h[6] >>> 0 & 0xff;
            mac[macpos + 13] = this.h[6] >>> 8 & 0xff;
            mac[macpos + 14] = this.h[7] >>> 0 & 0xff;
            mac[macpos + 15] = this.h[7] >>> 8 & 0xff;
          };
          poly1305.prototype.update = function (m, mpos, bytes) {
            var i, want;
            if (this.leftover) {
              want = 16 - this.leftover;
              if (want > bytes) want = bytes;
              for (i = 0; i < want; i++) this.buffer[this.leftover + i] = m[mpos + i];
              bytes -= want;
              mpos += want;
              this.leftover += want;
              if (this.leftover < 16) return;
              this.blocks(this.buffer, 0, 16);
              this.leftover = 0;
            }
            if (bytes >= 16) {
              want = bytes - bytes % 16;
              this.blocks(m, mpos, want);
              mpos += want;
              bytes -= want;
            }
            if (bytes) {
              for (i = 0; i < bytes; i++) this.buffer[this.leftover + i] = m[mpos + i];
              this.leftover += bytes;
            }
          };
          function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
            var s = new poly1305(k);
            s.update(m, mpos, n);
            s.finish(out, outpos);
            return 0;
          }
          function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
            var x = new Uint8Array(16);
            crypto_onetimeauth(x, 0, m, mpos, n, k);
            return crypto_verify_16(h, hpos, x, 0);
          }
          function crypto_secretbox(c, m, d, n, k) {
            var i;
            if (d < 32) return -1;
            crypto_stream_xor(c, 0, m, 0, d, n, k);
            crypto_onetimeauth(c, 16, c, 32, d - 32, c);
            for (i = 0; i < 16; i++) c[i] = 0;
            return 0;
          }
          function crypto_secretbox_open(m, c, d, n, k) {
            var i;
            var x = new Uint8Array(32);
            if (d < 32) return -1;
            crypto_stream(x, 0, 32, n, k);
            if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
            crypto_stream_xor(m, 0, c, 0, d, n, k);
            for (i = 0; i < 32; i++) m[i] = 0;
            return 0;
          }
          function set25519(r, a) {
            var i;
            for (i = 0; i < 16; i++) r[i] = a[i] | 0;
          }
          function car25519(o) {
            var i,
              v,
              c = 1;
            for (i = 0; i < 16; i++) {
              v = o[i] + c + 65535;
              c = Math.floor(v / 65536);
              o[i] = v - c * 65536;
            }
            o[0] += c - 1 + 37 * (c - 1);
          }
          function sel25519(p, q, b) {
            var t,
              c = ~(b - 1);
            for (var i = 0; i < 16; i++) {
              t = c & (p[i] ^ q[i]);
              p[i] ^= t;
              q[i] ^= t;
            }
          }
          function pack25519(o, n) {
            var i, j, b;
            var m = gf(),
              t = gf();
            for (i = 0; i < 16; i++) t[i] = n[i];
            car25519(t);
            car25519(t);
            car25519(t);
            for (j = 0; j < 2; j++) {
              m[0] = t[0] - 0xffed;
              for (i = 1; i < 15; i++) {
                m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
                m[i - 1] &= 0xffff;
              }
              m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
              b = m[15] >> 16 & 1;
              m[14] &= 0xffff;
              sel25519(t, m, 1 - b);
            }
            for (i = 0; i < 16; i++) {
              o[2 * i] = t[i] & 0xff;
              o[2 * i + 1] = t[i] >> 8;
            }
          }
          function neq25519(a, b) {
            var c = new Uint8Array(32),
              d = new Uint8Array(32);
            pack25519(c, a);
            pack25519(d, b);
            return crypto_verify_32(c, 0, d, 0);
          }
          function par25519(a) {
            var d = new Uint8Array(32);
            pack25519(d, a);
            return d[0] & 1;
          }
          function unpack25519(o, n) {
            var i;
            for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8);
            o[15] &= 0x7fff;
          }
          function A(o, a, b) {
            for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
          }
          function Z(o, a, b) {
            for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
          }
          function M(o, a, b) {
            var v,
              c,
              t0 = 0,
              t1 = 0,
              t2 = 0,
              t3 = 0,
              t4 = 0,
              t5 = 0,
              t6 = 0,
              t7 = 0,
              t8 = 0,
              t9 = 0,
              t10 = 0,
              t11 = 0,
              t12 = 0,
              t13 = 0,
              t14 = 0,
              t15 = 0,
              t16 = 0,
              t17 = 0,
              t18 = 0,
              t19 = 0,
              t20 = 0,
              t21 = 0,
              t22 = 0,
              t23 = 0,
              t24 = 0,
              t25 = 0,
              t26 = 0,
              t27 = 0,
              t28 = 0,
              t29 = 0,
              t30 = 0,
              b0 = b[0],
              b1 = b[1],
              b2 = b[2],
              b3 = b[3],
              b4 = b[4],
              b5 = b[5],
              b6 = b[6],
              b7 = b[7],
              b8 = b[8],
              b9 = b[9],
              b10 = b[10],
              b11 = b[11],
              b12 = b[12],
              b13 = b[13],
              b14 = b[14],
              b15 = b[15];
            v = a[0];
            t0 += v * b0;
            t1 += v * b1;
            t2 += v * b2;
            t3 += v * b3;
            t4 += v * b4;
            t5 += v * b5;
            t6 += v * b6;
            t7 += v * b7;
            t8 += v * b8;
            t9 += v * b9;
            t10 += v * b10;
            t11 += v * b11;
            t12 += v * b12;
            t13 += v * b13;
            t14 += v * b14;
            t15 += v * b15;
            v = a[1];
            t1 += v * b0;
            t2 += v * b1;
            t3 += v * b2;
            t4 += v * b3;
            t5 += v * b4;
            t6 += v * b5;
            t7 += v * b6;
            t8 += v * b7;
            t9 += v * b8;
            t10 += v * b9;
            t11 += v * b10;
            t12 += v * b11;
            t13 += v * b12;
            t14 += v * b13;
            t15 += v * b14;
            t16 += v * b15;
            v = a[2];
            t2 += v * b0;
            t3 += v * b1;
            t4 += v * b2;
            t5 += v * b3;
            t6 += v * b4;
            t7 += v * b5;
            t8 += v * b6;
            t9 += v * b7;
            t10 += v * b8;
            t11 += v * b9;
            t12 += v * b10;
            t13 += v * b11;
            t14 += v * b12;
            t15 += v * b13;
            t16 += v * b14;
            t17 += v * b15;
            v = a[3];
            t3 += v * b0;
            t4 += v * b1;
            t5 += v * b2;
            t6 += v * b3;
            t7 += v * b4;
            t8 += v * b5;
            t9 += v * b6;
            t10 += v * b7;
            t11 += v * b8;
            t12 += v * b9;
            t13 += v * b10;
            t14 += v * b11;
            t15 += v * b12;
            t16 += v * b13;
            t17 += v * b14;
            t18 += v * b15;
            v = a[4];
            t4 += v * b0;
            t5 += v * b1;
            t6 += v * b2;
            t7 += v * b3;
            t8 += v * b4;
            t9 += v * b5;
            t10 += v * b6;
            t11 += v * b7;
            t12 += v * b8;
            t13 += v * b9;
            t14 += v * b10;
            t15 += v * b11;
            t16 += v * b12;
            t17 += v * b13;
            t18 += v * b14;
            t19 += v * b15;
            v = a[5];
            t5 += v * b0;
            t6 += v * b1;
            t7 += v * b2;
            t8 += v * b3;
            t9 += v * b4;
            t10 += v * b5;
            t11 += v * b6;
            t12 += v * b7;
            t13 += v * b8;
            t14 += v * b9;
            t15 += v * b10;
            t16 += v * b11;
            t17 += v * b12;
            t18 += v * b13;
            t19 += v * b14;
            t20 += v * b15;
            v = a[6];
            t6 += v * b0;
            t7 += v * b1;
            t8 += v * b2;
            t9 += v * b3;
            t10 += v * b4;
            t11 += v * b5;
            t12 += v * b6;
            t13 += v * b7;
            t14 += v * b8;
            t15 += v * b9;
            t16 += v * b10;
            t17 += v * b11;
            t18 += v * b12;
            t19 += v * b13;
            t20 += v * b14;
            t21 += v * b15;
            v = a[7];
            t7 += v * b0;
            t8 += v * b1;
            t9 += v * b2;
            t10 += v * b3;
            t11 += v * b4;
            t12 += v * b5;
            t13 += v * b6;
            t14 += v * b7;
            t15 += v * b8;
            t16 += v * b9;
            t17 += v * b10;
            t18 += v * b11;
            t19 += v * b12;
            t20 += v * b13;
            t21 += v * b14;
            t22 += v * b15;
            v = a[8];
            t8 += v * b0;
            t9 += v * b1;
            t10 += v * b2;
            t11 += v * b3;
            t12 += v * b4;
            t13 += v * b5;
            t14 += v * b6;
            t15 += v * b7;
            t16 += v * b8;
            t17 += v * b9;
            t18 += v * b10;
            t19 += v * b11;
            t20 += v * b12;
            t21 += v * b13;
            t22 += v * b14;
            t23 += v * b15;
            v = a[9];
            t9 += v * b0;
            t10 += v * b1;
            t11 += v * b2;
            t12 += v * b3;
            t13 += v * b4;
            t14 += v * b5;
            t15 += v * b6;
            t16 += v * b7;
            t17 += v * b8;
            t18 += v * b9;
            t19 += v * b10;
            t20 += v * b11;
            t21 += v * b12;
            t22 += v * b13;
            t23 += v * b14;
            t24 += v * b15;
            v = a[10];
            t10 += v * b0;
            t11 += v * b1;
            t12 += v * b2;
            t13 += v * b3;
            t14 += v * b4;
            t15 += v * b5;
            t16 += v * b6;
            t17 += v * b7;
            t18 += v * b8;
            t19 += v * b9;
            t20 += v * b10;
            t21 += v * b11;
            t22 += v * b12;
            t23 += v * b13;
            t24 += v * b14;
            t25 += v * b15;
            v = a[11];
            t11 += v * b0;
            t12 += v * b1;
            t13 += v * b2;
            t14 += v * b3;
            t15 += v * b4;
            t16 += v * b5;
            t17 += v * b6;
            t18 += v * b7;
            t19 += v * b8;
            t20 += v * b9;
            t21 += v * b10;
            t22 += v * b11;
            t23 += v * b12;
            t24 += v * b13;
            t25 += v * b14;
            t26 += v * b15;
            v = a[12];
            t12 += v * b0;
            t13 += v * b1;
            t14 += v * b2;
            t15 += v * b3;
            t16 += v * b4;
            t17 += v * b5;
            t18 += v * b6;
            t19 += v * b7;
            t20 += v * b8;
            t21 += v * b9;
            t22 += v * b10;
            t23 += v * b11;
            t24 += v * b12;
            t25 += v * b13;
            t26 += v * b14;
            t27 += v * b15;
            v = a[13];
            t13 += v * b0;
            t14 += v * b1;
            t15 += v * b2;
            t16 += v * b3;
            t17 += v * b4;
            t18 += v * b5;
            t19 += v * b6;
            t20 += v * b7;
            t21 += v * b8;
            t22 += v * b9;
            t23 += v * b10;
            t24 += v * b11;
            t25 += v * b12;
            t26 += v * b13;
            t27 += v * b14;
            t28 += v * b15;
            v = a[14];
            t14 += v * b0;
            t15 += v * b1;
            t16 += v * b2;
            t17 += v * b3;
            t18 += v * b4;
            t19 += v * b5;
            t20 += v * b6;
            t21 += v * b7;
            t22 += v * b8;
            t23 += v * b9;
            t24 += v * b10;
            t25 += v * b11;
            t26 += v * b12;
            t27 += v * b13;
            t28 += v * b14;
            t29 += v * b15;
            v = a[15];
            t15 += v * b0;
            t16 += v * b1;
            t17 += v * b2;
            t18 += v * b3;
            t19 += v * b4;
            t20 += v * b5;
            t21 += v * b6;
            t22 += v * b7;
            t23 += v * b8;
            t24 += v * b9;
            t25 += v * b10;
            t26 += v * b11;
            t27 += v * b12;
            t28 += v * b13;
            t29 += v * b14;
            t30 += v * b15;
            t0 += 38 * t16;
            t1 += 38 * t17;
            t2 += 38 * t18;
            t3 += 38 * t19;
            t4 += 38 * t20;
            t5 += 38 * t21;
            t6 += 38 * t22;
            t7 += 38 * t23;
            t8 += 38 * t24;
            t9 += 38 * t25;
            t10 += 38 * t26;
            t11 += 38 * t27;
            t12 += 38 * t28;
            t13 += 38 * t29;
            t14 += 38 * t30;
            // t15 left as is

            // first car
            c = 1;
            v = t0 + c + 65535;
            c = Math.floor(v / 65536);
            t0 = v - c * 65536;
            v = t1 + c + 65535;
            c = Math.floor(v / 65536);
            t1 = v - c * 65536;
            v = t2 + c + 65535;
            c = Math.floor(v / 65536);
            t2 = v - c * 65536;
            v = t3 + c + 65535;
            c = Math.floor(v / 65536);
            t3 = v - c * 65536;
            v = t4 + c + 65535;
            c = Math.floor(v / 65536);
            t4 = v - c * 65536;
            v = t5 + c + 65535;
            c = Math.floor(v / 65536);
            t5 = v - c * 65536;
            v = t6 + c + 65535;
            c = Math.floor(v / 65536);
            t6 = v - c * 65536;
            v = t7 + c + 65535;
            c = Math.floor(v / 65536);
            t7 = v - c * 65536;
            v = t8 + c + 65535;
            c = Math.floor(v / 65536);
            t8 = v - c * 65536;
            v = t9 + c + 65535;
            c = Math.floor(v / 65536);
            t9 = v - c * 65536;
            v = t10 + c + 65535;
            c = Math.floor(v / 65536);
            t10 = v - c * 65536;
            v = t11 + c + 65535;
            c = Math.floor(v / 65536);
            t11 = v - c * 65536;
            v = t12 + c + 65535;
            c = Math.floor(v / 65536);
            t12 = v - c * 65536;
            v = t13 + c + 65535;
            c = Math.floor(v / 65536);
            t13 = v - c * 65536;
            v = t14 + c + 65535;
            c = Math.floor(v / 65536);
            t14 = v - c * 65536;
            v = t15 + c + 65535;
            c = Math.floor(v / 65536);
            t15 = v - c * 65536;
            t0 += c - 1 + 37 * (c - 1);

            // second car
            c = 1;
            v = t0 + c + 65535;
            c = Math.floor(v / 65536);
            t0 = v - c * 65536;
            v = t1 + c + 65535;
            c = Math.floor(v / 65536);
            t1 = v - c * 65536;
            v = t2 + c + 65535;
            c = Math.floor(v / 65536);
            t2 = v - c * 65536;
            v = t3 + c + 65535;
            c = Math.floor(v / 65536);
            t3 = v - c * 65536;
            v = t4 + c + 65535;
            c = Math.floor(v / 65536);
            t4 = v - c * 65536;
            v = t5 + c + 65535;
            c = Math.floor(v / 65536);
            t5 = v - c * 65536;
            v = t6 + c + 65535;
            c = Math.floor(v / 65536);
            t6 = v - c * 65536;
            v = t7 + c + 65535;
            c = Math.floor(v / 65536);
            t7 = v - c * 65536;
            v = t8 + c + 65535;
            c = Math.floor(v / 65536);
            t8 = v - c * 65536;
            v = t9 + c + 65535;
            c = Math.floor(v / 65536);
            t9 = v - c * 65536;
            v = t10 + c + 65535;
            c = Math.floor(v / 65536);
            t10 = v - c * 65536;
            v = t11 + c + 65535;
            c = Math.floor(v / 65536);
            t11 = v - c * 65536;
            v = t12 + c + 65535;
            c = Math.floor(v / 65536);
            t12 = v - c * 65536;
            v = t13 + c + 65535;
            c = Math.floor(v / 65536);
            t13 = v - c * 65536;
            v = t14 + c + 65535;
            c = Math.floor(v / 65536);
            t14 = v - c * 65536;
            v = t15 + c + 65535;
            c = Math.floor(v / 65536);
            t15 = v - c * 65536;
            t0 += c - 1 + 37 * (c - 1);
            o[0] = t0;
            o[1] = t1;
            o[2] = t2;
            o[3] = t3;
            o[4] = t4;
            o[5] = t5;
            o[6] = t6;
            o[7] = t7;
            o[8] = t8;
            o[9] = t9;
            o[10] = t10;
            o[11] = t11;
            o[12] = t12;
            o[13] = t13;
            o[14] = t14;
            o[15] = t15;
          }
          function S(o, a) {
            M(o, a, a);
          }
          function inv25519(o, i) {
            var c = gf();
            var a;
            for (a = 0; a < 16; a++) c[a] = i[a];
            for (a = 253; a >= 0; a--) {
              S(c, c);
              if (a !== 2 && a !== 4) M(c, c, i);
            }
            for (a = 0; a < 16; a++) o[a] = c[a];
          }
          function pow2523(o, i) {
            var c = gf();
            var a;
            for (a = 0; a < 16; a++) c[a] = i[a];
            for (a = 250; a >= 0; a--) {
              S(c, c);
              if (a !== 1) M(c, c, i);
            }
            for (a = 0; a < 16; a++) o[a] = c[a];
          }
          function crypto_scalarmult(q, n, p) {
            var z = new Uint8Array(32);
            var x = new Float64Array(80),
              r,
              i;
            var a = gf(),
              b = gf(),
              c = gf(),
              d = gf(),
              e = gf(),
              f = gf();
            for (i = 0; i < 31; i++) z[i] = n[i];
            z[31] = n[31] & 127 | 64;
            z[0] &= 248;
            unpack25519(x, p);
            for (i = 0; i < 16; i++) {
              b[i] = x[i];
              d[i] = a[i] = c[i] = 0;
            }
            a[0] = d[0] = 1;
            for (i = 254; i >= 0; --i) {
              r = z[i >>> 3] >>> (i & 7) & 1;
              sel25519(a, b, r);
              sel25519(c, d, r);
              A(e, a, c);
              Z(a, a, c);
              A(c, b, d);
              Z(b, b, d);
              S(d, e);
              S(f, a);
              M(a, c, a);
              M(c, b, e);
              A(e, a, c);
              Z(a, a, c);
              S(b, a);
              Z(c, d, f);
              M(a, c, _121665);
              A(a, a, d);
              M(c, c, a);
              M(a, d, f);
              M(d, b, x);
              S(b, e);
              sel25519(a, b, r);
              sel25519(c, d, r);
            }
            for (i = 0; i < 16; i++) {
              x[i + 16] = a[i];
              x[i + 32] = c[i];
              x[i + 48] = b[i];
              x[i + 64] = d[i];
            }
            var x32 = x.subarray(32);
            var x16 = x.subarray(16);
            inv25519(x32, x32);
            M(x16, x16, x32);
            pack25519(q, x16);
            return 0;
          }
          function crypto_scalarmult_base(q, n) {
            return crypto_scalarmult(q, n, _9);
          }
          function crypto_box_keypair(y, x) {
            randombytes(x, 32);
            return crypto_scalarmult_base(y, x);
          }
          function crypto_box_beforenm(k, y, x) {
            var s = new Uint8Array(32);
            crypto_scalarmult(s, x, y);
            return crypto_core_hsalsa20(k, _0, s, sigma);
          }
          var crypto_box_afternm = crypto_secretbox;
          var crypto_box_open_afternm = crypto_secretbox_open;
          function crypto_box(c, m, d, n, y, x) {
            var k = new Uint8Array(32);
            crypto_box_beforenm(k, y, x);
            return crypto_box_afternm(c, m, d, n, k);
          }
          function crypto_box_open(m, c, d, n, y, x) {
            var k = new Uint8Array(32);
            crypto_box_beforenm(k, y, x);
            return crypto_box_open_afternm(m, c, d, n, k);
          }
          var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
          function crypto_hashblocks_hl(hh, hl, m, n) {
            var wh = new Int32Array(16),
              wl = new Int32Array(16),
              bh0,
              bh1,
              bh2,
              bh3,
              bh4,
              bh5,
              bh6,
              bh7,
              bl0,
              bl1,
              bl2,
              bl3,
              bl4,
              bl5,
              bl6,
              bl7,
              th,
              tl,
              i,
              j,
              h,
              l,
              a,
              b,
              c,
              d;
            var ah0 = hh[0],
              ah1 = hh[1],
              ah2 = hh[2],
              ah3 = hh[3],
              ah4 = hh[4],
              ah5 = hh[5],
              ah6 = hh[6],
              ah7 = hh[7],
              al0 = hl[0],
              al1 = hl[1],
              al2 = hl[2],
              al3 = hl[3],
              al4 = hl[4],
              al5 = hl[5],
              al6 = hl[6],
              al7 = hl[7];
            var pos = 0;
            while (n >= 128) {
              for (i = 0; i < 16; i++) {
                j = 8 * i + pos;
                wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
                wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
              }
              for (i = 0; i < 80; i++) {
                bh0 = ah0;
                bh1 = ah1;
                bh2 = ah2;
                bh3 = ah3;
                bh4 = ah4;
                bh5 = ah5;
                bh6 = ah6;
                bh7 = ah7;
                bl0 = al0;
                bl1 = al1;
                bl2 = al2;
                bl3 = al3;
                bl4 = al4;
                bl5 = al5;
                bl6 = al6;
                bl7 = al7;

                // add
                h = ah7;
                l = al7;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;

                // Sigma1
                h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
                l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                // Ch
                h = ah4 & ah5 ^ ~ah4 & ah6;
                l = al4 & al5 ^ ~al4 & al6;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                // K
                h = K[i * 2];
                l = K[i * 2 + 1];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                // w
                h = wh[i % 16];
                l = wl[i % 16];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                th = c & 0xffff | d << 16;
                tl = a & 0xffff | b << 16;

                // add
                h = th;
                l = tl;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;

                // Sigma0
                h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
                l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                // Maj
                h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
                l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh7 = c & 0xffff | d << 16;
                bl7 = a & 0xffff | b << 16;

                // add
                h = bh3;
                l = bl3;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = th;
                l = tl;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh3 = c & 0xffff | d << 16;
                bl3 = a & 0xffff | b << 16;
                ah1 = bh0;
                ah2 = bh1;
                ah3 = bh2;
                ah4 = bh3;
                ah5 = bh4;
                ah6 = bh5;
                ah7 = bh6;
                ah0 = bh7;
                al1 = bl0;
                al2 = bl1;
                al3 = bl2;
                al4 = bl3;
                al5 = bl4;
                al6 = bl5;
                al7 = bl6;
                al0 = bl7;
                if (i % 16 === 15) {
                  for (j = 0; j < 16; j++) {
                    // add
                    h = wh[j];
                    l = wl[j];
                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;
                    h = wh[(j + 9) % 16];
                    l = wl[(j + 9) % 16];
                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    // sigma0
                    th = wh[(j + 1) % 16];
                    tl = wl[(j + 1) % 16];
                    h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
                    l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    // sigma1
                    th = wh[(j + 14) % 16];
                    tl = wl[(j + 14) % 16];
                    h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
                    l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;
                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;
                    wh[j] = c & 0xffff | d << 16;
                    wl[j] = a & 0xffff | b << 16;
                  }
                }
              }

              // add
              h = ah0;
              l = al0;
              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;
              h = hh[0];
              l = hl[0];
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              hh[0] = ah0 = c & 0xffff | d << 16;
              hl[0] = al0 = a & 0xffff | b << 16;
              h = ah1;
              l = al1;
              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;
              h = hh[1];
              l = hl[1];
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              hh[1] = ah1 = c & 0xffff | d << 16;
              hl[1] = al1 = a & 0xffff | b << 16;
              h = ah2;
              l = al2;
              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;
              h = hh[2];
              l = hl[2];
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              hh[2] = ah2 = c & 0xffff | d << 16;
              hl[2] = al2 = a & 0xffff | b << 16;
              h = ah3;
              l = al3;
              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;
              h = hh[3];
              l = hl[3];
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              hh[3] = ah3 = c & 0xffff | d << 16;
              hl[3] = al3 = a & 0xffff | b << 16;
              h = ah4;
              l = al4;
              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;
              h = hh[4];
              l = hl[4];
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              hh[4] = ah4 = c & 0xffff | d << 16;
              hl[4] = al4 = a & 0xffff | b << 16;
              h = ah5;
              l = al5;
              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;
              h = hh[5];
              l = hl[5];
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              hh[5] = ah5 = c & 0xffff | d << 16;
              hl[5] = al5 = a & 0xffff | b << 16;
              h = ah6;
              l = al6;
              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;
              h = hh[6];
              l = hl[6];
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              hh[6] = ah6 = c & 0xffff | d << 16;
              hl[6] = al6 = a & 0xffff | b << 16;
              h = ah7;
              l = al7;
              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;
              h = hh[7];
              l = hl[7];
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              hh[7] = ah7 = c & 0xffff | d << 16;
              hl[7] = al7 = a & 0xffff | b << 16;
              pos += 128;
              n -= 128;
            }
            return n;
          }
          function crypto_hash(out, m, n) {
            var hh = new Int32Array(8),
              hl = new Int32Array(8),
              x = new Uint8Array(256),
              i,
              b = n;
            hh[0] = 0x6a09e667;
            hh[1] = 0xbb67ae85;
            hh[2] = 0x3c6ef372;
            hh[3] = 0xa54ff53a;
            hh[4] = 0x510e527f;
            hh[5] = 0x9b05688c;
            hh[6] = 0x1f83d9ab;
            hh[7] = 0x5be0cd19;
            hl[0] = 0xf3bcc908;
            hl[1] = 0x84caa73b;
            hl[2] = 0xfe94f82b;
            hl[3] = 0x5f1d36f1;
            hl[4] = 0xade682d1;
            hl[5] = 0x2b3e6c1f;
            hl[6] = 0xfb41bd6b;
            hl[7] = 0x137e2179;
            crypto_hashblocks_hl(hh, hl, m, n);
            n %= 128;
            for (i = 0; i < n; i++) x[i] = m[b - n + i];
            x[n] = 128;
            n = 256 - 128 * (n < 112 ? 1 : 0);
            x[n - 9] = 0;
            ts64(x, n - 8, b / 0x20000000 | 0, b << 3);
            crypto_hashblocks_hl(hh, hl, x, n);
            for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);
            return 0;
          }
          function add(p, q) {
            var a = gf(),
              b = gf(),
              c = gf(),
              d = gf(),
              e = gf(),
              f = gf(),
              g = gf(),
              h = gf(),
              t = gf();
            Z(a, p[1], p[0]);
            Z(t, q[1], q[0]);
            M(a, a, t);
            A(b, p[0], p[1]);
            A(t, q[0], q[1]);
            M(b, b, t);
            M(c, p[3], q[3]);
            M(c, c, D2);
            M(d, p[2], q[2]);
            A(d, d, d);
            Z(e, b, a);
            Z(f, d, c);
            A(g, d, c);
            A(h, b, a);
            M(p[0], e, f);
            M(p[1], h, g);
            M(p[2], g, f);
            M(p[3], e, h);
          }
          function cswap(p, q, b) {
            var i;
            for (i = 0; i < 4; i++) {
              sel25519(p[i], q[i], b);
            }
          }
          function pack(r, p) {
            var tx = gf(),
              ty = gf(),
              zi = gf();
            inv25519(zi, p[2]);
            M(tx, p[0], zi);
            M(ty, p[1], zi);
            pack25519(r, ty);
            r[31] ^= par25519(tx) << 7;
          }
          function scalarmult(p, q, s) {
            var b, i;
            set25519(p[0], gf0);
            set25519(p[1], gf1);
            set25519(p[2], gf1);
            set25519(p[3], gf0);
            for (i = 255; i >= 0; --i) {
              b = s[i / 8 | 0] >> (i & 7) & 1;
              cswap(p, q, b);
              add(q, p);
              add(p, p);
              cswap(p, q, b);
            }
          }
          function scalarbase(p, s) {
            var q = [gf(), gf(), gf(), gf()];
            set25519(q[0], X);
            set25519(q[1], Y);
            set25519(q[2], gf1);
            M(q[3], X, Y);
            scalarmult(p, q, s);
          }
          function crypto_sign_keypair(pk, sk, seeded) {
            var d = new Uint8Array(64);
            var p = [gf(), gf(), gf(), gf()];
            var i;
            if (!seeded) randombytes(sk, 32);
            crypto_hash(d, sk, 32);
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;
            scalarbase(p, d);
            pack(pk, p);
            for (i = 0; i < 32; i++) sk[i + 32] = pk[i];
            return 0;
          }
          var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);
          function modL(r, x) {
            var carry, i, j, k;
            for (i = 63; i >= 32; --i) {
              carry = 0;
              for (j = i - 32, k = i - 12; j < k; ++j) {
                x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                carry = Math.floor((x[j] + 128) / 256);
                x[j] -= carry * 256;
              }
              x[j] += carry;
              x[i] = 0;
            }
            carry = 0;
            for (j = 0; j < 32; j++) {
              x[j] += carry - (x[31] >> 4) * L[j];
              carry = x[j] >> 8;
              x[j] &= 255;
            }
            for (j = 0; j < 32; j++) x[j] -= carry * L[j];
            for (i = 0; i < 32; i++) {
              x[i + 1] += x[i] >> 8;
              r[i] = x[i] & 255;
            }
          }
          function reduce(r) {
            var x = new Float64Array(64),
              i;
            for (i = 0; i < 64; i++) x[i] = r[i];
            for (i = 0; i < 64; i++) r[i] = 0;
            modL(r, x);
          }

          // Note: difference from C - smlen returned, not passed as argument.
          function crypto_sign(sm, m, n, sk) {
            var d = new Uint8Array(64),
              h = new Uint8Array(64),
              r = new Uint8Array(64);
            var i,
              j,
              x = new Float64Array(64);
            var p = [gf(), gf(), gf(), gf()];
            crypto_hash(d, sk, 32);
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;
            var smlen = n + 64;
            for (i = 0; i < n; i++) sm[64 + i] = m[i];
            for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];
            crypto_hash(r, sm.subarray(32), n + 32);
            reduce(r);
            scalarbase(p, r);
            pack(sm, p);
            for (i = 32; i < 64; i++) sm[i] = sk[i];
            crypto_hash(h, sm, n + 64);
            reduce(h);
            for (i = 0; i < 64; i++) x[i] = 0;
            for (i = 0; i < 32; i++) x[i] = r[i];
            for (i = 0; i < 32; i++) {
              for (j = 0; j < 32; j++) {
                x[i + j] += h[i] * d[j];
              }
            }
            modL(sm.subarray(32), x);
            return smlen;
          }
          function unpackneg(r, p) {
            var t = gf(),
              chk = gf(),
              num = gf(),
              den = gf(),
              den2 = gf(),
              den4 = gf(),
              den6 = gf();
            set25519(r[2], gf1);
            unpack25519(r[1], p);
            S(num, r[1]);
            M(den, num, D);
            Z(num, num, r[2]);
            A(den, r[2], den);
            S(den2, den);
            S(den4, den2);
            M(den6, den4, den2);
            M(t, den6, num);
            M(t, t, den);
            pow2523(t, t);
            M(t, t, num);
            M(t, t, den);
            M(t, t, den);
            M(r[0], t, den);
            S(chk, r[0]);
            M(chk, chk, den);
            if (neq25519(chk, num)) M(r[0], r[0], I);
            S(chk, r[0]);
            M(chk, chk, den);
            if (neq25519(chk, num)) return -1;
            if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
            M(r[3], r[0], r[1]);
            return 0;
          }
          function crypto_sign_open(m, sm, n, pk) {
            var i;
            var t = new Uint8Array(32),
              h = new Uint8Array(64);
            var p = [gf(), gf(), gf(), gf()],
              q = [gf(), gf(), gf(), gf()];
            if (n < 64) return -1;
            if (unpackneg(q, pk)) return -1;
            for (i = 0; i < n; i++) m[i] = sm[i];
            for (i = 0; i < 32; i++) m[i + 32] = pk[i];
            crypto_hash(h, m, n);
            reduce(h);
            scalarmult(p, q, h);
            scalarbase(q, sm.subarray(32));
            add(p, q);
            pack(t, p);
            n -= 64;
            if (crypto_verify_32(sm, 0, t, 0)) {
              for (i = 0; i < n; i++) m[i] = 0;
              return -1;
            }
            for (i = 0; i < n; i++) m[i] = sm[i + 64];
            return n;
          }
          var crypto_secretbox_KEYBYTES = 32,
            crypto_secretbox_NONCEBYTES = 24,
            crypto_secretbox_ZEROBYTES = 32,
            crypto_secretbox_BOXZEROBYTES = 16,
            crypto_scalarmult_BYTES = 32,
            crypto_scalarmult_SCALARBYTES = 32,
            crypto_box_PUBLICKEYBYTES = 32,
            crypto_box_SECRETKEYBYTES = 32,
            crypto_box_BEFORENMBYTES = 32,
            crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
            crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
            crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
            crypto_sign_BYTES = 64,
            crypto_sign_PUBLICKEYBYTES = 32,
            crypto_sign_SECRETKEYBYTES = 64,
            crypto_sign_SEEDBYTES = 32,
            crypto_hash_BYTES = 64;
          nacl.lowlevel = {
            crypto_core_hsalsa20: crypto_core_hsalsa20,
            crypto_stream_xor: crypto_stream_xor,
            crypto_stream: crypto_stream,
            crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
            crypto_stream_salsa20: crypto_stream_salsa20,
            crypto_onetimeauth: crypto_onetimeauth,
            crypto_onetimeauth_verify: crypto_onetimeauth_verify,
            crypto_verify_16: crypto_verify_16,
            crypto_verify_32: crypto_verify_32,
            crypto_secretbox: crypto_secretbox,
            crypto_secretbox_open: crypto_secretbox_open,
            crypto_scalarmult: crypto_scalarmult,
            crypto_scalarmult_base: crypto_scalarmult_base,
            crypto_box_beforenm: crypto_box_beforenm,
            crypto_box_afternm: crypto_box_afternm,
            crypto_box: crypto_box,
            crypto_box_open: crypto_box_open,
            crypto_box_keypair: crypto_box_keypair,
            crypto_hash: crypto_hash,
            crypto_sign: crypto_sign,
            crypto_sign_keypair: crypto_sign_keypair,
            crypto_sign_open: crypto_sign_open,
            crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
            crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
            crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
            crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
            crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
            crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
            crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
            crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
            crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
            crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
            crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
            crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
            crypto_sign_BYTES: crypto_sign_BYTES,
            crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
            crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
            crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
            crypto_hash_BYTES: crypto_hash_BYTES,
            gf: gf,
            D: D,
            L: L,
            pack25519: pack25519,
            unpack25519: unpack25519,
            M: M,
            A: A,
            S: S,
            Z: Z,
            pow2523: pow2523,
            add: add,
            set25519: set25519,
            modL: modL,
            scalarmult: scalarmult,
            scalarbase: scalarbase
          };

          /* High-level API */

          function checkLengths(k, n) {
            if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
            if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
          }
          function checkBoxLengths(pk, sk) {
            if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
            if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
          }
          function checkArrayTypes() {
            for (var i = 0; i < arguments.length; i++) {
              if (!(arguments[i] instanceof Uint8Array)) throw new TypeError('unexpected type, use Uint8Array');
            }
          }
          function cleanup(arr) {
            for (var i = 0; i < arr.length; i++) arr[i] = 0;
          }
          nacl.randomBytes = function (n) {
            var b = new Uint8Array(n);
            randombytes(b, n);
            return b;
          };
          nacl.secretbox = function (msg, nonce, key) {
            checkArrayTypes(msg, nonce, key);
            checkLengths(key, nonce);
            var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
            var c = new Uint8Array(m.length);
            for (var i = 0; i < msg.length; i++) m[i + crypto_secretbox_ZEROBYTES] = msg[i];
            crypto_secretbox(c, m, m.length, nonce, key);
            return c.subarray(crypto_secretbox_BOXZEROBYTES);
          };
          nacl.secretbox.open = function (box, nonce, key) {
            checkArrayTypes(box, nonce, key);
            checkLengths(key, nonce);
            var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
            var m = new Uint8Array(c.length);
            for (var i = 0; i < box.length; i++) c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
            if (c.length < 32) return null;
            if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
            return m.subarray(crypto_secretbox_ZEROBYTES);
          };
          nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
          nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
          nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
          nacl.scalarMult = function (n, p) {
            checkArrayTypes(n, p);
            if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
            if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
            var q = new Uint8Array(crypto_scalarmult_BYTES);
            crypto_scalarmult(q, n, p);
            return q;
          };
          nacl.scalarMult.base = function (n) {
            checkArrayTypes(n);
            if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
            var q = new Uint8Array(crypto_scalarmult_BYTES);
            crypto_scalarmult_base(q, n);
            return q;
          };
          nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
          nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
          nacl.box = function (msg, nonce, publicKey, secretKey) {
            var k = nacl.box.before(publicKey, secretKey);
            return nacl.secretbox(msg, nonce, k);
          };
          nacl.box.before = function (publicKey, secretKey) {
            checkArrayTypes(publicKey, secretKey);
            checkBoxLengths(publicKey, secretKey);
            var k = new Uint8Array(crypto_box_BEFORENMBYTES);
            crypto_box_beforenm(k, publicKey, secretKey);
            return k;
          };
          nacl.box.after = nacl.secretbox;
          nacl.box.open = function (msg, nonce, publicKey, secretKey) {
            var k = nacl.box.before(publicKey, secretKey);
            return nacl.secretbox.open(msg, nonce, k);
          };
          nacl.box.open.after = nacl.secretbox.open;
          nacl.box.keyPair = function () {
            var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
            var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
            crypto_box_keypair(pk, sk);
            return {
              publicKey: pk,
              secretKey: sk
            };
          };
          nacl.box.keyPair.fromSecretKey = function (secretKey) {
            checkArrayTypes(secretKey);
            if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
            var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
            crypto_scalarmult_base(pk, secretKey);
            return {
              publicKey: pk,
              secretKey: new Uint8Array(secretKey)
            };
          };
          nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
          nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
          nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
          nacl.box.nonceLength = crypto_box_NONCEBYTES;
          nacl.box.overheadLength = nacl.secretbox.overheadLength;
          nacl.sign = function (msg, secretKey) {
            checkArrayTypes(msg, secretKey);
            if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
            var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
            crypto_sign(signedMsg, msg, msg.length, secretKey);
            return signedMsg;
          };
          nacl.sign.open = function (signedMsg, publicKey) {
            checkArrayTypes(signedMsg, publicKey);
            if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
            var tmp = new Uint8Array(signedMsg.length);
            var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
            if (mlen < 0) return null;
            var m = new Uint8Array(mlen);
            for (var i = 0; i < m.length; i++) m[i] = tmp[i];
            return m;
          };
          nacl.sign.detached = function (msg, secretKey) {
            var signedMsg = nacl.sign(msg, secretKey);
            var sig = new Uint8Array(crypto_sign_BYTES);
            for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
            return sig;
          };
          nacl.sign.detached.verify = function (msg, sig, publicKey) {
            checkArrayTypes(msg, sig, publicKey);
            if (sig.length !== crypto_sign_BYTES) throw new Error('bad signature size');
            if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
            var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
            var m = new Uint8Array(crypto_sign_BYTES + msg.length);
            var i;
            for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
            for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];
            return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
          };
          nacl.sign.keyPair = function () {
            var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
            var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
            crypto_sign_keypair(pk, sk);
            return {
              publicKey: pk,
              secretKey: sk
            };
          };
          nacl.sign.keyPair.fromSecretKey = function (secretKey) {
            checkArrayTypes(secretKey);
            if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
            var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
            for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];
            return {
              publicKey: pk,
              secretKey: new Uint8Array(secretKey)
            };
          };
          nacl.sign.keyPair.fromSeed = function (seed) {
            checkArrayTypes(seed);
            if (seed.length !== crypto_sign_SEEDBYTES) throw new Error('bad seed size');
            var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
            var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
            for (var i = 0; i < 32; i++) sk[i] = seed[i];
            crypto_sign_keypair(pk, sk, true);
            return {
              publicKey: pk,
              secretKey: sk
            };
          };
          nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
          nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
          nacl.sign.seedLength = crypto_sign_SEEDBYTES;
          nacl.sign.signatureLength = crypto_sign_BYTES;
          nacl.hash = function (msg) {
            checkArrayTypes(msg);
            var h = new Uint8Array(crypto_hash_BYTES);
            crypto_hash(h, msg, msg.length);
            return h;
          };
          nacl.hash.hashLength = crypto_hash_BYTES;
          nacl.verify = function (x, y) {
            checkArrayTypes(x, y);
            // Zero length arguments are considered not equal.
            if (x.length === 0 || y.length === 0) return false;
            if (x.length !== y.length) return false;
            return vn(x, 0, y, 0, x.length) === 0 ? true : false;
          };
          nacl.setPRNG = function (fn) {
            randombytes = fn;
          };
          (function () {
            // Initialize PRNG if environment provides CSPRNG.
            // If not, methods calling randombytes will throw.
            var crypto = typeof self !== 'undefined' ? self.crypto || self.msCrypto : null;
            if (crypto && crypto.getRandomValues) {
              // Browsers.
              var QUOTA = 65536;
              nacl.setPRNG(function (x, n) {
                var i,
                  v = new Uint8Array(n);
                for (i = 0; i < n; i += QUOTA) {
                  crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
                }
                for (i = 0; i < n; i++) x[i] = v[i];
                cleanup(v);
              });
            } else if (typeof require !== 'undefined') {
              // Node.js.
              crypto = require('crypto');
              if (crypto && crypto.randomBytes) {
                nacl.setPRNG(function (x, n) {
                  var i,
                    v = crypto.randomBytes(n);
                  for (i = 0; i < n; i++) x[i] = v[i];
                  cleanup(v);
                });
              }
            }
          })();
        })(typeof module !== 'undefined' && module.exports ? module.exports : self.nacl = self.nacl || {});
      }, {
        "crypto": 133
      }],
      285: [function (require, module, exports) {
        (function (global) {
          (function () {
            /**
             * Module exports.
             */

            module.exports = deprecate;

            /**
             * Mark that a method should not be used.
             * Returns a modified function which warns once by default.
             *
             * If `localStorage.noDeprecation = true` is set, then it is a no-op.
             *
             * If `localStorage.throwDeprecation = true` is set, then deprecated functions
             * will throw an Error when invoked.
             *
             * If `localStorage.traceDeprecation = true` is set, then deprecated functions
             * will invoke `console.trace()` instead of `console.error()`.
             *
             * @param {Function} fn - the function to deprecate
             * @param {String} msg - the string to print to the console when `fn` is invoked
             * @returns {Function} a new "deprecated" version of `fn`
             * @api public
             */

            function deprecate(fn, msg) {
              if (config('noDeprecation')) {
                return fn;
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (config('throwDeprecation')) {
                    throw new Error(msg);
                  } else if (config('traceDeprecation')) {
                    console.trace(msg);
                  } else {
                    console.warn(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            }

            /**
             * Checks `localStorage` for boolean values for the given `name`.
             *
             * @param {String} name
             * @returns {Boolean}
             * @api private
             */

            function config(name) {
              // accessing global.localStorage can trigger a DOMException in sandboxed iframes
              try {
                if (!global.localStorage) return false;
              } catch (_) {
                return false;
              }
              var val = global.localStorage[name];
              if (null == val) return false;
              return String(val).toLowerCase() === 'true';
            }
          }).call(this);
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}],
      286: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ValiError = exports.UUID_REGEX = exports.ULID_REGEX = exports.OCTAL_REGEX = exports.MAC64_REGEX = exports.MAC48_REGEX = exports.ISO_WEEK_REGEX = exports.ISO_TIME_SECOND_REGEX = exports.ISO_TIME_REGEX = exports.ISO_TIMESTAMP_REGEX = exports.ISO_DATE_TIME_REGEX = exports.ISO_DATE_REGEX = exports.IPV6_REGEX = exports.IPV4_REGEX = exports.IMEI_REGEX = exports.HEX_COLOR_REGEX = exports.HEXADECIMAL_REGEX = exports.EMOJI_REGEX = exports.EMAIL_REGEX = exports.DECIMAL_REGEX = exports.CUID2_REGEX = exports.BrandSymbol = exports.BIC_REGEX = void 0;
        exports.actionIssue = actionIssue;
        exports.actionOutput = actionOutput;
        exports.any = any;
        exports.anyAsync = anyAsync;
        exports.array = array;
        exports.arrayAsync = arrayAsync;
        exports.bic = bic;
        exports.bigint = bigint;
        exports.bigintAsync = bigintAsync;
        exports.blob = blob;
        exports.blobAsync = blobAsync;
        exports.boolean = boolean;
        exports.booleanAsync = booleanAsync;
        exports.brand = brand;
        exports.bytes = bytes;
        exports.coerce = coerce;
        exports.coerceAsync = coerceAsync;
        exports.creditCard = creditCard;
        exports.cuid2 = cuid2;
        exports.custom = custom;
        exports.customAsync = customAsync;
        exports.date = date;
        exports.dateAsync = dateAsync;
        exports.decimal = decimal;
        exports.defaultArgs = defaultArgs;
        exports.discriminatedUnionAsync = exports.discriminatedUnion = void 0;
        exports.email = email;
        exports.emoji = emoji;
        exports.endsWith = endsWith;
        exports.enumAsync = enumAsync;
        exports.enumTypeAsync = exports.enumType = void 0;
        exports.enum_ = enum_;
        exports.equal = equal;
        exports.excludes = excludes;
        exports.fallback = fallback;
        exports.fallbackAsync = fallbackAsync;
        exports.finite = finite;
        exports.flatten = flatten;
        exports.forward = forward;
        exports.getDefault = getDefault;
        exports.getDefaultAsync = getDefaultAsync;
        exports.getDefaults = getDefaults;
        exports.getDefaultsAsync = getDefaultsAsync;
        exports.getFallback = getFallback;
        exports.getFallbackAsync = getFallbackAsync;
        exports.getFallbacks = getFallbacks;
        exports.getFallbacksAsync = getFallbacksAsync;
        exports.hexColor = hexColor;
        exports.hexadecimal = hexadecimal;
        exports.imei = imei;
        exports.includes = includes;
        exports.instance = instance;
        exports.instanceAsync = instanceAsync;
        exports.integer = integer;
        exports.intersect = intersect;
        exports.intersection = void 0;
        exports.ip = ip;
        exports.ipv4 = ipv4;
        exports.ipv6 = ipv6;
        exports.is = is;
        exports.isLuhnAlgo = isLuhnAlgo;
        exports.isoDate = isoDate;
        exports.isoDateTime = isoDateTime;
        exports.isoTime = isoTime;
        exports.isoTimeSecond = isoTimeSecond;
        exports.isoTimestamp = isoTimestamp;
        exports.isoWeek = isoWeek;
        exports.keyof = keyof;
        exports.length = length;
        exports.literal = literal;
        exports.literalAsync = literalAsync;
        exports.mac = mac;
        exports.mac48 = mac48;
        exports.mac64 = mac64;
        exports.map = map;
        exports.mapAsync = mapAsync;
        exports.maxBytes = maxBytes;
        exports.maxLength = maxLength;
        exports.maxRange = void 0;
        exports.maxSize = maxSize;
        exports.maxValue = maxValue;
        exports.merge = merge;
        exports.mergeAsync = mergeAsync;
        exports.mimeType = mimeType;
        exports.minBytes = minBytes;
        exports.minLength = minLength;
        exports.minRange = void 0;
        exports.minSize = minSize;
        exports.minValue = minValue;
        exports.multipleOf = multipleOf;
        exports.nan = nan;
        exports.nanAsync = nanAsync;
        exports.nativeEnumAsync = exports.nativeEnum = void 0;
        exports.never = never;
        exports.neverAsync = neverAsync;
        exports.nonNullable = nonNullable;
        exports.nonNullableAsync = nonNullableAsync;
        exports.nonNullish = nonNullish;
        exports.nonNullishAsync = nonNullishAsync;
        exports.nonOptional = nonOptional;
        exports.nonOptionalAsync = nonOptionalAsync;
        exports.notBytes = notBytes;
        exports.notLength = notLength;
        exports.notSize = notSize;
        exports.notValue = notValue;
        exports.nullAsync = nullAsync;
        exports.nullTypeAsync = exports.nullType = void 0;
        exports.null_ = null_;
        exports.nullable = nullable;
        exports.nullableAsync = nullableAsync;
        exports.nullish = nullish;
        exports.nullishAsync = nullishAsync;
        exports.number = number;
        exports.numberAsync = numberAsync;
        exports.object = object;
        exports.objectAsync = objectAsync;
        exports.octal = octal;
        exports.omit = omit;
        exports.omitAsync = omitAsync;
        exports.optional = optional;
        exports.optionalAsync = optionalAsync;
        exports.parse = parse;
        exports.parseAsync = parseAsync;
        exports.parseResult = parseResult;
        exports.partial = partial;
        exports.partialAsync = partialAsync;
        exports.passthrough = passthrough;
        exports.passthroughAsync = passthroughAsync;
        exports.pick = pick;
        exports.pickAsync = pickAsync;
        exports.picklist = picklist;
        exports.picklistAsync = picklistAsync;
        exports.pipeResult = pipeResult;
        exports.pipeResultAsync = pipeResultAsync;
        exports.record = record;
        exports.recordAsync = recordAsync;
        exports.recursive = recursive;
        exports.recursiveAsync = recursiveAsync;
        exports.regex = regex;
        exports.required = required;
        exports.requiredAsync = requiredAsync;
        exports.restAndDefaultArgs = restAndDefaultArgs;
        exports.safeInteger = safeInteger;
        exports.safeParse = safeParse;
        exports.safeParseAsync = safeParseAsync;
        exports.schemaIssue = schemaIssue;
        exports.set = set;
        exports.setAsync = setAsync;
        exports.size = size;
        exports.special = special;
        exports.specialAsync = specialAsync;
        exports.startsWith = startsWith;
        exports.strict = strict;
        exports.strictAsync = strictAsync;
        exports.string = string;
        exports.stringAsync = stringAsync;
        exports.strip = strip;
        exports.stripAsync = stripAsync;
        exports.symbol = symbol;
        exports.symbolAsync = symbolAsync;
        exports.toCustom = toCustom;
        exports.toCustomAsync = toCustomAsync;
        exports.toLowerCase = toLowerCase;
        exports.toMaxValue = toMaxValue;
        exports.toMinValue = toMinValue;
        exports.toTrimmed = toTrimmed;
        exports.toTrimmedEnd = toTrimmedEnd;
        exports.toTrimmedStart = toTrimmedStart;
        exports.toUpperCase = toUpperCase;
        exports.transform = transform;
        exports.transformAsync = transformAsync;
        exports.tuple = tuple;
        exports.tupleAsync = tupleAsync;
        exports.ulid = ulid;
        exports.undefinedAsync = undefinedAsync;
        exports.undefinedTypeAsync = exports.undefinedType = void 0;
        exports.undefined_ = undefined_;
        exports.union = union;
        exports.unionAsync = unionAsync;
        exports.unknown = unknown;
        exports.unknownAsync = unknownAsync;
        exports.unwrap = unwrap;
        exports.url = url;
        exports.useDefault = void 0;
        exports.uuid = uuid;
        exports.value = value;
        exports.variant = variant;
        exports.variantAsync = variantAsync;
        exports.voidAsync = voidAsync;
        exports.voidTypeAsync = exports.voidType = void 0;
        exports.void_ = void_;
        exports.withDefault = withDefault;
        // src/error/flatten/flatten.ts
        function flatten(arg1) {
          return (Array.isArray(arg1) ? arg1 : arg1.issues).reduce((flatErrors, issue) => {
            if (issue.path) {
              if (issue.path.every(({
                key
              }) => typeof key === "string" || typeof key === "number")) {
                const path = issue.path.map(({
                  key
                }) => key).join(".");
                if (flatErrors.nested[path]) {
                  flatErrors.nested[path].push(issue.message);
                } else {
                  flatErrors.nested[path] = [issue.message];
                }
              }
            } else {
              if (flatErrors.root) {
                flatErrors.root.push(issue.message);
              } else {
                flatErrors.root = [issue.message];
              }
            }
            return flatErrors;
          }, {
            nested: {}
          });
        }

        // src/error/ValiError/ValiError.ts
        var ValiError = class extends Error {
          issues;
          /**
           * Creates a Valibot error with useful information.
           *
           * @param issues The error issues.
           */
          constructor(issues) {
            super(issues[0].message);
            this.name = "ValiError";
            this.issues = issues;
          }
        };

        // src/methods/brand/brand.ts
        exports.ValiError = ValiError;
        var BrandSymbol = exports.BrandSymbol = Symbol("brand");
        function brand(schema, name) {
          return schema;
        }

        // src/methods/coerce/coerce.ts
        function coerce(schema, action) {
          return {
            ...schema,
            _parse(input, info) {
              return schema._parse(action(input), info);
            }
          };
        }

        // src/methods/coerce/coerceAsync.ts
        function coerceAsync(schema, action) {
          return {
            ...schema,
            async _parse(input, info) {
              return schema._parse(await action(input), info);
            }
          };
        }

        // src/utils/errorMessage/errorMessage.ts
        function errorMessage(message) {
          return typeof message === "function" ? message() : message;
        }

        // src/utils/actionIssue/actionIssue.ts
        function actionIssue(validation, message, input, requirement, path) {
          return {
            issues: [{
              validation,
              message: errorMessage(message),
              input,
              requirement,
              path
            }]
          };
        }

        // src/utils/actionOutput/actionOutput.ts
        function actionOutput(output) {
          return {
            output
          };
        }

        // src/utils/defaultArgs/defaultArgs.ts
        function defaultArgs(arg1, arg2) {
          return Array.isArray(arg1) ? [void 0, arg1] : [arg1, arg2];
        }

        // src/utils/parseResult/parseResult.ts
        function parseResult(typed, output, issues) {
          return {
            typed,
            output,
            issues
          };
        }

        // src/utils/restAndDefaultArgs/restAndDefaultArgs.ts
        function restAndDefaultArgs(arg1, arg2, arg3) {
          if (!arg1 || typeof arg1 === "object" && !Array.isArray(arg1)) {
            const [error2, pipe2] = defaultArgs(arg2, arg3);
            return [arg1, error2, pipe2];
          }
          const [error, pipe] = defaultArgs(arg1, arg2);
          return [void 0, error, pipe];
        }

        // src/utils/isLuhnAlgo/isLuhnAlgo.ts
        var NON_DIGIT_REGEX = /\D/gu;
        function isLuhnAlgo(input) {
          const number2 = input.replace(NON_DIGIT_REGEX, "");
          let length2 = number2.length;
          let bit = 1;
          let sum = 0;
          while (length2) {
            const value2 = +number2[--length2];
            bit ^= 1;
            sum += bit ? [0, 2, 4, 6, 8, 1, 3, 5, 7, 9][value2] : value2;
          }
          return sum % 10 === 0;
        }

        // src/utils/pipeResult/utils/pipeIssue/pipeIssue.ts
        function pipeIssue(info, issue) {
          return {
            reason: info?.reason,
            validation: issue.validation,
            origin: info?.origin || "value",
            message: issue.message,
            input: issue.input,
            requirement: issue?.requirement,
            path: issue.path,
            abortEarly: info?.abortEarly,
            abortPipeEarly: info?.abortPipeEarly,
            skipPipe: info?.skipPipe
          };
        }

        // src/utils/pipeResult/utils/pipeInfo/pipeInfo.ts
        function pipeInfo(info, reason) {
          return {
            reason,
            origin: info?.origin,
            abortEarly: info?.abortEarly,
            abortPipeEarly: info?.abortPipeEarly,
            skipPipe: info?.skipPipe
          };
        }

        // src/utils/pipeResult/pipeResult.ts
        function pipeResult(input, pipe, parseInfo, reason, issues) {
          let info;
          let output = input;
          if (pipe?.length && !parseInfo?.skipPipe) {
            for (const action of pipe) {
              const result = action._parse(output);
              if (result.issues) {
                info = info || pipeInfo(parseInfo, reason);
                for (const issueInfo of result.issues) {
                  const issue = pipeIssue(info, issueInfo);
                  issues ? issues.push(issue) : issues = [issue];
                }
                if (info.abortEarly || info.abortPipeEarly) {
                  break;
                }
              } else {
                output = result.output;
              }
            }
          }
          return parseResult(true, output, issues);
        }

        // src/utils/pipeResult/pipeResultAsync.ts
        async function pipeResultAsync(input, pipe, parseInfo, reason, issues) {
          let info;
          let output = input;
          if (pipe?.length && !parseInfo?.skipPipe) {
            for (const action of pipe) {
              const result = await action._parse(output);
              if (result.issues) {
                info = info || pipeInfo(parseInfo, reason);
                for (const issueInfo of result.issues) {
                  const issue = pipeIssue(info, issueInfo);
                  issues ? issues.push(issue) : issues = [issue];
                }
                if (info.abortEarly || info.abortPipeEarly) {
                  break;
                }
              } else {
                output = result.output;
              }
            }
          }
          return parseResult(true, output, issues);
        }

        // src/utils/schemaIssue/schemaIssue.ts
        function schemaIssue(info, reason, validation, message, input, path, issues) {
          return {
            typed: false,
            output: input,
            issues: [{
              reason,
              validation,
              origin: info?.origin || "value",
              message: errorMessage(message),
              input,
              path,
              issues,
              abortEarly: info?.abortEarly,
              abortPipeEarly: info?.abortPipeEarly,
              skipPipe: info?.skipPipe
            }]
          };
        }

        // src/methods/getFallback/getFallback.ts
        function getFallback(schema, info) {
          return typeof schema.fallback === "function" ? schema.fallback(info) : schema.fallback;
        }

        // src/methods/getFallback/getFallbackAsync.ts
        async function getFallbackAsync(schema, info) {
          return typeof schema.fallback === "function" ? await schema.fallback(info) : schema.fallback;
        }

        // src/methods/fallback/fallback.ts
        function fallback(schema, fallback2) {
          return {
            ...schema,
            fallback: fallback2,
            _parse(input, info) {
              const result = schema._parse(input, info);
              return result.issues ? parseResult(true, getFallback(this, {
                input,
                issues: result.issues
              })) : result;
            }
          };
        }

        // src/methods/fallback/fallbackAsync.ts
        function fallbackAsync(schema, fallback2) {
          return {
            ...schema,
            fallback: fallback2,
            async _parse(input, info) {
              const result = await schema._parse(input, info);
              return result.issues ? parseResult(true, await getFallbackAsync(this, {
                input,
                issues: result.issues
              })) : result;
            }
          };
        }

        // src/methods/forward/forward.ts
        function forward(validation, pathList) {
          return {
            ...validation,
            _parse(input) {
              const result = validation._parse(input);
              if (result.issues) {
                for (const issue of result.issues) {
                  let pathInput = input;
                  for (const key of pathList) {
                    const pathValue = pathInput[key];
                    issue.input = pathValue;
                    const pathItem = {
                      type: "unknown",
                      input: pathInput,
                      key,
                      value: pathValue
                    };
                    issue.path ? issue.path.push(pathItem) : issue.path = [pathItem];
                    if (!pathValue) {
                      break;
                    }
                    pathInput = pathValue;
                  }
                }
              }
              return result;
            }
          };
        }

        // src/methods/getDefault/getDefault.ts
        function getDefault(schema) {
          return typeof schema.default === "function" ? schema.default() : schema.default;
        }

        // src/methods/getDefault/getDefaultAsync.ts
        async function getDefaultAsync(schema) {
          return typeof schema.default === "function" ? await schema.default() : schema.default;
        }

        // src/methods/getDefaults/getDefaults.ts
        function getDefaults(schema) {
          let defaults;
          if (schema.default) {
            defaults = getDefault(schema);
          } else if ("type" in schema) {
            if (schema.type === "object") {
              defaults = {};
              for (const key in schema.entries) {
                defaults[key] = getDefaults(schema.entries[key]);
              }
            } else if (schema.type === "tuple") {
              defaults = [];
              for (let key = 0; key < schema.items.length; key++) {
                defaults.push(getDefaults(schema.items[key]));
              }
            }
          }
          return defaults;
        }

        // src/methods/getDefaults/getDefaultsAsync.ts
        async function getDefaultsAsync(schema) {
          let defaults;
          if (schema.default) {
            defaults = await getDefaultAsync(schema);
          } else if ("type" in schema) {
            if (schema.type === "object") {
              defaults = {};
              for (const key in schema.entries) {
                defaults[key] = await getDefaultsAsync(schema.entries[key]);
              }
            } else if (schema.type === "tuple") {
              defaults = [];
              for (let key = 0; key < schema.items.length; key++) {
                defaults.push(await getDefaultsAsync(schema.items[key]));
              }
            }
          }
          return defaults;
        }

        // src/methods/getFallbacks/getFallbacks.ts
        function getFallbacks(schema) {
          let fallbacks;
          if (schema.fallback) {
            fallbacks = getFallback(schema);
          } else if ("type" in schema) {
            if (schema.type === "object") {
              fallbacks = {};
              for (const key in schema.entries) {
                fallbacks[key] = getFallbacks(schema.entries[key]);
              }
            } else if (schema.type === "tuple") {
              fallbacks = [];
              for (let key = 0; key < schema.items.length; key++) {
                fallbacks.push(getFallbacks(schema.items[key]));
              }
            }
          }
          return fallbacks;
        }

        // src/methods/getFallbacks/getFallbacksAsync.ts
        async function getFallbacksAsync(schema) {
          let fallbacks;
          if (schema.fallback) {
            fallbacks = await getFallbackAsync(schema);
          } else if ("type" in schema) {
            if (schema.type === "object") {
              fallbacks = {};
              await Promise.all(Object.entries(schema.entries).map(async ([key, schema2]) => {
                fallbacks[key] = await getFallbacksAsync(schema2);
              }));
            } else if (schema.type === "tuple") {
              fallbacks = await Promise.all(schema.items.map(schema2 => getFallbacksAsync(schema2)));
            }
          }
          return fallbacks;
        }

        // src/methods/is/is.ts
        function is(schema, input, info) {
          return !schema._parse(input, {
            abortEarly: true,
            skipPipe: info?.skipPipe
          }).issues;
        }

        // src/schemas/any/any.ts
        function any(pipe) {
          return {
            type: "any",
            async: false,
            pipe,
            _parse(input, info) {
              return pipeResult(input, this.pipe, info, "any");
            }
          };
        }

        // src/schemas/any/anyAsync.ts
        function anyAsync(pipe) {
          return {
            type: "any",
            async: true,
            pipe,
            async _parse(input, info) {
              return pipeResultAsync(input, this.pipe, info, "any");
            }
          };
        }

        // src/schemas/array/array.ts
        function array(item, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "array",
            async: false,
            item,
            message,
            pipe,
            _parse(input, info) {
              if (!Array.isArray(input)) {
                return schemaIssue(info, "type", "array", this.message, input);
              }
              let typed = true;
              let issues;
              const output = [];
              for (let key = 0; key < input.length; key++) {
                const value2 = input[key];
                const result = this.item._parse(value2, info);
                if (result.issues) {
                  const pathItem = {
                    type: "array",
                    input,
                    key,
                    value: value2
                  };
                  for (const issue of result.issues) {
                    if (issue.path) {
                      issue.path.unshift(pathItem);
                    } else {
                      issue.path = [pathItem];
                    }
                    issues?.push(issue);
                  }
                  if (!issues) {
                    issues = result.issues;
                  }
                  if (info?.abortEarly) {
                    typed = false;
                    break;
                  }
                }
                if (!result.typed) {
                  typed = false;
                }
                output.push(result.output);
              }
              if (typed) {
                return pipeResult(output, this.pipe, info, "array", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/array/arrayAsync.ts
        function arrayAsync(item, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "array",
            async: true,
            item,
            message,
            pipe,
            async _parse(input, info) {
              if (!Array.isArray(input)) {
                return schemaIssue(info, "type", "array", this.message, input);
              }
              let typed = true;
              let issues;
              const output = [];
              await Promise.all(input.map(async (value2, key) => {
                if (!(info?.abortEarly && issues)) {
                  const result = await this.item._parse(value2, info);
                  if (!(info?.abortEarly && issues)) {
                    if (result.issues) {
                      const pathItem = {
                        type: "array",
                        input,
                        key,
                        value: value2
                      };
                      for (const issue of result.issues) {
                        if (issue.path) {
                          issue.path.unshift(pathItem);
                        } else {
                          issue.path = [pathItem];
                        }
                        issues?.push(issue);
                      }
                      if (!issues) {
                        issues = result.issues;
                      }
                      if (info?.abortEarly) {
                        typed = false;
                        throw null;
                      }
                    }
                    if (!result.typed) {
                      typed = false;
                    }
                    output[key] = result.output;
                  }
                }
              })).catch(() => null);
              if (typed) {
                return pipeResultAsync(output, this.pipe, info, "array", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/bigint/bigint.ts
        function bigint(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "bigint",
            async: false,
            message,
            pipe,
            _parse(input, info) {
              if (typeof input !== "bigint") {
                return schemaIssue(info, "type", "bigint", this.message, input);
              }
              return pipeResult(input, this.pipe, info, "bigint");
            }
          };
        }

        // src/schemas/bigint/bigintAsync.ts
        function bigintAsync(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "bigint",
            async: true,
            message,
            pipe,
            async _parse(input, info) {
              if (typeof input !== "bigint") {
                return schemaIssue(info, "type", "bigint", this.message, input);
              }
              return pipeResultAsync(input, this.pipe, info, "bigint");
            }
          };
        }

        // src/schemas/blob/blob.ts
        function blob(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "blob",
            async: false,
            message,
            pipe,
            _parse(input, info) {
              if (!(input instanceof Blob)) {
                return schemaIssue(info, "type", "blob", this.message, input);
              }
              return pipeResult(input, this.pipe, info, "blob");
            }
          };
        }

        // src/schemas/blob/blobAsync.ts
        function blobAsync(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "blob",
            async: true,
            message,
            pipe,
            async _parse(input, info) {
              if (!(input instanceof Blob)) {
                return schemaIssue(info, "type", "blob", this.message, input);
              }
              return pipeResultAsync(input, this.pipe, info, "blob");
            }
          };
        }

        // src/schemas/boolean/boolean.ts
        function boolean(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "boolean",
            async: false,
            message,
            pipe,
            _parse(input, info) {
              if (typeof input !== "boolean") {
                return schemaIssue(info, "type", "boolean", this.message, input);
              }
              return pipeResult(input, this.pipe, info, "boolean");
            }
          };
        }

        // src/schemas/boolean/booleanAsync.ts
        function booleanAsync(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "boolean",
            async: true,
            message,
            pipe,
            async _parse(input, info) {
              if (typeof input !== "boolean") {
                return schemaIssue(info, "type", "boolean", this.message, input);
              }
              return pipeResultAsync(input, this.pipe, info, "boolean");
            }
          };
        }

        // src/schemas/date/date.ts
        function date(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "date",
            async: false,
            message,
            pipe,
            _parse(input, info) {
              if (!(input instanceof Date) || isNaN(input.getTime())) {
                return schemaIssue(info, "type", "date", this.message, input);
              }
              return pipeResult(input, this.pipe, info, "date");
            }
          };
        }

        // src/schemas/date/dateAsync.ts
        function dateAsync(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "date",
            async: true,
            message,
            pipe,
            async _parse(input, info) {
              if (!(input instanceof Date) || isNaN(input.getTime())) {
                return schemaIssue(info, "type", "date", this.message, input);
              }
              return pipeResultAsync(input, this.pipe, info, "date");
            }
          };
        }

        // src/schemas/enum/enum.ts
        function enum_(enum_2, message = "Invalid type") {
          return {
            type: "enum",
            async: false,
            enum: enum_2,
            message,
            _parse(input, info) {
              if (!Object.values(this.enum).includes(input)) {
                return schemaIssue(info, "type", "enum", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }
        var nativeEnum = exports.nativeEnum = enum_;

        // src/schemas/enum/enumAsync.ts
        function enumAsync(enum_2, message = "Invalid type") {
          return {
            type: "enum",
            async: true,
            enum: enum_2,
            message,
            async _parse(input, info) {
              if (!Object.values(this.enum).includes(input)) {
                return schemaIssue(info, "type", "enum", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }
        var nativeEnumAsync = exports.nativeEnumAsync = enumAsync;

        // src/schemas/instance/instance.ts
        function instance(class_, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "instance",
            async: false,
            class: class_,
            message,
            pipe,
            _parse(input, info) {
              if (!(input instanceof this.class)) {
                return schemaIssue(info, "type", "instance", this.message, input);
              }
              return pipeResult(input, this.pipe, info, "instance");
            }
          };
        }

        // src/schemas/instance/instanceAsync.ts
        function instanceAsync(class_, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "instance",
            async: true,
            class: class_,
            message,
            pipe,
            async _parse(input, info) {
              if (!(input instanceof this.class)) {
                return schemaIssue(info, "type", "instance", this.message, input);
              }
              return pipeResultAsync(input, this.pipe, info, "instance");
            }
          };
        }

        // src/schemas/intersect/utils/mergeOutputs/mergeOutputs.ts
        function mergeOutputs(output1, output2) {
          if (typeof output1 === typeof output2) {
            if (output1 === output2 || output1 instanceof Date && output2 instanceof Date && +output1 === +output2) {
              return {
                output: output1
              };
            }
            if (Array.isArray(output1) && Array.isArray(output2)) {
              if (output1.length === output2.length) {
                const array2 = [];
                for (let index = 0; index < output1.length; index++) {
                  const result = mergeOutputs(output1[index], output2[index]);
                  if (result.invalid) {
                    return result;
                  }
                  array2.push(result.output);
                }
                return {
                  output: array2
                };
              }
              return {
                invalid: true
              };
            }
            if (output1 && output2 && output1.constructor === Object && output2.constructor === Object) {
              const object2 = {
                ...output1,
                ...output2
              };
              for (const key in output1) {
                if (key in output2) {
                  const result = mergeOutputs(output1[key], output2[key]);
                  if (result.invalid) {
                    return result;
                  }
                  object2[key] = result.output;
                }
              }
              return {
                output: object2
              };
            }
          }
          return {
            invalid: true
          };
        }

        // src/schemas/intersect/intersect.ts
        function intersect(options, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "intersect",
            async: false,
            options,
            message,
            pipe,
            _parse(input, info) {
              let typed = true;
              let issues;
              let output;
              const outputs = [];
              for (const schema of this.options) {
                const result = schema._parse(input, info);
                if (result.issues) {
                  if (issues) {
                    for (const issue of result.issues) {
                      issues.push(issue);
                    }
                  } else {
                    issues = result.issues;
                  }
                  if (info?.abortEarly) {
                    typed = false;
                    break;
                  }
                }
                if (!result.typed) {
                  typed = false;
                }
                outputs.push(result.output);
              }
              if (typed) {
                output = outputs[0];
                for (let index = 1; index < outputs.length; index++) {
                  const result = mergeOutputs(output, outputs[index]);
                  if (result.invalid) {
                    return schemaIssue(info, "type", "intersect", this.message, input);
                  }
                  output = result.output;
                }
                return pipeResult(output, this.pipe, info, "intersect", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }
        var intersection = exports.intersection = intersect;

        // src/schemas/literal/literal.ts
        function literal(literal2, message = "Invalid type") {
          return {
            type: "literal",
            async: false,
            literal: literal2,
            message,
            _parse(input, info) {
              if (input !== this.literal) {
                return schemaIssue(info, "type", "literal", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }

        // src/schemas/literal/literalAsync.ts
        function literalAsync(literal2, message = "Invalid type") {
          return {
            type: "literal",
            async: true,
            literal: literal2,
            message,
            async _parse(input, info) {
              if (input !== this.literal) {
                return schemaIssue(info, "type", "literal", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }

        // src/schemas/map/map.ts
        function map(key, value2, arg3, arg4) {
          const [message = "Invalid type", pipe] = defaultArgs(arg3, arg4);
          return {
            type: "map",
            async: false,
            key,
            value: value2,
            message,
            pipe,
            _parse(input, info) {
              if (!(input instanceof Map)) {
                return schemaIssue(info, "type", "map", this.message, input);
              }
              let typed = true;
              let issues;
              const output = /* @__PURE__ */new Map();
              for (const [inputKey, inputValue] of input.entries()) {
                let pathItem;
                const keyResult = this.key._parse(inputKey, {
                  origin: "key",
                  abortEarly: info?.abortEarly,
                  abortPipeEarly: info?.abortPipeEarly,
                  skipPipe: info?.skipPipe
                });
                if (keyResult.issues) {
                  pathItem = {
                    type: "map",
                    input,
                    key: inputKey,
                    value: inputValue
                  };
                  for (const issue of keyResult.issues) {
                    if (issue.path) {
                      issue.path.unshift(pathItem);
                    } else {
                      issue.path = [pathItem];
                    }
                    issues?.push(issue);
                  }
                  if (!issues) {
                    issues = keyResult.issues;
                  }
                  if (info?.abortEarly) {
                    typed = false;
                    break;
                  }
                }
                const valueResult = this.value._parse(inputValue, info);
                if (valueResult.issues) {
                  pathItem = pathItem || {
                    type: "map",
                    input,
                    key: inputKey,
                    value: inputValue
                  };
                  for (const issue of valueResult.issues) {
                    if (issue.path) {
                      issue.path.unshift(pathItem);
                    } else {
                      issue.path = [pathItem];
                    }
                    issues?.push(issue);
                  }
                  if (!issues) {
                    issues = valueResult.issues;
                  }
                  if (info?.abortEarly) {
                    typed = false;
                    break;
                  }
                }
                if (!keyResult.typed || !valueResult.typed) {
                  typed = false;
                }
                output.set(keyResult.output, valueResult.output);
              }
              if (typed) {
                return pipeResult(output, this.pipe, info, "map", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/map/mapAsync.ts
        function mapAsync(key, value2, arg3, arg4) {
          const [message = "Invalid type", pipe] = defaultArgs(arg3, arg4);
          return {
            type: "map",
            async: true,
            key,
            value: value2,
            message,
            pipe,
            async _parse(input, info) {
              if (!(input instanceof Map)) {
                return schemaIssue(info, "type", "map", this.message, input);
              }
              let typed = true;
              let issues;
              const output = /* @__PURE__ */new Map();
              await Promise.all(Array.from(input.entries()).map(async ([inputKey, inputValue]) => {
                let pathItem;
                const [keyResult, valueResult] = await Promise.all([{
                  schema: this.key,
                  value: inputKey,
                  origin: "key"
                }, {
                  schema: this.value,
                  value: inputValue,
                  origin: "value"
                }].map(async ({
                  schema,
                  value: value3,
                  origin
                }) => {
                  if (!(info?.abortEarly && issues)) {
                    const result = await schema._parse(value3, {
                      origin,
                      abortEarly: info?.abortEarly,
                      abortPipeEarly: info?.abortPipeEarly,
                      skipPipe: info?.skipPipe
                    });
                    if (!(info?.abortEarly && issues)) {
                      if (result.issues) {
                        pathItem = pathItem || {
                          type: "map",
                          input,
                          key: inputKey,
                          value: inputValue
                        };
                        for (const issue of result.issues) {
                          if (issue.path) {
                            issue.path.unshift(pathItem);
                          } else {
                            issue.path = [pathItem];
                          }
                          issues?.push(issue);
                        }
                        if (!issues) {
                          issues = result.issues;
                        }
                        if (info?.abortEarly) {
                          throw null;
                        }
                      }
                      return result;
                    }
                  }
                })).catch(() => []);
                if (!keyResult?.typed || !valueResult?.typed) {
                  typed = false;
                }
                if (keyResult && valueResult) {
                  output.set(keyResult.output, valueResult.output);
                }
              }));
              if (typed) {
                return pipeResultAsync(output, this.pipe, info, "map", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/nan/nan.ts
        function nan(message = "Invalid type") {
          return {
            type: "nan",
            async: false,
            message,
            _parse(input, info) {
              if (!Number.isNaN(input)) {
                return schemaIssue(info, "type", "nan", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }

        // src/schemas/nan/nanAsync.ts
        function nanAsync(message = "Invalid type") {
          return {
            type: "nan",
            async: true,
            message,
            async _parse(input, info) {
              if (!Number.isNaN(input)) {
                return schemaIssue(info, "type", "nan", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }

        // src/schemas/never/never.ts
        function never(message = "Invalid type") {
          return {
            type: "never",
            async: false,
            message,
            _parse(input, info) {
              return schemaIssue(info, "type", "never", this.message, input);
            }
          };
        }

        // src/schemas/never/neverAsync.ts
        function neverAsync(message = "Invalid type") {
          return {
            type: "never",
            async: true,
            message,
            async _parse(input, info) {
              return schemaIssue(info, "type", "never", this.message, input);
            }
          };
        }

        // src/schemas/nonNullable/nonNullable.ts
        function nonNullable(wrapped, message = "Invalid type") {
          return {
            type: "non_nullable",
            async: false,
            wrapped,
            message,
            _parse(input, info) {
              if (input === null) {
                return schemaIssue(info, "type", "non_nullable", this.message, input);
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/nonNullable/nonNullableAsync.ts
        function nonNullableAsync(wrapped, message = "Invalid type") {
          return {
            type: "non_nullable",
            async: true,
            wrapped,
            message,
            async _parse(input, info) {
              if (input === null) {
                return schemaIssue(info, "type", "non_nullable", this.message, input);
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/nonNullish/nonNullish.ts
        function nonNullish(wrapped, message = "Invalid type") {
          return {
            type: "non_nullish",
            async: false,
            wrapped,
            message,
            _parse(input, info) {
              if (input === null || input === void 0) {
                return schemaIssue(info, "type", "non_nullish", this.message, input);
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/nonNullish/nonNullishAsync.ts
        function nonNullishAsync(wrapped, message = "Invalid type") {
          return {
            type: "non_nullish",
            async: true,
            wrapped,
            message,
            async _parse(input, info) {
              if (input === null || input === void 0) {
                return schemaIssue(info, "type", "non_nullish", this.message, input);
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/nonOptional/nonOptional.ts
        function nonOptional(wrapped, message = "Invalid type") {
          return {
            type: "non_optional",
            async: false,
            wrapped,
            message,
            _parse(input, info) {
              if (input === void 0) {
                return schemaIssue(info, "type", "non_optional", this.message, input);
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/nonOptional/nonOptionalAsync.ts
        function nonOptionalAsync(wrapped, message = "Invalid type") {
          return {
            type: "non_optional",
            async: true,
            wrapped,
            message,
            async _parse(input, info) {
              if (input === void 0) {
                return schemaIssue(info, "type", "non_optional", this.message, input);
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/nullable/nullable.ts
        function nullable(wrapped, default_) {
          return {
            type: "nullable",
            async: false,
            wrapped,
            default: default_,
            _parse(input, info) {
              if (input === null) {
                const override = getDefault(this);
                if (override === void 0) {
                  return parseResult(true, input);
                }
                input = override;
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/nullable/nullableAsync.ts
        function nullableAsync(wrapped, default_) {
          return {
            type: "nullable",
            async: true,
            wrapped,
            default: default_,
            async _parse(input, info) {
              if (input === null) {
                const override = await getDefaultAsync(this);
                if (override === void 0) {
                  return parseResult(true, input);
                }
                input = override;
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/nullish/nullish.ts
        function nullish(wrapped, default_) {
          return {
            type: "nullish",
            async: false,
            wrapped,
            default: default_,
            _parse(input, info) {
              if (input === null || input === void 0) {
                const override = getDefault(this);
                if (override === void 0) {
                  return parseResult(true, input);
                }
                input = override;
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/nullish/nullishAsync.ts
        function nullishAsync(wrapped, default_) {
          return {
            type: "nullish",
            async: true,
            wrapped,
            default: default_,
            async _parse(input, info) {
              if (input === null || input === void 0) {
                const override = await getDefaultAsync(this);
                if (override === void 0) {
                  return parseResult(true, input);
                }
                input = override;
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/null/null.ts
        function null_(message = "Invalid type") {
          return {
            type: "null",
            async: false,
            message,
            _parse(input, info) {
              if (input !== null) {
                return schemaIssue(info, "type", "null", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }
        var nullType = exports.nullType = null_;

        // src/schemas/null/nullAsync.ts
        function nullAsync(message = "Invalid type") {
          return {
            type: "null",
            async: true,
            message,
            async _parse(input, info) {
              if (input !== null) {
                return schemaIssue(info, "type", "null", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }
        var nullTypeAsync = exports.nullTypeAsync = nullAsync;

        // src/schemas/number/number.ts
        function number(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "number",
            async: false,
            message,
            pipe,
            _parse(input, info) {
              if (typeof input !== "number" || isNaN(input)) {
                return schemaIssue(info, "type", "number", this.message, input);
              }
              return pipeResult(input, this.pipe, info, "number");
            }
          };
        }

        // src/schemas/number/numberAsync.ts
        function numberAsync(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "number",
            async: true,
            message,
            pipe,
            async _parse(input, info) {
              if (typeof input !== "number" || isNaN(input)) {
                return schemaIssue(info, "type", "number", this.message, input);
              }
              return pipeResultAsync(input, this.pipe, info, "number");
            }
          };
        }

        // src/schemas/object/object.ts
        function object(entries, arg2, arg3, arg4) {
          const [rest, message = "Invalid type", pipe] = restAndDefaultArgs(arg2, arg3, arg4);
          let cachedEntries;
          return {
            type: "object",
            async: false,
            entries,
            rest,
            message,
            pipe,
            _parse(input, info) {
              if (!input || typeof input !== "object") {
                return schemaIssue(info, "type", "object", this.message, input);
              }
              cachedEntries = cachedEntries || Object.entries(this.entries);
              let typed = true;
              let issues;
              const output = {};
              for (const [key, schema] of cachedEntries) {
                const value2 = input[key];
                const result = schema._parse(value2, info);
                if (result.issues) {
                  const pathItem = {
                    type: "object",
                    input,
                    key,
                    value: value2
                  };
                  for (const issue of result.issues) {
                    if (issue.path) {
                      issue.path.unshift(pathItem);
                    } else {
                      issue.path = [pathItem];
                    }
                    issues?.push(issue);
                  }
                  if (!issues) {
                    issues = result.issues;
                  }
                  if (info?.abortEarly) {
                    typed = false;
                    break;
                  }
                }
                if (!result.typed) {
                  typed = false;
                }
                if (result.output !== void 0 || key in input) {
                  output[key] = result.output;
                }
              }
              if (this.rest && !(info?.abortEarly && issues)) {
                for (const key in input) {
                  if (!(key in this.entries)) {
                    const value2 = input[key];
                    const result = this.rest._parse(value2, info);
                    if (result.issues) {
                      const pathItem = {
                        type: "object",
                        input,
                        key,
                        value: value2
                      };
                      for (const issue of result.issues) {
                        if (issue.path) {
                          issue.path.unshift(pathItem);
                        } else {
                          issue.path = [pathItem];
                        }
                        issues?.push(issue);
                      }
                      if (!issues) {
                        issues = result.issues;
                      }
                      if (info?.abortEarly) {
                        typed = false;
                        break;
                      }
                    }
                    if (!result.typed) {
                      typed = false;
                    }
                    output[key] = result.output;
                  }
                }
              }
              if (typed) {
                return pipeResult(output, this.pipe, info, "object", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/object/objectAsync.ts
        function objectAsync(entries, arg2, arg3, arg4) {
          const [rest, message = "Invalid type", pipe] = restAndDefaultArgs(arg2, arg3, arg4);
          let cachedEntries;
          return {
            type: "object",
            async: true,
            entries,
            rest,
            message,
            pipe,
            async _parse(input, info) {
              if (!input || typeof input !== "object") {
                return schemaIssue(info, "type", "object", this.message, input);
              }
              cachedEntries = cachedEntries || Object.entries(this.entries);
              let typed = true;
              let issues;
              const output = {};
              await Promise.all([Promise.all(cachedEntries.map(async ([key, schema]) => {
                if (!(info?.abortEarly && issues)) {
                  const value2 = input[key];
                  const result = await schema._parse(value2, info);
                  if (!(info?.abortEarly && issues)) {
                    if (result.issues) {
                      const pathItem = {
                        type: "object",
                        input,
                        key,
                        value: value2
                      };
                      for (const issue of result.issues) {
                        if (issue.path) {
                          issue.path.unshift(pathItem);
                        } else {
                          issue.path = [pathItem];
                        }
                        issues?.push(issue);
                      }
                      if (!issues) {
                        issues = result.issues;
                      }
                      if (info?.abortEarly) {
                        typed = false;
                        throw null;
                      }
                    }
                    if (!result.typed) {
                      typed = false;
                    }
                    if (result.output !== void 0 || key in input) {
                      output[key] = result.output;
                    }
                  }
                }
              })), this.rest && Promise.all(Object.entries(input).map(async ([key, value2]) => {
                if (!(info?.abortEarly && issues)) {
                  if (!(key in this.entries)) {
                    const result = await this.rest._parse(value2, info);
                    if (!(info?.abortEarly && issues)) {
                      if (result.issues) {
                        const pathItem = {
                          type: "object",
                          input,
                          key,
                          value: value2
                        };
                        for (const issue of result.issues) {
                          if (issue.path) {
                            issue.path.unshift(pathItem);
                          } else {
                            issue.path = [pathItem];
                          }
                          issues?.push(issue);
                        }
                        if (!issues) {
                          issues = result.issues;
                        }
                        if (info?.abortEarly) {
                          typed = false;
                          throw null;
                        }
                      }
                      if (!result.typed) {
                        typed = false;
                      }
                      output[key] = result.output;
                    }
                  }
                }
              }))]).catch(() => null);
              if (typed) {
                return pipeResultAsync(output, this.pipe, info, "object", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/optional/optional.ts
        function optional(wrapped, default_) {
          return {
            type: "optional",
            async: false,
            wrapped,
            default: default_,
            _parse(input, info) {
              if (input === void 0) {
                const override = getDefault(this);
                if (override === void 0) {
                  return parseResult(true, input);
                }
                input = override;
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/optional/optionalAsync.ts
        function optionalAsync(wrapped, default_) {
          return {
            type: "optional",
            async: true,
            wrapped,
            default: default_,
            async _parse(input, info) {
              if (input === void 0) {
                const override = await getDefaultAsync(this);
                if (override === void 0) {
                  return parseResult(true, input);
                }
                input = override;
              }
              return this.wrapped._parse(input, info);
            }
          };
        }

        // src/schemas/picklist/picklist.ts
        function picklist(options, message = "Invalid type") {
          return {
            type: "picklist",
            async: false,
            options,
            message,
            _parse(input, info) {
              if (!this.options.includes(input)) {
                return schemaIssue(info, "type", "picklist", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }
        var enumType = exports.enumType = picklist;

        // src/schemas/picklist/picklistAsync.ts
        function picklistAsync(options, message = "Invalid type") {
          return {
            type: "picklist",
            async: true,
            options,
            message,
            async _parse(input, info) {
              if (!this.options.includes(input)) {
                return schemaIssue(info, "type", "picklist", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }
        var enumTypeAsync = exports.enumTypeAsync = picklistAsync;

        // src/schemas/string/string.ts
        function string(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "string",
            async: false,
            message,
            pipe,
            _parse(input, info) {
              if (typeof input !== "string") {
                return schemaIssue(info, "type", "string", this.message, input);
              }
              return pipeResult(input, this.pipe, info, "string");
            }
          };
        }

        // src/schemas/string/stringAsync.ts
        function stringAsync(arg1, arg2) {
          const [message = "Invalid type", pipe] = defaultArgs(arg1, arg2);
          return {
            type: "string",
            async: true,
            message,
            pipe,
            async _parse(input, info) {
              if (typeof input !== "string") {
                return schemaIssue(info, "type", "string", this.message, input);
              }
              return pipeResultAsync(input, this.pipe, info, "string");
            }
          };
        }

        // src/schemas/record/utils/recordArgs/recordArgs.ts
        function recordArgs(arg1, arg2, arg3, arg4) {
          if (typeof arg2 === "object" && !Array.isArray(arg2)) {
            const [message2, pipe2] = defaultArgs(arg3, arg4);
            return [arg1, arg2, message2, pipe2];
          }
          const [message, pipe] = defaultArgs(arg2, arg3);
          return [string(), arg1, message, pipe];
        }

        // src/schemas/record/values.ts
        var BLOCKED_KEYS = ["__proto__", "prototype", "constructor"];

        // src/schemas/record/record.ts
        function record(arg1, arg2, arg3, arg4) {
          const [key, value2, message = "Invalid type", pipe] = recordArgs(arg1, arg2, arg3, arg4);
          return {
            type: "record",
            async: false,
            key,
            value: value2,
            message,
            pipe,
            _parse(input, info) {
              if (!input || typeof input !== "object") {
                return schemaIssue(info, "type", "record", this.message, input);
              }
              let typed = true;
              let issues;
              const output = {};
              for (const [inputKey, inputValue] of Object.entries(input)) {
                if (!BLOCKED_KEYS.includes(inputKey)) {
                  let pathItem;
                  const keyResult = this.key._parse(inputKey, {
                    origin: "key",
                    abortEarly: info?.abortEarly,
                    abortPipeEarly: info?.abortPipeEarly,
                    skipPipe: info?.skipPipe
                  });
                  if (keyResult.issues) {
                    pathItem = {
                      type: "record",
                      input,
                      key: inputKey,
                      value: inputValue
                    };
                    for (const issue of keyResult.issues) {
                      issue.path = [pathItem];
                      issues?.push(issue);
                    }
                    if (!issues) {
                      issues = keyResult.issues;
                    }
                    if (info?.abortEarly) {
                      typed = false;
                      break;
                    }
                  }
                  const valueResult = this.value._parse(inputValue, info);
                  if (valueResult.issues) {
                    pathItem = pathItem || {
                      type: "record",
                      input,
                      key: inputKey,
                      value: inputValue
                    };
                    for (const issue of valueResult.issues) {
                      if (issue.path) {
                        issue.path.unshift(pathItem);
                      } else {
                        issue.path = [pathItem];
                      }
                      issues?.push(issue);
                    }
                    if (!issues) {
                      issues = valueResult.issues;
                    }
                    if (info?.abortEarly) {
                      typed = false;
                      break;
                    }
                  }
                  if (!keyResult.typed || !valueResult.typed) {
                    typed = false;
                  }
                  if (keyResult.typed) {
                    output[keyResult.output] = valueResult.output;
                  }
                }
              }
              if (typed) {
                return pipeResult(output, this.pipe, info, "record", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/record/recordAsync.ts
        function recordAsync(arg1, arg2, arg3, arg4) {
          const [key, value2, message = "Invalid type", pipe] = recordArgs(arg1, arg2, arg3, arg4);
          return {
            type: "record",
            async: true,
            key,
            value: value2,
            message,
            pipe,
            async _parse(input, info) {
              if (!input || typeof input !== "object") {
                return schemaIssue(info, "type", "record", this.message, input);
              }
              let typed = true;
              let issues;
              const output = {};
              await Promise.all(
              // Note: `Object.entries(...)` converts each key to a string
              Object.entries(input).map(async ([inputKey, inputValue]) => {
                if (!BLOCKED_KEYS.includes(inputKey)) {
                  let pathItem;
                  const [keyResult, valueResult] = await Promise.all([{
                    schema: this.key,
                    value: inputKey,
                    origin: "key"
                  }, {
                    schema: this.value,
                    value: inputValue,
                    origin: "value"
                  }].map(async ({
                    schema,
                    value: value3,
                    origin
                  }) => {
                    if (!(info?.abortEarly && issues)) {
                      const result = await schema._parse(value3, {
                        origin,
                        abortEarly: info?.abortEarly,
                        abortPipeEarly: info?.abortPipeEarly,
                        skipPipe: info?.skipPipe
                      });
                      if (!(info?.abortEarly && issues)) {
                        if (result.issues) {
                          pathItem = pathItem || {
                            type: "record",
                            input,
                            key: inputKey,
                            value: inputValue
                          };
                          for (const issue of result.issues) {
                            if (issue.path) {
                              issue.path.unshift(pathItem);
                            } else {
                              issue.path = [pathItem];
                            }
                            issues?.push(issue);
                          }
                          if (!issues) {
                            issues = result.issues;
                          }
                          if (info?.abortEarly) {
                            throw null;
                          }
                        }
                        return result;
                      }
                    }
                  })).catch(() => []);
                  if (!keyResult?.typed || !valueResult?.typed) {
                    typed = false;
                  }
                  if (keyResult?.typed && valueResult) {
                    output[keyResult.output] = valueResult.output;
                  }
                }
              }));
              if (typed) {
                return pipeResultAsync(output, this.pipe, info, "record", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/recursive/recursive.ts
        function recursive(getter) {
          return {
            type: "recursive",
            async: false,
            getter,
            _parse(input, info) {
              return this.getter()._parse(input, info);
            }
          };
        }

        // src/schemas/recursive/recursiveAsync.ts
        function recursiveAsync(getter) {
          return {
            type: "recursive",
            async: true,
            getter,
            async _parse(input, info) {
              return this.getter()._parse(input, info);
            }
          };
        }

        // src/schemas/set/set.ts
        function set(value2, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "set",
            async: false,
            value: value2,
            message,
            pipe,
            _parse(input, info) {
              if (!(input instanceof Set)) {
                return schemaIssue(info, "type", "set", this.message, input);
              }
              let key = 0;
              let typed = true;
              let issues;
              const output = /* @__PURE__ */new Set();
              for (const inputValue of input) {
                const result = this.value._parse(inputValue, info);
                if (result.issues) {
                  const pathItem = {
                    type: "set",
                    input,
                    key,
                    value: inputValue
                  };
                  for (const issue of result.issues) {
                    if (issue.path) {
                      issue.path.unshift(pathItem);
                    } else {
                      issue.path = [pathItem];
                    }
                    issues?.push(issue);
                  }
                  if (!issues) {
                    issues = result.issues;
                  }
                  if (info?.abortEarly) {
                    typed = false;
                    break;
                  }
                }
                if (!result.typed) {
                  typed = false;
                }
                output.add(result.output);
                key++;
              }
              if (typed) {
                return pipeResult(output, this.pipe, info, "set", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/set/setAsync.ts
        function setAsync(value2, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "set",
            async: true,
            value: value2,
            message,
            pipe,
            async _parse(input, info) {
              if (!(input instanceof Set)) {
                return schemaIssue(info, "type", "set", this.message, input);
              }
              let typed = true;
              let issues;
              const output = /* @__PURE__ */new Set();
              await Promise.all(Array.from(input.values()).map(async (inputValue, key) => {
                if (!(info?.abortEarly && issues)) {
                  const result = await this.value._parse(inputValue, info);
                  if (!(info?.abortEarly && issues)) {
                    if (result.issues) {
                      const pathItem = {
                        type: "set",
                        input,
                        key,
                        value: inputValue
                      };
                      for (const issue of result.issues) {
                        if (issue.path) {
                          issue.path.unshift(pathItem);
                        } else {
                          issue.path = [pathItem];
                        }
                        issues?.push(issue);
                      }
                      if (!issues) {
                        issues = result.issues;
                      }
                      if (info?.abortEarly) {
                        typed = false;
                        throw null;
                      }
                    }
                    if (!result.typed) {
                      typed = false;
                    }
                    output.add(result.output);
                  }
                }
              })).catch(() => null);
              if (typed) {
                return pipeResultAsync(output, this.pipe, info, "set", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/special/special.ts
        function special(check, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "special",
            async: false,
            check,
            message,
            pipe,
            _parse(input, info) {
              if (!this.check(input)) {
                return schemaIssue(info, "type", "special", this.message, input);
              }
              return pipeResult(input, this.pipe, info, "special");
            }
          };
        }

        // src/schemas/special/specialAsync.ts
        function specialAsync(check, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "special",
            async: true,
            check,
            message,
            pipe,
            async _parse(input, info) {
              if (!(await this.check(input))) {
                return schemaIssue(info, "type", "special", this.message, input);
              }
              return pipeResultAsync(input, this.pipe, info, "special");
            }
          };
        }

        // src/schemas/symbol/symbol.ts
        function symbol(message = "Invalid type") {
          return {
            type: "symbol",
            async: false,
            message,
            _parse(input, info) {
              if (typeof input !== "symbol") {
                return schemaIssue(info, "type", "symbol", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }

        // src/schemas/symbol/symbolAsync.ts
        function symbolAsync(message = "Invalid type") {
          return {
            type: "symbol",
            async: true,
            message,
            async _parse(input, info) {
              if (typeof input !== "symbol") {
                return schemaIssue(info, "type", "symbol", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }

        // src/schemas/tuple/tuple.ts
        function tuple(items, arg2, arg3, arg4) {
          const [rest, message = "Invalid type", pipe] = restAndDefaultArgs(arg2, arg3, arg4);
          return {
            type: "tuple",
            async: false,
            items,
            rest,
            message,
            pipe,
            _parse(input, info) {
              if (!Array.isArray(input) || this.items.length > input.length) {
                return schemaIssue(info, "type", "tuple", this.message, input);
              }
              let typed = true;
              let issues;
              const output = [];
              for (let key = 0; key < this.items.length; key++) {
                const value2 = input[key];
                const result = this.items[key]._parse(value2, info);
                if (result.issues) {
                  const pathItem = {
                    type: "tuple",
                    input,
                    key,
                    value: value2
                  };
                  for (const issue of result.issues) {
                    if (issue.path) {
                      issue.path.unshift(pathItem);
                    } else {
                      issue.path = [pathItem];
                    }
                    issues?.push(issue);
                  }
                  if (!issues) {
                    issues = result.issues;
                  }
                  if (info?.abortEarly) {
                    typed = false;
                    break;
                  }
                }
                if (!result.typed) {
                  typed = false;
                }
                output[key] = result.output;
              }
              if (this.rest && !(info?.abortEarly && issues)) {
                for (let key = this.items.length; key < input.length; key++) {
                  const value2 = input[key];
                  const result = this.rest._parse(value2, info);
                  if (result.issues) {
                    const pathItem = {
                      type: "tuple",
                      input,
                      key,
                      value: value2
                    };
                    for (const issue of result.issues) {
                      if (issue.path) {
                        issue.path.unshift(pathItem);
                      } else {
                        issue.path = [pathItem];
                      }
                      issues?.push(issue);
                    }
                    if (!issues) {
                      issues = result.issues;
                    }
                    if (info?.abortEarly) {
                      typed = false;
                      break;
                    }
                  }
                  if (!result.typed) {
                    typed = false;
                  }
                  output[key] = result.output;
                }
              }
              if (typed) {
                return pipeResult(output, this.pipe, info, "tuple", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/tuple/tupleAsync.ts
        function tupleAsync(items, arg2, arg3, arg4) {
          const [rest, message = "Invalid type", pipe] = restAndDefaultArgs(arg2, arg3, arg4);
          return {
            type: "tuple",
            async: true,
            items,
            rest,
            message,
            pipe,
            async _parse(input, info) {
              if (!Array.isArray(input) || this.items.length > input.length) {
                return schemaIssue(info, "type", "tuple", this.message, input);
              }
              let typed = true;
              let issues;
              const output = [];
              await Promise.all([
              // Parse schema of each tuple item
              Promise.all(this.items.map(async (schema, key) => {
                if (!(info?.abortEarly && issues)) {
                  const value2 = input[key];
                  const result = await schema._parse(value2, info);
                  if (!(info?.abortEarly && issues)) {
                    if (result.issues) {
                      const pathItem = {
                        type: "tuple",
                        input,
                        key,
                        value: value2
                      };
                      for (const issue of result.issues) {
                        if (issue.path) {
                          issue.path.unshift(pathItem);
                        } else {
                          issue.path = [pathItem];
                        }
                        issues?.push(issue);
                      }
                      if (!issues) {
                        issues = result.issues;
                      }
                      if (info?.abortEarly) {
                        typed = false;
                        throw null;
                      }
                    }
                    if (!result.typed) {
                      typed = false;
                    }
                    output[key] = result.output;
                  }
                }
              })),
              // If necessary parse schema of each rest item
              this.rest && Promise.all(input.slice(this.items.length).map(async (value2, index) => {
                if (!(info?.abortEarly && issues)) {
                  const key = this.items.length + index;
                  const result = await this.rest._parse(value2, info);
                  if (!(info?.abortEarly && issues)) {
                    if (result.issues) {
                      const pathItem = {
                        type: "tuple",
                        input,
                        key,
                        value: value2
                      };
                      for (const issue of result.issues) {
                        if (issue.path) {
                          issue.path.unshift(pathItem);
                        } else {
                          issue.path = [pathItem];
                        }
                        issues?.push(issue);
                      }
                      if (!issues) {
                        issues = result.issues;
                      }
                      if (info?.abortEarly) {
                        typed = false;
                        throw null;
                      }
                    }
                    if (!result.typed) {
                      typed = false;
                    }
                    output[key] = result.output;
                  }
                }
              }))]).catch(() => null);
              if (typed) {
                return pipeResultAsync(output, this.pipe, info, "tuple", issues);
              }
              return parseResult(false, output, issues);
            }
          };
        }

        // src/schemas/undefined/undefined.ts
        function undefined_(message = "Invalid type") {
          return {
            type: "undefined",
            async: false,
            message,
            _parse(input, info) {
              if (typeof input !== "undefined") {
                return schemaIssue(info, "type", "undefined", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }
        var undefinedType = exports.undefinedType = undefined_;

        // src/schemas/undefined/undefinedAsync.ts
        function undefinedAsync(message = "Invalid type") {
          return {
            type: "undefined",
            async: true,
            message,
            async _parse(input, info) {
              if (typeof input !== "undefined") {
                return schemaIssue(info, "type", "undefined", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }
        var undefinedTypeAsync = exports.undefinedTypeAsync = undefinedAsync;

        // src/schemas/union/union.ts
        function union(options, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "union",
            async: false,
            options,
            message,
            pipe,
            _parse(input, info) {
              let issues;
              let output;
              for (const schema of this.options) {
                const result = schema._parse(input, info);
                if (result.issues) {
                  if (issues) {
                    for (const issue of result.issues) {
                      issues.push(issue);
                    }
                  } else {
                    issues = result.issues;
                  }
                } else {
                  output = [result.output];
                  break;
                }
              }
              if (output) {
                return pipeResult(output[0], this.pipe, info, "union");
              }
              return schemaIssue(info, "type", "union", this.message, input, void 0, issues);
            }
          };
        }

        // src/schemas/union/unionAsync.ts
        function unionAsync(options, arg2, arg3) {
          const [message = "Invalid type", pipe] = defaultArgs(arg2, arg3);
          return {
            type: "union",
            async: true,
            options,
            message,
            pipe,
            async _parse(input, info) {
              let issues;
              let output;
              for (const schema of this.options) {
                const result = await schema._parse(input, info);
                if (result.issues) {
                  if (issues) {
                    for (const issue of result.issues) {
                      issues.push(issue);
                    }
                  } else {
                    issues = result.issues;
                  }
                } else {
                  output = [result.output];
                  break;
                }
              }
              if (output) {
                return pipeResultAsync(output[0], this.pipe, info, "union");
              }
              return schemaIssue(info, "type", "union", this.message, input, void 0, issues);
            }
          };
        }

        // src/schemas/unknown/unknown.ts
        function unknown(pipe) {
          return {
            type: "unknown",
            async: false,
            pipe,
            _parse(input, info) {
              return pipeResult(input, this.pipe, info, "unknown");
            }
          };
        }

        // src/schemas/unknown/unknownAsync.ts
        function unknownAsync(pipe) {
          return {
            type: "unknown",
            async: true,
            pipe,
            async _parse(input, info) {
              return pipeResultAsync(input, this.pipe, info, "unknown");
            }
          };
        }

        // src/schemas/variant/variant.ts
        function variant(key, options, arg3, arg4) {
          const [message = "Invalid type", pipe] = defaultArgs(arg3, arg4);
          return {
            type: "variant",
            async: false,
            key,
            options,
            message,
            pipe,
            _parse(input, info) {
              if (!input || typeof input !== "object") {
                return schemaIssue(info, "type", "variant", this.message, input);
              }
              if (this.key in input) {
                let issues;
                let output;
                const parseOptions = options2 => {
                  for (const schema of options2) {
                    if (schema.type === "object") {
                      const keyResult = schema.entries[this.key]._parse(input[this.key], info);
                      if (!keyResult.issues) {
                        const dataResult = schema._parse(input, info);
                        if (dataResult.issues) {
                          issues = dataResult.issues;
                        } else {
                          output = [dataResult.output];
                          break;
                        }
                      }
                    } else if (schema.type === "variant") {
                      parseOptions(schema.options);
                      if (output) {
                        break;
                      }
                    }
                  }
                };
                parseOptions(this.options);
                if (output) {
                  return pipeResult(output[0], this.pipe, info, "variant");
                }
                if (issues) {
                  return parseResult(false, output, issues);
                }
              }
              return schemaIssue(info, "type", "variant", this.message, input, [{
                type: "object",
                input,
                key: this.key,
                value: void 0
              }]);
            }
          };
        }
        var discriminatedUnion = exports.discriminatedUnion = variant;

        // src/schemas/variant/variantAsync.ts
        function variantAsync(key, options, arg3, arg4) {
          const [message = "Invalid type", pipe] = defaultArgs(arg3, arg4);
          return {
            type: "variant",
            async: true,
            key,
            options,
            message,
            pipe,
            async _parse(input, info) {
              if (!input || typeof input !== "object") {
                return schemaIssue(info, "type", "variant", this.message, input);
              }
              if (this.key in input) {
                let issues;
                let output;
                const parseOptions = async options2 => {
                  for (const schema of options2) {
                    if (schema.type === "object") {
                      const keyResult = await schema.entries[this.key]._parse(input[this.key], info);
                      if (!keyResult.issues) {
                        const dataResult = await schema._parse(input, info);
                        if (dataResult.issues) {
                          issues = dataResult.issues;
                        } else {
                          output = [dataResult.output];
                          break;
                        }
                      }
                    } else if (schema.type === "variant") {
                      await parseOptions(schema.options);
                      if (output) {
                        break;
                      }
                    }
                  }
                };
                await parseOptions(this.options);
                if (output) {
                  return pipeResultAsync(output[0], this.pipe, info, "variant");
                }
                if (issues) {
                  return parseResult(false, output, issues);
                }
              }
              return schemaIssue(info, "type", "variant", this.message, input, [{
                type: "object",
                input,
                key: this.key,
                value: void 0
              }]);
            }
          };
        }
        var discriminatedUnionAsync = exports.discriminatedUnionAsync = variantAsync;

        // src/schemas/void/void.ts
        function void_(message = "Invalid type") {
          return {
            type: "void",
            async: false,
            message,
            _parse(input, info) {
              if (typeof input !== "undefined") {
                return schemaIssue(info, "type", "void", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }
        var voidType = exports.voidType = void_;

        // src/schemas/void/voidAsync.ts
        function voidAsync(message = "Invalid type") {
          return {
            type: "void",
            async: true,
            message,
            async _parse(input, info) {
              if (typeof input !== "undefined") {
                return schemaIssue(info, "type", "void", this.message, input);
              }
              return parseResult(true, input);
            }
          };
        }
        var voidTypeAsync = exports.voidTypeAsync = voidAsync;

        // src/methods/keyof/keyof.ts
        function keyof(schema) {
          return picklist(Object.keys(schema.entries));
        }

        // src/methods/merge/merge.ts
        function merge(schemas, arg2, arg3, arg4) {
          const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);
          return object(schemas.reduce((entries, schema) => ({
            ...entries,
            ...schema.entries
          }), {}), rest, message, pipe);
        }

        // src/methods/merge/mergeAsync.ts
        function mergeAsync(schemas, arg2, arg3, arg4) {
          const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);
          return objectAsync(schemas.reduce((entries, schema) => ({
            ...entries,
            ...schema.entries
          }), {}), rest, message, pipe);
        }

        // src/methods/omit/omit.ts
        function omit(schema, keys, arg3, arg4, arg5) {
          const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);
          return object(Object.entries(schema.entries).reduce((entries, [key, schema2]) => keys.includes(key) ? entries : {
            ...entries,
            [key]: schema2
          }, {}), rest, message, pipe);
        }

        // src/methods/omit/omitAsync.ts
        function omitAsync(schema, keys, arg3, arg4, arg5) {
          const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);
          return objectAsync(Object.entries(schema.entries).reduce((entries, [key, schema2]) => keys.includes(key) ? entries : {
            ...entries,
            [key]: schema2
          }, {}), rest, message, pipe);
        }

        // src/methods/parse/parse.ts
        function parse(schema, input, info) {
          const result = schema._parse(input, info);
          if (result.issues) {
            throw new ValiError(result.issues);
          }
          return result.output;
        }

        // src/methods/parse/parseAsync.ts
        async function parseAsync(schema, input, info) {
          const result = await schema._parse(input, info);
          if (result.issues) {
            throw new ValiError(result.issues);
          }
          return result.output;
        }

        // src/methods/partial/partial.ts
        function partial(schema, arg2, arg3, arg4) {
          const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);
          return object(Object.entries(schema.entries).reduce((entries, [key, schema2]) => ({
            ...entries,
            [key]: optional(schema2)
          }), {}), rest, message, pipe);
        }

        // src/methods/partial/partialAsync.ts
        function partialAsync(schema, arg2, arg3, arg4) {
          const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);
          return objectAsync(Object.entries(schema.entries).reduce((entries, [key, schema2]) => ({
            ...entries,
            [key]: optionalAsync(schema2)
          }), {}), rest, message, pipe);
        }

        // src/methods/passthrough/passthrough.ts
        function passthrough(schema) {
          return {
            ...schema,
            _parse(input, info) {
              const result = schema._parse(input, info);
              if (result.typed) {
                result.output = {
                  ...input,
                  ...result.output
                };
              }
              return result;
            }
          };
        }

        // src/methods/passthrough/passthroughAsync.ts
        function passthroughAsync(schema) {
          return {
            ...schema,
            async _parse(input, info) {
              const result = await schema._parse(input, info);
              if (result.typed) {
                result.output = {
                  ...input,
                  ...result.output
                };
              }
              return result;
            }
          };
        }

        // src/methods/pick/pick.ts
        function pick(schema, keys, arg3, arg4, arg5) {
          const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);
          return object(Object.entries(schema.entries).reduce((entries, [key, schema2]) => keys.includes(key) ? {
            ...entries,
            [key]: schema2
          } : entries, {}), rest, message, pipe);
        }

        // src/methods/pick/pickAsync.ts
        function pickAsync(schema, keys, arg3, arg4, arg5) {
          const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);
          return objectAsync(Object.entries(schema.entries).reduce((entries, [key, schema2]) => keys.includes(key) ? {
            ...entries,
            [key]: schema2
          } : entries, {}), rest, message, pipe);
        }

        // src/methods/required/required.ts
        function required(schema, arg2, arg3, arg4) {
          const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);
          return object(Object.entries(schema.entries).reduce((entries, [key, schema2]) => ({
            ...entries,
            [key]: nonOptional(schema2)
          }), {}), rest, message, pipe);
        }

        // src/methods/required/requiredAsync.ts
        function requiredAsync(schema, arg2, arg3, arg4) {
          const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);
          return objectAsync(Object.entries(schema.entries).reduce((entries, [key, schema2]) => ({
            ...entries,
            [key]: nonOptionalAsync(schema2)
          }), {}), rest, message, pipe);
        }

        // src/methods/safeParse/safeParse.ts
        function safeParse(schema, input, info) {
          const result = schema._parse(input, info);
          return {
            typed: result.typed,
            success: !result.issues,
            data: result.output,
            output: result.output,
            error: result.issues && new ValiError(result.issues),
            issues: result.issues
          };
        }

        // src/methods/safeParse/safeParseAsync.ts
        async function safeParseAsync(schema, input, info) {
          const result = await schema._parse(input, info);
          return {
            typed: result.typed,
            success: !result.issues,
            data: result.output,
            output: result.output,
            error: result.issues && new ValiError(result.issues),
            issues: result.issues
          };
        }

        // src/methods/strict/strict.ts
        function strict(schema, message = "Invalid keys") {
          return {
            ...schema,
            _parse(input, info) {
              const result = schema._parse(input, info);
              return !result.issues && Object.keys(input).some(key => !(key in schema.entries)) ? schemaIssue(info, "object", "strict", message, input) : result;
            }
          };
        }

        // src/methods/strict/strictAsync.ts
        function strictAsync(schema, message = "Invalid keys") {
          return {
            ...schema,
            message,
            async _parse(input, info) {
              const result = await schema._parse(input, info);
              return !result.issues && Object.keys(input).some(key => !(key in schema.entries)) ? schemaIssue(info, "object", "strict", message, input) : result;
            }
          };
        }

        // src/methods/strip/strip.ts
        function strip(schema) {
          let cachedKeys;
          return {
            ...schema,
            _parse(input, info) {
              const result = schema._parse(input, info);
              if (result.typed) {
                cachedKeys = cachedKeys || Object.keys(schema.entries);
                const output = {};
                for (const key of cachedKeys) {
                  output[key] = result.output[key];
                }
                result.output = output;
              }
              return result;
            }
          };
        }

        // src/methods/strip/stripAsync.ts
        function stripAsync(schema) {
          let cachedKeys;
          return {
            ...schema,
            async _parse(input, info) {
              const result = await schema._parse(input, info);
              if (result.typed) {
                cachedKeys = cachedKeys || Object.keys(schema.entries);
                const output = {};
                for (const key of cachedKeys) {
                  output[key] = result.output[key];
                }
                result.output = output;
              }
              return result;
            }
          };
        }

        // src/methods/transform/transform.ts
        function transform(schema, action, arg1) {
          return {
            ...schema,
            _parse(input, info) {
              const result = schema._parse(input, info);
              if (result.typed) {
                result.output = action(result.output, {
                  issues: result.issues
                });
                if (result.issues || !arg1) {
                  return result;
                }
                if (Array.isArray(arg1)) {
                  return pipeResult(result.output, arg1, info, typeof result.output);
                }
                return arg1._parse(result.output, info);
              }
              return result;
            }
          };
        }

        // src/methods/transform/transformAsync.ts
        function transformAsync(schema, action, arg1) {
          return {
            ...schema,
            async: true,
            async _parse(input, info) {
              const result = await schema._parse(input, info);
              if (result.typed) {
                result.output = await action(result.output, {
                  issues: result.issues
                });
                if (result.issues || !arg1) {
                  return result;
                }
                if (Array.isArray(arg1)) {
                  return pipeResultAsync(result.output, arg1, info, typeof result.output);
                }
                return arg1._parse(result.output, info);
              }
              return result;
            }
          };
        }

        // src/methods/unwrap/unwrap.ts
        function unwrap(schema) {
          return schema.wrapped;
        }

        // src/methods/withDefault/withDefault.ts
        function withDefault(schema, value2) {
          return {
            ...schema,
            _parse(input, info) {
              return schema._parse(input === void 0 ? typeof value2 === "function" ? value2() : value2 : input, info);
            }
          };
        }
        var useDefault = exports.useDefault = withDefault;

        // src/regex.ts
        var BIC_REGEX = exports.BIC_REGEX = /^[A-Z]{6}(?!00)[A-Z\d]{2}(?:[A-Z\d]{3})?$/u;
        var CUID2_REGEX = exports.CUID2_REGEX = /^[a-z][\da-z]*$/u;
        var DECIMAL_REGEX = exports.DECIMAL_REGEX = /^\d+$/u;
        var EMAIL_REGEX = exports.EMAIL_REGEX = /^[\w+-]+(?:\.[\w+-]+)*@[\da-z]+(?:[.-][\da-z]+)*\.[a-z]{2,}$/iu;
        var EMOJI_REGEX = exports.EMOJI_REGEX = /^[\p{Extended_Pictographic}\p{Emoji_Component}]+$/u;
        var HEXADECIMAL_REGEX = exports.HEXADECIMAL_REGEX = /^(0h|0x)?[\da-f]+$/iu;
        var HEX_COLOR_REGEX = exports.HEX_COLOR_REGEX = /^#([\da-f]{3}|[\da-f]{4}|[\da-f]{6}|[\da-f]{8})$/iu;
        var IMEI_REGEX = exports.IMEI_REGEX = /^\d{2}(?:[ /|-]?\d{6}){2}[ /|-]?\d$/u;
        var IPV4_REGEX = exports.IPV4_REGEX =
        // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive
        /^(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])(?:\.(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])){3}$/u;
        var IPV6_REGEX = exports.IPV6_REGEX = /^(?:(?:[\da-f]{1,4}:){7}[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,7}:|(?:[\da-f]{1,4}:){1,6}:[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,5}(?::[\da-f]{1,4}){1,2}|(?:[\da-f]{1,4}:){1,4}(?::[\da-f]{1,4}){1,3}|(?:[\da-f]{1,4}:){1,3}(?::[\da-f]{1,4}){1,4}|(?:[\da-f]{1,4}:){1,2}(?::[\da-f]{1,4}){1,5}|[\da-f]{1,4}:(?::[\da-f]{1,4}){1,6}|:(?:(?::[\da-f]{1,4}){1,7}|:)|fe80:(?::[\da-f]{0,4}){0,4}%[\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d)|(?:[\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d))$/iu;
        var ISO_DATE_REGEX = exports.ISO_DATE_REGEX = /^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])$/u;
        var ISO_DATE_TIME_REGEX = exports.ISO_DATE_TIME_REGEX = /^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])T(?:0\d|1\d|2[0-3]):[0-5]\d$/u;
        var ISO_TIME_REGEX = exports.ISO_TIME_REGEX = /^(?:0\d|1\d|2[0-3]):[0-5]\d$/u;
        var ISO_TIME_SECOND_REGEX = exports.ISO_TIME_SECOND_REGEX = /^(?:0\d|1\d|2[0-3])(?::[0-5]\d){2}$/u;
        var ISO_TIMESTAMP_REGEX = exports.ISO_TIMESTAMP_REGEX = /^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])T(?:0\d|1\d|2[0-3])(?::[0-5]\d){2}\.\d{3}Z$/u;
        var ISO_WEEK_REGEX = exports.ISO_WEEK_REGEX = /^\d{4}-W(?:0[1-9]|[1-4]\d|5[0-3])$/u;
        var MAC48_REGEX = exports.MAC48_REGEX = /^(?:[\da-f]{2}:){5}[\da-f]{2}$|^(?:[\da-f]{2}-){5}[\da-f]{2}$|^(?:[\da-f]{4}\.){2}[\da-f]{4}$/iu;
        var MAC64_REGEX = exports.MAC64_REGEX = /^(?:[\da-f]{2}:){7}[\da-f]{2}$|^(?:[\da-f]{2}-){7}[\da-f]{2}$|^(?:[\da-f]{4}\.){3}[\da-f]{4}$|^(?:[\da-f]{4}:){3}[\da-f]{4}$/iu;
        var OCTAL_REGEX = exports.OCTAL_REGEX = /^(0o)?[0-7]+$/iu;
        var ULID_REGEX = exports.ULID_REGEX = /^[\da-hjkmnp-tv-z]{26}$/iu;
        var UUID_REGEX = exports.UUID_REGEX = /^[\da-f]{8}(?:-[\da-f]{4}){3}-[\da-f]{12}$/iu;

        // src/transformations/toCustom/toCustom.ts
        function toCustom(action) {
          return {
            type: "to_custom",
            async: false,
            _parse(input) {
              return actionOutput(action(input));
            }
          };
        }

        // src/transformations/toCustom/toCustomAsync.ts
        function toCustomAsync(action) {
          return {
            type: "to_custom",
            async: true,
            async _parse(input) {
              return actionOutput(await action(input));
            }
          };
        }

        // src/transformations/toLowerCase/toLowerCase.ts
        function toLowerCase() {
          return {
            type: "to_lower_case",
            async: false,
            _parse(input) {
              return actionOutput(input.toLocaleLowerCase());
            }
          };
        }

        // src/transformations/toMaxValue/toMaxValue.ts
        function toMaxValue(requirement) {
          return {
            type: "to_max_value",
            async: false,
            requirement,
            _parse(input) {
              return actionOutput(input > this.requirement ? this.requirement : input);
            }
          };
        }

        // src/transformations/toMinValue/toMinValue.ts
        function toMinValue(requirement) {
          return {
            type: "to_min_value",
            async: false,
            requirement,
            _parse(input) {
              return actionOutput(input < this.requirement ? this.requirement : input);
            }
          };
        }

        // src/transformations/toTrimmed/toTrimmed.ts
        function toTrimmed() {
          return {
            type: "to_trimmed",
            async: false,
            _parse(input) {
              return actionOutput(input.trim());
            }
          };
        }

        // src/transformations/toTrimmedEnd/toTrimmedEnd.ts
        function toTrimmedEnd() {
          return {
            type: "to_trimmed_end",
            async: false,
            _parse(input) {
              return actionOutput(input.trimEnd());
            }
          };
        }

        // src/transformations/toTrimmedStart/toTrimmedStart.ts
        function toTrimmedStart() {
          return {
            type: "to_trimmed_start",
            async: false,
            _parse(input) {
              return actionOutput(input.trimStart());
            }
          };
        }

        // src/transformations/toUpperCase/toUpperCase.ts
        function toUpperCase() {
          return {
            type: "to_upper_case",
            async: false,
            _parse(input) {
              return actionOutput(input.toUpperCase());
            }
          };
        }

        // src/validations/bic/bic.ts
        function bic(message = "Invalid BIC") {
          return {
            type: "bic",
            async: false,
            message,
            requirement: BIC_REGEX,
            _parse(input) {
              return !this.requirement.test(input.toUpperCase()) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/bytes/bytes.ts
        function bytes(requirement, message = "Invalid byte length") {
          return {
            type: "bytes",
            async: false,
            message,
            requirement,
            _parse(input) {
              return new TextEncoder().encode(input).length !== this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/creditCard/creditCard.ts
        var SANITIZE_REGEX = /[- ]+/gu;
        var PROVIDER_REGEX_LIST = [
        // American Express
        /^3[47]\d{13}$/u,
        // Diners Club
        /^3(?:0[0-5]|[68]\d)\d{11}$/u,
        // Discover
        /^6(?:011|5\d{2})\d{12,15}$/u,
        // JCB
        /^(?:2131|1800|35\d{3})\d{11}$/u,
        // Mastercard
        /^5[1-5]\d{2}|(222\d|22[3-9]\d|2[3-6]\d{2}|27[01]\d|2720)\d{12}$/u,
        // UnionPay
        /^(6[27]\d{14}|81\d{14,17})$/u,
        // Visa
        /^4\d{12}(?:\d{3,6})?$/u];
        function creditCard(message = "Invalid credit card") {
          return {
            type: "credit_card",
            async: false,
            message,
            requirement: input => {
              const sanitized = input.replace(SANITIZE_REGEX, "");
              return PROVIDER_REGEX_LIST.some(regex2 => regex2.test(sanitized)) && isLuhnAlgo(sanitized);
            },
            _parse(input) {
              return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/cuid2/cuid2.ts
        function cuid2(message = "Invalid Cuid2") {
          return {
            type: "cuid2",
            async: false,
            message,
            requirement: CUID2_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/custom/custom.ts
        function custom(requirement, message = "Invalid input") {
          return {
            type: "custom",
            async: false,
            message,
            requirement,
            _parse(input) {
              return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/custom/customAsync.ts
        function customAsync(requirement, message = "Invalid input") {
          return {
            type: "custom",
            async: true,
            message,
            requirement,
            async _parse(input) {
              return !(await this.requirement(input)) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/decimal/decimal.ts
        function decimal(message = "Invalid decimal") {
          return {
            type: "decimal",
            async: false,
            message,
            requirement: DECIMAL_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/email/email.ts
        function email(message = "Invalid email") {
          return {
            type: "email",
            async: false,
            message,
            requirement: EMAIL_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/emoji/emoji.ts
        function emoji(message = "Invalid emoji") {
          return {
            type: "emoji",
            async: false,
            message,
            requirement: EMOJI_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/endsWith/endsWith.ts
        function endsWith(requirement, message = "Invalid end") {
          return {
            type: "ends_with",
            async: false,
            message,
            requirement,
            _parse(input) {
              return !input.endsWith(this.requirement) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/equal/equal.ts
        function equal(requirement, message = "Invalid input") {
          return {
            type: "equal",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input !== this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/excludes/excludes.ts
        function excludes(requirement, message = "Invalid content") {
          return {
            type: "excludes",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input.includes(this.requirement) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/finite/finite.ts
        function finite(message = "Invalid finite number") {
          return {
            type: "finite",
            async: false,
            message,
            requirement: Number.isFinite,
            _parse(input) {
              return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/hexadecimal/hexadecimal.ts
        function hexadecimal(message = "Invalid hexadecimal") {
          return {
            type: "hexadecimal",
            async: false,
            message,
            requirement: HEXADECIMAL_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/hexColor/hexColor.ts
        function hexColor(message = "Invalid hex color") {
          return {
            type: "hex_color",
            async: false,
            message,
            requirement: HEX_COLOR_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/imei/imei.ts
        function imei(message = "Invalid IMEI") {
          return {
            type: "imei",
            async: false,
            message,
            requirement: [IMEI_REGEX, isLuhnAlgo],
            _parse(input) {
              return !this.requirement[0].test(input) || !this.requirement[1](input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/includes/includes.ts
        function includes(requirement, message = "Invalid content") {
          return {
            type: "includes",
            async: false,
            message,
            requirement,
            _parse(input) {
              return !input.includes(requirement) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/integer/integer.ts
        function integer(message = "Invalid integer") {
          return {
            type: "integer",
            async: false,
            message,
            requirement: Number.isInteger,
            _parse(input) {
              return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/ip/ip.ts
        function ip(message = "Invalid IP") {
          return {
            type: "ip",
            async: false,
            message,
            requirement: [IPV4_REGEX, IPV6_REGEX],
            _parse(input) {
              return !this.requirement[0].test(input) && !this.requirement[1].test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/ipv4/ipv4.ts
        function ipv4(message = "Invalid IPv4") {
          return {
            type: "ipv4",
            async: false,
            message,
            requirement: IPV4_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/ipv6/ipv6.ts
        function ipv6(message = "Invalid IPv6") {
          return {
            type: "ipv6",
            async: false,
            message,
            requirement: IPV6_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/isoDate/isoDate.ts
        function isoDate(message = "Invalid date") {
          return {
            type: "iso_date",
            async: false,
            message,
            requirement: ISO_DATE_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/isoDateTime/isoDateTime.ts
        function isoDateTime(message = "Invalid date-time") {
          return {
            type: "iso_date_time",
            async: false,
            message,
            requirement: ISO_DATE_TIME_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/isoTime/isoTime.ts
        function isoTime(message = "Invalid time") {
          return {
            type: "iso_time",
            async: false,
            message,
            requirement: ISO_TIME_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/isoTimeSecond/isoTimeSecond.ts
        function isoTimeSecond(message = "Invalid time second") {
          return {
            type: "iso_time_second",
            async: false,
            message,
            requirement: ISO_TIME_SECOND_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/isoTimestamp/isoTimestamp.ts
        function isoTimestamp(message = "Invalid timestamp") {
          return {
            type: "iso_timestamp",
            async: false,
            message,
            requirement: ISO_TIMESTAMP_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/isoWeek/isoWeek.ts
        function isoWeek(message = "Invalid week") {
          return {
            type: "iso_week",
            async: false,
            message,
            requirement: ISO_WEEK_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/length/length.ts
        function length(requirement, message = "Invalid length") {
          return {
            type: "length",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input.length !== this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/mac/mac.ts
        function mac(message = "Invalid MAC") {
          return {
            type: "mac",
            async: false,
            message,
            requirement: [MAC48_REGEX, MAC64_REGEX],
            _parse(input) {
              return !this.requirement[0].test(input) && !this.requirement[1].test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/mac48/mac48.ts
        function mac48(message = "Invalid 48 bit MAC") {
          return {
            type: "mac48",
            async: false,
            message,
            requirement: MAC48_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/mac64/mac64.ts
        function mac64(message = "Invalid 64 bit MAC") {
          return {
            type: "mac64",
            async: false,
            message,
            requirement: MAC64_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/maxBytes/maxBytes.ts
        function maxBytes(requirement, message = "Invalid byte length") {
          return {
            type: "max_bytes",
            async: false,
            message,
            requirement,
            _parse(input) {
              return new TextEncoder().encode(input).length > this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/maxLength/maxLength.ts
        function maxLength(requirement, message = "Invalid length") {
          return {
            type: "max_length",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input.length > this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/maxSize/maxSize.ts
        function maxSize(requirement, message = "Invalid size") {
          return {
            type: "max_size",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input.size > this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/maxValue/maxValue.ts
        function maxValue(requirement, message = "Invalid value") {
          return {
            type: "max_value",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input > this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }
        var maxRange = exports.maxRange = maxValue;

        // src/validations/minBytes/minBytes.ts
        function minBytes(requirement, message = "Invalid byte length") {
          return {
            type: "min_bytes",
            async: false,
            message,
            requirement,
            _parse(input) {
              return new TextEncoder().encode(input).length < this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/mimeType/mimeType.ts
        function mimeType(requirement, message = "Invalid MIME type") {
          return {
            type: "mime_type",
            async: false,
            message,
            requirement,
            _parse(input) {
              return !this.requirement.includes(input.type) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/minLength/minLength.ts
        function minLength(requirement, message = "Invalid length") {
          return {
            type: "min_length",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input.length < this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/minSize/minSize.ts
        function minSize(requirement, message = "Invalid size") {
          return {
            type: "min_size",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input.size < this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/minValue/minValue.ts
        function minValue(requirement, message = "Invalid value") {
          return {
            type: "min_value",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input < this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }
        var minRange = exports.minRange = minValue;

        // src/validations/multipleOf/multipleOf.ts
        function multipleOf(requirement, message = "Invalid multiple") {
          return {
            type: "multiple_of",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input % this.requirement !== 0 ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/notBytes/notBytes.ts
        function notBytes(requirement, message = "Invalid byte length") {
          return {
            type: "not_bytes",
            async: false,
            message,
            requirement,
            _parse(input) {
              return new TextEncoder().encode(input).length === this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/notLength/notLength.ts
        function notLength(requirement, message = "Invalid length") {
          return {
            type: "not_length",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input.length === this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/notSize/notSize.ts
        function notSize(requirement, message = "Invalid size") {
          return {
            type: "not_size",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input.size === this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/notValue/notValue.ts
        function notValue(requirement, message = "Invalid value") {
          return {
            type: "not_value",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input === this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/octal/octal.ts
        function octal(message = "Invalid octal") {
          return {
            type: "octal",
            async: false,
            message,
            requirement: OCTAL_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/regex/regex.ts
        function regex(requirement, message = "Invalid regex") {
          return {
            type: "regex",
            async: false,
            message,
            requirement,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/safeInteger/safeInteger.ts
        function safeInteger(message = "Invalid safe integer") {
          return {
            type: "safe_integer",
            async: false,
            message,
            requirement: Number.isSafeInteger,
            _parse(input) {
              return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/size/size.ts
        function size(requirement, message = "Invalid size") {
          return {
            type: "size",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input.size !== this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/startsWith/startsWith.ts
        function startsWith(requirement, message = "Invalid start") {
          return {
            type: "stars_with",
            async: false,
            message,
            requirement,
            _parse(input) {
              return !input.startsWith(this.requirement) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/ulid/ulid.ts
        function ulid(message = "Invalid ULID") {
          return {
            type: "ulid",
            async: false,
            message,
            requirement: ULID_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/url/url.ts
        function url(message = "Invalid URL") {
          return {
            type: "url",
            async: false,
            message,
            requirement(input) {
              try {
                new URL(input);
                return true;
              } catch {
                return false;
              }
            },
            _parse(input) {
              return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/uuid/uuid.ts
        function uuid(message = "Invalid UUID") {
          return {
            type: "uuid",
            async: false,
            message,
            requirement: UUID_REGEX,
            _parse(input) {
              return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }

        // src/validations/value/value.ts
        function value(requirement, message = "Invalid value") {
          return {
            type: "value",
            async: false,
            message,
            requirement,
            _parse(input) {
              return input !== this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);
            }
          };
        }
      }, {}],
      287: [function (require, module, exports) {
        var obelisk = require('@0xobelisk/sui-client');
        window.obelisk = obelisk;
      }, {
        "@0xobelisk/sui-client": 7
      }]
    }, {}, [287]);
  }).call(root);
})( // The environment-specific global.
function () {
  if (typeof globalThis !== 'undefined') return globalThis;
  if (typeof self !== 'undefined') return self;
  if (typeof window !== 'undefined') return window;
  if (typeof global !== 'undefined') return global;
  if (typeof this !== 'undefined') return this;
  return {};
}.call(this));